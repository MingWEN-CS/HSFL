24d23
< import org.apache.commons.math3.util.ArithmeticUtils;
104,105c103
<             ret = innerCumulativeProbability(domain[0], x, 1, populationSize,
<                                              numberOfSuccesses, sampleSize);
---
>             ret = innerCumulativeProbability(domain[0], x, 1);
206,221d203
< 
< 
< 
<     private double probability(int n, int m, int k, int x) {
<         return FastMath.exp(ArithmeticUtils.binomialCoefficientLog(m, x) +
<                ArithmeticUtils.binomialCoefficientLog(n - m, k - x) -
<                ArithmeticUtils.binomialCoefficientLog(n, k));
<     }
< 
<     
< 
< 
< 
< 
< 
< 
226c208
<         if (x < domain[0]) {
---
>         if (x <= domain[0]) {
231,232c213
<             ret = innerCumulativeProbability(domain[1], x, -1, populationSize,
<                                              numberOfSuccesses, sampleSize);
---
>             ret = innerCumulativeProbability(domain[1], x, -1);
251,256c232,233
< 
< 
< 
<     private double innerCumulativeProbability(int x0, int x1, int dx,
<                                               int n, int m, int k) {
<         double ret = probability(n, m, k, x0);
---
>     private double innerCumulativeProbability(int x0, int x1, int dx) {
>         double ret = probability(x0);
259c236
<             ret += probability(n, m, k, x0);
---
>             ret += probability(x0);
