20,21d19
< import org.apache.commons.math3.analysis.MultivariateVectorFunction;
< import org.apache.commons.math3.exception.DimensionMismatchException;
23c21,23
< import org.apache.commons.math3.linear.RealMatrix;
---
> import org.apache.commons.math3.exception.DimensionMismatchException;
> import org.apache.commons.math3.analysis.MultivariateVectorFunction;
> import org.apache.commons.math3.optim.OptimizationData;
26d25
< import org.apache.commons.math3.optim.OptimizationData;
28c27
< import org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizer;
---
> import org.apache.commons.math3.linear.RealMatrix;
41,43d39
< 
< 
<     @Deprecated
46,47d41
<     private double[] weight;
<     
90,100d83
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
117,118d99
< 
<     @Deprecated
122,131d102
< 
<     
< 
< 
< 
< 
< 
<     public double[] getNonCorrelatedWeight() {
<         return weight.clone();
<     }
174,178d144
<             if (data instanceof NonCorrelatedWeight) {
<                 weight = ((NonCorrelatedWeight) data).getWeight();
<                 continue;
<             }
<             
181,185d146
<                 weight = new double[weightMatrix.getColumnDimension()];
<                 for (int i = 0; i < weight.length; ++i) {
<                     
<                     weight[i] = weightMatrix.getEntry(i, i);
<                 }
198,199c159,161
<         if (target.length != weight.length) {
<             throw new DimensionMismatchException(target.length, weight.length);
---
>         if (target.length != weightMatrix.getColumnDimension()) {
>             throw new DimensionMismatchException(target.length,
>                                                  weightMatrix.getColumnDimension());
