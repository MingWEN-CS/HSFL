344a345,346
>     
>     private static final double F_1_4 = 1d / 4d;
2451c2453
<             return (negate ^ leftPlane) ? (-Math.PI/2.0) : (Math.PI/2.0);
---
>             return (negate ^ leftPlane) ? (-Math.PI * F_1_2) : (Math.PI * F_1_2);
2586c2588
<         if (x !=x || y != y) {
---
>         if (x != x || y != y) {
2590,2593c2592,2595
<         if (y == 0.0) {
<             double result = x*y;
<             double invx = 1.0/x;
<             double invy = 1.0/y;
---
>         if (y == 0) {
>             final double result = x * y;
>             final double invx = 1d / x;
>             final double invy = 1d / y;
2595c2597
<             if (invx == 0.0) { 
---
>             if (invx == 0) { 
2603,2604c2605,2606
<             if (x < 0.0 || invx < 0.0) {
<                 if (y < 0.0 || invy < 0.0) {
---
>             if (x < 0 || invx < 0) {
>                 if (y < 0 || invy < 0) {
2618c2620
<                 return Math.PI/4.0;
---
>                 return Math.PI * F_1_4;
2625c2627
<             return Math.PI/2.0;
---
>             return Math.PI * F_1_2;
2630c2632
<                 return -Math.PI/4.0;
---
>                 return -Math.PI * F_1_4;
2637c2639
<             return -Math.PI/2.0;
---
>             return -Math.PI * F_1_2;
2641,2642c2643,2644
<             if (y > 0.0 || 1/y > 0.0) {
<                 return 0.0;
---
>             if (y > 0 || 1 / y > 0) {
>                 return 0d;
2645,2646c2647,2648
<             if (y < 0.0 || 1/y < 0.0) {
<                 return -0.0;
---
>             if (y < 0 || 1 / y < 0) {
>                 return -0d;
2652c2654
<             if (y > 0.0 || 1/y > 0.0) {
---
>             if (y > 0.0 || 1 / y > 0.0) {
2656c2658
<             if (y < 0.0 || 1/y < 0.0) {
---
>             if (y < 0 || 1 / y < 0) {
2664,2665c2666,2667
<             if (y > 0.0 || 1/y > 0.0) {
<                 return Math.PI/2.0;
---
>             if (y > 0 || 1 / y > 0) {
>                 return Math.PI * F_1_2;
2668,2669c2670,2671
<             if (y < 0.0 || 1/y < 0.0) {
<                 return -Math.PI/2.0;
---
>             if (y < 0 || 1 / y < 0) {
>                 return -Math.PI * F_1_2;
2674c2676
<         final double r = y/x;
---
>         final double r = y / x;
2688c2690
<         double temp = ra + rb;
---
>         final double temp = ra + rb;
2693c2695
<             ra = copySign(0.0, y);
---
>             ra = copySign(0d, y);
2697c2699
<         double result = atan(ra, rb, x < 0);
---
>         final double result = atan(ra, rb, x < 0);
