
















package org.apache.commons.math.optimization.direct;

import java.util.Comparator;

import org.apache.commons.math.optimization.ObjectiveException;
import org.apache.commons.math.optimization.OptimizationException;
import org.apache.commons.math.optimization.ScalarPointValuePair;








public class MultiDirectional extends DirectSearchOptimizer {

    
    private static final long serialVersionUID = -5347711305645019145L;

    
    private final double khi;

    
    private final double gamma;

    


    public MultiDirectional() {
        this.khi   = 2.0;
        this.gamma = 0.5;
    }

    



    public MultiDirectional(final double khi, final double gamma) {
        this.khi   = khi;
        this.gamma = gamma;
    }

    
    protected void iterateSimplex(final Comparator<ScalarPointValuePair> comparator)
        throws ObjectiveException, OptimizationException, IllegalArgumentException {

        while (true) {

            incrementIterationsCounter();

            
            final ScalarPointValuePair[] original = simplex;
            final ScalarPointValuePair best = original[0];

            
            final ScalarPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
            if (comparator.compare(reflected, best) < 0) {

                
                final ScalarPointValuePair[] reflectedSimplex = simplex;
                final ScalarPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
                if (comparator.compare(reflected, expanded) <= 0) {
                    
                    simplex = reflectedSimplex;
                }

                return;

            }

            
            final ScalarPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
            if (comparator.compare(contracted, best) < 0) {
                
                return;
            }

        }

    }

    







    private ScalarPointValuePair evaluateNewSimplex(final ScalarPointValuePair[] original,
                                              final double coeff,
                                              final Comparator<ScalarPointValuePair> comparator)
        throws ObjectiveException {

        final double[] xSmallest = original[0].getPointRef();
        final int n = xSmallest.length;

        
        simplex = new ScalarPointValuePair[n + 1];
        simplex[0] = original[0];
        for (int i = 1; i <= n; ++i) {
            final double[] xOriginal    = original[i].getPointRef();
            final double[] xTransformed = new double[n];
            for (int j = 0; j < n; ++j) {
                xTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]);
            }
            simplex[i] = new ScalarPointValuePair(xTransformed, Double.NaN, false);
        }

        
        evaluateSimplex(comparator);
        return simplex[0];

    }

}
