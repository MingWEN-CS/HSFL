22c22
< import java.util.Collection;
---
> import java.util.List;
873c873,883
<     public double getPhi() {
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public double getArgument() {
890c900,905
<     public Collection<Complex> nthRoot(int n) throws IllegalArgumentException {
---
> 
> 
> 
> 
> 
>     public List<Complex> nthRoot(int n) throws IllegalArgumentException {
896,897c911,922
< 
<         Collection<Complex> result = new ArrayList<Complex>();
---
>         
>         List<Complex> result = new ArrayList<Complex>();
>         
>         if (isNaN()) {
>             result.add(Complex.NaN);
>             return result;
>         }
>         
>         if (isInfinite()) {
>             result.add(Complex.INF);
>             return result;
>         }
903c928,930
<         final double phi = getPhi();
---
>         final double nthPhi = getArgument()/n;
>         final double slice = 2 * Math.PI / n;
>         double innerPart = nthPhi;
906d932
<             final double innerPart     = (phi + k * 2 * Math.PI) / n;
909a936
>             innerPart += slice;
913d939
< 
