62c62
< public class MathUtils {
---
> public final class MathUtils {
66a67,70
>     private MathUtils() {
>     }
> 
>     
72,74c76,78
<     public static double sign( double x ) {
<         if ( x >= 0.0 ) {
<             return 1.0 ;
---
>     public static double sign(final double x) {
>         if (x >= 0.0) {
>             return 1.0;
76c80
<             return -1.0 ;
---
>             return -1.0;
86,90c90,92
< 
< 
<     public static float sign( float x ) {
<         if ( x >= 0.0F ) {
<             return 1.0F ;
---
>     public static float sign(final float x) {
>         if (x >= 0.0F) {
>             return 1.0F;
92c94
<             return -1.0F ;
---
>             return -1.0F;
102,106c104,106
< 
< 
<     public static byte sign( byte x ) {
<         if ( x >= (byte)0 ) {
<             return (byte)1 ;
---
>     public static byte sign(final byte x) {
>         if (x >= (byte) 0) {
>             return (byte) 1;
108c108
<             return (byte)(-1) ;
---
>             return (byte) (-1);
119,122c119,121
< 
<     public static short sign( short x ) {
<         if ( x >= (short)0 ) {
<             return (short)1 ;
---
>     public static short sign(final short x) {
>         if (x >= (short) 0) {
>             return (short) 1;
124c123
<             return (short)(-1) ;
---
>             return (short) (-1);
135,138c134,136
< 
<     public static int sign( int x ) {
<         if ( x >= 0 ) {
<             return 1 ;
---
>     public static int sign(final int x) {
>         if (x >= 0) {
>             return 1;
140c138
<             return -1 ;
---
>             return -1;
143,144d140
<  
<     
145a142
>     
152,154c149,151
<     public static long sign( long x ) {
<         if ( x >= 0L ) {
<             return 1L ;
---
>     public static long sign(final long x) {
>         if (x >= 0L) {
>             return 1L;
156c153
<             return -1L ;
---
>             return -1L;
159c156
<    
---
>     
185c182
<     public static long binomialCoefficient(int n, int k) {     
---
>     public static long binomialCoefficient(final int n, final int k) {
187,188c184,185
<             throw new IllegalArgumentException
<                 ("must have n >= k for binomial coefficient (n,k)");
---
>             throw new IllegalArgumentException(
>                 "must have n >= k for binomial coefficient (n,k)");
190,192c187,189
<         if (n <= 0)  {
<             throw new IllegalArgumentException
<                 ("must have n > 0 for binomial coefficient (n,k)");
---
>         if (n <= 0) {
>             throw new IllegalArgumentException(
>                 "must have n > 0 for binomial coefficient (n,k)");
203,204c200,201
<             throw new ArithmeticException
<                 ("result too large to represent in a long integer");
---
>             throw new ArithmeticException(
>                 "result too large to represent in a long integer");
229,230c226,227
<     public static double binomialCoefficientDouble(int n, int k) {
<         return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + .5);
---
>     public static double binomialCoefficientDouble(final int n, final int k) {
>         return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);
249c246
<     public static double binomialCoefficientLog(int n, int k) {
---
>     public static double binomialCoefficientLog(final int n, final int k) {
251,252c248,249
<             throw new IllegalArgumentException
<                 ("must have n >= k for binomial coefficient (n,k)");
---
>             throw new IllegalArgumentException(
>                 "must have n >= k for binomial coefficient (n,k)");
254,256c251,253
<         if (n <= 0)  {
<             throw new IllegalArgumentException
<                 ("must have n > 0 for binomial coefficient (n,k)");
---
>         if (n <= 0) {
>             throw new IllegalArgumentException(
>                 "must have n > 0 for binomial coefficient (n,k)");
298c295
<     public static long factorial(int n) {
---
>     public static long factorial(final int n) {
301,302c298,299
<             throw new ArithmeticException
<                 ("result too large to represent in a long integer");
---
>             throw new ArithmeticException(
>                 "result too large to represent in a long integer");
326,329c323,325
<     public static double factorialDouble(int n) {
<         if (n <= 0)  {
<             throw new IllegalArgumentException
<                 ("must have n > 0 for n!");
---
>     public static double factorialDouble(final int n) {
>         if (n <= 0) {
>             throw new IllegalArgumentException("must have n > 0 for n!");
334c330
<    
---
>     
349,352c345,347
<     public static double factorialLog(int n) {
<         if (n <= 0)  {
<             throw new IllegalArgumentException
<                 ("must have n > 0 for n!");
---
>     public static double factorialLog(final int n) {
>         if (n <= 0) {
>             throw new IllegalArgumentException("must have n > 0 for n!");
