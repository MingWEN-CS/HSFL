
















package org.apache.commons.math.linear;

import java.io.Serializable;
import org.apache.commons.math.util.MathUtils;






























public class RealMatrixImpl implements RealMatrix, Serializable {
    
    
    private static final long serialVersionUID = -4828886979278117018L;

    
    protected double data[][] = null;

    


    protected double lu[][] = null;

    
    protected int[] permutation = null;

    
    protected int parity = 1;

    
    private static final double TOO_SMALL = 10E-12;

    


    public RealMatrixImpl() {
    }

    







    public RealMatrixImpl(int rowDimension, int columnDimension) {
        if (rowDimension <= 0 || columnDimension <= 0) {
            throw new IllegalArgumentException(
                    "row and column dimensions must be postive");
        }
        data = new double[rowDimension][columnDimension];
        lu = null;
    }

    












    public RealMatrixImpl(double[][] d) {
        copyIn(d);
        lu = null;
    }

    














    public RealMatrixImpl(double[][] d, boolean copyArray) {
        if (copyArray) {
            copyIn(d);
        } else {
            if (d == null) {
                throw new NullPointerException();
            }   
            final int nRows = d.length;
            if (nRows == 0) {
                throw new IllegalArgumentException("Matrix must have at least one row."); 
            }
            final int nCols = d[0].length;
            if (nCols == 0) {
                throw new IllegalArgumentException("Matrix must have at least one column."); 
            }
            for (int r = 1; r < nRows; r++) {
                if (d[r].length != nCols) {
                    throw new IllegalArgumentException("All input rows must have the same length.");
                }
            }       
            data = d;
        }
        lu = null;
    }

    







    public RealMatrixImpl(double[] v) {
        final int nRows = v.length;
        data = new double[nRows][1];
        for (int row = 0; row < nRows; row++) {
            data[row][0] = v[row];
        }
    }

    




    public RealMatrix copy() {
        return new RealMatrixImpl(copyOut(), false);
    }

    






    public RealMatrix add(RealMatrix m) throws IllegalArgumentException {
        try {
            return add((RealMatrixImpl) m);
        } catch (ClassCastException cce) {
            final int rowCount    = getRowDimension();
            final int columnCount = getColumnDimension();
            if (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension()) {
                throw new IllegalArgumentException("matrix dimension mismatch");
            }
            final double[][] outData = new double[rowCount][columnCount];
            for (int row = 0; row < rowCount; row++) {
                final double[] dataRow    = data[row];
                final double[] outDataRow = outData[row];
                for (int col = 0; col < columnCount; col++) {
                    outDataRow[col] = dataRow[col] + m.getEntry(row, col);
                }  
            }
            return new RealMatrixImpl(outData, false);
        }
    }

    






    public RealMatrixImpl add(RealMatrixImpl m) throws IllegalArgumentException {
        final int rowCount    = getRowDimension();
        final int columnCount = getColumnDimension();
        if (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension()) {
            throw new IllegalArgumentException("matrix dimension mismatch");
        }
        final double[][] outData = new double[rowCount][columnCount];
        for (int row = 0; row < rowCount; row++) {
            final double[] dataRow    = data[row];
            final double[] mRow       = m.data[row];
            final double[] outDataRow = outData[row];
            for (int col = 0; col < columnCount; col++) {
                outDataRow[col] = dataRow[col] + mRow[col];
            }  
        }
        return new RealMatrixImpl(outData, false);
    }

    






    public RealMatrix subtract(RealMatrix m) throws IllegalArgumentException {
        try {
            return subtract((RealMatrixImpl) m);
        } catch (ClassCastException cce) {
            final int rowCount    = getRowDimension();
            final int columnCount = getColumnDimension();
            if (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension()) {
                throw new IllegalArgumentException("matrix dimension mismatch");
            }
            final double[][] outData = new double[rowCount][columnCount];
            for (int row = 0; row < rowCount; row++) {
                final double[] dataRow    = data[row];
                final double[] outDataRow = outData[row];
                for (int col = 0; col < columnCount; col++) {
                    outDataRow[col] = dataRow[col] - m.getEntry(row, col);
                }  
            }
            return new RealMatrixImpl(outData, false);
        }
    }

    






    public RealMatrixImpl subtract(RealMatrixImpl m) throws IllegalArgumentException {
        final int rowCount    = getRowDimension();
        final int columnCount = getColumnDimension();
        if (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension()) {
            throw new IllegalArgumentException("matrix dimension mismatch");
        }
        final double[][] outData = new double[rowCount][columnCount];
        for (int row = 0; row < rowCount; row++) {
            final double[] dataRow    = data[row];
            final double[] mRow       = m.data[row];
            final double[] outDataRow = outData[row];
            for (int col = 0; col < columnCount; col++) {
                outDataRow[col] = dataRow[col] - mRow[col];
            }  
        }
        return new RealMatrixImpl(outData, false);
    }

    





    public RealMatrix scalarAdd(double d) {
        final int rowCount    = getRowDimension();
        final int columnCount = getColumnDimension();
        final double[][] outData = new double[rowCount][columnCount];
        for (int row = 0; row < rowCount; row++) {
            final double[] dataRow    = data[row];
            final double[] outDataRow = outData[row];
            for (int col = 0; col < columnCount; col++) {
                outDataRow[col] = dataRow[col] + d;
            }
        }
        return new RealMatrixImpl(outData, false);
    }

    




    public RealMatrix scalarMultiply(double d) {
        final int rowCount    = getRowDimension();
        final int columnCount = getColumnDimension();
        final double[][] outData = new double[rowCount][columnCount];
        for (int row = 0; row < rowCount; row++) {
            final double[] dataRow    = data[row];
            final double[] outDataRow = outData[row];
            for (int col = 0; col < columnCount; col++) {
                outDataRow[col] = dataRow[col] * d;
            }
        }
        return new RealMatrixImpl(outData, false);
    }

    






    public RealMatrix multiply(RealMatrix m) throws IllegalArgumentException {
        try {
            return multiply((RealMatrixImpl) m);
        } catch (ClassCastException cce) {
            if (this.getColumnDimension() != m.getRowDimension()) {
                throw new IllegalArgumentException("Matrices are not multiplication compatible.");
            }
            final int nRows = this.getRowDimension();
            final int nCols = m.getColumnDimension();
            final int nSum = this.getColumnDimension();
            final double[][] outData = new double[nRows][nCols];
            for (int row = 0; row < nRows; row++) {
                final double[] dataRow    = data[row];
                final double[] outDataRow = outData[row];
                for (int col = 0; col < nCols; col++) {
                    double sum = 0;
                    for (int i = 0; i < nSum; i++) {
                        sum += dataRow[i] * m.getEntry(i, col);
                    }
                    outDataRow[col] = sum;
                }
            }
            return new RealMatrixImpl(outData, false);
        }
    }

    






    public RealMatrixImpl multiply(RealMatrixImpl m) throws IllegalArgumentException {
        if (this.getColumnDimension() != m.getRowDimension()) {
            throw new IllegalArgumentException("Matrices are not multiplication compatible.");
        }
        final int nRows = this.getRowDimension();
        final int nCols = m.getColumnDimension();
        final int nSum = this.getColumnDimension();
        final double[][] outData = new double[nRows][nCols];
        for (int row = 0; row < nRows; row++) {
            final double[] dataRow    = data[row];
            final double[] outDataRow = outData[row];
            for (int col = 0; col < nCols; col++) {
                double sum = 0;
                for (int i = 0; i < nSum; i++) {
                    sum += dataRow[i] * m.data[i][col];
                }
                outDataRow[col] = sum;
            }
        }            
        return new RealMatrixImpl(outData, false);
    }

    






    public RealMatrix preMultiply(RealMatrix m) throws IllegalArgumentException {
        return m.multiply(this);
    }

    






    public double[][] getData() {
        return copyOut();
    }

    






    public double[][] getDataRef() {
        return data;
    }

    



    public double getNorm() {
        double maxColSum = 0;
        for (int col = 0; col < this.getColumnDimension(); col++) {
            double sum = 0;
            for (int row = 0; row < this.getRowDimension(); row++) {
                sum += Math.abs(data[row][col]);
            }
            maxColSum = Math.max(maxColSum, sum);
        }
        return maxColSum;
    }
    
    











    public RealMatrix getSubMatrix(int startRow, int endRow,
                                   int startColumn, int endColumn)
        throws MatrixIndexException {
        if (startRow < 0 || startRow > endRow || endRow > data.length ||
             startColumn < 0 || startColumn > endColumn ||
             endColumn > data[0].length) {
            throw new MatrixIndexException(
                    "invalid row or column index selection");
        }
        final double[][] subMatrixData =
            new double[endRow - startRow + 1][endColumn - startColumn + 1];
        for (int i = startRow; i <= endRow; i++) {
            System.arraycopy(data[i], startColumn,
                             subMatrixData[i - startRow], 0,
                             endColumn - startColumn + 1);
        }
        return new RealMatrixImpl(subMatrixData, false);
    }
    
    










    public RealMatrix getSubMatrix(int[] selectedRows, int[] selectedColumns)
        throws MatrixIndexException {
        if (selectedRows.length * selectedColumns.length == 0) {
            throw new MatrixIndexException(
                    "selected row and column index arrays must be non-empty");
        }
        final double[][] subMatrixData =
            new double[selectedRows.length][selectedColumns.length];
        try  {
            for (int i = 0; i < selectedRows.length; i++) {
                final double[] subI = subMatrixData[i];
                final double[] dataSelectedI = data[selectedRows[i]];
                for (int j = 0; j < selectedColumns.length; j++) {
                    subI[j] = dataSelectedI[selectedColumns[j]];
                }
            }
        } catch (ArrayIndexOutOfBoundsException e) {
            throw new MatrixIndexException("matrix dimension mismatch");
        }
        return new RealMatrixImpl(subMatrixData, false);
    } 

    


























    public void setSubMatrix(double[][] subMatrix, int row, int column) 
        throws MatrixIndexException {
        if ((row < 0) || (column < 0)){
            throw new MatrixIndexException
                ("invalid row or column index selection");          
        }
        final int nRows = subMatrix.length;
        if (nRows == 0) {
            throw new IllegalArgumentException(
            "Matrix must have at least one row."); 
        }
        final int nCols = subMatrix[0].length;
        if (nCols == 0) {
            throw new IllegalArgumentException(
            "Matrix must have at least one column."); 
        }
        for (int r = 1; r < nRows; r++) {
            if (subMatrix[r].length != nCols) {
                throw new IllegalArgumentException(
                "All input rows must have the same length.");
            }
        }       
        if (data == null) {
            if ((row > 0)||(column > 0)) throw new MatrixIndexException
                ("matrix must be initialized to perfom this method");
            data = new double[nRows][nCols];
            System.arraycopy(subMatrix, 0, data, 0, subMatrix.length);          
        }   
        if (((nRows + row) > this.getRowDimension()) ||
            (nCols + column > this.getColumnDimension()))
            throw new MatrixIndexException(
                    "invalid row or column index selection");                   
        for (int i = 0; i < nRows; i++) {
            System.arraycopy(subMatrix[i], 0, data[row + i], column, nCols);
        } 
        lu = null;
    }
    
    







    public RealMatrix getRowMatrix(int row) throws MatrixIndexException {
        if ( !isValidCoordinate( row, 0)) {
            throw new MatrixIndexException("illegal row argument");
        }
        final int ncols = this.getColumnDimension();
        final double[][] out = new double[1][ncols]; 
        System.arraycopy(data[row], 0, out[0], 0, ncols);
        return new RealMatrixImpl(out, false);
    }
    
    







    public RealMatrix getColumnMatrix(int column) throws MatrixIndexException {
        if ( !isValidCoordinate( 0, column)) {
            throw new MatrixIndexException("illegal column argument");
        }
        final int nRows = this.getRowDimension();
        final double[][] out = new double[nRows][1]; 
        for (int row = 0; row < nRows; row++) {
            out[row][0] = data[row][column];
        }
        return new RealMatrixImpl(out, false);
    }

     









    public double[] getRow(int row) throws MatrixIndexException {
        if ( !isValidCoordinate( row, 0 ) ) {
            throw new MatrixIndexException("illegal row argument");
        }
        final int ncols = this.getColumnDimension();
        final double[] out = new double[ncols];
        System.arraycopy(data[row], 0, out, 0, ncols);
        return out;
    }

    









    public double[] getColumn(int col) throws MatrixIndexException {
        if ( !isValidCoordinate(0, col) ) {
            throw new MatrixIndexException("illegal column argument");
        }
        final int nRows = this.getRowDimension();
        final double[] out = new double[nRows];
        for (int row = 0; row < nRows; row++) {
            out[row] = data[row][col];
        }
        return out;
    }

    














    public double getEntry(int row, int column)
        throws MatrixIndexException {
        try {
            return data[row][column];
        } catch (ArrayIndexOutOfBoundsException e) {
            throw new MatrixIndexException("matrix entry does not exist");
        }
    }

    




    public RealMatrix transpose() {
        final int nRows = getRowDimension();
        final int nCols = getColumnDimension();
        final double[][] outData = new double[nCols][nRows];
        for (int row = 0; row < nRows; row++) {
            final double[] dataRow = data[row];
            for (int col = 0; col < nCols; col++) {
                outData[col][row] = dataRow[col];
            }
        }
        return new RealMatrixImpl(outData, false);
    }

    





    public RealMatrix inverse() throws InvalidMatrixException {
        return solve(MatrixUtils.createRealIdentityMatrix(getRowDimension()));
    }

    



    public double getDeterminant() throws InvalidMatrixException {
        if (!isSquare()) {
            throw new InvalidMatrixException("matrix is not square");
        }
        if (isSingular()) {   
            return 0d;
        } else {
            double det = parity;
            for (int i = 0; i < this.getRowDimension(); i++) {
                det *= lu[i][i];
            }
            return det;
        }
    }

    


    public boolean isSquare() {
        return (this.getColumnDimension() == this.getRowDimension());
    }

    


    public boolean isSingular() {
        if (lu == null) {
            try {
                luDecompose();
                return false;
            } catch (InvalidMatrixException ex) {
                return true;
            }
        } else { 
            return false; 
        }
    }

    


    public int getRowDimension() {
        return data.length;
    }

    


    public int getColumnDimension() {
        return data[0].length;
    }

    



    public double getTrace() throws IllegalArgumentException {
        if (!isSquare()) {
            throw new IllegalArgumentException("matrix is not square");
        }
        double trace = data[0][0];
        for (int i = 1; i < this.getRowDimension(); i++) {
            trace += data[i][i];
        }
        return trace;
    }

    




    public double[] operate(double[] v) throws IllegalArgumentException {
        final int nRows = this.getRowDimension();
        final int nCols = this.getColumnDimension();
        if (v.length != nCols) {
            throw new IllegalArgumentException("vector has wrong length");
        }
        final double[] out = new double[v.length];
        for (int row = 0; row < nRows; row++) {
            final double[] dataRow = data[row];
            double sum = 0;
            for (int i = 0; i < nCols; i++) {
                sum += dataRow[i] * v[i];
            }
            out[row] = sum;
        }
        return out;
    }

    




    public double[] preMultiply(double[] v) throws IllegalArgumentException {
        final int nRows = this.getRowDimension();
        if (v.length != nRows) {
            throw new IllegalArgumentException("vector has wrong length");
        }
        final int nCols = this.getColumnDimension();
        final double[] out = new double[nCols];
        for (int col = 0; col < nCols; col++) {
            double sum = 0;
            for (int i = 0; i < nRows; i++) {
                sum += data[i][col] * v[i];
            }
            out[col] = sum;
        }
        return out;
    }

    










    public double[] solve(double[] b) throws IllegalArgumentException, InvalidMatrixException {
        final int nRows = this.getRowDimension();
        if (b.length != nRows) {
            throw new IllegalArgumentException("constant vector has wrong length");
        }
        final RealMatrix bMatrix = new RealMatrixImpl(b);
        final double[][] solution = ((RealMatrixImpl) (solve(bMatrix))).getDataRef();
        final double[] out = new double[nRows];
        for (int row = 0; row < nRows; row++) {
            out[row] = solution[row][0];
        }
        return out;
    }

    










    public RealMatrix solve(RealMatrix b) throws IllegalArgumentException, InvalidMatrixException  {
        if (b.getRowDimension() != this.getRowDimension()) {
            throw new IllegalArgumentException("Incorrect row dimension");
        }
        if (!this.isSquare()) {
            throw new InvalidMatrixException("coefficient matrix is not square");
        }
        if (this.isSingular()) { 
            throw new InvalidMatrixException("Matrix is singular.");
        }

        final int nCol  = this.getColumnDimension();
        final int nColB = b.getColumnDimension();
        final int nRowB = b.getRowDimension();

        
        final double[][] bp = new double[nRowB][nColB];
        for (int row = 0; row < nRowB; row++) {
            final double[] bpRow = bp[row];
            for (int col = 0; col < nColB; col++) {
                bpRow[col] = b.getEntry(permutation[row], col);
            }
        }

        
        for (int col = 0; col < nCol; col++) {
            for (int i = col + 1; i < nCol; i++) {
                final double[] bpI = bp[i];
                final double[] luI = lu[i];
                for (int j = 0; j < nColB; j++) {
                    bpI[j] -= bp[col][j] * luI[col];
                }
            }
        }

        
        for (int col = nCol - 1; col >= 0; col--) {
            final double[] bpCol = bp[col];
            final double luDiag = lu[col][col];
            for (int j = 0; j < nColB; j++) {
                bpCol[j] /= luDiag;
            }
            for (int i = 0; i < col; i++) {
                final double[] bpI = bp[i];
                final double[] luI = lu[i];
                for (int j = 0; j < nColB; j++) {
                    bpI[j] -= bp[col][j] * luI[col];
                }
            }
        }

        return new RealMatrixImpl(bp, false);

    }

    

















    public void luDecompose() throws InvalidMatrixException {

        final int nRows = this.getRowDimension();
        final int nCols = this.getColumnDimension();
        if (nRows != nCols) {
            throw new InvalidMatrixException("LU decomposition requires that the matrix be square.");
        }
        lu = getData();

        
        permutation = new int[nRows];
        for (int row = 0; row < nRows; row++) {
            permutation[row] = row;
        }
        parity = 1;

        
        for (int col = 0; col < nCols; col++) {

            double sum = 0;

            
            for (int row = 0; row < col; row++) {
                final double[] luRow = lu[row];
                sum = luRow[col];
                for (int i = 0; i < row; i++) {
                    sum -= luRow[i] * lu[i][col];
                }
                luRow[col] = sum;
            }

            
            int max = col; 
            double largest = 0d;
            for (int row = col; row < nRows; row++) {
                final double[] luRow = lu[row];
                sum = luRow[col];
                for (int i = 0; i < col; i++) {
                    sum -= luRow[i] * lu[i][col];
                }
                luRow[col] = sum;

                
                if (Math.abs(sum) > largest) {
                    largest = Math.abs(sum);
                    max = row;
                }
            }

            
            if (Math.abs(lu[max][col]) < TOO_SMALL) {
                lu = null;
                throw new InvalidMatrixException("matrix is singular");
            }

            
            if (max != col) {
                double tmp = 0;
                for (int i = 0; i < nCols; i++) {
                    tmp = lu[max][i];
                    lu[max][i] = lu[col][i];
                    lu[col][i] = tmp;
                }
                int temp = permutation[max];
                permutation[max] = permutation[col];
                permutation[col] = temp;
                parity = -parity;
            }

            
            final double luDiag = lu[col][col];
            for (int row = col + 1; row < nRows; row++) {
                lu[row][col] /= luDiag;
            }
        }
    }

    



    public String toString() {
        StringBuffer res = new StringBuffer();
        res.append("RealMatrixImpl{");
        if (data != null) {
            for (int i = 0; i < data.length; i++) {
                if (i > 0) {
                    res.append(",");
                }
                res.append("{");
                for (int j = 0; j < data[0].length; j++) {
                    if (j > 0) {
                        res.append(",");
                    }
                    res.append(data[i][j]);
                } 
                res.append("}");
            } 
        }
        res.append("}");
        return res.toString();
    } 
    
    








    public boolean equals(Object object) {
        if (object == this ) {
            return true;
        }
        if (object instanceof RealMatrixImpl == false) {
            return false;
        }
        RealMatrix m = (RealMatrix) object;
        final int nRows = getRowDimension();
        final int nCols = getColumnDimension();
        if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows) {
            return false;
        }
        for (int row = 0; row < nRows; row++) {
            final double[] dataRow = data[row];
            for (int col = 0; col < nCols; col++) {
                if (Double.doubleToLongBits(dataRow[col]) != 
                    Double.doubleToLongBits(m.getEntry(row, col))) {
                    return false;
                }
            }
        }
        return true;
    }
    
    




    public int hashCode() {
        int ret = 7;
        final int nRows = getRowDimension();
        final int nCols = getColumnDimension();
        ret = ret * 31 + nRows;
        ret = ret * 31 + nCols;
        for (int row = 0; row < nRows; row++) {
            final double[] dataRow = data[row];
            for (int col = 0; col < nCols; col++) {
               ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) * 
                   MathUtils.hash(dataRow[col]);
           }
        }
        return ret;
    }

    

    


























    protected RealMatrix getLUMatrix() throws InvalidMatrixException {
        if (lu == null) {
            luDecompose();
        }
        return new RealMatrixImpl(lu);
    }

    











    protected int[] getPermutation() {
        final int[] out = new int[permutation.length];
        System.arraycopy(permutation, 0, out, 0, permutation.length);
        return out;
    }

    

    




    private double[][] copyOut() {
        final int nRows = this.getRowDimension();
        final double[][] out = new double[nRows][this.getColumnDimension()];
        
        for (int i = 0; i < nRows; i++) {
            System.arraycopy(data[i], 0, out[i], 0, data[i].length);
        }
        return out;
    }

    









    private void copyIn(double[][] in) {
        setSubMatrix(in,0,0);
    }

    






    private boolean isValidCoordinate(int row, int col) {
        final int nRows = getRowDimension();
        final int nCols = getColumnDimension();
        return !(row < 0 || row > nRows - 1 || col < 0 || col > nCols -1);
    }

}
