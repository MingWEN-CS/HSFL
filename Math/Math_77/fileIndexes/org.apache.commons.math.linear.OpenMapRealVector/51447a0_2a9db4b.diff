602,629c602
<     
<     public OpenMapRealVector mapAbs() {
<         return copy().mapAbsToSelf();
<     }
< 
<     
<     public OpenMapRealVector mapAbsToSelf() {
<         Iterator iter = entries.iterator();
<         while (iter.hasNext()) {
<             iter.advance();
<             entries.put(iter.key(), Math.abs(iter.value()));
<         }
<         return this;
<     }
< 
<     
<     public OpenMapRealVector mapAcos() {
<         return copy().mapAcosToSelf();
<     }
< 
<     
<     public OpenMapRealVector mapAcosToSelf() {
<         for (int i = 0; i < virtualSize; i++) {
<             setEntry(i, Math.acos(getEntry(i)));
<         }
<         return this;
<     }
< 
---
>  
643,1041c616
<     
<     public OpenMapRealVector mapAsin() {
<         return copy().mapAsinToSelf();
<     }
< 
<     
<     public OpenMapRealVector mapAsinToSelf() {
<         Iterator iter = entries.iterator();
<         while (iter.hasNext()) {
<             iter.advance();
<             entries.put(iter.key(), Math.asin(iter.value()));
<         }
<         return this;
<     }
< 
<     
<     public OpenMapRealVector mapAtan() {
<         return copy().mapAtanToSelf();
<     }
< 
<     
<     public OpenMapRealVector mapAtanToSelf() {
<         Iterator iter = entries.iterator();
<         while (iter.hasNext()) {
<             iter.advance();
<             entries.put(iter.key(), Math.atan(iter.value()));
<         }
<         return this;
<     }
< 
<     
<     public OpenMapRealVector mapCbrt() {
<         return copy().mapCbrtToSelf();
<     }
< 
<     
<     public OpenMapRealVector mapCbrtToSelf() {
<         Iterator iter = entries.iterator();
<         while (iter.hasNext()) {
<             iter.advance();
<             entries.put(iter.key(), Math.cbrt(iter.value()));
<         }
<         return this;
<     }
< 
<     
<     public OpenMapRealVector mapCeil() {
<         return copy().mapCeilToSelf();
<     }
< 
<     
<     public OpenMapRealVector mapCeilToSelf() {
<         Iterator iter = entries.iterator();
<         while (iter.hasNext()) {
<             iter.advance();
<             entries.put(iter.key(), Math.ceil(iter.value()));
<         }
<         return this;
<     }
< 
<     
<     public OpenMapRealVector mapCos() {
<         return copy().mapCosToSelf();
<     }
< 
<     
<     public OpenMapRealVector mapCosToSelf() {
<         for (int i = 0; i < virtualSize; i++) {
<             setEntry(i, Math.cos(getEntry(i)));
<         }
<         return this;
<     }
< 
<     
<     public OpenMapRealVector mapCosh() {
<         return copy().mapCoshToSelf();
<     }
< 
<     
<     public OpenMapRealVector mapCoshToSelf() {
<         for (int i = 0; i < virtualSize; i++) {
<             setEntry(i, Math.cosh(getEntry(i)));
<         }
<         return this;
<     }
< 
<     
<     public OpenMapRealVector mapDivide(double d) {
<         return copy().mapDivideToSelf(d);
<     }
< 
<     
<     public OpenMapRealVector mapDivideToSelf(double d) {
<         Iterator iter = entries.iterator();
<         while (iter.hasNext()) {
<             iter.advance();
<             entries.put(iter.key(), iter.value() / d);
<         }
<         return this;
<     }
< 
<     
<     public OpenMapRealVector mapExp() {
<         return copy().mapExpToSelf();
<     }
< 
<     
<     public OpenMapRealVector mapExpToSelf() {
<         for (int i = 0; i < virtualSize; i++) {
<             entries.put(i, Math.exp(entries.get(i)));
<         }
<         return this;
<     }
< 
<     
<     public OpenMapRealVector mapExpm1() {
<         return copy().mapExpm1ToSelf();
<     }
< 
<     
<     public OpenMapRealVector mapExpm1ToSelf() {
<         Iterator iter = entries.iterator();
<         while (iter.hasNext()) {
<             iter.advance();
<             entries.put(iter.key(), Math.expm1(iter.value()));
<         }
<         return this;
<     }
< 
<     
<     public OpenMapRealVector mapFloor() {
<         return copy().mapFloorToSelf();
<     }
< 
<     
<     public OpenMapRealVector mapFloorToSelf() {
<         Iterator iter = entries.iterator();
<         while (iter.hasNext()) {
<             iter.advance();
<             entries.put(iter.key(), Math.floor(iter.value()));
<         }
<         return this;
<     }
< 
<     
<     public OpenMapRealVector mapInv() {
<         return copy().mapInvToSelf();
<     }
< 
<     
<     public OpenMapRealVector mapInvToSelf() {
<         for (int i = 0; i < virtualSize; i++) {
<             setEntry(i, 1.0/getEntry(i));
<         }
<         return this;
<     }
< 
<     
<     public OpenMapRealVector mapLog() {
<         return copy().mapLogToSelf();
<     }
< 
<     
<     public OpenMapRealVector mapLog10() {
<         return copy().mapLog10ToSelf();
<     }
< 
<     
<     public OpenMapRealVector mapLog10ToSelf() {
<         for (int i = 0; i < virtualSize; i++) {
<             setEntry(i, Math.log10(getEntry(i)));
<         }
<         return this;
<     }
< 
<     
<     public OpenMapRealVector mapLog1p() {
<         return copy().mapLog1pToSelf();
<     }
< 
<     
<     public OpenMapRealVector mapLog1pToSelf() {
<         Iterator iter = entries.iterator();
<         while (iter.hasNext()) {
<             iter.advance();
<             entries.put(iter.key(), Math.log1p(iter.value()));
<         }
<         return this;
<     }
< 
<     
<     public OpenMapRealVector mapLogToSelf() {
<         for (int i = 0; i < virtualSize; i++) {
<             setEntry(i, Math.log(getEntry(i)));
<         }
<        return this;
<     }
< 
<     
<     public OpenMapRealVector mapMultiply(double d) {
<         return copy().mapMultiplyToSelf(d);
<     }
< 
<     
<     public OpenMapRealVector mapMultiplyToSelf(double d) {
<         Iterator iter = entries.iterator();
<         while (iter.hasNext()) {
<             iter.advance();
<             entries.put(iter.key(), iter.value() * d);
<         }
<         return this;
<     }
<     
<     public OpenMapRealVector mapPow(double d) {
<         return copy().mapPowToSelf(d);
<     }
< 
<     
<     public OpenMapRealVector mapPowToSelf(double d) {
<         Iterator iter = entries.iterator();
<         while (iter.hasNext()) {
<             iter.advance();
<             entries.put(iter.key(), Math.pow(iter.value(), d));
<         }
<         return this;
<     }
< 
<     
<     public OpenMapRealVector mapRint() {
<         return copy().mapRintToSelf();
<     }
< 
<     
<     public OpenMapRealVector mapRintToSelf() {
<         Iterator iter = entries.iterator();
<         while (iter.hasNext()) {
<             iter.advance();
<             entries.put(iter.key(), Math.rint(iter.value()));
<         }
<         return this;
<     }
< 
<     
<     public OpenMapRealVector mapSignum() {
<         return copy().mapSignumToSelf();
<     }
< 
<     
<     public OpenMapRealVector mapSignumToSelf() {
<         Iterator iter = entries.iterator();
<         while (iter.hasNext()) {
<             iter.advance();
<             entries.put(iter.key(), Math.signum(iter.value()));
<         }
<         return this;
<     }
< 
<     
<     public OpenMapRealVector mapSin() {
<         return copy().mapSinToSelf();
<     }
< 
<     
<     public OpenMapRealVector mapSinToSelf() {
<         Iterator iter = entries.iterator();
<         while (iter.hasNext()) {
<             iter.advance();
<             entries.put(iter.key(), Math.sin(iter.value()));
<         }
<         return this;
<     }
< 
<     
<     public OpenMapRealVector mapSinh() {
<         return copy().mapSinhToSelf();
<     }
< 
<     
<     public OpenMapRealVector mapSinhToSelf() {
< 
<         Iterator iter = entries.iterator();
<         while (iter.hasNext()) {
<             iter.advance();
<             entries.put(iter.key(), Math.sinh(iter.value()));
<         }
<         return this;
<     }
< 
<     
<     public OpenMapRealVector mapSqrt() {
<         return copy().mapSqrtToSelf();
<     }
< 
<     
<     public OpenMapRealVector mapSqrtToSelf() {
<         Iterator iter = entries.iterator();
<         while (iter.hasNext()) {
<             iter.advance();
<             entries.put(iter.key(), Math.sqrt(iter.value()));
<         }
<         return this;
<     }
< 
<     
<     public OpenMapRealVector mapSubtract(double d) {
<         return copy().mapSubtractToSelf(d);
<     }
< 
<     
<     public OpenMapRealVector mapSubtractToSelf(double d) {
<         return mapAddToSelf(-d);
<     }
< 
<     
<     public OpenMapRealVector mapTan() {
<         return copy().mapTanToSelf();
<     }
< 
<     
<     public OpenMapRealVector mapTanToSelf() {
<         Iterator iter = entries.iterator();
<         while (iter.hasNext()) {
<             iter.advance();
<             entries.put(iter.key(), Math.tan(iter.value()));
<         }
<         return this;
<     }
< 
<     
<     public OpenMapRealVector mapTanh() {
<         return copy().mapTanhToSelf();
<     }
< 
<     
<     public OpenMapRealVector mapTanhToSelf() {
<         Iterator iter = entries.iterator();
<         while (iter.hasNext()) {
<             iter.advance();
<             entries.put(iter.key(), Math.tanh(iter.value()));
<         }
<         return this;
<     }
< 
<     
<     public OpenMapRealVector mapUlp() {
<         return copy().mapUlpToSelf();
<     }
< 
<     
<     public OpenMapRealVector mapUlpToSelf() {
<         Iterator iter = entries.iterator();
<         while (iter.hasNext()) {
<             iter.advance();
<             entries.put(iter.key(), Math.ulp(iter.value()));
<         }
<         return this;
<     }
< 
<     
< 
< 
< 
< 
< 
<     public OpenMapRealMatrix outerproduct(OpenMapRealVector v) throws IllegalArgumentException{
<         checkVectorDimensions(v.getDimension());
<         OpenMapRealMatrix res = new OpenMapRealMatrix(virtualSize, virtualSize);
<         Iterator iter = entries.iterator();
<         while (iter.hasNext()) {
<             iter.advance();
<             Iterator iter2 = v.getEntries().iterator();
<             while (iter2.hasNext()) {
<                 iter2.advance();
<                 res.setEntry(iter.key(), iter2.key(), iter.value()*iter2.value());
<             }
<         }
<         return res;
<     }
< 
<     
<     public RealMatrix outerProduct(RealVector v)
<             throws IllegalArgumentException {
<         checkVectorDimensions(v.getDimension());
<         if (v instanceof OpenMapRealVector) {
<             return outerproduct((OpenMapRealVector)v);
<         }
<         RealMatrix res = new OpenMapRealMatrix(virtualSize, virtualSize);
<         Iterator iter = entries.iterator();
<         while (iter.hasNext()) {
<             iter.advance();
<             int row = iter.key();
<             for (int col = 0; col < virtualSize; col++) {
<                 res.setEntry(row, col, iter.value()*v.getEntry(col));
<             }
<         }
<         return res;
<     }
< 
<     
---
>      
