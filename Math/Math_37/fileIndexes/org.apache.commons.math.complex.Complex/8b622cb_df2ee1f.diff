20a21,24
> import java.util.ArrayList;
> import java.util.Collection;
> 
> import org.apache.commons.math.MathRuntimeException;
860a865,913
>     }
>     
>     
>     
>     
> 
> 
> 
>     public double getPhi() {
>         return Math.atan2(getImaginary(), getReal());
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public Collection<Complex> nthRoot(int n) throws IllegalArgumentException {
> 
>         if (n <= 0) {
>             throw MathRuntimeException.createIllegalArgumentException("cannot compute nth root for null or negative n: {0}",
>                     new Object[] { n });
>         }
> 
>         Collection<Complex> result = new ArrayList<Complex>();
> 
>         
>         final double nthRootOfAbs = Math.pow(abs(), 1.0 / n);
> 
>         
>         final double phi = getPhi();
>         for (int k = 0; k < n ; k++) {
>             
>             final double innerPart     = (phi + k * 2 * Math.PI) / n;
>             final double realPart      = nthRootOfAbs *  Math.cos(innerPart);
>             final double imaginaryPart = nthRootOfAbs *  Math.sin(innerPart);
>             result.add(createComplex(realPart, imaginaryPart));
>         }
> 
>         return result;
> 
