















package org.apache.commons.math.distribution;

import java.io.Serializable;

import org.apache.commons.math.ConvergenceException;
import org.apache.commons.math.MathException;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.solvers.BrentSolver;
import org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils;
import org.apache.commons.math.exception.MathUserException;
import org.apache.commons.math.exception.NotStrictlyPositiveException;
import org.apache.commons.math.exception.OutOfRangeException;
import org.apache.commons.math.exception.util.LocalizedFormats;
import org.apache.commons.math.random.RandomDataImpl;
import org.apache.commons.math.util.FastMath;








public abstract class AbstractContinuousDistribution
    extends AbstractDistribution
    implements ContinuousDistribution, Serializable {
    
    private static final long serialVersionUID = -38038050983108802L;
    



    protected final RandomDataImpl randomData = new RandomDataImpl();
    



    private double solverAbsoluteAccuracy = BrentSolver.DEFAULT_ABSOLUTE_ACCURACY;
    


    protected AbstractContinuousDistribution() {}

    


    public abstract double density(double x);

    









    public double inverseCumulativeProbability(final double p)
        throws MathException {
        if (p < 0.0 || p > 1.0) {
            throw new OutOfRangeException(p, 0, 1);
        }

        
        
        UnivariateRealFunction rootFindingFunction =
            new UnivariateRealFunction() {
            public double value(double x) throws MathUserException {
                double ret = Double.NaN;
                try {
                    ret = cumulativeProbability(x) - p;
                } catch (MathException ex) {
                    throw new MathUserException(ex,
                                                ex.getSpecificPattern(), ex.getGeneralPattern(),
                                                ex.getArguments());
                }
                if (Double.isNaN(ret)) {
                    throw new MathUserException(LocalizedFormats.CUMULATIVE_PROBABILITY_RETURNED_NAN, x, p);
                }
                return ret;
            }
        };

        
        double lowerBound = getDomainLowerBound(p);
        double upperBound = getDomainUpperBound(p);
        double[] bracket = null;
        try {
            bracket = UnivariateRealSolverUtils.bracket(
                    rootFindingFunction, getInitialDomain(p),
                    lowerBound, upperBound);
        } catch (ConvergenceException ex) {
            




            if (FastMath.abs(rootFindingFunction.value(lowerBound)) < getSolverAbsoluteAccuracy()) {
                return lowerBound;
            }
            if (FastMath.abs(rootFindingFunction.value(upperBound)) < getSolverAbsoluteAccuracy()) {
                return upperBound;
            }
            
            throw new MathException(ex);
        }

        
        double root = UnivariateRealSolverUtils.solve(rootFindingFunction,
                
                
                bracket[0],bracket[1], getSolverAbsoluteAccuracy());
        return root;
    }

    





    public void reseedRandomGenerator(long seed) {
        randomData.reSeed(seed);
    }

    










    public double sample() throws MathException {
        return randomData.nextInversionDeviate(this);
    }

    









    public double[] sample(int sampleSize) throws MathException {
        if (sampleSize <= 0) {
            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
                                                   sampleSize);
        }
        double[] out = new double[sampleSize];
        for (int i = 0; i < sampleSize; i++) {
            out[i] = sample();
        }
        return out;
    }

    







    protected abstract double getInitialDomain(double p);

    







    protected abstract double getDomainLowerBound(double p);

    







    protected abstract double getDomainUpperBound(double p);

    





    protected double getSolverAbsoluteAccuracy() {
        return solverAbsoluteAccuracy;
    }

}
