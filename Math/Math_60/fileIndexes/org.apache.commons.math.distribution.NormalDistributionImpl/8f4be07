
















package org.apache.commons.math.distribution;

import java.io.Serializable;

import org.apache.commons.math.MathException;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.MaxIterationsExceededException;
import org.apache.commons.math.special.Erf;







public class NormalDistributionImpl extends AbstractContinuousDistribution
        implements NormalDistribution, Serializable {

    
    public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9;

    
    private static final long serialVersionUID = 8589540077390120676L;

    
    private static final double SQRT2PI = Math.sqrt(2 * Math.PI);

    
    private double mean = 0;

    
    private double standardDeviation = 1;

    
    private final double solverAbsoluteAccuracy;

    




    public NormalDistributionImpl(double mean, double sd){
        this(mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
    }

    







    public NormalDistributionImpl(double mean, double sd, double inverseCumAccuracy) {
        super();
        setMeanInternal(mean);
        setStandardDeviationInternal(sd);
        solverAbsoluteAccuracy = inverseCumAccuracy;
    }

    



    public NormalDistributionImpl(){
        this(0.0, 1.0);
    }

    



    public double getMean() {
        return mean;
    }

    




    @Deprecated
    public void setMean(double mean) {
        setMeanInternal(mean);
    }
    



    private void setMeanInternal(double mean) {
        this.mean = mean;
    }

    



    public double getStandardDeviation() {
        return standardDeviation;
    }

    





    @Deprecated
    public void setStandardDeviation(double sd) {
        setStandardDeviationInternal(sd);
    }
    




    private void setStandardDeviationInternal(double sd) {
        if (sd <= 0.0) {
            throw MathRuntimeException.createIllegalArgumentException(
                  "standard deviation must be positive ({0})",
                  sd);
        }
        standardDeviation = sd;
    }

    





    public double density(Double x) {
        double x0 = x - mean;
        return Math.exp(-x0 * x0 / (2 * standardDeviation * standardDeviation)) / (standardDeviation * SQRT2PI);
    }

    







    public double cumulativeProbability(double x) throws MathException {
        try {
            return 0.5 * (1.0 + Erf.erf((x - mean) /
                    (standardDeviation * Math.sqrt(2.0))));
        } catch (MaxIterationsExceededException ex) {
            if (x < (mean - 20 * standardDeviation)) { 
                return 0.0d;
            } else if (x > (mean + 20 * standardDeviation)) {
                return 1.0d;
            } else {
                throw ex;
            }
        }
    }

    





    @Override
    protected double getSolverAbsoluteAccuracy() {
        return solverAbsoluteAccuracy;
    }

    













    @Override
    public double inverseCumulativeProbability(final double p)
    throws MathException {
        if (p == 0) {
            return Double.NEGATIVE_INFINITY;
        }
        if (p == 1) {
            return Double.POSITIVE_INFINITY;
        }
        return super.inverseCumulativeProbability(p);
    }

    








    @Override
    protected double getDomainLowerBound(double p) {
        double ret;

        if (p < .5) {
            ret = -Double.MAX_VALUE;
        } else {
            ret = mean;
        }

        return ret;
    }

    








    @Override
    protected double getDomainUpperBound(double p) {
        double ret;

        if (p < .5) {
            ret = mean;
        } else {
            ret = Double.MAX_VALUE;
        }

        return ret;
    }

    







    @Override
    protected double getInitialDomain(double p) {
        double ret;

        if (p < .5) {
            ret = mean - standardDeviation;
        } else if (p > .5) {
            ret = mean + standardDeviation;
        } else {
            ret = mean;
        }

        return ret;
    }
}
