
















package org.apache.commons.math.ode.sampling;

import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import org.apache.commons.math.ode.DerivativeException;















public class DummyStepInterpolator
  extends AbstractStepInterpolator {

  
  private static final long serialVersionUID = 1708010296707839488L;

  
  private double[] currentDerivative;

  









  public DummyStepInterpolator() {
    super();
    currentDerivative = null;
  }

  






  public DummyStepInterpolator(final double[] y, final double[] yDot, final boolean forward) {
    super(y, forward);
    currentDerivative = yDot;
  }

  




  public DummyStepInterpolator(final DummyStepInterpolator interpolator) {
    super(interpolator);
    currentDerivative = interpolator.currentDerivative.clone();
  }

  


  @Override
  protected StepInterpolator doCopy() {
    return new DummyStepInterpolator(this);
  }

  









  @Override
  protected void computeInterpolatedStateAndDerivatives(final double theta, final double oneMinusThetaH)
    throws DerivativeException {
      System.arraycopy(currentState,      0, interpolatedState,       0, currentState.length);
      System.arraycopy(currentDerivative, 0, interpolatedDerivatives, 0, currentDerivative.length);
  }

  



  @Override
  public void writeExternal(final ObjectOutput out)
    throws IOException {

      
    writeBaseExternal(out);

    if (currentDerivative != null) {
        for (int i = 0; i < currentDerivative.length; ++i) {
            out.writeDouble(currentDerivative[i]);
        }
    }

  }

  



  @Override
  public void readExternal(final ObjectInput in)
    throws IOException {

    
    final double t = readBaseExternal(in);

    if (currentState == null) {
        currentDerivative = null;
    } else {
        currentDerivative  = new double[currentState.length];
        for (int i = 0; i < currentDerivative.length; ++i) {
            currentDerivative[i] = in.readDouble();
        }
    }

    
    setInterpolatedTime(t);

  }

}
