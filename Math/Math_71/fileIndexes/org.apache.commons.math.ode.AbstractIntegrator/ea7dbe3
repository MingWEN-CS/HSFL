
















package org.apache.commons.math.ode;

import java.util.Collection;

import org.apache.commons.math.ode.events.CombinedEventsManager;
import org.apache.commons.math.ode.events.EventHandler;
import org.apache.commons.math.ode.sampling.DummyStepHandler;
import org.apache.commons.math.ode.sampling.StepHandler;






public abstract class AbstractIntegrator implements FirstOrderIntegrator {

    
    private final String name;

    
    protected StepHandler handler;

    
    protected double stepStart;

    
    protected double stepSize;

    
    protected CombinedEventsManager eventsHandlersManager;

    


    public AbstractIntegrator(final String name) {
        this.name = name;
        handler = DummyStepHandler.getInstance();
        stepStart = Double.NaN;
        stepSize  = Double.NaN;
        eventsHandlersManager = new CombinedEventsManager();
    }

    
    public String getName() {
        return name;
    }

    
    public void setStepHandler(final StepHandler handler) {
        this.handler = handler;
    }

    
    public StepHandler getStepHandler() {
        return handler;
    }

    
    public void addEventHandler(final EventHandler function,
                                final double maxCheckInterval,
                                final double convergence,
                                final int maxIterationCount) {
        eventsHandlersManager.addEventHandler(function, maxCheckInterval,
                                              convergence, maxIterationCount);
    }

    
    public Collection<EventHandler> getEventsHandlers() {
        return eventsHandlersManager.getEventsHandlers();
    }

    
    public void clearEventsHandlers() {
        eventsHandlersManager.clearEventsHandlers();
    }

    
    public double getCurrentStepStart() {
        return stepStart;
    }

    
    public double getCurrentSignedStepsize() {
        return stepSize;
    }

    







    protected void sanityChecks(final FirstOrderDifferentialEquations equations,
                                final double t0, final double[] y0,
                                final double t, final double[] y)
        throws IntegratorException {

        if (equations.getDimension() != y0.length) {
            throw new IntegratorException("dimensions mismatch: ODE problem has dimension {0}," +
                                          " initial state vector has dimension {1}",
                                          new Object[] {
                                              Integer.valueOf(equations.getDimension()),
                                              Integer.valueOf(y0.length)
                                          });
        }

        if (equations.getDimension() != y.length) {
            throw new IntegratorException("dimensions mismatch: ODE problem has dimension {0}," +
                                          " final state vector has dimension {1}",
                                          new Object[] {
                                              Integer.valueOf(equations.getDimension()),
                                              Integer.valueOf(y.length)
                                          });
        }

        if (Math.abs(t - t0) <= 1.0e-12 * Math.max(Math.abs(t0), Math.abs(t))) {
            throw new IntegratorException("too small integration interval: length = {0}",
                                          new Object[] {
                                              Double.valueOf(Math.abs(t - t0))
                                          });
        }

    }

}
