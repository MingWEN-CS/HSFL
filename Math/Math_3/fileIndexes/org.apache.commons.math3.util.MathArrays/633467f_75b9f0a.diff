27a28,29
> import org.apache.commons.math3.exception.NotPositiveException;
> import org.apache.commons.math3.exception.NotStrictlyPositiveException;
301a304,370
>     }
> 
>     
> 
> 
> 
> 
> 
> 
>     public static void checkRectangular(final long[][] in)
>         throws NullArgumentException, DimensionMismatchException {
>         MathUtils.checkNotNull(in);
>         for (int i = 1; i < in.length; i++) {
>             if (in[i].length != in[0].length) {
>                 throw new DimensionMismatchException(
>                         LocalizedFormats.DIFFERENT_ROWS_LENGTHS,
>                         in[i].length, in[0].length);
>             }
>         }
>     }
> 
>     
> 
> 
> 
> 
> 
> 
>     public static void checkPositive(final double[] in)
>         throws NotStrictlyPositiveException {
>         for (int i = 0; i < in.length; i++) {
>             if (in[i] <= 0) {
>                 throw new NotStrictlyPositiveException(in[i]);
>             }
>         }
>     }
> 
>     
> 
> 
> 
> 
> 
>     public static void checkNonNegative(final long[] in)
>         throws NotPositiveException {
>         for (int i = 0; i < in.length; i++) {
>             if (in[i] < 0) {
>                 throw new NotPositiveException(in[i]);
>             }
>         }
>     }
> 
>     
> 
> 
> 
> 
> 
>     public static void checkNonNegative(final long[][] in)
>         throws NotPositiveException {
>         for (int i = 0; i < in.length; i ++) {
>             for (int j = 0; j < in[i].length; j++) {
>                 if (in[i][j] < 0) {
>                     throw new NotPositiveException(in[i][j]);
>                 }
>             }
>         }
