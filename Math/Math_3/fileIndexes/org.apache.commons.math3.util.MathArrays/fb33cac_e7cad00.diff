212c212,217
<         return checkOrder(val, dir, strict, false);
---
>         try {
>             return checkOrder(val, dir, strict, false);
>         } catch (NonMonotonicSequenceException e) {
>             
>             throw new MathInternalError(e);
>         }
227c232,233
<                                      boolean strict, boolean abort) {
---
>                                      boolean strict, boolean abort)
>         throws NonMonotonicSequenceException {
288c294
<                                   boolean strict) {
---
>                                   boolean strict) throws NonMonotonicSequenceException {
299c305
<     public static void checkOrder(double[] val) {
---
>     public static void checkOrder(double[] val) throws NonMonotonicSequenceException {
434,435c440,441
<     public static void sortInPlace(double[] x,
<                                    double[] ... yList) {
---
>     public static void sortInPlace(double[] x, double[] ... yList)
>         throws DimensionMismatchException, NullArgumentException {
458c464,465
<                                    double[] ... yList) {
---
>                                    double[] ... yList)
>         throws NullArgumentException, DimensionMismatchException {
581c588,590
<     public static double linearCombination(final double[] a, final double[] b) {
---
> 
>     public static double linearCombination(final double[] a, final double[] b)
>         throws DimensionMismatchException {
1055c1064,1065
<      public static double[] normalizeArray(double[] values, double normalizedSum) {
---
>      public static double[] normalizeArray(double[] values, double normalizedSum)
>          throws MathIllegalArgumentException, MathArithmeticException {
