20c20
< import java.util.List;
---
> import java.lang.reflect.Array;
22c22
< import java.util.Comparator;
---
> import java.util.Arrays;
23a24,25
> import java.util.Comparator;
> import java.util.List;
25c27
< import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
---
> import org.apache.commons.math3.Field;
26a29,30
> import org.apache.commons.math3.exception.MathArithmeticException;
> import org.apache.commons.math3.exception.MathIllegalArgumentException;
32d35
< import org.apache.commons.math3.exception.MathIllegalArgumentException;
34d36
< import org.apache.commons.math3.exception.MathArithmeticException;
1131,1477d1132
< 
< 
< 
< 
< 
< 
< 
< 
<     public static DerivativeStructure linearCombination(final DerivativeStructure[] a, final DerivativeStructure[] b)
<         throws DimensionMismatchException {
< 
<         
<         final double[] aDouble = new double[a.length];
<         for (int i = 0; i < a.length; ++i) {
<             aDouble[i] = a[i].getValue();
<         }
<         final double[] bDouble = new double[b.length];
<         for (int i = 0; i < b.length; ++i) {
<             bDouble[i] = b[i].getValue();
<         }
<         final double accurateValue = MathArrays.linearCombination(aDouble, bDouble);
< 
<         
<         DerivativeStructure simpleValue = a[0].getField().getZero();
<         for (int i = 0; i < a.length; ++i) {
<             simpleValue = simpleValue.add(a[i].multiply(b[i]));
<         }
< 
<         
<         final double[] data = simpleValue.getAllDerivatives();
<         data[0] = accurateValue;
<         return new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), data);
< 
<     }
< 
<     
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<     public static DerivativeStructure linearCombination(final double[] a, final DerivativeStructure[] b)
<         throws DimensionMismatchException {
< 
<         
<         final double[] bDouble = new double[b.length];
<         for (int i = 0; i < b.length; ++i) {
<             bDouble[i] = b[i].getValue();
<         }
<         final double accurateValue = MathArrays.linearCombination(a, bDouble);
< 
<         
<         DerivativeStructure simpleValue = b[0].getField().getZero();
<         for (int i = 0; i < a.length; ++i) {
<             simpleValue = simpleValue.add(b[i].multiply(a[i]));
<         }
< 
<         
<         final double[] data = simpleValue.getAllDerivatives();
<         data[0] = accurateValue;
<         return new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), data);
< 
<     }
< 
<     
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<     public static DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1,
<                                                         final DerivativeStructure a2, final DerivativeStructure b2) {
< 
<         
<         final double accurateValue = MathArrays.linearCombination(a1.getValue(), b1.getValue(),
<                                                                   a2.getValue(), b2.getValue());
< 
<         
<         final DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2));
< 
<         
<         final double[] data = simpleValue.getAllDerivatives();
<         data[0] = accurateValue;
<         return new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), data);
< 
<     }
< 
<     
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<     public static DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1,
<                                                         final double a2, final DerivativeStructure b2) {
< 
<         
<         final double accurateValue = MathArrays.linearCombination(a1, b1.getValue(),
<                                                                   a2, b2.getValue());
< 
<         
<         final DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2));
< 
<         
<         final double[] data = simpleValue.getAllDerivatives();
<         data[0] = accurateValue;
<         return new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), data);
< 
<     }
< 
<     
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<     public static DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1,
<                                                         final DerivativeStructure a2, final DerivativeStructure b2,
<                                                         final DerivativeStructure a3, final DerivativeStructure b3) {
< 
<         
<         final double accurateValue = MathArrays.linearCombination(a1.getValue(), b1.getValue(),
<                                                                   a2.getValue(), b2.getValue(),
<                                                                   a3.getValue(), b3.getValue());
< 
<         
<         final DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3));
< 
<         
<         final double[] data = simpleValue.getAllDerivatives();
<         data[0] = accurateValue;
<         return new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), data);
< 
<     }
< 
<     
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<     public static DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1,
<                                                         final double a2, final DerivativeStructure b2,
<                                                         final double a3, final DerivativeStructure b3) {
< 
<         
<         final double accurateValue = MathArrays.linearCombination(a1, b1.getValue(),
<                                                                   a2, b2.getValue(),
<                                                                   a3, b3.getValue());
< 
<         
<         final DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3));
< 
<         
<         final double[] data = simpleValue.getAllDerivatives();
<         data[0] = accurateValue;
<         return new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), data);
< 
<     }
< 
<     
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<     public static DerivativeStructure linearCombination(final DerivativeStructure a1, final DerivativeStructure b1,
<                                                         final DerivativeStructure a2, final DerivativeStructure b2,
<                                                         final DerivativeStructure a3, final DerivativeStructure b3,
<                                                         final DerivativeStructure a4, final DerivativeStructure b4) {
< 
<         
<         final double accurateValue = MathArrays.linearCombination(a1.getValue(), b1.getValue(),
<                                                                   a2.getValue(), b2.getValue(),
<                                                                   a3.getValue(), b3.getValue(),
<                                                                   a4.getValue(), b4.getValue());
< 
<         
<         final DerivativeStructure simpleValue = a1.multiply(b1).add(a2.multiply(b2)).add(a3.multiply(b3)).add(a4.multiply(b4));
< 
<         
<         final double[] data = simpleValue.getAllDerivatives();
<         data[0] = accurateValue;
<         return new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), data);
< 
<     }
< 
<     
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<     public static DerivativeStructure linearCombination(final double a1, final DerivativeStructure b1,
<                                                         final double a2, final DerivativeStructure b2,
<                                                         final double a3, final DerivativeStructure b3,
<                                                         final double a4, final DerivativeStructure b4) {
< 
<         
<         final double accurateValue = MathArrays.linearCombination(a1, b1.getValue(),
<                                                                   a2, b2.getValue(),
<                                                                   a3, b3.getValue(),
<                                                                   a4, b4.getValue());
< 
<         
<         final DerivativeStructure simpleValue = b1.multiply(a1).add(b2.multiply(a2)).add(b3.multiply(a3)).add(b4.multiply(a4));
< 
<         
<         final double[] data = simpleValue.getAllDerivatives();
<         data[0] = accurateValue;
<         return new DerivativeStructure(simpleValue.getFreeParameters(), simpleValue.getOrder(), data);
< 
<     }
< 
<     
< 
< 
< 
< 
< 
< 
< 
< 
< 
1622a1278,1323
> 
>      
> 
> 
> 
> 
> 
> 
> 
> 
>      public static <T> T[] buildArray(final Field<T> field, final int length) {
>          @SuppressWarnings("unchecked") 
>          T[] array = (T[]) Array.newInstance(field.getRuntimeClass(), length);
>          Arrays.fill(array, field.getZero());
>          return array;
>      }
> 
>      
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>      @SuppressWarnings("unchecked")
>     public static <T> T[][] buildArray(final Field<T> field, final int rows, final int columns) {
>          final T[][] array;
>          if (columns < 0) {
>              T[] dummyRow = buildArray(field, 0);
>              array = (T[][]) Array.newInstance(dummyRow.getClass(), rows);
>          } else {
>              array = (T[][]) Array.newInstance(field.getRuntimeClass(),
>                                                new int[] {
>                                                    rows, columns
>                                                });
>              for (int i = 0; i < rows; ++i) {
>                  Arrays.fill(array[i], field.getZero());
>              }
>          }
>          return array;
>      }
> 
