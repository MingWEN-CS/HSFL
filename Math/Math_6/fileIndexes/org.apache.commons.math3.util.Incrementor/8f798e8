















package org.apache.commons.math3.util;

import org.apache.commons.math3.exception.MaxCountExceededException;
import org.apache.commons.math3.exception.NullArgumentException;












public class Incrementor {
    


    private int maximalCount;
    


    private int count = 0;
    


    private final MaxCountExceededCallback maxCountCallback;

    




    public Incrementor() {
        this(0);
    }

    




    public Incrementor(int max) {
        this(max,
             new MaxCountExceededCallback() {
                 
                 public void trigger(int max) throws MaxCountExceededException {
                     throw new MaxCountExceededException(max);
                 }
             });
    }

    







    public Incrementor(int max, MaxCountExceededCallback cb)
        throws NullArgumentException {
        if (cb == null){
            throw new NullArgumentException();
        }
        maximalCount = max;
        maxCountCallback = cb;
    }

    






    public void setMaximalCount(int max) {
        maximalCount = max;
    }

    




    public int getMaximalCount() {
        return maximalCount;
    }

    




    public int getCount() {
        return count;
    }

    






    public boolean canIncrement() {
        return count < maximalCount;
    }

    






    public void incrementCount(int value) throws MaxCountExceededException {
        for (int i = 0; i < value; i++) {
            incrementCount();
        }
    }

    












    public void incrementCount() throws MaxCountExceededException {
        if (++count > maximalCount) {
            maxCountCallback.trigger(maximalCount);
        }
    }

    


    public void resetCount() {
        count = 0;
    }

    



    public interface MaxCountExceededCallback {
        





        void trigger(int maximalCount) throws MaxCountExceededException;
    }
}
