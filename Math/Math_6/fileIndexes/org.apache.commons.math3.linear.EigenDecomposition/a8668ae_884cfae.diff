18c18
< package org.apache.commons.math.linear;
---
> package org.apache.commons.math3.linear;
20,24c20,24
< import org.apache.commons.math.exception.MaxCountExceededException;
< import org.apache.commons.math.exception.DimensionMismatchException;
< import org.apache.commons.math.exception.util.LocalizedFormats;
< import org.apache.commons.math.util.Precision;
< import org.apache.commons.math.util.FastMath;
---
> import org.apache.commons.math3.exception.MaxCountExceededException;
> import org.apache.commons.math3.exception.DimensionMismatchException;
> import org.apache.commons.math3.exception.util.LocalizedFormats;
> import org.apache.commons.math3.util.Precision;
> import org.apache.commons.math3.util.FastMath;
68d67
< 
71d69
< 
74d71
< 
77d73
< 
83d78
< 
86d80
< 
89d82
< 
92d84
< 
95d86
< 
98d88
< 
181a172
> 
204a196,197
> 
> 
221a215
> 
243a238,239
> 
> 
255a252,255
> 
> 
> 
> 
266a267,270
> 
> 
> 
> 
278a283,286
> 
> 
> 
> 
288a297
> 
296a306
> 
308a319,320
> 
> 
315d326
< 
318d328
< 
321d330
< 
332,333d340
< 
< 
352a360,361
> 
> 
417a427
> 
420c430,431
<                 if ((realEigenvalues[i] == 0) && (imagEigenvalues[i] == 0)) {
---
>                 if (realEigenvalues[i] == 0 &&
>                     imagEigenvalues[i] == 0) {
475c486
<         double[][]z = householderMatrix.clone();
---
>         final double[][]z = householderMatrix.clone();
479c490
<         double[] e = new double[n];
---
>         final double[] e = new double[n];
485c496
<         e[n - 1] = 0.0;
---
>         e[n - 1] = 0;
488c499
<         double maxAbsoluteValue=0.0;
---
>         double maxAbsoluteValue = 0;
490,491c501,502
<             if (FastMath.abs(realEigenvalues[i])>maxAbsoluteValue) {
<                 maxAbsoluteValue=FastMath.abs(realEigenvalues[i]);
---
>             if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {
>                 maxAbsoluteValue = FastMath.abs(realEigenvalues[i]);
493,494c504,505
<             if (FastMath.abs(e[i])>maxAbsoluteValue) {
<                 maxAbsoluteValue=FastMath.abs(e[i]);
---
>             if (FastMath.abs(e[i]) > maxAbsoluteValue) {
>                 maxAbsoluteValue = FastMath.abs(e[i]);
498c509
<         if (maxAbsoluteValue!=0.0) {
---
>         if (maxAbsoluteValue != 0) {
500,501c511,512
<                 if (FastMath.abs(realEigenvalues[i])<=Precision.EPSILON*maxAbsoluteValue) {
<                     realEigenvalues[i]=0.0;
---
>                 if (FastMath.abs(realEigenvalues[i]) <= Precision.EPSILON * maxAbsoluteValue) {
>                     realEigenvalues[i] = 0;
503,504c514,515
<                 if (FastMath.abs(e[i])<=Precision.EPSILON*maxAbsoluteValue) {
<                     e[i]=0.0;
---
>                 if (FastMath.abs(e[i]) <= Precision.EPSILON * maxAbsoluteValue) {
>                     e[i]=0;
514c525,526
<                     double delta = FastMath.abs(realEigenvalues[m]) + FastMath.abs(realEigenvalues[m + 1]);
---
>                     double delta = FastMath.abs(realEigenvalues[m]) +
>                         FastMath.abs(realEigenvalues[m + 1]);
600c612
<         maxAbsoluteValue=0.0;
---
>         maxAbsoluteValue = 0;
602c614
<             if (FastMath.abs(realEigenvalues[i])>maxAbsoluteValue) {
---
>             if (FastMath.abs(realEigenvalues[i]) > maxAbsoluteValue) {
609,610c621,622
<                 if (FastMath.abs(realEigenvalues[i])<Precision.EPSILON*maxAbsoluteValue) {
<                     realEigenvalues[i]=0.0;
---
>                 if (FastMath.abs(realEigenvalues[i]) < Precision.EPSILON * maxAbsoluteValue) {
>                     realEigenvalues[i] = 0;
615c627
<         double[] tmp = new double[n];
---
>         final double[] tmp = new double[n];
