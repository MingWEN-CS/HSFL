69d68
< 
72d70
< 
75d72
< 
78d74
< 
81d76
< 
84d78
< 
87d80
< 
99,101c92
<     public BlockRealMatrix(final int rows, final int columns)
<         throws IllegalArgumentException {
< 
---
>     public BlockRealMatrix(final int rows, final int columns) {
103c94
<         this.rows    = rows;
---
>         this.rows = rows;
107c98
<         blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;
---
>         blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;
112d102
< 
149,151c139
<                            final double[][] blockData, final boolean copyArray)
<         throws IllegalArgumentException {
< 
---
>                            final double[][] blockData, final boolean copyArray) {
153c141
<         this.rows    = rows;
---
>         this.rows = rows;
157c145
<         blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;
---
>         blockRows = (rows + BLOCK_SIZE - 1) / BLOCK_SIZE;
205,210c193,196
<     public static double[][] toBlocksLayout(final double[][] rawData)
<         throws IllegalArgumentException {
< 
<         final int rows         = rawData.length;
<         final int columns      = rawData[0].length;
<         final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;
---
>     public static double[][] toBlocksLayout(final double[][] rawData) {
>         final int rows = rawData.length;
>         final int columns = rawData[0].length;
>         final int blockRows = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;
225,226c211,212
<             final int pStart  = iBlock * BLOCK_SIZE;
<             final int pEnd    = FastMath.min(pStart + BLOCK_SIZE, rows);
---
>             final int pStart = iBlock * BLOCK_SIZE;
>             final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
230c216
<                 final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);
---
>                 final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);
243d228
< 
245d229
< 
265,266c249
< 
<         final int blockRows    = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;
---
>         final int blockRows = (rows    + BLOCK_SIZE - 1) / BLOCK_SIZE;
272,273c255,256
<             final int pStart  = iBlock * BLOCK_SIZE;
<             final int pEnd    = FastMath.min(pStart + BLOCK_SIZE, rows);
---
>             final int pStart = iBlock * BLOCK_SIZE;
>             final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
277c260
<                 final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);
---
>                 final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);
289,290c272
<     public BlockRealMatrix createMatrix(final int rowDimension, final int columnDimension)
<         throws IllegalArgumentException {
---
>     public BlockRealMatrix createMatrix(final int rowDimension, final int columnDimension) {
297d278
< 
311,312c292
<     public BlockRealMatrix add(final RealMatrix m)
<         throws IllegalArgumentException {
---
>     public BlockRealMatrix add(final RealMatrix m) {
316d295
< 
330,333c309,312
<                     final int      pStart   = iBlock * BLOCK_SIZE;
<                     final int      pEnd     = FastMath.min(pStart + BLOCK_SIZE, rows);
<                     final int      qStart   = jBlock * BLOCK_SIZE;
<                     final int      qEnd     = FastMath.min(qStart + BLOCK_SIZE, columns);
---
>                     final int pStart = iBlock * BLOCK_SIZE;
>                     final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
>                     final int qStart = jBlock * BLOCK_SIZE;
>                     final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);
341d319
< 
344d321
< 
359,360d335
<     public BlockRealMatrix add(final BlockRealMatrix m)
<         throws IllegalArgumentException {
361a337
>     public BlockRealMatrix add(final BlockRealMatrix m) {
370,371c346,347
<             final double[] tBlock   = blocks[blockIndex];
<             final double[] mBlock   = m.blocks[blockIndex];
---
>             final double[] tBlock = blocks[blockIndex];
>             final double[] mBlock = m.blocks[blockIndex];
382,383c358
<     public BlockRealMatrix subtract(final RealMatrix m)
<         throws IllegalArgumentException {
---
>     public BlockRealMatrix subtract(final RealMatrix m) {
387d361
< 
400,404c374,378
<                     final double[] tBlock   = blocks[blockIndex];
<                     final int      pStart   = iBlock * BLOCK_SIZE;
<                     final int      pEnd     = FastMath.min(pStart + BLOCK_SIZE, rows);
<                     final int      qStart   = jBlock * BLOCK_SIZE;
<                     final int      qEnd     = FastMath.min(qStart + BLOCK_SIZE, columns);
---
>                     final double[] tBlock = blocks[blockIndex];
>                     final int pStart = iBlock * BLOCK_SIZE;
>                     final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
>                     final int qStart = jBlock * BLOCK_SIZE;
>                     final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);
412d385
< 
415d387
< 
430,431d401
<     public BlockRealMatrix subtract(final BlockRealMatrix m)
<         throws IllegalArgumentException {
432a403
>     public BlockRealMatrix subtract(final BlockRealMatrix m) {
441,442c412,413
<             final double[] tBlock   = blocks[blockIndex];
<             final double[] mBlock   = m.blocks[blockIndex];
---
>             final double[] tBlock = blocks[blockIndex];
>             final double[] mBlock = m.blocks[blockIndex];
453,454c424
<     public BlockRealMatrix scalarAdd(final double d)
<         throws IllegalArgumentException {
---
>     public BlockRealMatrix scalarAdd(final double d) {
461c431
<             final double[] tBlock   = blocks[blockIndex];
---
>             final double[] tBlock = blocks[blockIndex];
472,474c442
<     public RealMatrix scalarMultiply(final double d)
<         throws IllegalArgumentException {
< 
---
>     public RealMatrix scalarMultiply(final double d) {
480c448
<             final double[] tBlock   = blocks[blockIndex];
---
>             final double[] tBlock = blocks[blockIndex];
491,492c459
<     public BlockRealMatrix multiply(final RealMatrix m)
<         throws IllegalArgumentException {
---
>     public BlockRealMatrix multiply(final RealMatrix m) {
496d462
< 
505d470
< 
507c472
<                 final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);
---
>                 final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
510d474
< 
512c476
<                     final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, m.getColumnDimension());
---
>                     final int qEnd = FastMath.min(qStart + BLOCK_SIZE, m.getColumnDimension());
519c483
<                         final int kWidth      = blockWidth(kBlock);
---
>                         final int kWidth = blockWidth(kBlock);
521c485
<                         final int rStart      = kBlock * BLOCK_SIZE;
---
>                         final int rStart = kBlock * BLOCK_SIZE;
525c489
<                             final int lEnd   = lStart + kWidth;
---
>                             final int lEnd = lStart + kWidth;
538d501
< 
541d503
< 
557,558c519
<     public BlockRealMatrix multiply(BlockRealMatrix m) throws IllegalArgumentException {
< 
---
>     public BlockRealMatrix multiply(BlockRealMatrix m) {
569c530
<             final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);
---
>             final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
588c549
<                         final int lEnd   = lStart + kWidth;
---
>                         final int lEnd = lStart + kWidth;
610d570
< 
613d572
< 
623d581
< 
629,631c587,589
<             final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);
<             int regularPos   = 0;
<             int lastPos      = 0;
---
>             final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
>             int regularPos = 0;
>             int lastPos = 0;
635c593
<                 int dataPos    = 0;
---
>                 int dataPos = 0;
690,692c648
<                                    final int startColumn, final int endColumn)
<         throws MatrixIndexException {
< 
---
>                                         final int startColumn, final int endColumn) {
701,702c657,658
<         final int blockStartRow    = startRow    / BLOCK_SIZE;
<         final int rowsShift        = startRow    % BLOCK_SIZE;
---
>         final int blockStartRow = startRow / BLOCK_SIZE;
>         final int rowsShift = startRow % BLOCK_SIZE;
704c660
<         final int columnsShift     = startColumn % BLOCK_SIZE;
---
>         final int columnsShift = startColumn % BLOCK_SIZE;
715c671
<                 final int      outIndex = iBlock * out.blockColumns + jBlock;
---
>                 final int outIndex = iBlock * out.blockColumns + jBlock;
717,718c673,674
<                 final int      index    = pBlock * blockColumns + qBlock;
<                 final int      width    = blockWidth(qBlock);
---
>                 final int index = pBlock * blockColumns + qBlock;
>                 final int width = blockWidth(qBlock);
721c677
<                 final int widthExcess  = jWidth + columnsShift - BLOCK_SIZE;
---
>                 final int widthExcess = jWidth + columnsShift - BLOCK_SIZE;
775d730
< 
777d731
< 
779d732
< 
781d733
< 
819,821c771
<     public void setSubMatrix(final double[][] subMatrix, final int row, final int column)
<         throws MatrixIndexException {
< 
---
>     public void setSubMatrix(final double[][] subMatrix, final int row, final int column) {
827c777
<         final int endRow    = row + subMatrix.length - 1;
---
>         final int endRow = row + subMatrix.length - 1;
837,838c787,788
<         final int blockStartRow    = row / BLOCK_SIZE;
<         final int blockEndRow      = (endRow + BLOCK_SIZE) / BLOCK_SIZE;
---
>         final int blockStartRow = row / BLOCK_SIZE;
>         final int blockEndRow = (endRow + BLOCK_SIZE) / BLOCK_SIZE;
840c790
<         final int blockEndColumn   = (endColumn + BLOCK_SIZE) / BLOCK_SIZE;
---
>         final int blockEndColumn = (endColumn + BLOCK_SIZE) / BLOCK_SIZE;
844c794
<             final int iHeight  = blockHeight(iBlock);
---
>             final int iHeight = blockHeight(iBlock);
846,847c796,797
<             final int iStart   = FastMath.max(row,    firstRow);
<             final int iEnd     = FastMath.min(endRow + 1, firstRow + iHeight);
---
>             final int iStart = FastMath.max(row,    firstRow);
>             final int iEnd = FastMath.min(endRow + 1, firstRow + iHeight);
850c800
<                 final int jWidth      = blockWidth(jBlock);
---
>                 final int jWidth = blockWidth(jBlock);
852,854c802,804
<                 final int jStart      = FastMath.max(column,    firstColumn);
<                 final int jEnd        = FastMath.min(endColumn + 1, firstColumn + jWidth);
<                 final int jLength     = jEnd - jStart;
---
>                 final int jStart = FastMath.max(column,    firstColumn);
>                 final int jEnd = FastMath.min(endColumn + 1, firstColumn + jWidth);
>                 final int jLength = jEnd - jStart;
870,872c820
<     public BlockRealMatrix getRowMatrix(final int row)
<         throws MatrixIndexException {
< 
---
>     public BlockRealMatrix getRowMatrix(final int row) {
877,878c825,826
<         final int iBlock  = row / BLOCK_SIZE;
<         final int iRow    = row - iBlock * BLOCK_SIZE;
---
>         final int iBlock = row / BLOCK_SIZE;
>         final int iRow = row - iBlock * BLOCK_SIZE;
880c828
<         int outIndex      = 0;
---
>         int outIndex = 0;
883c831
<             final int jWidth     = blockWidth(jBlock);
---
>             final int jWidth = blockWidth(jBlock);
885c833
<             final int available  = outBlock.length - outIndex;
---
>             final int available = outBlock.length - outIndex;
920a869
> 
933,936c882,885
<         final int iRow   = row - iBlock * BLOCK_SIZE;
<         int mBlockIndex  = 0;
<         int mIndex       = 0;
<         double[] mBlock  = matrix.blocks[mBlockIndex];
---
>         final int iRow = row - iBlock * BLOCK_SIZE;
>         int mBlockIndex = 0;
>         int mIndex = 0;
>         double[] mBlock = matrix.blocks[mBlockIndex];
938c887
<             final int jWidth     = blockWidth(jBlock);
---
>             final int jWidth = blockWidth(jBlock);
955,957c904
<     public BlockRealMatrix getColumnMatrix(final int column)
<         throws MatrixIndexException {
< 
---
>     public BlockRealMatrix getColumnMatrix(final int column) {
962c909
<         final int jBlock  = column / BLOCK_SIZE;
---
>         final int jBlock = column / BLOCK_SIZE;
964c911
<         final int jWidth  = blockWidth(jBlock);
---
>         final int jWidth = blockWidth(jBlock);
966c913
<         int outIndex      = 0;
---
>         int outIndex = 0;
1003a951
> 
1015c963
<         final int jBlock  = column / BLOCK_SIZE;
---
>         final int jBlock = column / BLOCK_SIZE;
1017c965
<         final int jWidth  = blockWidth(jBlock);
---
>         final int jWidth = blockWidth(jBlock);
1019c967
<         int mIndex      = 0;
---
>         int mIndex = 0;
1036,1038c984
<     public RealVector getRowVector(final int row)
<         throws MatrixIndexException {
< 
---
>     public RealVector getRowVector(final int row) {
1043,1045c989,991
<         final int iBlock  = row / BLOCK_SIZE;
<         final int iRow    = row - iBlock * BLOCK_SIZE;
<         int outIndex      = 0;
---
>         final int iBlock = row / BLOCK_SIZE;
>         final int iRow = row - iBlock * BLOCK_SIZE;
>         int outIndex = 0;
1047c993
<             final int jWidth     = blockWidth(jBlock);
---
>             final int jWidth = blockWidth(jBlock);
1068,1070c1014
<     public RealVector getColumnVector(final int column)
<         throws MatrixIndexException {
< 
---
>     public RealVector getColumnVector(final int column) {
1075c1019
<         final int jBlock  = column / BLOCK_SIZE;
---
>         final int jBlock = column / BLOCK_SIZE;
1077,1078c1021,1022
<         final int jWidth  = blockWidth(jBlock);
<         int outIndex      = 0;
---
>         final int jWidth = blockWidth(jBlock);
>         int outIndex = 0;
1102,1104c1046
<     public double[] getRow(final int row)
<         throws MatrixIndexException {
< 
---
>     public double[] getRow(final int row) {
1109,1111c1051,1053
<         final int iBlock  = row / BLOCK_SIZE;
<         final int iRow    = row - iBlock * BLOCK_SIZE;
<         int outIndex      = 0;
---
>         final int iBlock = row / BLOCK_SIZE;
>         final int iRow = row - iBlock * BLOCK_SIZE;
>         int outIndex = 0;
1132,1134c1074,1076
<         final int iBlock  = row / BLOCK_SIZE;
<         final int iRow    = row - iBlock * BLOCK_SIZE;
<         int outIndex      = 0;
---
>         final int iBlock = row / BLOCK_SIZE;
>         final int iRow = row - iBlock * BLOCK_SIZE;
>         int outIndex = 0;
1145,1147c1087
<     public double[] getColumn(final int column)
<         throws MatrixIndexException {
< 
---
>     public double[] getColumn(final int column) {
1155c1095
<         int outIndex      = 0;
---
>         int outIndex = 0;
1179,1180c1119,1120
<         final int jWidth  = blockWidth(jBlock);
<         int outIndex      = 0;
---
>         final int jWidth = blockWidth(jBlock);
>         int outIndex = 0;
1192,1204c1132,1138
<     public double getEntry(final int row, final int column)
<         throws MatrixIndexException {
<         try {
<             final int iBlock = row    / BLOCK_SIZE;
<             final int jBlock = column / BLOCK_SIZE;
<             final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
<                                (column - jBlock * BLOCK_SIZE);
<             return blocks[iBlock * blockColumns + jBlock][k];
<         } catch (ArrayIndexOutOfBoundsException e) {
<             throw new MatrixIndexException(
<                     LocalizedFormats.NO_SUCH_MATRIX_ENTRY,
<                     row, column, getRowDimension(), getColumnDimension());
<         }
---
>     public double getEntry(final int row, final int column) {
>         MatrixUtils.checkMatrixIndex(this, row, column);
>         final int iBlock = row / BLOCK_SIZE;
>         final int jBlock = column / BLOCK_SIZE;
>         final int k = (row - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
>             (column - jBlock * BLOCK_SIZE);
>         return blocks[iBlock * blockColumns + jBlock][k];
1209,1221c1143,1149
<     public void setEntry(final int row, final int column, final double value)
<         throws MatrixIndexException {
<         try {
<             final int iBlock = row    / BLOCK_SIZE;
<             final int jBlock = column / BLOCK_SIZE;
<             final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
<                                (column - jBlock * BLOCK_SIZE);
<             blocks[iBlock * blockColumns + jBlock][k] = value;
<         } catch (ArrayIndexOutOfBoundsException e) {
<             throw new MatrixIndexException(
<                     LocalizedFormats.NO_SUCH_MATRIX_ENTRY,
<                     row, column, getRowDimension(), getColumnDimension());
<         }
---
>     public void setEntry(final int row, final int column, final double value) {
>         MatrixUtils.checkMatrixIndex(this, row, column);
>         final int iBlock = row / BLOCK_SIZE;
>         final int jBlock = column / BLOCK_SIZE;
>         final int k = (row - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
>             (column - jBlock * BLOCK_SIZE);
>         blocks[iBlock * blockColumns + jBlock][k] = value;
1226,1238c1154,1160
<     public void addToEntry(final int row, final int column, final double increment)
<         throws MatrixIndexException {
<         try {
<             final int iBlock = row    / BLOCK_SIZE;
<             final int jBlock = column / BLOCK_SIZE;
<             final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
<                                (column - jBlock * BLOCK_SIZE);
<             blocks[iBlock * blockColumns + jBlock][k] += increment;
<         } catch (ArrayIndexOutOfBoundsException e) {
<             throw new MatrixIndexException(
<                     LocalizedFormats.NO_SUCH_MATRIX_ENTRY,
<                     row, column, getRowDimension(), getColumnDimension());
<         }
---
>     public void addToEntry(final int row, final int column, final double increment) {
>         MatrixUtils.checkMatrixIndex(this, row, column);
>         final int iBlock = row    / BLOCK_SIZE;
>         final int jBlock = column / BLOCK_SIZE;
>         final int k = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
>             (column - jBlock * BLOCK_SIZE);
>         blocks[iBlock * blockColumns + jBlock][k] += increment;
1243,1255c1165,1171
<     public void multiplyEntry(final int row, final int column, final double factor)
<         throws MatrixIndexException {
<         try {
<             final int iBlock = row    / BLOCK_SIZE;
<             final int jBlock = column / BLOCK_SIZE;
<             final int k      = (row    - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
<                                (column - jBlock * BLOCK_SIZE);
<             blocks[iBlock * blockColumns + jBlock][k] *= factor;
<         } catch (ArrayIndexOutOfBoundsException e) {
<             throw new MatrixIndexException(
<                     LocalizedFormats.NO_SUCH_MATRIX_ENTRY,
<                     row, column, getRowDimension(), getColumnDimension());
<         }
---
>     public void multiplyEntry(final int row, final int column, final double factor) {
>         MatrixUtils.checkMatrixIndex(this, row, column);
>         final int iBlock = row / BLOCK_SIZE;
>         final int jBlock = column / BLOCK_SIZE;
>         final int k = (row - iBlock * BLOCK_SIZE) * blockWidth(jBlock) +
>             (column - jBlock * BLOCK_SIZE);
>         blocks[iBlock * blockColumns + jBlock][k] *= factor;
1261d1176
< 
1270d1184
< 
1273,1277c1187,1191
<                 final double[] tBlock   = blocks[jBlock * blockColumns + iBlock];
<                 final int      pStart   = iBlock * BLOCK_SIZE;
<                 final int      pEnd     = FastMath.min(pStart + BLOCK_SIZE, columns);
<                 final int      qStart   = jBlock * BLOCK_SIZE;
<                 final int      qEnd     = FastMath.min(qStart + BLOCK_SIZE, rows);
---
>                 final double[] tBlock = blocks[jBlock * blockColumns + iBlock];
>                 final int pStart = iBlock * BLOCK_SIZE;
>                 final int pEnd = FastMath.min(pStart + BLOCK_SIZE, columns);
>                 final int qStart = jBlock * BLOCK_SIZE;
>                 final int qEnd = FastMath.min(qStart + BLOCK_SIZE, rows);
1288d1201
< 
1291d1203
< 
1312,1314c1224
<     public double[] operate(final double[] v)
<         throws IllegalArgumentException {
< 
---
>     public double[] operate(final double[] v) {
1323c1233
<             final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);
---
>             final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
1326,1327c1236,1237
<                 final int      qStart = jBlock * BLOCK_SIZE;
<                 final int      qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);
---
>                 final int qStart = jBlock * BLOCK_SIZE;
>                 final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);
1353,1355c1263
<     public double[] preMultiply(final double[] v)
<         throws IllegalArgumentException {
< 
---
>     public double[] preMultiply(final double[] v) {
1368c1276
<             final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);
---
>             final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);
1371,1372c1279,1280
<                 final int      pStart = iBlock * BLOCK_SIZE;
<                 final int      pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);
---
>                 final int pStart = iBlock * BLOCK_SIZE;
>                 final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
1404c1312
<             final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);
---
>             final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
1409c1317
<                     final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);
---
>                     final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);
1429c1337
<             final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);
---
>             final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
1434c1342
<                     final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);
---
>                     final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);
1452c1360
<         throws MatrixIndexException, MatrixVisitorException {
---
>         throws MatrixVisitorException {
1456c1364
<             final int p0     = iBlock * BLOCK_SIZE;
---
>             final int p0 = iBlock * BLOCK_SIZE;
1458c1366
<             final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);
---
>             final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);
1462c1370
<                     final int q0     = jBlock * BLOCK_SIZE;
---
>                     final int q0 = jBlock * BLOCK_SIZE;
1464c1372
<                     final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);
---
>                     final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);
1482c1390
<         throws MatrixIndexException, MatrixVisitorException {
---
>         throws MatrixVisitorException {
1486c1394
<             final int p0     = iBlock * BLOCK_SIZE;
---
>             final int p0 = iBlock * BLOCK_SIZE;
1488c1396
<             final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);
---
>             final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);
1492c1400
<                     final int q0     = jBlock * BLOCK_SIZE;
---
>                     final int q0 = jBlock * BLOCK_SIZE;
1494c1402
<                     final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);
---
>                     final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);
1515c1423
<             final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);
---
>             final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
1518c1426
<                 final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);
---
>                 final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);
1541c1449
<             final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);
---
>             final int pEnd = FastMath.min(pStart + BLOCK_SIZE, rows);
1544c1452
<                 final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);
---
>                 final int qEnd = FastMath.min(qStart + BLOCK_SIZE, columns);
1564c1472
<         throws MatrixIndexException, MatrixVisitorException {
---
>         throws MatrixVisitorException {
1568c1476
<             final int p0     = iBlock * BLOCK_SIZE;
---
>             final int p0 = iBlock * BLOCK_SIZE;
1570c1478
<             final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);
---
>             final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);
1573c1481
<                 final int q0     = jBlock * BLOCK_SIZE;
---
>                 final int q0 = jBlock * BLOCK_SIZE;
1575c1483
<                 final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);
---
>                 final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);
1594c1502
<         throws MatrixIndexException, MatrixVisitorException {
---
>         throws MatrixVisitorException {
1598c1506
<             final int p0     = iBlock * BLOCK_SIZE;
---
>             final int p0 = iBlock * BLOCK_SIZE;
1600c1508
<             final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);
---
>             final int pEnd = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);
1603c1511
<                 final int q0     = jBlock * BLOCK_SIZE;
---
>                 final int q0 = jBlock * BLOCK_SIZE;
1605c1513
<                 final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);
---
>                 final int qEnd = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);
