24a25
> import org.apache.commons.math.util.FastMath;
227c228
<             final int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);
---
>             final int pEnd    = FastMath.min(pStart + BLOCK_SIZE, rows);
231c232
<                 final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);
---
>                 final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);
275c276
<             final int pEnd    = Math.min(pStart + BLOCK_SIZE, rows);
---
>             final int pEnd    = FastMath.min(pStart + BLOCK_SIZE, rows);
279c280
<                 final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);
---
>                 final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);
335c336
<                     final int      pEnd     = Math.min(pStart + BLOCK_SIZE, rows);
---
>                     final int      pEnd     = FastMath.min(pStart + BLOCK_SIZE, rows);
337c338
<                     final int      qEnd     = Math.min(qStart + BLOCK_SIZE, columns);
---
>                     final int      qEnd     = FastMath.min(qStart + BLOCK_SIZE, columns);
408c409
<                     final int      pEnd     = Math.min(pStart + BLOCK_SIZE, rows);
---
>                     final int      pEnd     = FastMath.min(pStart + BLOCK_SIZE, rows);
410c411
<                     final int      qEnd     = Math.min(qStart + BLOCK_SIZE, columns);
---
>                     final int      qEnd     = FastMath.min(qStart + BLOCK_SIZE, columns);
517c518
<                 final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);
---
>                 final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);
522c523
<                     final int qEnd   = Math.min(qStart + BLOCK_SIZE, m.getColumnDimension());
---
>                     final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, m.getColumnDimension());
580c581
<             final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);
---
>             final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);
641c642
<             final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);
---
>             final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);
676c677
<                         sum += Math.abs(block[i * jWidth + j]);
---
>                         sum += FastMath.abs(block[i * jWidth + j]);
682c683
<                 maxColSum = Math.max(maxColSum, colSums[j]);
---
>                 maxColSum = FastMath.max(maxColSum, colSums[j]);
697c698
<         return Math.sqrt(sum2);
---
>         return FastMath.sqrt(sum2);
862,863c863,864
<             final int iStart   = Math.max(row,    firstRow);
<             final int iEnd     = Math.min(endRow + 1, firstRow + iHeight);
---
>             final int iStart   = FastMath.max(row,    firstRow);
>             final int iEnd     = FastMath.min(endRow + 1, firstRow + iHeight);
868,869c869,870
<                 final int jStart      = Math.max(column,    firstColumn);
<                 final int jEnd        = Math.min(endColumn + 1, firstColumn + jWidth);
---
>                 final int jStart      = FastMath.max(column,    firstColumn);
>                 final int jEnd        = FastMath.min(endColumn + 1, firstColumn + jWidth);
1319c1320
<                 final int      pEnd     = Math.min(pStart + BLOCK_SIZE, columns);
---
>                 final int      pEnd     = FastMath.min(pStart + BLOCK_SIZE, columns);
1321c1322
<                 final int      qEnd     = Math.min(qStart + BLOCK_SIZE, rows);
---
>                 final int      qEnd     = FastMath.min(qStart + BLOCK_SIZE, rows);
1370c1371
<             final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);
---
>             final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);
1374c1375
<                 final int      qEnd   = Math.min(qStart + BLOCK_SIZE, columns);
---
>                 final int      qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);
1418c1419
<             final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);
---
>             final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);
1422c1423
<                 final int      pEnd   = Math.min(pStart + BLOCK_SIZE, rows);
---
>                 final int      pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);
1455c1456
<             final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);
---
>             final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);
1460c1461
<                     final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);
---
>                     final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);
1480c1481
<             final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);
---
>             final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);
1485c1486
<                     final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);
---
>                     final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);
1508,1509c1509,1510
<             final int pStart = Math.max(startRow, p0);
<             final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);
---
>             final int pStart = FastMath.max(startRow, p0);
>             final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);
1514,1515c1515,1516
<                     final int qStart = Math.max(startColumn, q0);
<                     final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);
---
>                     final int qStart = FastMath.max(startColumn, q0);
>                     final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);
1538,1539c1539,1540
<             final int pStart = Math.max(startRow, p0);
<             final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);
---
>             final int pStart = FastMath.max(startRow, p0);
>             final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);
1544,1545c1545,1546
<                     final int qStart = Math.max(startColumn, q0);
<                     final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);
---
>                     final int qStart = FastMath.max(startColumn, q0);
>                     final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);
1566c1567
<             final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);
---
>             final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);
1569c1570
<                 final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);
---
>                 final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);
1592c1593
<             final int pEnd   = Math.min(pStart + BLOCK_SIZE, rows);
---
>             final int pEnd   = FastMath.min(pStart + BLOCK_SIZE, rows);
1595c1596
<                 final int qEnd   = Math.min(qStart + BLOCK_SIZE, columns);
---
>                 final int qEnd   = FastMath.min(qStart + BLOCK_SIZE, columns);
1620,1621c1621,1622
<             final int pStart = Math.max(startRow, p0);
<             final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);
---
>             final int pStart = FastMath.max(startRow, p0);
>             final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);
1625,1626c1626,1627
<                 final int qStart = Math.max(startColumn, q0);
<                 final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);
---
>                 final int qStart = FastMath.max(startColumn, q0);
>                 final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);
1650,1651c1651,1652
<             final int pStart = Math.max(startRow, p0);
<             final int pEnd   = Math.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);
---
>             final int pStart = FastMath.max(startRow, p0);
>             final int pEnd   = FastMath.min((iBlock + 1) * BLOCK_SIZE, 1 + endRow);
1655,1656c1656,1657
<                 final int qStart = Math.max(startColumn, q0);
<                 final int qEnd   = Math.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);
---
>                 final int qStart = FastMath.max(startColumn, q0);
>                 final int qEnd   = FastMath.min((jBlock + 1) * BLOCK_SIZE, 1 + endColumn);
