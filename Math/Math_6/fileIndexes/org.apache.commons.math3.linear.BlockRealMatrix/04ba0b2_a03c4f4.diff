24a25
> import org.apache.commons.math3.exception.NotStrictlyPositiveException;
25a27,28
> import org.apache.commons.math3.exception.NumberIsTooSmallException;
> import org.apache.commons.math3.exception.OutOfRangeException;
93c96,97
<     public BlockRealMatrix(final int rows, final int columns) {
---
>     public BlockRealMatrix(final int rows, final int columns)
>         throws NotStrictlyPositiveException {
119c123,126
<     public BlockRealMatrix(final double[][] rawData) {
---
> 
> 
>     public BlockRealMatrix(final double[][] rawData)
>         throws DimensionMismatchException, NotStrictlyPositiveException {
136a144,145
> 
> 
138c147,148
<                            final double[][] blockData, final boolean copyArray) {
---
>                            final double[][] blockData, final boolean copyArray)
>         throws DimensionMismatchException, NotStrictlyPositiveException {
191c201,202
<     public static double[][] toBlocksLayout(final double[][] rawData) {
---
>     public static double[][] toBlocksLayout(final double[][] rawData)
>         throws DimensionMismatchException {
270c281,283
<     public BlockRealMatrix createMatrix(final int rowDimension, final int columnDimension) {
---
>     public BlockRealMatrix createMatrix(final int rowDimension,
>                                         final int columnDimension)
>         throws NotStrictlyPositiveException {
290c303,304
<     public BlockRealMatrix add(final RealMatrix m) {
---
>     public BlockRealMatrix add(final RealMatrix m)
>         throws MatrixDimensionMismatchException {
335c349,350
<     public BlockRealMatrix add(final BlockRealMatrix m) {
---
>     public BlockRealMatrix add(final BlockRealMatrix m)
>         throws MatrixDimensionMismatchException {
356c371,372
<     public BlockRealMatrix subtract(final RealMatrix m) {
---
>     public BlockRealMatrix subtract(final RealMatrix m)
>         throws MatrixDimensionMismatchException {
401c417,418
<     public BlockRealMatrix subtract(final BlockRealMatrix m) {
---
>     public BlockRealMatrix subtract(final BlockRealMatrix m)
>         throws MatrixDimensionMismatchException {
457c474,475
<     public BlockRealMatrix multiply(final RealMatrix m) {
---
>     public BlockRealMatrix multiply(final RealMatrix m)
>         throws DimensionMismatchException {
516,517c534,535
< 
<     public BlockRealMatrix multiply(BlockRealMatrix m) {
---
>     public BlockRealMatrix multiply(BlockRealMatrix m)
>         throws DimensionMismatchException {
646c664,666
<                                         final int startColumn, final int endColumn) {
---
>                                         final int startColumn,
>                                         final int endColumn)
>         throws OutOfRangeException, NumberIsTooSmallException {
769,770c789,792
<     public void setSubMatrix(final double[][] subMatrix, final int row, final int column)
<         throws NoDataException, NullArgumentException {
---
>     public void setSubMatrix(final double[][] subMatrix, final int row,
>                              final int column)
>         throws OutOfRangeException, NoDataException, NullArgumentException,
>         DimensionMismatchException {
820c842,843
<     public BlockRealMatrix getRowMatrix(final int row) {
---
>     public BlockRealMatrix getRowMatrix(final int row)
>         throws OutOfRangeException {
850c873,874
<     public void setRowMatrix(final int row, final RealMatrix matrix) {
---
>     public void setRowMatrix(final int row, final RealMatrix matrix)
>         throws OutOfRangeException, MatrixDimensionMismatchException {
869,870c893,894
< 
<     public void setRowMatrix(final int row, final BlockRealMatrix matrix) {
---
>     public void setRowMatrix(final int row, final BlockRealMatrix matrix)
>         throws OutOfRangeException, MatrixDimensionMismatchException {
904c928,929
<     public BlockRealMatrix getColumnMatrix(final int column) {
---
>     public BlockRealMatrix getColumnMatrix(final int column)
>         throws OutOfRangeException {
932c957,958
<     public void setColumnMatrix(final int column, final RealMatrix matrix) {
---
>     public void setColumnMatrix(final int column, final RealMatrix matrix)
>         throws OutOfRangeException, MatrixDimensionMismatchException {
951,952c977,978
< 
<     void setColumnMatrix(final int column, final BlockRealMatrix matrix) {
---
>     void setColumnMatrix(final int column, final BlockRealMatrix matrix)
>         throws OutOfRangeException, MatrixDimensionMismatchException {
984c1010,1011
<     public RealVector getRowVector(final int row) {
---
>     public RealVector getRowVector(final int row)
>         throws OutOfRangeException {
1004c1031,1032
<     public void setRowVector(final int row, final RealVector vector) {
---
>     public void setRowVector(final int row, final RealVector vector)
>         throws OutOfRangeException, MatrixDimensionMismatchException {
1014c1042,1043
<     public RealVector getColumnVector(final int column) {
---
>     public RealVector getColumnVector(final int column)
>         throws OutOfRangeException {
1036c1065,1066
<     public void setColumnVector(final int column, final RealVector vector) {
---
>     public void setColumnVector(final int column, final RealVector vector)
>         throws OutOfRangeException, MatrixDimensionMismatchException {
1046c1076
<     public double[] getRow(final int row) {
---
>     public double[] getRow(final int row) throws OutOfRangeException {
1066c1096,1097
<     public void setRow(final int row, final double[] array) {
---
>     public void setRow(final int row, final double[] array)
>         throws OutOfRangeException, MatrixDimensionMismatchException {
1087c1118
<     public double[] getColumn(final int column) {
---
>     public double[] getColumn(final int column) throws OutOfRangeException {
1109c1140,1141
<     public void setColumn(final int column, final double[] array) {
---
>     public void setColumn(final int column, final double[] array)
>         throws OutOfRangeException, MatrixDimensionMismatchException {
1132c1164,1165
<     public double getEntry(final int row, final int column) {
---
>     public double getEntry(final int row, final int column)
>         throws OutOfRangeException {
1143c1176,1177
<     public void setEntry(final int row, final int column, final double value) {
---
>     public void setEntry(final int row, final int column, final double value)
>         throws OutOfRangeException {
1154c1188,1190
<     public void addToEntry(final int row, final int column, final double increment) {
---
>     public void addToEntry(final int row, final int column,
>                            final double increment)
>         throws OutOfRangeException {
1165c1201,1203
<     public void multiplyEntry(final int row, final int column, final double factor) {
---
>     public void multiplyEntry(final int row, final int column,
>                               final double factor)
>         throws OutOfRangeException {
1224c1262,1263
<     public double[] operate(final double[] v) {
---
>     public double[] operate(final double[] v)
>         throws DimensionMismatchException {
1263c1302,1303
<     public double[] preMultiply(final double[] v) {
---
>     public double[] preMultiply(final double[] v)
>         throws DimensionMismatchException {
1357c1397,1398
<                                  final int startColumn, final int endColumn) {
---
>                                  final int startColumn, final int endColumn)
>         throws OutOfRangeException, NumberIsTooSmallException {
1386c1427,1428
<                                  final int startColumn, final int endColumn) {
---
>                                  final int startColumn, final int endColumn)
>         throws OutOfRangeException, NumberIsTooSmallException {
1465c1507,1509
<                                        final int startColumn, final int endColumn) {
---
>                                        final int startColumn,
>                                        final int endColumn)
>         throws OutOfRangeException, NumberIsTooSmallException {
1494c1538,1540
<                                        final int startColumn, final int endColumn) {
---
>                                        final int startColumn,
>                                        final int endColumn)
>         throws OutOfRangeException, NumberIsTooSmallException {
