37,40d36
<     
<     private final boolean isImmutable;
<     
<     private final int cachedHashCode;
49,53c45
< 
< 
< 
< 
<     public Pair(K k, V v, boolean assumeImmutable) {
---
>     public Pair(K k, V v) {
56,81d47
<         isImmutable = assumeImmutable;
<         cachedHashCode = computeHashCode();
<     }
< 
<     
< 
< 
< 
< 
< 
< 
<     public Pair(K k, V v) {
<         this(k, v, false);
<     }
< 
<     
< 
< 
< 
< 
< 
< 
< 
< 
<     public Pair(Pair<? extends K, ? extends V> entry, boolean assumeImmutable) {
<         this(entry.getKey(), entry.getValue(), assumeImmutable);
90c56
<         this(entry, false);
---
>         this(entry.getKey(), entry.getValue());
128,129c94,95
<                     oP.getKey() == null :
<                     key.equals(oP.getKey())) &&
---
>                     oP.key == null :
>                     key.equals(oP.key)) &&
131,132c97,98
<                  oP.getValue() == null :
<                  value.equals(oP.getValue()));
---
>                  oP.value == null :
>                  value.equals(oP.value));
143,151d108
<         return isImmutable ? cachedHashCode : computeHashCode();
<     }
< 
<     
< 
< 
< 
< 
<     private final int computeHashCode() {
