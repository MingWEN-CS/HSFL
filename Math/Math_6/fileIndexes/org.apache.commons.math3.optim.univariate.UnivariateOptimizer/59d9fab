















package org.apache.commons.math3.optim.univariate;

import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.optim.BaseOptimizer;
import org.apache.commons.math3.optim.OptimizationData;
import org.apache.commons.math3.optim.GoalType;
import org.apache.commons.math3.optim.ConvergenceChecker;
import org.apache.commons.math3.exception.TooManyEvaluationsException;







public abstract class UnivariateOptimizer
    extends BaseOptimizer<UnivariatePointValuePair> {
    
    private UnivariateFunction function;
    
    private GoalType goal;
    
    private double start;
    
    private double min;
    
    private double max;

    


    protected UnivariateOptimizer(ConvergenceChecker<UnivariatePointValuePair> checker) {
        super(checker);
    }

    













    public UnivariatePointValuePair optimize(OptimizationData... optData)
        throws TooManyEvaluationsException {
        
        parseOptimizationData(optData);
        
        return super.optimize(optData);
    }

    


    public GoalType getGoalType() {
        return goal;
    }

    











    private void parseOptimizationData(OptimizationData... optData) {
        
        
        for (OptimizationData data : optData) {
            if (data instanceof SearchInterval) {
                final SearchInterval interval = (SearchInterval) data;
                min = interval.getMin();
                max = interval.getMax();
                start = interval.getStartValue();
                continue;
            }
            if (data instanceof UnivariateObjectiveFunction) {
                function = ((UnivariateObjectiveFunction) data).getObjectiveFunction();
                continue;
            }
            if (data instanceof GoalType) {
                goal = (GoalType) data;
                continue;
            }
        }
    }

    


    public double getStartValue() {
        return start;
    }
    


    public double getMin() {
        return min;
    }
    


    public double getMax() {
        return max;
    }

    









    protected double computeObjectiveValue(double x) {
        super.incrementEvaluationCount();
        return function.value(x);
    }
}
