1a2,273
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> package org.apache.commons.math.linear;
> 
> import java.io.Serializable;
> import java.util.Arrays;
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> class TriDiagonalTransformer implements Serializable {
> 
>     
>     private static final long serialVersionUID = 8935390784125343332L;
> 
>     
>     private final double householderVectors[][];
> 
>     
>     private final double[] main;
> 
>     
>     private final double[] secondary;
> 
>     
>     private RealMatrix cachedQ;
> 
>     
>     private RealMatrix cachedQt;
> 
>     
>     private RealMatrix cachedT;
> 
>     
> 
> 
> 
> 
> 
> 
>     public TriDiagonalTransformer(RealMatrix matrix)
>         throws InvalidMatrixException {
>         if (!matrix.isSquare()) {
>             throw new InvalidMatrixException("transformation to tri-diagonal requires that the matrix be square");
>         }
> 
>         final int m = matrix.getRowDimension();
>         householderVectors = matrix.getData();
>         main      = new double[m];
>         secondary = new double[m - 1];
>         cachedQ   = null;
>         cachedQt  = null;
>         cachedT   = null;
> 
>         
>         transform();
> 
>     }
> 
>     
> 
> 
> 
> 
>     public RealMatrix getQ() {
>         if (cachedQ == null) {
>             cachedQ = getQT().transpose();
>         }
>         return cachedQ;
>     }
> 
>     
> 
> 
> 
> 
>     public RealMatrix getQT() {
> 
>         if (cachedQt == null) {
> 
>             final int m = householderVectors.length;
>             final double[][] qtData  = new double[m][m];
> 
>             
>             for (int k = m - 1; k >= 1; --k) {
>                 final double[] hK = householderVectors[k - 1];
>                 final double inv = 1.0 / (secondary[k - 1] * hK[k]);
>                 qtData[k][k] = 1;
>                 if (hK[k] != 0.0) {
>                     for (int j = k; j < m; ++j) {
>                         final double[] qtJ = qtData[j];
>                         double beta = 0;
>                         for (int i = k; i < m; ++i) {
>                             beta -= qtJ[i] * hK[i];
>                         }
>                         beta *= inv;
> 
>                         for (int i = k; i < m; ++i) {
>                             qtJ[i] -= beta * hK[i];
>                         }
>                     }
>                 }
>             }
>             qtData[0][0] = 1;
> 
>             
>             cachedQt = new RealMatrixImpl(qtData, false);
> 
>         }
> 
>         
>         return cachedQt;
> 
>     }
> 
>     
> 
> 
> 
>     public RealMatrix getT() {
> 
>         if (cachedT == null) {
> 
>             final int m = main.length;
>             double[][] tData = new double[m][m];
>             for (int i = 0; i < m; ++i) {
>                 double[] tDataI = tData[i];
>                 tDataI[i] = main[i];
>                 if (i > 0) {
>                     tDataI[i - 1] = secondary[i - 1];
>                 }
>                 if (i < main.length - 1) {
>                     tDataI[i + 1] = secondary[i];
>                 }
>             }
> 
>             
>             cachedT = new RealMatrixImpl(tData, false);
> 
>         }
> 
>         
>         return cachedT;
> 
>     }
> 
>     
> 
> 
> 
> 
> 
>     double[][] getHouseholderVectorsRef() {
>         return householderVectors;
>     }
> 
>     
> 
> 
> 
> 
> 
>     double[] getMainDiagonalRef() {
>         return main;
>     }
> 
>     
> 
> 
> 
> 
> 
>     double[] getSecondaryDiagonalRef() {
>         return secondary;
>     }
> 
>     
> 
> 
> 
>     private void transform() {
> 
>         final int m = householderVectors.length;
>         final double[] z = new double[m];
>         for (int k = 0; k < m - 1; k++) {
> 
>             
>             final double[] hK = householderVectors[k];
>             main[k] = hK[k];
>             double xNormSqr = 0;
>             for (int j = k + 1; j < m; ++j) {
>                 final double c = hK[j];
>                 xNormSqr += c * c;
>             }
>             final double a = (hK[k + 1] > 0) ? -Math.sqrt(xNormSqr) : Math.sqrt(xNormSqr);
>             secondary[k] = a;
>             if (a != 0.0) {
>                 
> 
>                 hK[k + 1] -= a;
>                 final double beta = -1 / (a * hK[k + 1]);
> 
>                 
>                 
>                 
>                 
>                 Arrays.fill(z, k + 1, m, 0);
>                 for (int i = k + 1; i < m; ++i) {
>                     final double[] hI = householderVectors[i];
>                     final double hKI = hK[i];
>                     double zI = hI[i] * hKI;
>                     for (int j = i + 1; j < m; ++j) {
>                         final double hIJ = hI[j];
>                         zI   += hIJ * hK[j];
>                         z[j] += hIJ * hKI;
>                     }
>                     z[i] = beta * (z[i] + zI);
>                 }
> 
>                 
>                 double gamma = 0;
>                 for (int i = k + 1; i < m; ++i) {
>                     gamma += z[i] * hK[i];
>                 }
>                 gamma *= beta / 2;
> 
>                 
>                 for (int i = k + 1; i < m; ++i) {
>                     z[i] -= gamma * hK[i];
>                 }
> 
>                 
>                 
>                 for (int i = k + 1; i < m; ++i) {
>                     final double[] hI = householderVectors[i];
>                     for (int j = i; j < m; ++j) {
>                         hI[j] -= hK[i] * z[j] + z[i] * hK[j];
>                     }
>                 }
> 
>             }
> 
>         }
>         main[m - 1] = householderVectors[m - 1][m - 1];
>     }
> 
> }
