19a20
> import java.lang.reflect.Array;
22a24,26
> import org.apache.commons.math.Field;
> import org.apache.commons.math.FieldElement;
> 
58a63,78
>     public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(final Field<T> field,
>                                                                                final int rows,
>                                                                                final int columns) {
>         return new DenseFieldMatrix<T>(field, rows, columns);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
71a92,109
> 
> 
> 
> 
> 
> 
>     public static <T extends FieldElement<T>> FieldMatrix<T> createFieldMatrix(T[][] data) {
>         return new DenseFieldMatrix<T>(data);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
78a117,158
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     @SuppressWarnings("unchecked")
>     public static <T extends FieldElement<T>> FieldMatrix<T>
>         createFieldIdentityMatrix(final Field<T> field, final int dimension) {
>         final T zero = field.getZero();
>         final T one  = field.getOne();
>         final T[][] d = (T[][]) Array.newInstance(zero.getClass(), dimension, dimension);
>         for (int row = 0; row < dimension; row++) {
>             final T[] dRow = d[row];
>             Arrays.fill(dRow, zero);
>             dRow[row] = one;
>         }
>         return new FieldMatrixImpl<T>(d, false);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     @Deprecated
>     public static BigMatrix createBigIdentityMatrix(int dimension) {
>         final BigDecimal[][] d = new BigDecimal[dimension][dimension];
>         for (int row = 0; row < dimension; row++) {
>             final BigDecimal[] dRow = d[row];
>             Arrays.fill(dRow, BigMatrixImpl.ZERO);
>             dRow[row] = BigMatrixImpl.ONE;
>         }
>         return new BigMatrixImpl(d, false);
>     }
103a184,201
>     public static <T extends FieldElement<T>> FieldMatrix<T>
>         createFieldDiagonalMatrix(final T[] diagonal) {
>         final FieldMatrix<T> m =
>             createFieldMatrix(diagonal[0].getField(), diagonal.length, diagonal.length);
>         for (int i = 0; i < diagonal.length; ++i) {
>             m.setEntry(i, i, diagonal[i]);
>         }
>         return m;
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
105a204,205
> 
>     @Deprecated
119a220,221
> 
>     @Deprecated
139a242,243
> 
>     @Deprecated
153a258,259
> 
>     @Deprecated
177a284,295
>     public static <T extends FieldElement<T>> FieldVector<T> createFieldVector(final T[] data) {
>         return new FieldVectorImpl<T>(data, true);
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
196a315,335
>     public static <T extends FieldElement<T>> FieldMatrix<T>
>         createRowFieldMatrix(final T[] rowData) {
>         final int nCols = rowData.length;
>         final FieldMatrix<T> m = createFieldMatrix(rowData[0].getField(), 1, nCols);
>         for (int i = 0; i < nCols; ++i) {
>             m.setEntry(0, i, rowData[i]);
>         }
>         return m;
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     @Deprecated
214a354,355
> 
>     @Deprecated
230a372,373
> 
>     @Deprecated
267c410,411
<     public static BigMatrix createColumnBigMatrix(double[] columnData) {
---
>     public static <T extends FieldElement<T>> FieldMatrix<T>
>         createColumnFieldMatrix(final T[] columnData) {
269,271c413,415
<         final BigDecimal[][] data = new BigDecimal[nRows][1];
<         for (int row = 0; row < nRows; row++) {
<             data[row][0] = new BigDecimal(columnData[row]);
---
>         final FieldMatrix<T> m = createFieldMatrix(columnData[0].getField(), nRows, 1);
>         for (int i = 0; i < nRows; ++i) {
>             m.setEntry(i, 0, columnData[i]);
273c417
<         return new BigMatrixImpl(data, false);
---
>         return m;
285c429,431
<     public static BigMatrix createColumnBigMatrix(BigDecimal[] columnData) {
---
> 
>     @Deprecated
>     public static BigMatrix createColumnBigMatrix(double[] columnData) {
289c435
<             data[row][0] = columnData[row];
---
>             data[row][0] = new BigDecimal(columnData[row]);
303,304c449,452
<     public static BigMatrix createColumnBigMatrix(String[] columnData) {
<         int nRows = columnData.length;
---
> 
>     @Deprecated
>     public static BigMatrix createColumnBigMatrix(BigDecimal[] columnData) {
>         final int nRows = columnData.length;
307c455
<             data[row][0] = new BigDecimal(columnData[row]);
---
>             data[row][0] = columnData[row];
320,325c468,475
<     public static BigMatrix createBigIdentityMatrix(int dimension) {
<         final BigDecimal[][] d = new BigDecimal[dimension][dimension];
<         for (int row = 0; row < dimension; row++) {
<             final BigDecimal[] dRow = d[row];
<             Arrays.fill(dRow, BigMatrixImpl.ZERO);
<             dRow[row] = BigMatrixImpl.ONE;
---
> 
> 
>     @Deprecated
>     public static BigMatrix createColumnBigMatrix(String[] columnData) {
>         int nRows = columnData.length;
>         final BigDecimal[][] data = new BigDecimal[nRows][1];
>         for (int row = 0; row < nRows; row++) {
>             data[row][0] = new BigDecimal(columnData[row]);
327c477
<         return new BigMatrixImpl(d, false);
---
>         return new BigMatrixImpl(data, false);
