931a932,984
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static RealMatrix blockInverse(RealMatrix m,
>                                           int splitIndex) {
>         final int n = m.getRowDimension();
>         if (m.getColumnDimension() != n) {
>             throw new NonSquareMatrixException(m.getRowDimension(),
>                                                m.getColumnDimension());
>         }
> 
>         final int splitIndex1 = splitIndex + 1;
> 
>         final RealMatrix a = m.getSubMatrix(0, splitIndex, 0, splitIndex);
>         final RealMatrix b = m.getSubMatrix(0, splitIndex, splitIndex1, n - 1);
>         final RealMatrix c = m.getSubMatrix(splitIndex1, n - 1, 0, splitIndex);
>         final RealMatrix d = m.getSubMatrix(splitIndex1, n - 1, splitIndex1, n - 1);
> 
>         final SingularValueDecomposition aDec = new SingularValueDecomposition(a);
>         final RealMatrix aInv = aDec.getSolver().getInverse();
> 
>         final SingularValueDecomposition dDec = new SingularValueDecomposition(d);
>         final RealMatrix dInv = dDec.getSolver().getInverse();
> 
>         final RealMatrix tmp1 = a.subtract(b.multiply(dInv).multiply(c));
>         final SingularValueDecomposition tmp1Dec = new SingularValueDecomposition(tmp1);
>         final RealMatrix result00 = tmp1Dec.getSolver().getInverse();
> 
>         final RealMatrix tmp2 = d.subtract(c.multiply(aInv).multiply(b));
>         final SingularValueDecomposition tmp2Dec = new SingularValueDecomposition(tmp2);
>         final RealMatrix result11 = tmp2Dec.getSolver().getInverse();
> 
>         final RealMatrix result01 = aInv.multiply(b).multiply(result11).scalarMultiply(-1);
>         final RealMatrix result10 = dInv.multiply(c).multiply(result00).scalarMultiply(-1);
> 
>         final RealMatrix result = new Array2DRowRealMatrix(n, n);
>         result.setSubMatrix(result00.getData(), 0, 0);
>         result.setSubMatrix(result01.getData(), 0, splitIndex1);
>         result.setSubMatrix(result10.getData(), splitIndex1, 0);
>         result.setSubMatrix(result11.getData(), splitIndex1, splitIndex1);
> 
>         return result;
>     }
