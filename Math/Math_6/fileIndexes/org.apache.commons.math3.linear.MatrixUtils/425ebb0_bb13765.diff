27a28,29
> import org.apache.commons.math.exception.MathArithmeticException;
> import org.apache.commons.math.exception.MathIllegalArgumentException;
36a39,40
> import org.apache.commons.math.util.FastMath;
> import org.apache.commons.math.util.MathUtils;
803a808,887
>         }
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static void solveLowerTriangularSystem( RealMatrix rm, RealVector b){
>         if ((rm == null) || (b == null) || ( rm.getRowDimension() != b.getDimension())) {
>             throw new MathIllegalArgumentException(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,
>                     (rm == null) ? 0 : rm.getRowDimension(),
>                     (b == null) ? 0 : b.getDimension());
>         }
>         if( rm.getColumnDimension() != rm.getRowDimension() ){
>             throw new MathIllegalArgumentException(LocalizedFormats.DIMENSIONS_MISMATCH_2x2,
>                     rm.getRowDimension(),rm.getRowDimension(),
>                     rm.getRowDimension(),rm.getColumnDimension());
>         }
>         int rows = rm.getRowDimension();
>         for( int i = 0 ; i < rows ; i++ ){
>             double diag = rm.getEntry(i, i);
>             if( FastMath.abs(diag) < MathUtils.SAFE_MIN ){
>                 throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);
>             }
>             double bi = b.getEntry(i)/diag;
>             b.setEntry(i,  bi );
>             for( int j = i+1; j< rows; j++ ){
>                 b.setEntry(j, b.getEntry(j)-bi*rm.getEntry(j,i)  );
>             }
>         }
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static void solveUpperTriangularSystem( RealMatrix rm, RealVector b){
>         if ((rm == null) || (b == null) || ( rm.getRowDimension() != b.getDimension())) {
>             throw new MathIllegalArgumentException(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,
>                     (rm == null) ? 0 : rm.getRowDimension(),
>                     (b == null) ? 0 : b.getDimension());
>         }
>         if( rm.getColumnDimension() != rm.getRowDimension() ){
>             throw new MathIllegalArgumentException(LocalizedFormats.DIMENSIONS_MISMATCH_2x2,
>                     rm.getRowDimension(),rm.getRowDimension(),
>                     rm.getRowDimension(),rm.getColumnDimension());
>         }
>         int rows = rm.getRowDimension();
>         for( int i = rows-1 ; i >-1 ; i-- ){
>             double diag = rm.getEntry(i, i);
>             if( FastMath.abs(diag) < MathUtils.SAFE_MIN ){
>                 throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR);
>             }
>             double bi = b.getEntry(i)/diag;
>             b.setEntry(i,  bi );
>             for( int j = i-1; j>-1; j-- ){
>                 b.setEntry(j, b.getEntry(j)-bi*rm.getEntry(j,i)  );
>             }
