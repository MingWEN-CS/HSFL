
















package org.apache.commons.math3.analysis.solvers;

import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.exception.MaxCountExceededException;
import org.apache.commons.math3.exception.NoBracketingException;
import org.apache.commons.math3.exception.TooManyEvaluationsException;
import org.apache.commons.math3.util.Incrementor;
import org.apache.commons.math3.util.MathUtils;










public abstract class BaseAbstractUnivariateSolver<FUNC extends UnivariateFunction>
    implements BaseUnivariateSolver<FUNC> {
    
    private static final double DEFAULT_RELATIVE_ACCURACY = 1e-14;
    
    private static final double DEFAULT_FUNCTION_VALUE_ACCURACY = 1e-15;
    
    private final double functionValueAccuracy;
    
    private final double absoluteAccuracy;
    
    private final double relativeAccuracy;
    
    private final Incrementor evaluations = new Incrementor();
    
    private double searchMin;
    
    private double searchMax;
    
    private double searchStart;
    
    private FUNC function;

    




    protected BaseAbstractUnivariateSolver(final double absoluteAccuracy) {
        this(DEFAULT_RELATIVE_ACCURACY,
             absoluteAccuracy,
             DEFAULT_FUNCTION_VALUE_ACCURACY);
    }

    





    protected BaseAbstractUnivariateSolver(final double relativeAccuracy,
                                               final double absoluteAccuracy) {
        this(relativeAccuracy,
             absoluteAccuracy,
             DEFAULT_FUNCTION_VALUE_ACCURACY);
    }

    






    protected BaseAbstractUnivariateSolver(final double relativeAccuracy,
                                               final double absoluteAccuracy,
                                               final double functionValueAccuracy) {
        this.absoluteAccuracy = absoluteAccuracy;
        this.relativeAccuracy = relativeAccuracy;
        this.functionValueAccuracy = functionValueAccuracy;
    }

    
    public int getMaxEvaluations() {
        return evaluations.getMaximalCount();
    }
    
    public int getEvaluations() {
        return evaluations.getCount();
    }
    


    public double getMin() {
        return searchMin;
    }
    


    public double getMax() {
        return searchMax;
    }
    


    public double getStartValue() {
        return searchStart;
    }
    


    public double getAbsoluteAccuracy() {
        return absoluteAccuracy;
    }
    


    public double getRelativeAccuracy() {
        return relativeAccuracy;
    }
    


    public double getFunctionValueAccuracy() {
        return functionValueAccuracy;
    }

    







    protected double computeObjectiveValue(double point)
        throws TooManyEvaluationsException {
        incrementEvaluationCount();
        return function.value(point);
    }

    










    protected void setup(int maxEval,
                         FUNC f,
                         double min, double max,
                         double startValue) {
        
        MathUtils.checkNotNull(f);

        
        searchMin = min;
        searchMax = max;
        searchStart = startValue;
        function = f;
        evaluations.setMaximalCount(maxEval);
        evaluations.resetCount();
    }

    
    public double solve(int maxEval, FUNC f, double min, double max, double startValue) {
        
        setup(maxEval, f, min, max, startValue);

        
        return doSolve();
    }

    
    public double solve(int maxEval, FUNC f, double min, double max) {
        return solve(maxEval, f, min, max, min + 0.5 * (max - min));
    }

    
    public double solve(int maxEval, FUNC f, double startValue) {
        return solve(maxEval, f, Double.NaN, Double.NaN, startValue);
    }

    









    protected abstract double doSolve()
        throws TooManyEvaluationsException, NoBracketingException;

    







    protected boolean isBracketing(final double lower,
                                   final double upper) {
        return UnivariateSolverUtils.isBracketing(function, lower, upper);
    }

    







    protected boolean isSequence(final double start,
                                 final double mid,
                                 final double end) {
        return UnivariateSolverUtils.isSequence(start, mid, end);
    }

    







    protected void verifyInterval(final double lower,
                                  final double upper) {
        UnivariateSolverUtils.verifyInterval(lower, upper);
    }

    








    protected void verifySequence(final double lower,
                                  final double initial,
                                  final double upper) {
        UnivariateSolverUtils.verifySequence(lower, initial, upper);
    }

    








    protected void verifyBracketing(final double lower,
                                    final double upper) {
        UnivariateSolverUtils.verifyBracketing(function, lower, upper);
    }

    






    protected void incrementEvaluationCount() {
        try {
            evaluations.incrementCount();
        } catch (MaxCountExceededException e) {
            throw new TooManyEvaluationsException(e.getMax());
        }
    }
}
