















package org.apache.commons.math.linear;

import java.io.Serializable;
import java.util.Arrays;

import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.util.MathUtils;






public class ArrayRealVector implements RealVector, Serializable {

    
    private static final long serialVersionUID = -1097961340710804027L;

    
    private static final RealVectorFormat DEFAULT_FORMAT =
        RealVectorFormat.getInstance();

    
    protected double data[];

    








    public ArrayRealVector() {
        data = new double[0];
    }

    



    public ArrayRealVector(int size) {
        data = new double[size];
    }

    




    public ArrayRealVector(int size, double preset) {
        data = new double[size];
        Arrays.fill(data, preset);
    }

    



    public ArrayRealVector(double[] d) {
        data = d.clone();
    }

    













    public ArrayRealVector(double[] d, boolean copyArray)
        throws NullPointerException, IllegalArgumentException {
        if (d == null) {
            throw new NullPointerException();
        }
        if (d.length == 0) {
            throw MathRuntimeException.createIllegalArgumentException("vector must have at least one element");
        }
        data = copyArray ? d.clone() :  d;
    }

    





    public ArrayRealVector(double[] d, int pos, int size) {
        if (d.length < pos + size) {
            throw MathRuntimeException.createIllegalArgumentException(
                    "position {0} and size {1} don't fit to the size of the input array {2}",
                    pos, size, d.length);
        }
        data = new double[size];
        System.arraycopy(d, pos, data, 0, size);
    }

    



    public ArrayRealVector(Double[] d) {
        data = new double[d.length];
        for (int i = 0; i < d.length; i++) {
            data[i] = d[i].doubleValue();
        }
    }

    





    public ArrayRealVector(Double[] d, int pos, int size) {
        if (d.length < pos + size) {
            throw MathRuntimeException.createIllegalArgumentException(
                    "position {0} and size {1} don't fit to the size of the input array {2}",
                    pos, size, d.length);
        }
        data = new double[size];
        for (int i = pos; i < pos + size; i++) {
            data[i-pos] = d[i].doubleValue();
        }
    }

    



    public ArrayRealVector(RealVector v) {
        data = new double[v.getDimension()];
        for (int i = 0; i < data.length; ++i) {
            data[i] = v.getEntry(i);
        }
    }

    



    public ArrayRealVector(ArrayRealVector v) {
        data = v.data.clone();
    }

    




    public ArrayRealVector(ArrayRealVector v, boolean deep) {
        data = deep ? v.data.clone() : v.data;
    }

    




    public ArrayRealVector(ArrayRealVector v1, ArrayRealVector v2) {
        data = new double[v1.data.length + v2.data.length];
        System.arraycopy(v1.data, 0, data, 0, v1.data.length);
        System.arraycopy(v2.data, 0, data, v1.data.length, v2.data.length);
    }

    




    public ArrayRealVector(ArrayRealVector v1, double[] v2) {
        data = new double[v1.data.length + v2.length];
        System.arraycopy(v1.data, 0, data, 0, v1.data.length);
        System.arraycopy(v2, 0, data, v1.data.length, v2.length);
    }

    




    public ArrayRealVector(double[] v1, ArrayRealVector v2) {
        data = new double[v1.length + v2.data.length];
        System.arraycopy(v1, 0, data, 0, v1.length);
        System.arraycopy(v2.data, 0, data, v1.length, v2.data.length);
    }

    




    public ArrayRealVector(double[] v1, double[] v2) {
        data = new double[v1.length + v2.length];
        System.arraycopy(v1, 0, data, 0, v1.length);
        System.arraycopy(v2, 0, data, v1.length, v2.length);
    }

    
    public RealVector copy() {
        return new ArrayRealVector(this, true);
    }

    
    public RealVector add(RealVector v)
    throws IllegalArgumentException {
        try {
            return add((ArrayRealVector) v);
        } catch (ClassCastException cce) {
            checkVectorDimensions(v);
            double[] out = new double[data.length];
            for (int i = 0; i < data.length; i++) {
                out[i] = data[i] + v.getEntry(i);
            }
            return new ArrayRealVector(out);
        }
    }

    
    public RealVector add(double[] v)
    throws IllegalArgumentException {
        checkVectorDimensions(v.length);
        double[] out = new double[data.length];
        for (int i = 0; i < data.length; i++) {
            out[i] = data[i] + v[i];
        }
        return new ArrayRealVector(out);
    }

    





    public ArrayRealVector add(ArrayRealVector v)
        throws IllegalArgumentException {
        return (ArrayRealVector) add(v.data);
    }

    
    public RealVector subtract(RealVector v)
    throws IllegalArgumentException {
        try {
            return subtract((ArrayRealVector) v);
        } catch (ClassCastException cce) {
            checkVectorDimensions(v);
            double[] out = new double[data.length];
            for (int i = 0; i < data.length; i++) {
                out[i] = data[i] - v.getEntry(i);
            }
            return new ArrayRealVector(out);
        }
    }

    
    public RealVector subtract(double[] v)
    throws IllegalArgumentException {
        checkVectorDimensions(v.length);
        double[] out = new double[data.length];
        for (int i = 0; i < data.length; i++) {
            out[i] = data[i] - v[i];
        }
        return new ArrayRealVector(out);
    }

    





    public ArrayRealVector subtract(ArrayRealVector v)
        throws IllegalArgumentException {
        return (ArrayRealVector) subtract(v.data);
    }

    
    public RealVector mapAdd(double d) {
        double[] out = new double[data.length];
        for (int i = 0; i < data.length; i++) {
            out[i] = data[i] + d;
        }
        return new ArrayRealVector(out);
    }

    
    public RealVector mapAddToSelf(double d) {
        for (int i = 0; i < data.length; i++) {
            data[i] = data[i] + d;
        }
        return this;
    }

    
    public RealVector mapSubtract(double d) {
        double[] out = new double[data.length];
        for (int i = 0; i < data.length; i++) {
            out[i] = data[i] - d;
        }
        return new ArrayRealVector(out);
    }

    
    public RealVector mapSubtractToSelf(double d) {
        for (int i = 0; i < data.length; i++) {
            data[i] = data[i] - d;
        }
        return this;
    }

    
    public RealVector mapMultiply(double d) {
        double[] out = new double[data.length];
        for (int i = 0; i < data.length; i++) {
            out[i] = data[i] * d;
        }
        return new ArrayRealVector(out);
    }

    
    public RealVector mapMultiplyToSelf(double d) {
        for (int i = 0; i < data.length; i++) {
            data[i] = data[i] * d;
        }
        return this;
    }

    
    public RealVector mapDivide(double d) {
        double[] out = new double[data.length];
        for (int i = 0; i < data.length; i++) {
            out[i] = data[i] / d;
        }
        return new ArrayRealVector(out);
    }

    
    public RealVector mapDivideToSelf(double d) {
        for (int i = 0; i < data.length; i++) {
            data[i] = data[i] / d;
        }
        return this;
    }

    
    public RealVector mapPow(double d) {
        double[] out = new double[data.length];
        for (int i = 0; i < data.length; i++) {
            out[i] = Math.pow(data[i], d);
        }
        return new ArrayRealVector(out);
    }

    
    public RealVector mapPowToSelf(double d) {
        for (int i = 0; i < data.length; i++) {
            data[i] = Math.pow(data[i], d);
        }
        return this;
    }

    
    public RealVector mapExp() {
        double[] out = new double[data.length];
        for (int i = 0; i < data.length; i++) {
            out[i] = Math.exp(data[i]);
        }
        return new ArrayRealVector(out);
    }

    
    public RealVector mapExpToSelf() {
        for (int i = 0; i < data.length; i++) {
            data[i] = Math.exp(data[i]);
        }
        return this;
    }

    
    public RealVector mapExpm1() {
        double[] out = new double[data.length];
        for (int i = 0; i < data.length; i++) {
            out[i] = Math.expm1(data[i]);
        }
        return new ArrayRealVector(out);
    }

    
    public RealVector mapExpm1ToSelf() {
        for (int i = 0; i < data.length; i++) {
            data[i] = Math.expm1(data[i]);
        }
        return this;
    }

    
    public RealVector mapLog() {
        double[] out = new double[data.length];
        for (int i = 0; i < data.length; i++) {
            out[i] = Math.log(data[i]);
        }
        return new ArrayRealVector(out);
    }

    
    public RealVector mapLogToSelf() {
        for (int i = 0; i < data.length; i++) {
            data[i] = Math.log(data[i]);
        }
        return this;
    }

    
    public RealVector mapLog10() {
        double[] out = new double[data.length];
        for (int i = 0; i < data.length; i++) {
            out[i] = Math.log10(data[i]);
        }
        return new ArrayRealVector(out);
    }

    
    public RealVector mapLog10ToSelf() {
        for (int i = 0; i < data.length; i++) {
            data[i] = Math.log10(data[i]);
        }
        return this;
    }

    
    public RealVector mapLog1p() {
        double[] out = new double[data.length];
        for (int i = 0; i < data.length; i++) {
            out[i] = Math.log1p(data[i]);
        }
        return new ArrayRealVector(out);
    }

    
    public RealVector mapLog1pToSelf() {
        for (int i = 0; i < data.length; i++) {
            data[i] = Math.log1p(data[i]);
        }
        return this;
    }

    
    public RealVector mapCosh() {
        double[] out = new double[data.length];
        for (int i = 0; i < data.length; i++) {
            out[i] = Math.cosh(data[i]);
        }
        return new ArrayRealVector(out);
    }

    
    public RealVector mapCoshToSelf() {
        for (int i = 0; i < data.length; i++) {
            data[i] = Math.cosh(data[i]);
        }
        return this;
    }

    
    public RealVector mapSinh() {
        double[] out = new double[data.length];
        for (int i = 0; i < data.length; i++) {
            out[i] = Math.sinh(data[i]);
        }
        return new ArrayRealVector(out);
    }

    
    public RealVector mapSinhToSelf() {
        for (int i = 0; i < data.length; i++) {
            data[i] = Math.sinh(data[i]);
        }
        return this;
    }

    
    public RealVector mapTanh() {
        double[] out = new double[data.length];
        for (int i = 0; i < data.length; i++) {
            out[i] = Math.tanh(data[i]);
        }
        return new ArrayRealVector(out);
    }

    
    public RealVector mapTanhToSelf() {
        for (int i = 0; i < data.length; i++) {
            data[i] = Math.tanh(data[i]);
        }
        return this;
    }

    
    public RealVector mapCos() {
        double[] out = new double[data.length];
        for (int i = 0; i < data.length; i++) {
            out[i] = Math.cos(data[i]);
        }
        return new ArrayRealVector(out);
    }

    
    public RealVector mapCosToSelf() {
        for (int i = 0; i < data.length; i++) {
            data[i] = Math.cos(data[i]);
        }
        return this;
    }

    
    public RealVector mapSin() {
        double[] out = new double[data.length];
        for (int i = 0; i < data.length; i++) {
            out[i] = Math.sin(data[i]);
        }
        return new ArrayRealVector(out);
    }

    
    public RealVector mapSinToSelf() {
        for (int i = 0; i < data.length; i++) {
            data[i] = Math.sin(data[i]);
        }
        return this;
    }

    
    public RealVector mapTan() {
        double[] out = new double[data.length];
        for (int i = 0; i < data.length; i++) {
            out[i] = Math.tan(data[i]);
        }
        return new ArrayRealVector(out);
    }

    
    public RealVector mapTanToSelf() {
        for (int i = 0; i < data.length; i++) {
            data[i] = Math.tan(data[i]);
        }
        return this;
    }

    
    public RealVector mapAcos() {
        double[] out = new double[data.length];
        for (int i = 0; i < data.length; i++) {
            out[i] = Math.acos(data[i]);
        }
        return new ArrayRealVector(out);
    }

    
    public RealVector mapAcosToSelf() {
        for (int i = 0; i < data.length; i++) {
            data[i] = Math.acos(data[i]);
        }
        return this;
    }

    
    public RealVector mapAsin() {
        double[] out = new double[data.length];
        for (int i = 0; i < data.length; i++) {
            out[i] = Math.asin(data[i]);
        }
        return new ArrayRealVector(out);
    }

    
    public RealVector mapAsinToSelf() {
        for (int i = 0; i < data.length; i++) {
            data[i] = Math.asin(data[i]);
        }
        return this;
    }

    
    public RealVector mapAtan() {
        double[] out = new double[data.length];
        for (int i = 0; i < data.length; i++) {
            out[i] = Math.atan(data[i]);
        }
        return new ArrayRealVector(out);
    }

    
    public RealVector mapAtanToSelf() {
        for (int i = 0; i < data.length; i++) {
            data[i] = Math.atan(data[i]);
        }
        return this;
    }

    
    public RealVector mapInv() {
        double[] out = new double[data.length];
        for (int i = 0; i < data.length; i++) {
            out[i] = 1.0 / data[i];
        }
        return new ArrayRealVector(out);
    }

    
    public RealVector mapInvToSelf() {
        for (int i = 0; i < data.length; i++) {
            data[i] = 1.0 / data[i];
        }
        return this;
    }

    
    public RealVector mapAbs() {
        double[] out = new double[data.length];
        for (int i = 0; i < data.length; i++) {
            out[i] = Math.abs(data[i]);
        }
        return new ArrayRealVector(out);
    }

    
    public RealVector mapAbsToSelf() {
        for (int i = 0; i < data.length; i++) {
            data[i] = Math.abs(data[i]);
        }
        return this;
    }

    
    public RealVector mapSqrt() {
        double[] out = new double[data.length];
        for (int i = 0; i < data.length; i++) {
            out[i] = Math.sqrt(data[i]);
        }
        return new ArrayRealVector(out);
    }

    
    public RealVector mapSqrtToSelf() {
        for (int i = 0; i < data.length; i++) {
            data[i] = Math.sqrt(data[i]);
        }
        return this;
    }

    
    public RealVector mapCbrt() {
        double[] out = new double[data.length];
        for (int i = 0; i < data.length; i++) {
            out[i] = Math.cbrt(data[i]);
        }
        return new ArrayRealVector(out);
    }

    
    public RealVector mapCbrtToSelf() {
        for (int i = 0; i < data.length; i++) {
            data[i] = Math.cbrt(data[i]);
        }
        return this;
    }

    
    public RealVector mapCeil() {
        double[] out = new double[data.length];
        for (int i = 0; i < data.length; i++) {
            out[i] = Math.ceil(data[i]);
        }
        return new ArrayRealVector(out);
    }

    
    public RealVector mapCeilToSelf() {
        for (int i = 0; i < data.length; i++) {
            data[i] = Math.ceil(data[i]);
        }
        return this;
    }

    
    public RealVector mapFloor() {
        double[] out = new double[data.length];
        for (int i = 0; i < data.length; i++) {
            out[i] = Math.floor(data[i]);
        }
        return new ArrayRealVector(out);
    }

    
    public RealVector mapFloorToSelf() {
        for (int i = 0; i < data.length; i++) {
            data[i] = Math.floor(data[i]);
        }
        return this;
    }

    
    public RealVector mapRint() {
        double[] out = new double[data.length];
        for (int i = 0; i < data.length; i++) {
            out[i] = Math.rint(data[i]);
        }
        return new ArrayRealVector(out);
    }

    
    public RealVector mapRintToSelf() {
        for (int i = 0; i < data.length; i++) {
            data[i] = Math.rint(data[i]);
        }
        return this;
    }

    
    public RealVector mapSignum() {
        double[] out = new double[data.length];
        for (int i = 0; i < data.length; i++) {
            out[i] = Math.signum(data[i]);
        }
        return new ArrayRealVector(out);
    }

    
    public RealVector mapSignumToSelf() {
        for (int i = 0; i < data.length; i++) {
            data[i] = Math.signum(data[i]);
        }
        return this;
    }

    
    public RealVector mapUlp() {
        double[] out = new double[data.length];
        for (int i = 0; i < data.length; i++) {
            out[i] = Math.ulp(data[i]);
        }
        return new ArrayRealVector(out);
    }

    
    public RealVector mapUlpToSelf() {
        for (int i = 0; i < data.length; i++) {
            data[i] = Math.ulp(data[i]);
        }
        return this;
    }

    
    public RealVector ebeMultiply(RealVector v)
        throws IllegalArgumentException {
        try {
            return ebeMultiply((ArrayRealVector) v);
        } catch (ClassCastException cce) {
            checkVectorDimensions(v);
            double[] out = new double[data.length];
            for (int i = 0; i < data.length; i++) {
                out[i] = data[i] * v.getEntry(i);
            }
            return new ArrayRealVector(out);
        }
    }

    
    public RealVector ebeMultiply(double[] v)
        throws IllegalArgumentException {
        checkVectorDimensions(v.length);
        double[] out = new double[data.length];
        for (int i = 0; i < data.length; i++) {
            out[i] = data[i] * v[i];
        }
        return new ArrayRealVector(out);
    }

    





    public ArrayRealVector ebeMultiply(ArrayRealVector v)
        throws IllegalArgumentException {
        return (ArrayRealVector) ebeMultiply(v.data);
    }

    
    public RealVector ebeDivide(RealVector v)
        throws IllegalArgumentException {
        try {
            return ebeDivide((ArrayRealVector) v);
        } catch (ClassCastException cce) {
            checkVectorDimensions(v);
            double[] out = new double[data.length];
            for (int i = 0; i < data.length; i++) {
                out[i] = data[i] / v.getEntry(i);
            }
            return new ArrayRealVector(out);
        }
    }

    
    public RealVector ebeDivide(double[] v)
        throws IllegalArgumentException {
        checkVectorDimensions(v.length);
        double[] out = new double[data.length];
        for (int i = 0; i < data.length; i++) {
                out[i] = data[i] / v[i];
        }
        return new ArrayRealVector(out);
    }

    





    public ArrayRealVector ebeDivide(ArrayRealVector v)
        throws IllegalArgumentException {
        return (ArrayRealVector) ebeDivide(v.data);
    }

    
    public double[] getData() {
        return data.clone();
    }

    




    public double[] getDataRef() {
        return data;
    }

    
    public double dotProduct(RealVector v)
        throws IllegalArgumentException {
        try {
            return dotProduct((ArrayRealVector) v);
        } catch (ClassCastException cce) {
            checkVectorDimensions(v);
            double dot = 0;
            for (int i = 0; i < data.length; i++) {
                dot += data[i] * v.getEntry(i);
            }
            return dot;
        }
    }

    
    public double dotProduct(double[] v)
        throws IllegalArgumentException {
        checkVectorDimensions(v.length);
        double dot = 0;
        for (int i = 0; i < data.length; i++) {
            dot += data[i] * v[i];
        }
        return dot;
    }

    





    public double dotProduct(ArrayRealVector v)
        throws IllegalArgumentException {
        return dotProduct(v.data);
    }

    
    public double getNorm() {
        double sum = 0;
        for (double a : data) {
            sum += a * a;
        }
        return Math.sqrt(sum);
    }

    
    public double getL1Norm() {
        double sum = 0;
        for (double a : data) {
            sum += Math.abs(a);
        }
        return sum;
    }

    
    public double getLInfNorm() {
        double max = 0;
        for (double a : data) {
            max += Math.max(max, Math.abs(a));
        }
        return max;
    }

    
    public double getDistance(RealVector v)
        throws IllegalArgumentException {
        try {
            return getDistance((ArrayRealVector) v);
        } catch (ClassCastException cce) {
            checkVectorDimensions(v);
            double sum = 0;
            for (int i = 0; i < data.length; ++i) {
                final double delta = data[i] - v.getEntry(i);
                sum += delta * delta;
            }
            return Math.sqrt(sum);
        }
    }

    
    public double getDistance(double[] v)
        throws IllegalArgumentException {
        checkVectorDimensions(v.length);
        double sum = 0;
        for (int i = 0; i < data.length; ++i) {
            final double delta = data[i] - v[i];
            sum += delta * delta;
        }
        return Math.sqrt(sum);
    }

   












    public double getDistance(ArrayRealVector v)
        throws IllegalArgumentException {
        return getDistance(v.data);
    }

    
    public double getL1Distance(RealVector v)
        throws IllegalArgumentException {
        try {
            return getL1Distance((ArrayRealVector) v);
        } catch (ClassCastException cce) {
            checkVectorDimensions(v);
            double sum = 0;
            for (int i = 0; i < data.length; ++i) {
                final double delta = data[i] - v.getEntry(i);
                sum += Math.abs(delta);
            }
            return sum;
        }
    }

    
    public double getL1Distance(double[] v)
        throws IllegalArgumentException {
        checkVectorDimensions(v.length);
        double sum = 0;
        for (int i = 0; i < data.length; ++i) {
            final double delta = data[i] - v[i];
            sum += Math.abs(delta);
        }
        return sum;
    }

    












    public double getL1Distance(ArrayRealVector v)
        throws IllegalArgumentException {
        return getL1Distance(v.data);
    }

    
    public double getLInfDistance(RealVector v)
        throws IllegalArgumentException {
        try {
            return getLInfDistance((ArrayRealVector) v);
        } catch (ClassCastException cce) {
            checkVectorDimensions(v);
            double max = 0;
            for (int i = 0; i < data.length; ++i) {
                final double delta = data[i] - v.getEntry(i);
                max = Math.max(max, Math.abs(delta));
            }
            return max;
        }
    }

    
    public double getLInfDistance(double[] v)
        throws IllegalArgumentException {
        checkVectorDimensions(v.length);
        double max = 0;
        for (int i = 0; i < data.length; ++i) {
            final double delta = data[i] - v[i];
            max = Math.max(max, Math.abs(delta));
        }
        return max;
    }

    












    public double getLInfDistance(ArrayRealVector v)
        throws IllegalArgumentException {
        return getLInfDistance(v.data);
    }

    
    public RealVector unitVector() throws ArithmeticException {
        final double norm = getNorm();
        if (norm == 0) {
            throw MathRuntimeException.createArithmeticException("zero norm");
        }
        return mapDivide(getNorm());
    }

    
    public void unitize() throws ArithmeticException {
        final double norm = getNorm();
        if (norm == 0) {
            throw MathRuntimeException.createArithmeticException("cannot normalize a zero norm vector");
        }
        for (int i = 0; i < data.length; i++) {
            data[i] /= norm;
        }
    }

    
    public RealVector projection(RealVector v) {
        return v.mapMultiply(dotProduct(v) / v.dotProduct(v));
    }

    
    public RealVector projection(double[] v) {
        return projection(new ArrayRealVector(v, false));
    }

   




    public ArrayRealVector projection(ArrayRealVector v) {
        return (ArrayRealVector) v.mapMultiply(dotProduct(v) / v.dotProduct(v));
    }

    
    public RealMatrix outerProduct(RealVector v)
        throws IllegalArgumentException {
        try {
            return outerProduct((ArrayRealVector) v);
        } catch (ClassCastException cce) {
            checkVectorDimensions(v);
            final int m = data.length;
            final RealMatrix out = MatrixUtils.createRealMatrix(m, m);
            for (int i = 0; i < data.length; i++) {
                for (int j = 0; j < data.length; j++) {
                    out.setEntry(i, j, data[i] * v.getEntry(j));
                }
            }
            return out;
        }
    }

    





    public RealMatrix outerProduct(ArrayRealVector v)
        throws IllegalArgumentException {
        return outerProduct(v.data);
    }

    
    public RealMatrix outerProduct(double[] v)
        throws IllegalArgumentException {
        checkVectorDimensions(v.length);
        final int m = data.length;
        final RealMatrix out = MatrixUtils.createRealMatrix(m, m);
        for (int i = 0; i < data.length; i++) {
            for (int j = 0; j < data.length; j++) {
                out.setEntry(i, j, data[i] * v[j]);
            }
        }
        return out;
    }

    
    public double getEntry(int index) throws MatrixIndexException {
        return data[index];
    }

    
    public int getDimension() {
        return data.length;
    }

    
    public RealVector append(RealVector v) {
        try {
            return append((ArrayRealVector) v);
        } catch (ClassCastException cce) {
            return new ArrayRealVector(this,new ArrayRealVector(v));
        }
    }

    




    public ArrayRealVector append(ArrayRealVector v) {
        return new ArrayRealVector(this, v);
    }

    
    public RealVector append(double in) {
        final double[] out = new double[data.length + 1];
        System.arraycopy(data, 0, out, 0, data.length);
        out[data.length] = in;
        return new ArrayRealVector(out);
    }

    
    public RealVector append(double[] in) {
        return new ArrayRealVector(this, in);
    }

    
    public RealVector getSubVector(int index, int n) {
        ArrayRealVector out = new ArrayRealVector(n);
        try {
            System.arraycopy(data, index, out.data, 0, n);
        } catch (IndexOutOfBoundsException e) {
            checkIndex(index);
            checkIndex(index + n - 1);
        }
        return out;
    }

    
    public void setEntry(int index, double value) {
        try {
            data[index] = value;
        } catch (IndexOutOfBoundsException e) {
            checkIndex(index);
        }
    }

    
    public void setSubVector(int index, RealVector v) {
        try {
            try {
                set(index, (ArrayRealVector) v);
            } catch (ClassCastException cce) {
                for (int i = index; i < index + v.getDimension(); ++i) {
                    data[i] = v.getEntry(i-index);
                }
            }
        } catch (IndexOutOfBoundsException e) {
            checkIndex(index);
            checkIndex(index + v.getDimension() - 1);
        }
    }

    
    public void setSubVector(int index, double[] v) {
        try {
            System.arraycopy(v, 0, data, index, v.length);
        } catch (IndexOutOfBoundsException e) {
            checkIndex(index);
            checkIndex(index + v.length - 1);
        }
    }

    







    public void set(int index, ArrayRealVector v)
        throws MatrixIndexException {
        setSubVector(index, v.data);
    }

    
    public void set(double value) {
        Arrays.fill(data, value);
    }

    
    public double[] toArray(){
        return data.clone();
    }

    
    @Override
    public String toString(){
        return DEFAULT_FORMAT.format(this);
    }

    





    protected void checkVectorDimensions(RealVector v)
        throws IllegalArgumentException {
        checkVectorDimensions(v.getDimension());
    }

    






    protected void checkVectorDimensions(int n)
        throws IllegalArgumentException {
        if (data.length != n) {
            throw MathRuntimeException.createIllegalArgumentException(
                    "vector length mismatch: got {0} but expected {1}",
                    data.length, n);
        }
    }

    



    public boolean isNaN() {
        for (double v : data) {
            if (Double.isNaN(v)) {
                return true;
            }
        }
        return false;
    }

    





    public boolean isInfinite() {

        if (isNaN()) {
            return false;
        }

        for (double v : data) {
            if (Double.isInfinite(v)) {
                return true;
            }
        }

        return false;

    }

    


















    @Override
    public boolean equals(Object other) {

      if (this == other) {
        return true;
      }

      if (other == null) {
        return false;
      }

      try {

          RealVector rhs = (RealVector) other;
          if (data.length != rhs.getDimension()) {
              return false;
          }

          if (rhs.isNaN()) {
              return this.isNaN();
          }

          for (int i = 0; i < data.length; ++i) {
              if (data[i] != rhs.getEntry(i)) {
                  return false;
              }
          }
          return true;

      } catch (ClassCastException ex) {
          
          return false;
      }

    }

    




    @Override
    public int hashCode() {
        if (isNaN()) {
            return 9;
        }
        return MathUtils.hash(data);
    }

    




    private void checkIndex(final int index)
        throws MatrixIndexException {
        if (index < 0 || index >= getDimension()) {
            throw new MatrixIndexException(
                    "index {0} out of allowed range [{1}, {2}]",
                    index, 0, getDimension() - 1);
        }
    }

}
