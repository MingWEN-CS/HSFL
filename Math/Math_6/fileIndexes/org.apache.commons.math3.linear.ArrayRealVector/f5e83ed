















package org.apache.commons.math.linear;

import java.io.Serializable;
import java.util.Arrays;
import java.util.Iterator;

import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.exception.NullArgumentException;
import org.apache.commons.math.exception.DimensionMismatchException;
import org.apache.commons.math.exception.NumberIsTooLargeException;
import org.apache.commons.math.exception.MathArithmeticException;
import org.apache.commons.math.exception.util.LocalizedFormats;
import org.apache.commons.math.util.MathUtils;
import org.apache.commons.math.util.FastMath;






public class ArrayRealVector extends AbstractRealVector implements Serializable {
    
    private static final long serialVersionUID = -1097961340710804027L;
    
    private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();
    
    protected double data[];

    








    public ArrayRealVector() {
        data = new double[0];
    }

    




    public ArrayRealVector(int size) {
        data = new double[size];
    }

    





    public ArrayRealVector(int size, double preset) {
        data = new double[size];
        Arrays.fill(data, preset);
    }

    





    public ArrayRealVector(double[] d) {
        data = d.clone();
    }

    













    public ArrayRealVector(double[] d, boolean copyArray) {
        if (d == null) {
            throw new NullArgumentException();
        }
        data = copyArray ? d.clone() :  d;
    }

    









    public ArrayRealVector(double[] d, int pos, int size) {
        if (d == null) {
            throw new NullArgumentException();
        }
        if (d.length < pos + size) {
            throw new NumberIsTooLargeException(pos + size, d.length, true);
        }
        data = new double[size];
        System.arraycopy(d, pos, data, 0, size);
    }

    



    public ArrayRealVector(Double[] d) {
        data = new double[d.length];
        for (int i = 0; i < d.length; i++) {
            data[i] = d[i].doubleValue();
        }
    }

    









    public ArrayRealVector(Double[] d, int pos, int size) {
        if (d == null) {
            throw new NullArgumentException();
        }
        if (d.length < pos + size) {
            throw new NumberIsTooLargeException(pos + size, d.length, true);
        }
        data = new double[size];
        for (int i = pos; i < pos + size; i++) {
            data[i - pos] = d[i].doubleValue();
        }
    }

    





    public ArrayRealVector(RealVector v) {
        if (v == null) {
            throw new NullArgumentException();
        }
        data = new double[v.getDimension()];
        for (int i = 0; i < data.length; ++i) {
            data[i] = v.getEntry(i);
        }
    }

    





    public ArrayRealVector(ArrayRealVector v) {
        this(v, true);
    }

    






    public ArrayRealVector(ArrayRealVector v, boolean deep) {
        data = deep ? v.data.clone() : v.data;
    }

    




    public ArrayRealVector(ArrayRealVector v1, ArrayRealVector v2) {
        data = new double[v1.data.length + v2.data.length];
        System.arraycopy(v1.data, 0, data, 0, v1.data.length);
        System.arraycopy(v2.data, 0, data, v1.data.length, v2.data.length);
    }

    




    public ArrayRealVector(ArrayRealVector v1, RealVector v2) {
        final int l1 = v1.data.length;
        final int l2 = v2.getDimension();
        data = new double[l1 + l2];
        System.arraycopy(v1.data, 0, data, 0, l1);
        for (int i = 0; i < l2; ++i) {
            data[l1 + i] = v2.getEntry(i);
        }
    }

    




    public ArrayRealVector(RealVector v1, ArrayRealVector v2) {
        final int l1 = v1.getDimension();
        final int l2 = v2.data.length;
        data = new double[l1 + l2];
        for (int i = 0; i < l1; ++i) {
            data[i] = v1.getEntry(i);
        }
        System.arraycopy(v2.data, 0, data, l1, l2);
    }

    




    public ArrayRealVector(ArrayRealVector v1, double[] v2) {
        final int l1 = v1.getDimension();
        final int l2 = v2.length;
        data = new double[l1 + l2];
        System.arraycopy(v1.data, 0, data, 0, l1);
        System.arraycopy(v2, 0, data, l1, l2);
    }

    




    public ArrayRealVector(double[] v1, ArrayRealVector v2) {
        final int l1 = v1.length;
        final int l2 = v2.getDimension();
        data = new double[l1 + l2];
        System.arraycopy(v1, 0, data, 0, l1);
        System.arraycopy(v2.data, 0, data, l1, l2);
    }

    




    public ArrayRealVector(double[] v1, double[] v2) {
        final int l1 = v1.length;
        final int l2 = v2.length;
        data = new double[l1 + l2];
        System.arraycopy(v1, 0, data, 0, l1);
        System.arraycopy(v2, 0, data, l1, l2);
    }

    
    @Override
    public ArrayRealVector copy() {
        return new ArrayRealVector(this, true);
    }

    
    @Override
    public RealVector add(RealVector v) {
        if (v instanceof ArrayRealVector) {
            return add((ArrayRealVector) v);
        } else {
            checkVectorDimensions(v);
            double[] out = data.clone();
            Iterator<Entry> it = v.sparseIterator();
            Entry e;
            while (it.hasNext() && (e = it.next()) != null) {
                out[e.getIndex()] += e.getValue();
            }
            return new ArrayRealVector(out, false);
        }
    }

    
    @Override
    public RealVector add(double[] v) {
        final int dim = v.length;
        checkVectorDimensions(dim);
        ArrayRealVector result = new ArrayRealVector(dim);
        double[] resultData = result.data;
        for (int i = 0; i < dim; i++) {
            resultData[i] = data[i] + v[i];
        }
        return result;
    }

    







    public ArrayRealVector add(ArrayRealVector v) {
        return (ArrayRealVector) add(v.data);
    }

    
    @Override
    public RealVector subtract(RealVector v) {
        if (v instanceof ArrayRealVector) {
            return subtract((ArrayRealVector) v);
        } else {
            checkVectorDimensions(v);
            double[] out = data.clone();
            Iterator<Entry> it = v.sparseIterator();
            Entry e;
            while(it.hasNext() && (e = it.next()) != null) {
                out[e.getIndex()] -= e.getValue();
            }
            return new ArrayRealVector(out, false);
        }
    }

    
    @Override
    public RealVector subtract(double[] v) {
        final int dim = v.length;
        checkVectorDimensions(dim);
        ArrayRealVector result = new ArrayRealVector(dim);
        double[] resultData = result.data;
        for (int i = 0; i < dim; i++) {
            resultData[i] = data[i] - v[i];
        }
        return result;
    }

    







    public ArrayRealVector subtract(ArrayRealVector v) {
        return (ArrayRealVector) subtract(v.data);
    }

    
    @Override
    public ArrayRealVector map(UnivariateRealFunction function) {
        return copy().mapToSelf(function);
    }

    
    @Override
    public ArrayRealVector mapToSelf(UnivariateRealFunction function) {
        for (int i = 0; i < data.length; i++) {
            data[i] = function.value(data[i]);
        }
        return this;
    }

    
    @Override
    public RealVector mapAddToSelf(double d) {
        for (int i = 0; i < data.length; i++) {
            data[i] = data[i] + d;
        }
        return this;
    }

    
    @Override
    public RealVector mapSubtractToSelf(double d) {
        for (int i = 0; i < data.length; i++) {
            data[i] = data[i] - d;
        }
        return this;
    }

    
    @Override
    public RealVector mapMultiplyToSelf(double d) {
        for (int i = 0; i < data.length; i++) {
            data[i] = data[i] * d;
        }
        return this;
    }

    
    @Override
    public RealVector mapDivideToSelf(double d) {
        for (int i = 0; i < data.length; i++) {
            data[i] = data[i] / d;
        }
        return this;
    }

    
    public RealVector ebeMultiply(RealVector v) {
        if (v instanceof ArrayRealVector) {
            return ebeMultiply((ArrayRealVector) v);
        } else {
            checkVectorDimensions(v);
            double[] out = data.clone();
            for (int i = 0; i < data.length; i++) {
                out[i] *= v.getEntry(i);
            }
            return new ArrayRealVector(out, false);
        }
    }

    
    @Override
    public RealVector ebeMultiply(double[] v) {
        final int dim = v.length;
        checkVectorDimensions(dim);
        ArrayRealVector result = new ArrayRealVector(dim);
        double[] resultData = result.data;
        for (int i = 0; i < dim; i++) {
            resultData[i] = data[i] * v[i];
        }
        return result;
    }

    






    public ArrayRealVector ebeMultiply(ArrayRealVector v) {
        return (ArrayRealVector) ebeMultiply(v.data);
    }

    
    public RealVector ebeDivide(RealVector v) {
        if (v instanceof ArrayRealVector) {
            return ebeDivide((ArrayRealVector) v);
        } else {
            checkVectorDimensions(v);
            double[] out = data.clone();
            for (int i = 0; i < data.length; i++) {
                out[i] /= v.getEntry(i);
            }
            return new ArrayRealVector(out, false);
        }
    }

    
    @Override
    public RealVector ebeDivide(double[] v) {
        final int dim = v.length;
        checkVectorDimensions(dim);
        ArrayRealVector result = new ArrayRealVector(dim);
        double[] resultData = result.data;
        for (int i = 0; i < dim; i++) {
            resultData[i] = data[i] / v[i];
        }
        return result;
    }

    







    public ArrayRealVector ebeDivide(ArrayRealVector v) {
        return (ArrayRealVector) ebeDivide(v.data);
    }

    
    @Override
    public double[] getData() {
        return data.clone();
    }

    





    public double[] getDataRef() {
        return data;
    }

    
    @Override
    public double dotProduct(RealVector v) {
        if (v instanceof ArrayRealVector) {
            return dotProduct((ArrayRealVector) v);
        } else {
            checkVectorDimensions(v);
            double dot = 0;
            Iterator<Entry> it = v.sparseIterator();
            Entry e;
            while(it.hasNext() && (e = it.next()) != null) {
                dot += data[e.getIndex()] * e.getValue();
            }
            return dot;
        }
    }

    
    @Override
    public double dotProduct(double[] v) {
        checkVectorDimensions(v.length);
        double dot = 0;
        for (int i = 0; i < data.length; i++) {
            dot += data[i] * v[i];
        }
        return dot;
    }

    







    public double dotProduct(ArrayRealVector v) {
        return dotProduct(v.data);
    }

    
    @Override
    public double getNorm() {
        double sum = 0;
        for (double a : data) {
            sum += a * a;
        }
        return FastMath.sqrt(sum);
    }

    
    @Override
    public double getL1Norm() {
        double sum = 0;
        for (double a : data) {
            sum += FastMath.abs(a);
        }
        return sum;
    }

    
    @Override
    public double getLInfNorm() {
        double max = 0;
        for (double a : data) {
            max = FastMath.max(max, FastMath.abs(a));
        }
        return max;
    }

    
    @Override
    public double getDistance(RealVector v) {
        if (v instanceof ArrayRealVector) {
            return getDistance((ArrayRealVector) v);
        } else {
            checkVectorDimensions(v);
            double sum = 0;
            for (int i = 0; i < data.length; ++i) {
                final double delta = data[i] - v.getEntry(i);
                sum += delta * delta;
            }
            return FastMath.sqrt(sum);
        }
    }

    
    @Override
    public double getDistance(double[] v) {
        checkVectorDimensions(v.length);
        double sum = 0;
        for (int i = 0; i < data.length; ++i) {
            final double delta = data[i] - v[i];
            sum += delta * delta;
        }
        return FastMath.sqrt(sum);
    }

   














    public double getDistance(ArrayRealVector v) {
        return getDistance(v.data);
    }

    
    @Override
    public double getL1Distance(RealVector v) {
        if (v instanceof ArrayRealVector) {
            return getL1Distance((ArrayRealVector) v);
        } else {
            checkVectorDimensions(v);
            double sum = 0;
            for (int i = 0; i < data.length; ++i) {
                final double delta = data[i] - v.getEntry(i);
                sum += FastMath.abs(delta);
            }
            return sum;
        }
    }

    
    @Override
    public double getL1Distance(double[] v) {
        checkVectorDimensions(v.length);
        double sum = 0;
        for (int i = 0; i < data.length; ++i) {
            final double delta = data[i] - v[i];
            sum += FastMath.abs(delta);
        }
        return sum;
    }

    














    public double getL1Distance(ArrayRealVector v) {
        return getL1Distance(v.data);
    }

    
    @Override
    public double getLInfDistance(RealVector v) {
        if (v instanceof ArrayRealVector) {
            return getLInfDistance((ArrayRealVector) v);
        } else {
            checkVectorDimensions(v);
            double max = 0;
            for (int i = 0; i < data.length; ++i) {
                final double delta = data[i] - v.getEntry(i);
                max = FastMath.max(max, FastMath.abs(delta));
            }
            return max;
        }
    }

    
    @Override
    public double getLInfDistance(double[] v) {
        checkVectorDimensions(v.length);
        double max = 0;
        for (int i = 0; i < data.length; ++i) {
            final double delta = data[i] - v[i];
            max = FastMath.max(max, FastMath.abs(delta));
        }
        return max;
    }

    













    public double getLInfDistance(ArrayRealVector v) {
        return getLInfDistance(v.data);
    }

    
    @Override
    public RealVector unitVector() {
        final double norm = getNorm();
        if (norm == 0) {
            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
        }
        return mapDivide(norm);
    }

    
    @Override
    public void unitize() {
        final double norm = getNorm();
        if (norm == 0) {
            throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
        }
        mapDivideToSelf(norm);
    }

    
    public RealVector projection(RealVector v) {
        return v.mapMultiply(dotProduct(v) / v.dotProduct(v));
    }

    
    @Override
    public RealVector projection(double[] v) {
        return projection(new ArrayRealVector(v, false));
    }

    







    public ArrayRealVector projection(ArrayRealVector v) {
        return (ArrayRealVector) v.mapMultiply(dotProduct(v) / v.dotProduct(v));
    }

    
    @Override
    public RealMatrix outerProduct(RealVector v) {
        if (v instanceof ArrayRealVector) {
            return outerProduct((ArrayRealVector) v);
        } else {
            final int m = data.length;
            final int n = v.getDimension();
            final RealMatrix out = MatrixUtils.createRealMatrix(m, n);
            for (int i = 0; i < m; i++) {
                for (int j = 0; j < n; j++) {
                    out.setEntry(i, j, data[i] * v.getEntry(j));
                }
            }
            return out;
        }
    }

    






    public RealMatrix outerProduct(ArrayRealVector v) {
        return outerProduct(v.data);
    }

    
    @Override
    public RealMatrix outerProduct(double[] v) {
        final int m = data.length;
        final int n = v.length;
        final RealMatrix out = MatrixUtils.createRealMatrix(m, n);
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                out.setEntry(i, j, data[i] * v[j]);
            }
        }
        return out;
    }

    
    public double getEntry(int index) {
        return data[index];
    }

    
    public int getDimension() {
        return data.length;
    }

    
    public RealVector append(RealVector v) {
        try {
            return new ArrayRealVector(this, (ArrayRealVector) v);
        } catch (ClassCastException cce) {
            return new ArrayRealVector(this, v);
        }
    }

    





    public ArrayRealVector append(ArrayRealVector v) {
        return new ArrayRealVector(this, v);
    }

    
    public RealVector append(double in) {
        final double[] out = new double[data.length + 1];
        System.arraycopy(data, 0, out, 0, data.length);
        out[data.length] = in;
        return new ArrayRealVector(out, false);
    }

    
    public RealVector append(double[] in) {
        return new ArrayRealVector(this, in);
    }

    
    public RealVector getSubVector(int index, int n) {
        ArrayRealVector out = new ArrayRealVector(n);
        try {
            System.arraycopy(data, index, out.data, 0, n);
        } catch (IndexOutOfBoundsException e) {
            checkIndex(index);
            checkIndex(index + n - 1);
        }
        return out;
    }

    
    public void setEntry(int index, double value) {
        try {
            data[index] = value;
        } catch (IndexOutOfBoundsException e) {
            checkIndex(index);
        }
    }

    
    @Override
    public void setSubVector(int index, RealVector v) {
        try {
            try {
                set(index, (ArrayRealVector) v);
            } catch (ClassCastException cce) {
                for (int i = index; i < index + v.getDimension(); ++i) {
                    data[i] = v.getEntry(i - index);
                }
            }
        } catch (IndexOutOfBoundsException e) {
            checkIndex(index);
            checkIndex(index + v.getDimension() - 1);
        }
    }

    
    @Override
    public void setSubVector(int index, double[] v) {
        try {
            System.arraycopy(v, 0, data, index, v.length);
        } catch (IndexOutOfBoundsException e) {
            checkIndex(index);
            checkIndex(index + v.length - 1);
        }
    }

    







    public void set(int index, ArrayRealVector v) {
        setSubVector(index, v.data);
    }

    
    @Override
    public void set(double value) {
        Arrays.fill(data, value);
    }

    
    @Override
    public double[] toArray(){
        return data.clone();
    }

    
    @Override
    public String toString(){
        return DEFAULT_FORMAT.format(this);
    }

    






    @Override
    protected void checkVectorDimensions(RealVector v) {
        checkVectorDimensions(v.getDimension());
    }

    






    @Override
    protected void checkVectorDimensions(int n) {
        if (data.length != n) {
            throw new DimensionMismatchException(data.length, n);
        }
    }

    





    public boolean isNaN() {
        for (double v : data) {
            if (Double.isNaN(v)) {
                return true;
            }
        }
        return false;
    }

    






    public boolean isInfinite() {
        if (isNaN()) {
            return false;
        }

        for (double v : data) {
            if (Double.isInfinite(v)) {
                return true;
            }
        }

        return false;
    }

    













    @Override
    public boolean equals(Object other) {
        if (this == other) {
            return true;
        }

        if (other == null || !(other instanceof RealVector)) {
            return false;
        }

        RealVector rhs = (RealVector) other;
        if (data.length != rhs.getDimension()) {
            return false;
        }

        if (rhs.isNaN()) {
            return this.isNaN();
        }

        for (int i = 0; i < data.length; ++i) {
            if (data[i] != rhs.getEntry(i)) {
                return false;
            }
        }
        return true;
    }

    





    @Override
    public int hashCode() {
        if (isNaN()) {
            return 9;
        }
        return MathUtils.hash(data);
    }
}
