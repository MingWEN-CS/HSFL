22a23
> import org.apache.commons.math.analysis.UnivariateRealFunction;
283c284
<     public AbstractRealVector copy() {
---
>     public ArrayRealVector copy() {
369,409c370,371
<     public RealVector mapAddToSelf(double d) {
<         for (int i = 0; i < data.length; i++) {
<             data[i] = data[i] + d;
<         }
<         return this;
<     }
< 
<     
<     @Override
<     public RealVector mapSubtractToSelf(double d) {
<         for (int i = 0; i < data.length; i++) {
<             data[i] = data[i] - d;
<         }
<         return this;
<     }
< 
<     
<     @Override
<     public RealVector mapMultiplyToSelf(double d) {
<         for (int i = 0; i < data.length; i++) {
<             data[i] = data[i] * d;
<         }
<         return this;
<     }
< 
<     
<     @Override
<     public RealVector mapDivideToSelf(double d) {
<         for (int i = 0; i < data.length; i++) {
<             data[i] = data[i] / d;
<         }
<         return this;
<     }
< 
<     
<     @Override
<     public RealVector mapPowToSelf(double d) {
<         for (int i = 0; i < data.length; i++) {
<             data[i] = FastMath.pow(data[i], d);
<         }
<         return this;
---
>     public ArrayRealVector map(UnivariateRealFunction function) {
>         return copy().mapToSelf(function);
414c376
<     public RealVector mapExpToSelf() {
---
>     public ArrayRealVector mapToSelf(UnivariateRealFunction function) {
416c378
<             data[i] = FastMath.exp(data[i]);
---
>             data[i] = function.value(data[i]);
423,585c385
<     public RealVector mapExpm1ToSelf() {
<         for (int i = 0; i < data.length; i++) {
<             data[i] = FastMath.expm1(data[i]);
<         }
<         return this;
<     }
< 
<     
<     @Override
<     public RealVector mapLogToSelf() {
<         for (int i = 0; i < data.length; i++) {
<             data[i] = FastMath.log(data[i]);
<         }
<         return this;
<     }
< 
<     
<     @Override
<     public RealVector mapLog10ToSelf() {
<         for (int i = 0; i < data.length; i++) {
<             data[i] = FastMath.log10(data[i]);
<         }
<         return this;
<     }
< 
<     
<     @Override
<     public RealVector mapLog1pToSelf() {
<         for (int i = 0; i < data.length; i++) {
<             data[i] = FastMath.log1p(data[i]);
<         }
<         return this;
<     }
< 
<     
<     @Override
<     public RealVector mapCoshToSelf() {
<         for (int i = 0; i < data.length; i++) {
<             data[i] = FastMath.cosh(data[i]);
<         }
<         return this;
<     }
< 
<     
<     @Override
<     public RealVector mapSinhToSelf() {
<         for (int i = 0; i < data.length; i++) {
<             data[i] = FastMath.sinh(data[i]);
<         }
<         return this;
<     }
< 
<     
<     @Override
<     public RealVector mapTanhToSelf() {
<         for (int i = 0; i < data.length; i++) {
<             data[i] = FastMath.tanh(data[i]);
<         }
<         return this;
<     }
< 
<     
<     @Override
<     public RealVector mapCosToSelf() {
<         for (int i = 0; i < data.length; i++) {
<             data[i] = FastMath.cos(data[i]);
<         }
<         return this;
<     }
< 
<     
<     @Override
<     public RealVector mapSinToSelf() {
<         for (int i = 0; i < data.length; i++) {
<             data[i] = FastMath.sin(data[i]);
<         }
<         return this;
<     }
< 
<     
<     @Override
<     public RealVector mapTanToSelf() {
<         for (int i = 0; i < data.length; i++) {
<             data[i] = FastMath.tan(data[i]);
<         }
<         return this;
<     }
< 
<     
<     @Override
<     public RealVector mapAcosToSelf() {
<         for (int i = 0; i < data.length; i++) {
<             data[i] = FastMath.acos(data[i]);
<         }
<         return this;
<     }
< 
<     
<     @Override
<     public RealVector mapAsinToSelf() {
<         for (int i = 0; i < data.length; i++) {
<             data[i] = FastMath.asin(data[i]);
<         }
<         return this;
<     }
< 
<     
<     @Override
<     public RealVector mapAtanToSelf() {
<         for (int i = 0; i < data.length; i++) {
<             data[i] = FastMath.atan(data[i]);
<         }
<         return this;
<     }
< 
<     
<     @Override
<     public RealVector mapInvToSelf() {
<         for (int i = 0; i < data.length; i++) {
<             data[i] = 1.0 / data[i];
<         }
<         return this;
<     }
< 
<     
<     @Override
<     public RealVector mapAbsToSelf() {
<         for (int i = 0; i < data.length; i++) {
<             data[i] = FastMath.abs(data[i]);
<         }
<         return this;
<     }
< 
<     
<     @Override
<     public RealVector mapSqrtToSelf() {
<         for (int i = 0; i < data.length; i++) {
<             data[i] = FastMath.sqrt(data[i]);
<         }
<         return this;
<     }
< 
<     
<     @Override
<     public RealVector mapCbrtToSelf() {
<         for (int i = 0; i < data.length; i++) {
<             data[i] = FastMath.cbrt(data[i]);
<         }
<         return this;
<     }
< 
<     
<     @Override
<     public RealVector mapCeilToSelf() {
<         for (int i = 0; i < data.length; i++) {
<             data[i] = FastMath.ceil(data[i]);
<         }
<         return this;
<     }
< 
<     
<     @Override
<     public RealVector mapFloorToSelf() {
---
>     public RealVector mapAddToSelf(double d) {
587c387
<             data[i] = FastMath.floor(data[i]);
---
>             data[i] = data[i] + d;
594c394
<     public RealVector mapRintToSelf() {
---
>     public RealVector mapSubtractToSelf(double d) {
596c396
<             data[i] = FastMath.rint(data[i]);
---
>             data[i] = data[i] - d;
603c403
<     public RealVector mapSignumToSelf() {
---
>     public RealVector mapMultiplyToSelf(double d) {
605c405
<             data[i] = FastMath.signum(data[i]);
---
>             data[i] = data[i] * d;
612c412
<     public RealVector mapUlpToSelf() {
---
>     public RealVector mapDivideToSelf(double d) {
614c414
<             data[i] = FastMath.ulp(data[i]);
---
>             data[i] = data[i] / d;
