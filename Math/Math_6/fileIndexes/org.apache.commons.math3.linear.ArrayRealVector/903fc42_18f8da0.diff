23c23,26
< import org.apache.commons.math.MathRuntimeException;
---
> import org.apache.commons.math.exception.NullArgumentException;
> import org.apache.commons.math.exception.DimensionMismatchException;
> import org.apache.commons.math.exception.NumberIsTooLargeException;
> import org.apache.commons.math.exception.MathArithmeticException;
34d36
< 
37d38
< 
41d41
< 
61a62
> 
70a72
> 
79a82,83
> 
> 
95a100,101
> 
> 
96a103,105
>         if (d == null) {
>             throw new NullArgumentException();
>         }
105a115,118
> 
> 
> 
> 
106a120,122
>         if (d == null) {
>             throw new NullArgumentException();
>         }
108,109c124
<             throw MathRuntimeException.createIllegalArgumentException(
<                   LocalizedFormats.POSITION_SIZE_MISMATCH_INPUT_ARRAY, pos, size, d.length);
---
>             throw new NumberIsTooLargeException(pos + size, d.length, true);
131a147,150
> 
> 
> 
> 
132a152,154
>         if (d == null) {
>             throw new NullArgumentException();
>         }
134,135c156
<             throw MathRuntimeException.createIllegalArgumentException(
<                   LocalizedFormats.POSITION_SIZE_MISMATCH_INPUT_ARRAY, pos, size, d.length);
---
>             throw new NumberIsTooLargeException(pos + size, d.length, true);
139c160
<             data[i-pos] = d[i].doubleValue();
---
>             data[i - pos] = d[i].doubleValue();
146a168,169
> 
> 
147a171,173
>         if (v == null) {
>             throw new NullArgumentException();
>         }
157a184,185
> 
> 
166a195,196
> 
> 
718,719c748,750
<     public double dotProduct(ArrayRealVector v)
<         throws IllegalArgumentException {
---
> 
> 
>     public double dotProduct(ArrayRealVector v) {
796,797c827,829
<     public double getDistance(ArrayRealVector v)
<         throws IllegalArgumentException {
---
> 
> 
>     public double getDistance(ArrayRealVector v) {
803,804c835
<     public double getL1Distance(RealVector v)
<         throws IllegalArgumentException {
---
>     public double getL1Distance(RealVector v) {
844,845c875,877
<     public double getL1Distance(ArrayRealVector v)
<         throws IllegalArgumentException {
---
> 
> 
>     public double getL1Distance(ArrayRealVector v) {
851,852c883
<     public double getLInfDistance(RealVector v)
<         throws IllegalArgumentException {
---
>     public double getLInfDistance(RealVector v) {
892,893c923,924
<     public double getLInfDistance(ArrayRealVector v)
<         throws IllegalArgumentException {
---
> 
>     public double getLInfDistance(ArrayRealVector v) {
899c930
<     public RealVector unitVector() throws ArithmeticException {
---
>     public RealVector unitVector() {
902c933
<             throw MathRuntimeException.createArithmeticException(LocalizedFormats.ZERO_NORM);
---
>             throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
909c940
<     public void unitize() throws ArithmeticException {
---
>     public void unitize() {
912c943
<             throw MathRuntimeException.createArithmeticException(LocalizedFormats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR);
---
>             throw new MathArithmeticException(LocalizedFormats.ZERO_NORM);
928c959,962
<    
---
>     
> 
> 
> 
983c1017
<     public double getEntry(int index) throws MatrixIndexException {
---
>     public double getEntry(int index) {
1005a1040
> 
1080,1081c1115
<     public void set(int index, ArrayRealVector v)
<         throws MatrixIndexException {
---
>     public void set(int index, ArrayRealVector v) {
1108a1143
> 
1110,1111c1145
<     protected void checkVectorDimensions(RealVector v)
<         throws IllegalArgumentException {
---
>     protected void checkVectorDimensions(RealVector v) {
1123,1124c1157
<     protected void checkVectorDimensions(int n)
<         throws IllegalArgumentException {
---
>     protected void checkVectorDimensions(int n) {
1126,1128c1159
<             throw MathRuntimeException.createIllegalArgumentException(
<                     LocalizedFormats.VECTOR_LENGTH_MISMATCH,
<                     data.length, n);
---
>             throw new DimensionMismatchException(data.length, n);
1135a1167,1168
> 
> 
1151d1183
<     public boolean isInfinite() {
1152a1185
>     public boolean isInfinite() {
1164d1196
< 
1181,1185d1212
< 
< 
< 
< 
< 
1187a1215,1217
>         if (this == other) {
>             return true;
>         }
1189,1195c1219,1221
<       if (this == other) {
<         return true;
<       }
< 
<       if (other == null || !(other instanceof RealVector)) {
<         return false;
<       }
---
>         if (other == null || !(other instanceof RealVector)) {
>             return false;
>         }
1196a1223,1226
>         RealVector rhs = (RealVector) other;
>         if (data.length != rhs.getDimension()) {
>             return false;
>         }
1198,1201c1228,1230
<       RealVector rhs = (RealVector) other;
<       if (data.length != rhs.getDimension()) {
<         return false;
<       }
---
>         if (rhs.isNaN()) {
>             return this.isNaN();
>         }
1203,1209c1232,1235
<       if (rhs.isNaN()) {
<         return this.isNaN();
<       }
< 
<       for (int i = 0; i < data.length; ++i) {
<         if (data[i] != rhs.getEntry(i)) {
<           return false;
---
>         for (int i = 0; i < data.length; ++i) {
>             if (data[i] != rhs.getEntry(i)) {
>                 return false;
>             }
1211,1212c1237
<       }
<       return true;
---
>         return true;
1219a1245
> 
1227d1252
< 
