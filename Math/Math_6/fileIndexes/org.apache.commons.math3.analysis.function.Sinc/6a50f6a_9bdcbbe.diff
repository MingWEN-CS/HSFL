20d19
< import org.apache.commons.math3.analysis.UnivariateFunction;
21a21,24
> import org.apache.commons.math3.analysis.FunctionUtils;
> import org.apache.commons.math3.analysis.UnivariateFunction;
> import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
> import org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiable;
35c38
< public class Sinc implements DifferentiableUnivariateFunction {
---
> public class Sinc implements UnivariateDifferentiable, DifferentiableUnivariateFunction {
41c44,63
<     private static final double SHORTCUT = 1e-9;
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     private static final double SHORTCUT = 6.0e-3;
63,66c85,90
<     public double value(double x) {
<         if (normalized) {
<             final double piTimesX = Math.PI * x;
<             return sinc(piTimesX);
---
>     public double value(final double x) {
>         final double scaledX = normalized ? FastMath.PI * x : x;
>         if (FastMath.abs(scaledX) <= SHORTCUT) {
>             
>             final double scaledX2 = scaledX * scaledX;
>             return ((scaledX2 - 20) * scaledX2 + 120) / 120;
68c92,93
<             return sinc(x);
---
>             
>             return FastMath.sin(scaledX) / scaledX;
72a98,100
> 
> 
>     @Deprecated
74,79c102,126
<         if (normalized) {
<             return new UnivariateFunction() {
<                 
<                 public double value(double x) {
<                     final double piTimesX = Math.PI * x;
<                     return sincDerivative(piTimesX);
---
>         return FunctionUtils.toDifferentiableUnivariateFunction(this).derivative();
>     }
> 
>     
> 
> 
>     public DerivativeStructure value(final DerivativeStructure t) {
> 
>         final double scaledX  = (normalized ? FastMath.PI : 1) * t.getValue();
>         final double scaledX2 = scaledX * scaledX;
> 
>         double[] f = new double[t.getOrder() + 1];
> 
>         if (FastMath.abs(scaledX) <= SHORTCUT) {
> 
>             for (int i = 0; i < f.length; ++i) {
>                 final int k = i / 2;
>                 if ((i & 0x1) == 0) {
>                     
>                     f[i] = (((k & 0x1) == 0) ? 1 : -1) *
>                            (1.0 / (i + 1) - scaledX2 * (1.0 / (2 * i + 6) - scaledX2 / (24 * i + 120)));
>                 } else {
>                     
>                     f[i] = (((k & 0x1) == 0) ? -scaledX : scaledX) *
>                            (1.0 / (i + 2) - scaledX2 * (1.0 / (6 * i + 24) - scaledX2 / (120 * i + 720)));
81c128,129
<             };
---
>             }
> 
83c131,156
<             return new UnivariateFunction() {
---
> 
>             final double inv = 1 / scaledX;
>             final double cos = FastMath.cos(scaledX);
>             final double sin = FastMath.sin(scaledX);
> 
>             f[0] = inv * sin;
> 
>             
>             
>             
>             
>             
>             
>             
>             
>             
>             
>             final double[] sc = new double[f.length];
>             sc[0] = 1;
> 
>             double coeff = inv;
>             for (int n = 1; n < f.length; ++n) {
> 
>                 double s = 0;
>                 double c = 0;
> 
85,86c158,167
<                 public double value(double x) {
<                     return sincDerivative(x);
---
>                 final int kStart;
>                 if ((n & 0x1) == 0) {
>                     
>                     sc[n] = 0;
>                     kStart = n;
>                 } else {
>                     
>                     sc[n] = sc[n - 1];
>                     c = sc[n];
>                     kStart = n - 1;
88,90d168
<             };
<         }
<     }
92c170,171
<     
---
>                 
>                 for (int k = kStart; k > 1; k -= 2) {
93a173,179
>                     
>                     sc[k]     = (k - n) * sc[k] - sc[k - 1];
>                     s         = s * scaledX2 + sc[k];
> 
>                     
>                     sc[k - 1] = (k - 1 - n) * sc[k - 1] + sc[k -2];
>                     c         = c * scaledX2 + sc[k - 1];
94a181,183
>                 }
>                 sc[0] *= -n;
>                 s      = s * scaledX2 + sc[0];
96,103c185,186
<     private static double sinc(double x) {
<         
<         
<         
<         
<         return FastMath.abs(x) < SHORTCUT ? 1 :
<             FastMath.sin(x) / x;
<     }
---
>                 coeff *= inv;
>                 f[n]   = coeff * (s * sin + c * scaledX * cos);
105c188,190
<     
---
>             }
> 
>         }
106a192,198
>         if (normalized) {
>             double scale = FastMath.PI;
>             for (int i = 1; i < f.length; ++i) {
>                 f[i]  *= scale;
>                 scale *= FastMath.PI;
>             }
>         }
107a200
>         return t.compose(f);
109,115d201
<     private static double sincDerivative(double x) {
<         
<         
<         
<         
<         return FastMath.abs(x) < SHORTCUT ? 0 :
<             (FastMath.cos(x) - FastMath.sin(x) / x) / x;
116a203
> 
