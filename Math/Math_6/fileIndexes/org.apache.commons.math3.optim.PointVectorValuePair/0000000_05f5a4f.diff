1a2,147
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> package org.apache.commons.math3.optim;
> 
> import java.io.Serializable;
> import org.apache.commons.math3.util.Pair;
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> public class PointVectorValuePair extends Pair<double[], double[]> implements Serializable {
>     
>     private static final long serialVersionUID = 20120513L;
> 
>     
> 
> 
> 
> 
> 
> 
>     public PointVectorValuePair(final double[] point,
>                                 final double[] value) {
>         this(point, value, true);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     public PointVectorValuePair(final double[] point,
>                                 final double[] value,
>                                 final boolean copyArray) {
>         super(copyArray ?
>               ((point == null) ? null :
>                point.clone()) :
>               point,
>               copyArray ?
>               ((value == null) ? null :
>                value.clone()) :
>               value);
>     }
> 
>     
> 
> 
> 
> 
>     public double[] getPoint() {
>         final double[] p = getKey();
>         return p == null ? null : p.clone();
>     }
> 
>     
> 
> 
> 
> 
>     public double[] getPointRef() {
>         return getKey();
>     }
> 
>     
> 
> 
> 
> 
>     @Override
>     public double[] getValue() {
>         final double[] v = super.getValue();
>         return v == null ? null : v.clone();
>     }
> 
>     
> 
> 
> 
> 
> 
>     public double[] getValueRef() {
>         return super.getValue();
>     }
> 
>     
> 
> 
> 
>     private Object writeReplace() {
>         return new DataTransferObject(getKey(), getValue());
>     }
> 
>     
>     private static class DataTransferObject implements Serializable {
>         
>         private static final long serialVersionUID = 20120513L;
>         
> 
> 
> 
>         private final double[] point;
>         
> 
> 
> 
>         private final double[] value;
> 
>         
> 
> 
> 
>         public DataTransferObject(final double[] point, final double[] value) {
>             this.point = point.clone();
>             this.value = value.clone();
>         }
> 
>         
> 
> 
>         private Object readResolve() {
>             return new PointVectorValuePair(point, value, false);
>         }
>     }
> }
