















package org.apache.commons.math.linear;

import java.util.Iterator;

import org.apache.commons.math.analysis.UnivariateRealFunction;

























public interface RealVector {
    













    RealVector mapToSelf(UnivariateRealFunction function);

    










    RealVector map(UnivariateRealFunction function);

    
    public abstract class Entry {
        
        private int index;

        




        public abstract double getValue();
        




        public abstract void setValue(double value);
        




        public int getIndex() {
            return index;
        }
        




        public void setIndex(int index) {
            this.index = index;
        }
    }

    





    Iterator<Entry> iterator();

    










    Iterator<Entry> sparseIterator();

    




    RealVector copy();

    







    RealVector add(RealVector v);

    







    RealVector add(double[] v);


    







    RealVector subtract(RealVector v);

    







    RealVector subtract(double[] v);

    





    RealVector mapAdd(double d);

    






    RealVector mapAddToSelf(double d);

    





    RealVector mapSubtract(double d);

    






    RealVector mapSubtractToSelf(double d);

    





    RealVector mapMultiply(double d);

    






    RealVector mapMultiplyToSelf(double d);

    





    RealVector mapDivide(double d);

    






    RealVector mapDivideToSelf(double d);

    









    RealVector mapPow(double d);

    










    RealVector mapPowToSelf(double d);

    






    RealVector ebeMultiply(RealVector v);

    






    RealVector ebeMultiply(double[] v);

    






    RealVector ebeDivide(RealVector v);

    






    RealVector ebeDivide(double[] v);

    



     double[] getData();

    






    double dotProduct(RealVector v);

    






    double dotProduct(double[] v);

    








    double getNorm();

    








    double getL1Norm();

    








    double getLInfNorm();

    












    double getDistance(RealVector v);

    












    double getDistance(double[] v);

    












    double getL1Distance(RealVector v);

    












    double getL1Distance(double[] v);

    












    double getLInfDistance(RealVector v);

    












    double getLInfDistance(double[] v);

    




    RealVector unitVector();

    




    void unitize();

    





    RealVector projection(RealVector v);

    





    RealVector projection(double[] v);

    






    RealMatrix outerProduct(RealVector v);

    






    RealMatrix outerProduct(double[] v);

    








    double getEntry(int index);

    







    void setEntry(int index, double value);

    



    int getDimension();

    




    RealVector append(RealVector v);

    




    RealVector append(double d);

    




    RealVector append(double[] a);

    







    RealVector getSubVector(int index, int n);

    







    void setSubVector(int index, RealVector v);

    







    void setSubVector(int index, double[] v);

    



    void set(double value);

    





    double[] toArray();

    




    boolean isNaN();

    





    boolean isInfinite();
}
