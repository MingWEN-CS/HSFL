24a25
> import org.apache.commons.math3.exception.NumberIsTooSmallException;
200a202,232
>     protected void checkIndices(final int start, final int end) {
>         final int dim = getDimension();
>         if ((start < 0) || (start >= dim)) {
>             throw new OutOfRangeException(LocalizedFormats.INDEX,
>                                           Integer.valueOf(start),
>                                           Integer.valueOf(0),
>                                           Integer.valueOf(dim - 1));
>         }
>         if ((end < 0) || (end >= dim)) {
>             throw new OutOfRangeException(LocalizedFormats.INDEX,
>                                           Integer.valueOf(end),
>                                           Integer.valueOf(0),
>                                           Integer.valueOf(dim - 1));
>         }
>         if (end < start){
>             
>             throw new NumberIsTooSmallException(LocalizedFormats.INITIAL_ROW_AFTER_FINAL_ROW,
>                                                 Integer.valueOf(end),
>                                                 Integer.valueOf(start),
>                                                 false);
>         }
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
809a842,882
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public double walkInDefaultOrder(final RealVectorPreservingVisitor visitor) {
>         final int dim = getDimension();
>         visitor.start(dim, 0, dim - 1);
>         for (int i = 0; i < dim; i++) {
>             visitor.visit(i, getEntry(i));
>         }
>         return visitor.end();
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public double walkInDefaultOrder(final RealVectorPreservingVisitor visitor,
>                               int start, int end) {
>         checkIndices(start, end);
>         visitor.start(getDimension(), start, end);
>         for (int i = start; i <= end; i++) {
>             visitor.visit(i, getEntry(i));
>         }
>         return visitor.end();
>     }
> 
812a886,917
> 
> 
> 
> 
> 
> 
> 
> 
>     public double walkInOptimizedOrder(final RealVectorPreservingVisitor visitor) {
>         return walkInDefaultOrder(visitor);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public double walkInOptimizedOrder(final RealVectorPreservingVisitor visitor,
>                                        int start, int end) {
>         return walkInDefaultOrder(visitor, start, end);
>     }
> 
>     
