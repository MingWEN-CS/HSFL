















package org.apache.commons.math.random;

import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.util.LocalizedFormats;







public abstract class BitsStreamGenerator implements RandomGenerator {

    
    private double nextGaussian;

    

    public BitsStreamGenerator() {
        nextGaussian = Double.NaN;
    }

    
    public abstract void setSeed(int seed);

    
    public abstract void setSeed(int[] seed);

    
    public abstract void setSeed(long seed);

    








    protected abstract int next(int bits);

    
    public boolean nextBoolean() {
        return next(1) != 0;
    }

    
    public void nextBytes(byte[] bytes) {
        int i = 0;
        final int iEnd = bytes.length - 3;
        while (i < iEnd) {
            final int random = next(32);
            bytes[i]     = (byte) (random & 0xff);
            bytes[i + 1] = (byte) ((random >>  8) & 0xff);
            bytes[i + 2] = (byte) ((random >> 16) & 0xff);
            bytes[i + 3] = (byte) ((random >> 24) & 0xff);
            i += 4;
        }
        int random = next(32);
        while (i < bytes.length) {
            bytes[i++] = (byte) (random & 0xff);
            random     = random >> 8;
        }
    }

    
    public double nextDouble() {
        final long high = ((long) next(26)) << 26;
        final int  low  = next(26);
        return (high | low) * 0x1.0p-52d;
    }

    
    public float nextFloat() {
        return next(23) * 0x1.0p-23f;
    }

    
    public double nextGaussian() {

        final double random;
        if (Double.isNaN(nextGaussian)) {
            
            final double x = nextDouble();
            final double y = nextDouble();
            final double alpha = 2 * Math.PI * x;
            final double r      = Math.sqrt(-2 * Math.log(y));
            random       = r * Math.cos(alpha);
            nextGaussian = r * Math.sin(alpha);
        } else {
            
            random = nextGaussian;
            nextGaussian = Double.NaN;
        }

        return random;

    }

    
    public int nextInt() {
        return next(32);
    }

    
    public int nextInt(int n) throws IllegalArgumentException {

        if (n < 1) {
            throw MathRuntimeException.createIllegalArgumentException(
                  LocalizedFormats.NOT_POSITIVE_UPPER_BOUND, n);
        }

        
        int mask = n;
        mask |= mask >> 1;
        mask |= mask >> 2;
        mask |= mask >> 4;
        mask |= mask >> 8;
        mask |= mask >> 16;

        while (true) {
            final int random = next(32) & mask;
            if (random < n) {
                return random;
            }
        }

    }

    
    public long nextLong() {
        final long high  = ((long) next(32)) << 32;
        final long  low  = ((long) next(32)) & 0xffffffffL;
        return high | low;
    }

}
