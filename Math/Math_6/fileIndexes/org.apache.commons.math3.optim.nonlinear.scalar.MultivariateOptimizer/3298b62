















package org.apache.commons.math3.optim.nonlinear.scalar;

import org.apache.commons.math3.analysis.MultivariateFunction;
import org.apache.commons.math3.optim.BaseMultivariateOptimizer;
import org.apache.commons.math3.optim.OptimizationData;
import org.apache.commons.math3.optim.GoalType;
import org.apache.commons.math3.optim.ConvergenceChecker;
import org.apache.commons.math3.optim.PointValuePair;
import org.apache.commons.math3.optim.ObjectiveFunction;
import org.apache.commons.math3.exception.TooManyEvaluationsException;







public abstract class MultivariateOptimizer
    extends BaseMultivariateOptimizer<PointValuePair> {
    
    private MultivariateFunction function;
    
    private GoalType goal;

    


    protected MultivariateOptimizer(ConvergenceChecker<PointValuePair> checker) {
        super(checker);
    }

    














    @Override
    public PointValuePair optimize(OptimizationData... optData)
        throws TooManyEvaluationsException {
         
        parseOptimizationData(optData);
        
        return super.optimize(optData);
    }

    










    private void parseOptimizationData(OptimizationData... optData) {
        
        
        for (OptimizationData data : optData) {
            if (data instanceof GoalType) {
                goal = (GoalType) data;
                continue;
            }
            if  (data instanceof ObjectiveFunction) {
                function = ((ObjectiveFunction) data).getObjectiveFunction();
                continue;
            }
        }
    }

    


    public GoalType getGoalType() {
        return goal;
    }

    









    protected double computeObjectiveValue(double[] params) {
        super.incrementEvaluationCount();
        return function.value(params);
    }
}
