19a20,21
> import java.util.ArrayList;
> 
149a152,211
>     }    
> 
>     
>     @Override
>     public RealMatrix power(final int p) {
>         if (p < 0) {
>             throw new IllegalArgumentException("p must be >= 0");
>         }
>         
>         if (!isSquare()) {
>             throw new NonSquareMatrixException(getRowDimension(), getColumnDimension());
>         }
>         
>         if (p == 0) {
>             return MatrixUtils.createRealIdentityMatrix(this.getRowDimension());
>         }
>         
>         if (p == 1) {
>             return this.copy();
>         }
> 
>         final int power = p - 1;
>         
>         
> 
> 
> 
> 
>         
>         
>         final char[] binaryRepresentation = Integer.toBinaryString(power).toCharArray();       
>         final ArrayList<Integer> nonZeroPositions = new ArrayList<Integer>();
>         int maxI = -1;
>         
>         for (int i = 0; i < binaryRepresentation.length; ++i) {            
>             if (binaryRepresentation[i] == '1') {
>                 final int pos = binaryRepresentation.length - i - 1;
>                 nonZeroPositions.add(pos);
>                 
>                 
>                 if (maxI == -1) {
>                     maxI = pos;
>                 }
>             }
>         }
>         
>         RealMatrix[] results = new RealMatrix[maxI + 1];
>         results[0] = this.copy();
>         
>         for (int i = 1; i <= maxI; ++i) {
>             results[i] = results[i-1].multiply(results[i-1]);
>         }
>         
>         RealMatrix result = this.copy();
>         
>         for (Integer i : nonZeroPositions) {
>             result = result.multiply(results[i]);
>         }        
>         
>         return result;
