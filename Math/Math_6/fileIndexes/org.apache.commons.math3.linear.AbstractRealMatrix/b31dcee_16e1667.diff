38,39d37
< 
< 
43,51c41
<     @Deprecated
<     private DecompositionSolver lu;
< 
<     
< 
< 
<     protected AbstractRealMatrix() {
<         lu = null;
<     }
---
>     protected AbstractRealMatrix() {}
67d56
<         lu = null;
370,371d358
< 
<         lu = null;
543,559d529
<     @Deprecated
<     public RealMatrix inverse()
<         throws InvalidMatrixException {
<         if (lu == null) {
<             lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();
<         }
<         return lu.getInverse();
<     }
< 
<     
<     @Deprecated
<     public double getDeterminant()
<         throws InvalidMatrixException {
<         return new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getDeterminant();
<     }
< 
<     
565,573d534
<     @Deprecated
<     public boolean isSingular() {
<         if (lu == null) {
<             lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();
<        }
<         return !lu.isNonSingular();
<     }
< 
<     
701d661
<         lu = null;
734d693
<         lu = null;
767d725
<         lu = null;
800d757
<         lu = null;
846,892d802
<     }
< 
<     
<     @Deprecated
<     public double[] solve(final double[] b)
<         throws IllegalArgumentException, InvalidMatrixException {
<         if (lu == null) {
<             lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();
<         }
<         return lu.solve(b);
<     }
< 
<     
<     @Deprecated
<     public RealMatrix solve(final RealMatrix b)
<         throws IllegalArgumentException, InvalidMatrixException  {
<         if (lu == null) {
<             lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();
<         }
<         return lu.solve(b);
<     }
< 
<     
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<     @Deprecated
<     public void luDecompose()
<         throws InvalidMatrixException {
<         if (lu == null) {
<             lu = new LUDecompositionImpl(this, MathUtils.SAFE_MIN).getSolver();
<         }
