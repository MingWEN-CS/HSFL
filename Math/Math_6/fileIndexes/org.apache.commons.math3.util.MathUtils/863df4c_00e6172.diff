396,497d395
<     public static boolean equals(float[] x, float[] y) {
<         if ((x == null) || (y == null)) {
<             return !((x == null) ^ (y == null));
<         }
<         if (x.length != y.length) {
<             return false;
<         }
<         for (int i = 0; i < x.length; ++i) {
<             if (!Precision.equals(x[i], y[i])) {
<                 return false;
<             }
<         }
<         return true;
<     }
< 
<     
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<     public static boolean equalsIncludingNaN(float[] x, float[] y) {
<         if ((x == null) || (y == null)) {
<             return !((x == null) ^ (y == null));
<         }
<         if (x.length != y.length) {
<             return false;
<         }
<         for (int i = 0; i < x.length; ++i) {
<             if (!Precision.equalsIncludingNaN(x[i], y[i])) {
<                 return false;
<             }
<         }
<         return true;
<     }
< 
<     
< 
< 
< 
< 
< 
< 
< 
< 
< 
<     public static boolean equals(double[] x, double[] y) {
<         if ((x == null) || (y == null)) {
<             return !((x == null) ^ (y == null));
<         }
<         if (x.length != y.length) {
<             return false;
<         }
<         for (int i = 0; i < x.length; ++i) {
<             if (!Precision.equals(x[i], y[i])) {
<                 return false;
<             }
<         }
<         return true;
<     }
< 
<     
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<     public static boolean equalsIncludingNaN(double[] x, double[] y) {
<         if ((x == null) || (y == null)) {
<             return !((x == null) ^ (y == null));
<         }
<         if (x.length != y.length) {
<             return false;
<         }
<         for (int i = 0; i < x.length; ++i) {
<             if (!Precision.equalsIncludingNaN(x[i], y[i])) {
<                 return false;
<             }
<         }
<         return true;
<     }
< 
<     
< 
< 
< 
< 
< 
< 
< 
< 
< 
