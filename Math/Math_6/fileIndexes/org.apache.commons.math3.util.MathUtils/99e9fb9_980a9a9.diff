22,23d21
< import java.util.Arrays;
< import java.util.List;
25c23
< import java.util.Comparator;
---
> import java.util.Arrays;
26a25,26
> import java.util.Comparator;
> import java.util.List;
28,30d27
< import org.apache.commons.math.exception.util.Localizable;
< import org.apache.commons.math.exception.util.LocalizedFormats;
< import org.apache.commons.math.exception.NonMonotonousSequenceException;
32,33d28
< import org.apache.commons.math.exception.NullArgumentException;
< import org.apache.commons.math.exception.NotPositiveException;
36c31
< import org.apache.commons.math.exception.NumberIsTooLargeException;
---
> import org.apache.commons.math.exception.NonMonotonousSequenceException;
37a33,37
> import org.apache.commons.math.exception.NotPositiveException;
> import org.apache.commons.math.exception.NullArgumentException;
> import org.apache.commons.math.exception.NumberIsTooLargeException;
> import org.apache.commons.math.exception.util.Localizable;
> import org.apache.commons.math.exception.util.LocalizedFormats;
94a95,97
>     private static final int SPLIT_FACTOR = 0x8000001;
> 
>     
2334a2338,2610
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static double linearCombination(final double a1, final double b1,
>                                            final double a2, final double b2) {
> 
>         
>         
>         
>         
>         
>         
>         
>         
>         
>         
> 
>         
>         final double ca1        = SPLIT_FACTOR * a1;
>         final double a1High     = ca1 - (ca1 - a1);
>         final double a1Low      = a1 - a1High;
>         final double cb1        = SPLIT_FACTOR * b1;
>         final double b1High     = cb1 - (cb1 - b1);
>         final double b1Low      = b1 - b1High;
> 
>         
>         final double prod1High  = a1 * b1;
>         final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);
> 
>         
>         final double ca2        = SPLIT_FACTOR * a2;
>         final double a2High     = ca2 - (ca2 - a2);
>         final double a2Low      = a2 - a2High;
>         final double cb2        = SPLIT_FACTOR * b2;
>         final double b2High     = cb2 - (cb2 - b2);
>         final double b2Low      = b2 - b2High;
> 
>         
>         final double prod2High  = a2 * b2;
>         final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);
> 
>         
>         final double s12High    = prod1High + prod2High;
>         final double s12Prime   = s12High - prod2High;
>         final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);
> 
>         
>         
>         return s12High + (prod1Low + prod2Low + s12Low);
> 
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static double linearCombination(final double a1, final double b1,
>                                            final double a2, final double b2,
>                                            final double a3, final double b3) {
> 
>         
>         
>         
>         
>         
>         
>         
>         
>         
>         
> 
>         
>         final double ca1        = SPLIT_FACTOR * a1;
>         final double a1High     = ca1 - (ca1 - a1);
>         final double a1Low      = a1 - a1High;
>         final double cb1        = SPLIT_FACTOR * b1;
>         final double b1High     = cb1 - (cb1 - b1);
>         final double b1Low      = b1 - b1High;
> 
>         
>         final double prod1High  = a1 * b1;
>         final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);
> 
>         
>         final double ca2        = SPLIT_FACTOR * a2;
>         final double a2High     = ca2 - (ca2 - a2);
>         final double a2Low      = a2 - a2High;
>         final double cb2        = SPLIT_FACTOR * b2;
>         final double b2High     = cb2 - (cb2 - b2);
>         final double b2Low      = b2 - b2High;
> 
>         
>         final double prod2High  = a2 * b2;
>         final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);
> 
>         
>         final double ca3        = SPLIT_FACTOR * a3;
>         final double a3High     = ca3 - (ca3 - a3);
>         final double a3Low      = a3 - a3High;
>         final double cb3        = SPLIT_FACTOR * b3;
>         final double b3High     = cb3 - (cb3 - b3);
>         final double b3Low      = b3 - b3High;
> 
>         
>         final double prod3High  = a3 * b3;
>         final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);
> 
>         
>         final double s12High    = prod1High + prod2High;
>         final double s12Prime   = s12High - prod2High;
>         final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);
> 
>         
>         final double s123High   = s12High + prod3High;
>         final double s123Prime  = s123High - prod3High;
>         final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);
> 
>         
>         
>         return s123High + (prod1Low + prod2Low + prod3Low + s12Low + s123Low);
> 
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static double linearCombination(final double a1, final double b1,
>                                            final double a2, final double b2,
>                                            final double a3, final double b3,
>                                            final double a4, final double b4) {
> 
>         
>         
>         
>         
>         
>         
>         
>         
>         
>         
> 
>         
>         final double ca1        = SPLIT_FACTOR * a1;
>         final double a1High     = ca1 - (ca1 - a1);
>         final double a1Low      = a1 - a1High;
>         final double cb1        = SPLIT_FACTOR * b1;
>         final double b1High     = cb1 - (cb1 - b1);
>         final double b1Low      = b1 - b1High;
> 
>         
>         final double prod1High  = a1 * b1;
>         final double prod1Low   = a1Low * b1Low - (((prod1High - a1High * b1High) - a1Low * b1High) - a1High * b1Low);
> 
>         
>         final double ca2        = SPLIT_FACTOR * a2;
>         final double a2High     = ca2 - (ca2 - a2);
>         final double a2Low      = a2 - a2High;
>         final double cb2        = SPLIT_FACTOR * b2;
>         final double b2High     = cb2 - (cb2 - b2);
>         final double b2Low      = b2 - b2High;
> 
>         
>         final double prod2High  = a2 * b2;
>         final double prod2Low   = a2Low * b2Low - (((prod2High - a2High * b2High) - a2Low * b2High) - a2High * b2Low);
> 
>         
>         final double ca3        = SPLIT_FACTOR * a3;
>         final double a3High     = ca3 - (ca3 - a3);
>         final double a3Low      = a3 - a3High;
>         final double cb3        = SPLIT_FACTOR * b3;
>         final double b3High     = cb3 - (cb3 - b3);
>         final double b3Low      = b3 - b3High;
> 
>         
>         final double prod3High  = a3 * b3;
>         final double prod3Low   = a3Low * b3Low - (((prod3High - a3High * b3High) - a3Low * b3High) - a3High * b3Low);
> 
>         
>         final double ca4        = SPLIT_FACTOR * a4;
>         final double a4High     = ca4 - (ca4 - a4);
>         final double a4Low      = a4 - a4High;
>         final double cb4        = SPLIT_FACTOR * b4;
>         final double b4High     = cb4 - (cb4 - b4);
>         final double b4Low      = b4 - b4High;
> 
>         
>         final double prod4High  = a4 * b4;
>         final double prod4Low   = a4Low * b4Low - (((prod4High - a4High * b4High) - a4Low * b4High) - a4High * b4Low);
> 
>         
>         final double s12High    = prod1High + prod2High;
>         final double s12Prime   = s12High - prod2High;
>         final double s12Low     = (prod2High - (s12High - s12Prime)) + (prod1High - s12Prime);
> 
>         
>         final double s123High   = s12High + prod3High;
>         final double s123Prime  = s123High - prod3High;
>         final double s123Low    = (prod3High - (s123High - s123Prime)) + (s12High - s123Prime);
> 
>         
>         final double s1234High  = s123High + prod4High;
>         final double s1234Prime = s1234High - prod4High;
>         final double s1234Low   = (prod4High - (s1234High - s1234Prime)) + (s123High - s1234Prime);
> 
>         
>         
>         return s1234High + (prod1Low + prod2Low + prod3Low + prod4Low + s12Low + s123Low + s1234Low);
> 
>     }
> 
