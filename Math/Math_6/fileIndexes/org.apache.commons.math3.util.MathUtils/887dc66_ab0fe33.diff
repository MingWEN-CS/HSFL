416,421d415
< 
< 
< 
< 
< 
< 
423c417
<         return (Double.isNaN(x) && Double.isNaN(y)) || x == y;
---
>         return equals(x, y, 1);
528,533d521
< 
< 
< 
< 
< 
< 
1113,1135d1100
< 
< 
< 
< 
< 
< 
< 
< 
< 
<     @Deprecated
<     public static double nextAfter(double d, double direction) {
<         return FastMath.nextAfter(d, direction);
<     }
< 
<     
< 
< 
< 
< 
< 
< 
< 
< 
1321c1286
<                 unscaled = FastMath.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));
---
>                 unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));
1323c1288
<                 unscaled = FastMath.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));
---
>                 unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));
1327c1292
<             unscaled = FastMath.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));
---
>             unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));
1331c1296
<                 unscaled = FastMath.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));
---
>                 unscaled = FastMath.ceil(FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY));
1333c1298
<                 unscaled = FastMath.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));
---
>                 unscaled = FastMath.floor(FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY));
1337c1302
<             unscaled = nextAfter(unscaled, Double.NEGATIVE_INFINITY);
---
>             unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);
1364c1329
<             unscaled = nextAfter(unscaled, Double.POSITIVE_INFINITY);
---
>             unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);
1379c1344
<             unscaled = FastMath.ceil(nextAfter(unscaled,  Double.POSITIVE_INFINITY));
---
>             unscaled = FastMath.ceil(FastMath.nextAfter(unscaled,  Double.POSITIVE_INFINITY));
1905,1922d1869
<     }
< 
<     
< 
< 
< 
< 
< 
< 
< 
< 
< 
<     public static void checkOrder(double[] val, int dir, boolean strict) {
<         if (dir > 0) {
<             checkOrder(val, OrderDirection.INCREASING, strict);
<         } else {
<             checkOrder(val, OrderDirection.DECREASING, strict);
<         }
