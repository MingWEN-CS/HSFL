















package org.apache.commons.math3.optim.nonlinear.vector;

import org.apache.commons.math3.analysis.MultivariateMatrixFunction;
import org.apache.commons.math3.optim.ConvergenceChecker;
import org.apache.commons.math3.optim.OptimizationData;
import org.apache.commons.math3.optim.PointVectorValuePair;
import org.apache.commons.math3.exception.TooManyEvaluationsException;
import org.apache.commons.math3.exception.DimensionMismatchException;














public abstract class JacobianMultivariateVectorOptimizer
    extends MultivariateVectorOptimizer {
    


    private MultivariateMatrixFunction jacobian;

    


    protected JacobianMultivariateVectorOptimizer(ConvergenceChecker<PointVectorValuePair> checker) {
        super(checker);
    }

    





    protected double[][] computeJacobian(final double[] params) {
        return jacobian.value(params);
    }

    














    @Override
    public PointVectorValuePair optimize(OptimizationData... optData)
        throws TooManyEvaluationsException,
               DimensionMismatchException {
        
        return super.optimize(optData);
    }

    









    @Override
    protected void parseOptimizationData(OptimizationData... optData) {
        
        super.parseOptimizationData(optData);

        
        
        for (OptimizationData data : optData) {
            if (data instanceof ModelFunctionJacobian) {
                jacobian = ((ModelFunctionJacobian) data).getModelFunctionJacobian();
                
                
                break;
            }
        }
    }
}
