















package org.apache.commons.math3.optim.nonlinear.scalar;

import org.apache.commons.math3.analysis.MultivariateVectorFunction;
import org.apache.commons.math3.optim.ConvergenceChecker;
import org.apache.commons.math3.optim.OptimizationData;
import org.apache.commons.math3.optim.PointValuePair;
import org.apache.commons.math3.exception.TooManyEvaluationsException;









public abstract class GradientMultivariateOptimizer
    extends MultivariateOptimizer {
    


    private MultivariateVectorFunction gradient;

    


    protected GradientMultivariateOptimizer(ConvergenceChecker<PointValuePair> checker) {
        super(checker);
    }

    





    protected double[] computeObjectiveGradient(final double[] params) {
        return gradient.value(params);
    }

    
















    @Override
    public PointValuePair optimize(OptimizationData... optData)
        throws TooManyEvaluationsException {
         
        parseOptimizationData(optData);
        
        return super.optimize(optData);
    }

    









    private void parseOptimizationData(OptimizationData... optData) {
        
        
        for (OptimizationData data : optData) {
            if  (data instanceof ObjectiveFunctionGradient) {
                gradient = ((ObjectiveFunctionGradient) data).getObjectiveFunctionGradient();
                
                
                break;
            }
        }
    }
}
