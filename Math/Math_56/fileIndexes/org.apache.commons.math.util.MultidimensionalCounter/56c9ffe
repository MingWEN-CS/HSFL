
















package org.apache.commons.math.util;

import org.apache.commons.math.exception.DimensionMismatchException;
import org.apache.commons.math.exception.OutOfRangeException;
import org.apache.commons.math.exception.NotStrictlyPositiveException;
import org.apache.commons.math.util.MathUtils;






















public class MultidimensionalCounter implements Iterable<Integer> {
    


    private final int dimension;
    


    private final int[] uniCounterOffset;
    


    private final int[] size;
    


    private final int totalSize;
    


    private final int last;

    


    public class Iterator implements java.util.Iterator<Integer> {
        


        private final int[] counter = new int[dimension];
        


        private int count = -1;

        



        Iterator() {
            counter[last] = -1;
        }

        


        public boolean hasNext() {
            for (int i = 0; i < dimension; i++) {
                if (counter[i] != size[i] - 1) {
                    return true;
                }
            }
            return false;
        }

        



        public Integer next() {
            for (int i = last; i >= 0; i--) {
                if (counter[i] == size[i] - 1) {
                    counter[i] = 0;
                } else {
                    ++counter[i];
                    break;
                }
            }

            return ++count;
        }

        




        public int getCount() {
            return count;
        }
        




        public int[] getCounts() {
            return MathUtils.copyOf(counter);
        }

        










        public int getCount(int dim) {
            return counter[dim];
        }

        


        public void remove() {
            throw new UnsupportedOperationException();
        }
    }

    






    public MultidimensionalCounter(int ... size) {
        dimension = size.length;
        this.size = MathUtils.copyOf(size);

        uniCounterOffset = new int[dimension];

        last = dimension - 1;
        int tS = size[last];
        for (int i = 0; i < last; i++) {
            int count = 1;
            for (int j = i + 1; j < dimension; j++) {
                count *= size[j];
            }
            uniCounterOffset[i] = count;
            tS *= size[i];
        }
        uniCounterOffset[last] = 0;

        if (tS <= 0) {
            throw new NotStrictlyPositiveException(tS);
        }

        totalSize = tS;
    }

    




    public Iterator iterator() {
        return new Iterator();
    }

    




    public int getDimension() {
        return dimension;
    }

    







    public int[] getCounts(int index) {
        if (index < 0 ||
            index >= totalSize) {
            throw new OutOfRangeException(index, 0, totalSize);
        }

        final int[] indices = new int[dimension];

        int count = 0;
        for (int i = 0; i < last; i++) {
            int idx = 0;
            final int offset = uniCounterOffset[i];
            while (count <= index) {
                count += offset;
                ++idx;
            }
            --idx;
            count -= offset;
            indices[i] = idx;
        }

        int idx = 1;
        while (count < index) {
            count += idx;
            ++idx;
        }
        --idx;
        indices[last] = idx;

        return indices;
    }

    










    public int getCount(int ... c) throws OutOfRangeException {
        if (c.length != dimension) {
            throw new DimensionMismatchException(c.length, dimension);
        }
        int count = 0;
        for (int i = 0; i < dimension; i++) {
            final int index = c[i];
            if (index < 0 ||
                index >= size[i]) {
                throw new OutOfRangeException(index, 0, size[i] - 1);
            }
            count += uniCounterOffset[i] * c[i];
        }
        return count + c[last];
    }

    




    public int getSize() {
        return totalSize;
    }
    




    public int[] getSizes() {
        return MathUtils.copyOf(size);
    }

    


    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder();
        for (int i = 0; i < dimension; i++) {
            sb.append("[").append(getCount(i)).append("]");
        }
        return sb.toString();
    }
}
