
















package org.apache.commons.math.optimization.linear;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealMatrixImpl;
import org.apache.commons.math.linear.RealVector;
import org.apache.commons.math.optimization.GoalType;
import org.apache.commons.math.optimization.RealPointValuePair;
import org.apache.commons.math.util.MathUtils;


























class SimplexTableau implements Serializable {

    
    private static final long serialVersionUID = -1369660067587938365L;

    
    private final LinearObjectiveFunction f;

    
    private final Collection<LinearConstraint> constraints;

    
    private final boolean restrictToNonNegative;

    
    protected RealMatrix tableau;

    
    protected final int numDecisionVariables;

    
    protected final int numSlackVariables;

    
    protected int numArtificialVariables;

     
    protected final double epsilon;
    
    








    SimplexTableau(final LinearObjectiveFunction f,
                   final Collection<LinearConstraint> constraints,
                   final GoalType goalType, final boolean restrictToNonNegative,
                   final double epsilon) {
        this.f                      = f;
        this.constraints            = constraints;
        this.restrictToNonNegative  = restrictToNonNegative;
        this.epsilon                = epsilon;
        this.numDecisionVariables   = getNumVariables() + (restrictToNonNegative ? 0 : 1);
        this.numSlackVariables      = getConstraintTypeCounts(Relationship.LEQ) +
                                      getConstraintTypeCounts(Relationship.GEQ);
        this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) +
                                      getConstraintTypeCounts(Relationship.GEQ);
        this.tableau = new RealMatrixImpl(createTableau(goalType == GoalType.MAXIMIZE));
        initialize();
    }

    




    protected double[][] createTableau(final boolean maximize) {

        
        List<LinearConstraint> constraints = getNormalizedConstraints();
        int width = numDecisionVariables + numSlackVariables +
        numArtificialVariables + getNumObjectiveFunctions() + 1; 
        int height = constraints.size() + getNumObjectiveFunctions();
        double[][] matrix = new double[height][width];

        
        if (getNumObjectiveFunctions() == 2) {
            matrix[0][0] = -1;
        }
        int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;
        matrix[zIndex][zIndex] = maximize ? 1 : -1;
        RealVector objectiveCoefficients =
            maximize ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients();
            copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions());
            matrix[zIndex][width - 1] =
                maximize ? f.getConstantTerm() : -1 * f.getConstantTerm();

                if (!restrictToNonNegative) {
                    matrix[zIndex][getSlackVariableOffset() - 1] =
                        getInvertedCoeffiecientSum(objectiveCoefficients);
                }

                
                int slackVar = 0;
                int artificialVar = 0;
                for (int i = 0; i < constraints.size(); i++) {
                    LinearConstraint constraint = constraints.get(i);
                    int row = getNumObjectiveFunctions() + i;

                    
                    copyArray(constraint.getCoefficients().getData(), matrix[row], 1);

                    
                    if (!restrictToNonNegative) {
                        matrix[row][getSlackVariableOffset() - 1] =
                            getInvertedCoeffiecientSum(constraint.getCoefficients());
                    }

                    
                    matrix[row][width - 1] = constraint.getValue();

                    
                    if (constraint.getRelationship() == Relationship.LEQ) {
                        matrix[row][getSlackVariableOffset() + slackVar++] = 1;  
                    } else if (constraint.getRelationship() == Relationship.GEQ) {
                        matrix[row][getSlackVariableOffset() + slackVar++] = -1; 
                    }

                    
                    if ((constraint.getRelationship() == Relationship.EQ) ||
                        (constraint.getRelationship() == Relationship.GEQ)) {
                        matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 
                        matrix[row][getArtificialVariableOffset() + artificialVar++] = 1; 
                    }
                }

                return matrix;
    }

    


    public int getNumVariables() {
        return f.getCoefficients().getDimension();
    }

    



    public List<LinearConstraint> getNormalizedConstraints() {
        List<LinearConstraint> normalized = new ArrayList<LinearConstraint>();
        for (LinearConstraint constraint : constraints) {
            normalized.add(normalize(constraint));
        }
        return normalized;
    }

    




    private LinearConstraint normalize(final LinearConstraint constraint) {
        if (constraint.getValue() < 0) {
            return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),
                                        constraint.getRelationship().oppositeRelationship(),
                                        -1 * constraint.getValue());
        }
        return new LinearConstraint(constraint.getCoefficients(), 
                                    constraint.getRelationship(), constraint.getValue());
    }

    



    protected final int getNumObjectiveFunctions() {
        return this.numArtificialVariables > 0 ? 2 : 1;
    }

    




    private int getConstraintTypeCounts(final Relationship relationship) {
        int count = 0;
        for (final LinearConstraint constraint : constraints) {
            if (constraint.getRelationship() == relationship) {
                ++count;
            }
        }
        return count;
    }

    



    private void initialize() {
        for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) {
            int row = getBasicRow(getArtificialVariableOffset() + artificialVar);
            subtractRow(0, row, 1.0);
        }
    }

    




    protected static double getInvertedCoeffiecientSum(final RealVector coefficients) {
        double sum = 0;
        for (double coefficient : coefficients.getData()) {
            sum -= coefficient;
        }
        return sum;
    }

    




    private Integer getBasicRow(final int col) {
        Integer row = null;
        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {
            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
                if (row == null) {
                    row = i;
                } else {
                    return null;
                }
            }
        }
        return row;
    }

    


    protected void discardArtificialVariables() {
        if (numArtificialVariables == 0) {
            return;
        }
        int width = getWidth() - numArtificialVariables - 1;
        int height = getHeight() - 1;
        double[][] matrix = new double[height][width];
        for (int i = 0; i < height; i++) {
            for (int j = 0; j < width - 1; j++) {
                matrix[i][j] = getEntry(i + 1, j + 1);
            }
            matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());
        }
        this.tableau = new RealMatrixImpl(matrix);
        this.numArtificialVariables = 0;
    }


    




    private void copyArray(final double[] src, final double[] dest,
                           final int destPos) {
        System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length); 
    }

    






    protected RealPointValuePair getSolution() {
        double[] coefficients = new double[getOriginalNumDecisionVariables()];
        double mostNegative = getDecisionVariableValue(getOriginalNumDecisionVariables());
        for (int i = 0; i < coefficients.length; i++) {
            coefficients[i] =
                getDecisionVariableValue(i) - (restrictToNonNegative ? 0 : mostNegative); 
        }
        return new RealPointValuePair(coefficients, f.getValue(coefficients));
    }

    







    protected double getDecisionVariableValue(final int decisionVariable) {
      int col = getNumObjectiveFunctions() + decisionVariable;  
      Integer basicRow = getBasicRow(col);
      if (basicRow == null) {
          return 0;
      }
      
      
      for (int i = getNumObjectiveFunctions(); i < col; i++) {
          if (tableau.getEntry(basicRow, i) == 1) {
              return 0;
          }
      }
      return getEntry(basicRow, getRhsOffset()); 
  }

    








    protected void divideRow(final int dividendRow, final double divisor) {
        for (int j = 0; j < getWidth(); j++) {
            tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);
        }
    }

    









    protected void subtractRow(final int minuendRow, final int subtrahendRow,
                               final double multiple) {
        for (int j = 0; j < getWidth(); j++) {
            tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) -
                             multiple * tableau.getEntry(subtrahendRow, j));
        }
    }

    



    protected final int getWidth() {
        return tableau.getColumnDimension();
    }

    



    protected final int getHeight() {
        return tableau.getRowDimension();
    }

    




    protected final double getEntry(final int row, final int column) {
        return tableau.getEntry(row, column);
    }

    




    protected final void setEntry(final int row, final int column,
                                  final double value) {
        tableau.setEntry(row, column, value);
    }

    



    protected final int getSlackVariableOffset() {
        return getNumObjectiveFunctions() + numDecisionVariables;
    }

    



    protected final int getArtificialVariableOffset() {
        return getNumObjectiveFunctions() + numDecisionVariables + numSlackVariables;
    }

    



    protected final int getRhsOffset() {
        return getWidth() - 1;
    }

    









    protected final int getNumDecisionVariables() {
        return numDecisionVariables;
    }

    




    protected final int getOriginalNumDecisionVariables() {
        return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;
    }

    



    protected final int getNumSlackVariables() {
        return numSlackVariables;
    }

    



    protected final int getNumArtificialVariables() {
        return numArtificialVariables;
    }

    



    protected final double[][] getData() {
        return tableau.getData();
    }

}
