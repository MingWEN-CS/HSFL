
















package org.apache.commons.math.optimization.linear;

import java.util.Collection;

import org.apache.commons.math.exception.MathIllegalStateException;
import org.apache.commons.math.exception.MaxCountExceededException;
import org.apache.commons.math.optimization.GoalType;
import org.apache.commons.math.optimization.RealPointValuePair;









public abstract class AbstractLinearOptimizer implements LinearOptimizer {

    
    public static final int DEFAULT_MAX_ITERATIONS = 100;

    



    protected LinearObjectiveFunction function;

    



    protected Collection<LinearConstraint> linearConstraints;

    



    protected GoalType goal;

    



    protected boolean nonNegative;

    
    private int maxIterations;

    
    private int iterations;

    


    protected AbstractLinearOptimizer() {
        setMaxIterations(DEFAULT_MAX_ITERATIONS);
    }

    
    public void setMaxIterations(int maxIterations) {
        this.maxIterations = maxIterations;
    }

    
    public int getMaxIterations() {
        return maxIterations;
    }

    
    public int getIterations() {
        return iterations;
    }

    



    protected void incrementIterationsCounter()
        throws MaxCountExceededException {
        if (++iterations > maxIterations) {
            throw new MaxCountExceededException(maxIterations);
        }
    }

    
    public RealPointValuePair optimize(final LinearObjectiveFunction f,
                                       final Collection<LinearConstraint> constraints,
                                       final GoalType goalType, final boolean restrictToNonNegative)
         throws MathIllegalStateException {

        
        this.function          = f;
        this.linearConstraints = constraints;
        this.goal              = goalType;
        this.nonNegative       = restrictToNonNegative;

        iterations  = 0;

        
        return doOptimize();

    }

    




    protected abstract RealPointValuePair doOptimize()
        throws MathIllegalStateException;

}
