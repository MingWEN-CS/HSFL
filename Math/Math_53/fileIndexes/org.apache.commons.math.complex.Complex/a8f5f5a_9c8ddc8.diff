27a28
> import org.apache.commons.math.util.FastMath;
116c117
<         if (Math.abs(real) < Math.abs(imaginary)) {
---
>         if (FastMath.abs(real) < FastMath.abs(imaginary)) {
118c119
<                 return Math.abs(real);
---
>                 return FastMath.abs(real);
121c122
<             return Math.abs(imaginary) * Math.sqrt(1 + q * q);
---
>             return FastMath.abs(imaginary) * FastMath.sqrt(1 + q * q);
124c125
<                 return Math.abs(imaginary);
---
>                 return FastMath.abs(imaginary);
127c128
<             return Math.abs(real) * Math.sqrt(1 + q * q);
---
>             return FastMath.abs(real) * FastMath.sqrt(1 + q * q);
224c225
<         if (Math.abs(c) < Math.abs(d)) {
---
>         if (FastMath.abs(c) < FastMath.abs(d)) {
550,551c551,552
<         return createComplex(Math.cos(real) * MathUtils.cosh(imaginary),
<             -Math.sin(real) * MathUtils.sinh(imaginary));
---
>         return createComplex(FastMath.cos(real) * MathUtils.cosh(imaginary),
>             -FastMath.sin(real) * MathUtils.sinh(imaginary));
584,585c585,586
<         return createComplex(MathUtils.cosh(real) * Math.cos(imaginary),
<             MathUtils.sinh(real) * Math.sin(imaginary));
---
>         return createComplex(MathUtils.cosh(real) * FastMath.cos(imaginary),
>             MathUtils.sinh(real) * FastMath.sin(imaginary));
619,620c620,621
<         double expReal = Math.exp(real);
<         return createComplex(expReal *  Math.cos(imaginary), expReal * Math.sin(imaginary));
---
>         double expReal = FastMath.exp(real);
>         return createComplex(expReal *  FastMath.cos(imaginary), expReal * FastMath.sin(imaginary));
657,658c658,659
<         return createComplex(Math.log(abs()),
<             Math.atan2(imaginary, real));
---
>         return createComplex(FastMath.log(abs()),
>             FastMath.atan2(imaginary, real));
716,717c717,718
<         return createComplex(Math.sin(real) * MathUtils.cosh(imaginary),
<             Math.cos(real) * MathUtils.sinh(imaginary));
---
>         return createComplex(FastMath.sin(real) * MathUtils.cosh(imaginary),
>             FastMath.cos(real) * MathUtils.sinh(imaginary));
750,751c751,752
<         return createComplex(MathUtils.sinh(real) * Math.cos(imaginary),
<             MathUtils.cosh(real) * Math.sin(imaginary));
---
>         return createComplex(MathUtils.sinh(real) * FastMath.cos(imaginary),
>             MathUtils.cosh(real) * FastMath.sin(imaginary));
796c797
<         double t = Math.sqrt((Math.abs(real) + abs()) / 2.0);
---
>         double t = FastMath.sqrt((FastMath.abs(real) + abs()) / 2.0);
800c801
<             return createComplex(Math.abs(imaginary) / (2.0 * t),
---
>             return createComplex(FastMath.abs(imaginary) / (2.0 * t),
860c861
<         double d = Math.cos(real2) + MathUtils.cosh(imaginary2);
---
>         double d = FastMath.cos(real2) + MathUtils.cosh(imaginary2);
862c863
<         return createComplex(Math.sin(real2) / d, MathUtils.sinh(imaginary2) / d);
---
>         return createComplex(FastMath.sin(real2) / d, MathUtils.sinh(imaginary2) / d);
898c899
<         double d = MathUtils.cosh(real2) + Math.cos(imaginary2);
---
>         double d = MathUtils.cosh(real2) + FastMath.cos(imaginary2);
900c901
<         return createComplex(MathUtils.sinh(real2) / d, Math.sin(imaginary2) / d);
---
>         return createComplex(MathUtils.sinh(real2) / d, FastMath.sin(imaginary2) / d);
920c921
<         return Math.atan2(getImaginary(), getReal());
---
>         return FastMath.atan2(getImaginary(), getReal());
962c963
<         final double nthRootOfAbs = Math.pow(abs(), 1.0 / n);
---
>         final double nthRootOfAbs = FastMath.pow(abs(), 1.0 / n);
966c967
<         final double slice = 2 * Math.PI / n;
---
>         final double slice = 2 * FastMath.PI / n;
970,971c971,972
<             final double realPart      = nthRootOfAbs *  Math.cos(innerPart);
<             final double imaginaryPart = nthRootOfAbs *  Math.sin(innerPart);
---
>             final double realPart      = nthRootOfAbs *  FastMath.cos(innerPart);
>             final double imaginaryPart = nthRootOfAbs *  FastMath.sin(innerPart);
