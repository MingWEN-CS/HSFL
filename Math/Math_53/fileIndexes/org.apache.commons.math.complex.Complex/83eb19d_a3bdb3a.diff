28a29,38
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
32c42
<     static final long serialVersionUID = -6530173849413811929L;
---
>     private static final long serialVersionUID = -6530173849413811929L;
42a53,55
>         
>     public static final Complex ZERO = new Complex(0.0, 0.0);
>     
65a79,83
> 
> 
> 
> 
> 
69a88,92
>         
>         if (isInfinite()) {
>             return Double.POSITIVE_INFINITY;
>         }
>         
91,95c114,125
<     public Complex add(Complex rhs) {
<         if (isNaN() || rhs.isNaN()) {
<             return NaN;
<         }
<         
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public Complex add(Complex rhs) {   
106a137,143
> 
> 
> 
> 
> 
> 
> 
110,111c147
<         }
<         
---
>         }   
119a156,185
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
128c194,198
<             throw new ArithmeticException("Error: division by zero.");
---
>             return NaN;
>         }
>         
>         if (rhs.isInfinite() && !isInfinite()) {
>             return ZERO;
244a315,346
> 
> 
> 
>     public boolean isInfinite() {
>         return !isNaN() && 
>         (Double.isInfinite(real) || Double.isInfinite(imaginary));        
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
249,253c351,352
<         
<         double p = (real + imaginary) * (rhs.getReal() + rhs.getImaginary());
<         double ac = real * rhs.getReal();
<         double bd = imaginary * rhs.getImaginary();
<         return new Complex(ac - bd, p - ac - bd);
---
>         return new Complex(real * rhs.real - imaginary * rhs.imaginary,
>                 real * rhs.imaginary + imaginary * rhs.real);
260a360,362
> 
> 
> 
269a372,382
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
