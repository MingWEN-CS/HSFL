31c31
< public class BigFraction extends Number implements Comparable<BigFraction>, Cloneable {
---
> public class BigFraction extends Number implements Comparable<BigFraction> {
585,608d584
<     @Override
<     public BigFraction clone() {
<         
<         
<         BigFraction clone = null;
< 
<         try {
<             clone = (BigFraction) super.clone();
<         } catch (CloneNotSupportedException e) {
<             e.printStackTrace();
<         }
< 
<         return clone;
<     }
< 
<     
< 
< 
< 
< 
< 
< 
< 
< 
1061,1062d1036
<         BigFraction ret = null;
< 
1064,1067c1038,1039
<             ret = clone();
<         } else {
<             BigInteger num = null;
<             BigInteger den = null;
---
>             return this;
>         }
1069,1076c1041,1048
<             if (denominator.equals(fraction.denominator)) {
<                 num = numerator.subtract(fraction.numerator);
<                 den = denominator;
<             } else {
<                 num = (numerator.multiply(fraction.denominator)).subtract((fraction.numerator).multiply(denominator));
<                 den = denominator.multiply(fraction.denominator);
<             }
<             ret = new BigFraction(num, den);
---
>         BigInteger num = null;
>         BigInteger den = null;
>         if (denominator.equals(fraction.denominator)) {
>             num = numerator.subtract(fraction.numerator);
>             den = denominator;
>         } else {
>             num = (numerator.multiply(fraction.denominator)).subtract((fraction.numerator).multiply(denominator));
>             den = denominator.multiply(fraction.denominator);
1077a1050
>         return new BigFraction(num, den);
1079d1051
<         return ret;
