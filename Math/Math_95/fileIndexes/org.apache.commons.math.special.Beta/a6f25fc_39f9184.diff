55a56,57
> import org.apache.commons.math.ContinuedFraction;
> 
152,160c154,192
<             double n = 0.0;
<             double an = 1.0 / a;
<             double s = an;
<             while(Math.abs(an) > epsilon && n < maxIterations){
<                 n = n + 1.0;
<                 an = an * (n - b) / n * x / (a + n) * (a + n - 1);
<                 s = s + an;
<             }
<             ret = Math.exp(a * Math.log(x) - logBeta(a, b)) * s;
---
>             ContinuedFraction fraction = new ContinuedFraction() {
>                 protected double getB(int n, double x) {
>                     double ret;
>                     double m;
>                     switch (n) {
>                         case 1 :
>                             ret = 1.0;
>                             break;
>                         default :
>                             if (n % 2 == 0) { 
>                                 m = (n - 2.0) / 2.0;
>                                 ret =
>                                     - ((a + m) * (a + b + m) * x)
>                                         / ((a + (2 * m)) * (a + (2 * m) + 1.0));
>                             } else {
>                                 m = (n - 1.0) / 2.0;
>                                 ret =
>                                     (m * (b - m) * x)
>                                         / ((a + (2 * m) - 1) * (a + (2 * m)));
>                             }
>                             break;
>                     }
>                     return ret;
>                 }
> 
>                 protected double getA(int n, double x) {
>                     double ret;
>                     switch (n) {
>                         case 0 :
>                             ret = 0.0;
>                             break;
>                         default :
>                             ret = 1.0;
>                             break;
>                     }
>                     return ret;
>                 }
> 			};
>             ret = Math.exp((a * Math.log(x)) + (b * Math.log(1.0 - x)) - Math.log(a) - logBeta(a, b, epsilon, maxIterations)) * fraction.evaluate(x, epsilon, maxIterations);
174a207,213
>     public static double logBeta(double a, double b) {
>         return logBeta(a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);
>     }
>     
>     
> 
> 
182c221,228
<     public static double logBeta(double a, double b) {
---
> 
> 
> 
> 
> 
> 
> 
>     public static double logBeta(double a, double b, double epsilon, int maxIterations) {
190,191c236,237
<             ret = Gamma.logGamma(a) + Gamma.logGamma(b)
<                 - Gamma.logGamma(a + b);
---
>             ret = Gamma.logGamma(a, epsilon, maxIterations) + Gamma.logGamma(b, epsilon, maxIterations)
>                 - Gamma.logGamma(a + b, epsilon, maxIterations);
