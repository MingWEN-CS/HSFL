




















































package org.apache.commons.math.special;

import org.apache.commons.math.MathException;
import org.apache.commons.math.util.ContinuedFraction;







public class Beta {
    
    private static final double DEFAULT_EPSILON = 10e-9;

    


    private Beta() {
        super();
    }

    








    public static double regularizedBeta(double x, double a, double b)
        throws MathException
    {
        return regularizedBeta(x, a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);
    }

    











    public static double regularizedBeta(double x, double a, double b,
        double epsilon) throws MathException
    {
        return regularizedBeta(x, a, b, epsilon, Integer.MAX_VALUE);
    }

    









    public static double regularizedBeta(double x, double a, double b,
        int maxIterations) throws MathException
    {
        return regularizedBeta(x, a, b, DEFAULT_EPSILON, maxIterations);
    }
    
    






















    public static double regularizedBeta(double x, final double a,
        final double b, double epsilon, int maxIterations) throws MathException
    {
        double ret;

        if (Double.isNaN(x) || Double.isNaN(a) || Double.isNaN(b) || (x < 0) ||
            (x > 1) || (a <= 0.0) || (b <= 0.0)) {
            ret = Double.NaN;
        } else {
            ContinuedFraction fraction = new ContinuedFraction() {
                protected double getB(int n, double x) {
                    double ret;
                    double m;
                    switch (n) {
                        case 1 :
                            ret = 1.0;
                            break;
                        default :
                            if (n % 2 == 0) { 
                                m = (n - 2.0) / 2.0;
                                ret = -((a + m) * (a + b + m) * x) /
                                    ((a + (2 * m)) * (a + (2 * m) + 1.0));
                            } else {
                                m = (n - 1.0) / 2.0;
                                ret = (m * (b - m) * x) /
                                    ((a + (2 * m) - 1) * (a + (2 * m)));
                            }
                            break;
                    }
                    return ret;
                }

                protected double getA(int n, double x) {
                    double ret;
                    switch (n) {
                        case 0 :
                            ret = 0.0;
                            break;
                        default :
                            ret = 1.0;
                            break;
                    }
                    return ret;
                }
            };
            ret = Math.exp((a * Math.log(x)) + (b * Math.log(1.0 - x)) -
                Math.log(a) - logBeta(a, b, epsilon, maxIterations)) *
                fraction.evaluate(x, epsilon, maxIterations);
        }

        return ret;
    }

    






    public static double logBeta(double a, double b) {
        return logBeta(a, b, DEFAULT_EPSILON, Integer.MAX_VALUE);
    }
    
    
















    public static double logBeta(double a, double b, double epsilon,
        int maxIterations) {
            
        double ret;

        if (Double.isNaN(a) || Double.isNaN(b) || (a <= 0.0) || (b <= 0.0)) {
            ret = Double.NaN;
        } else {
            ret = Gamma.logGamma(a) + Gamma.logGamma(b) -
                Gamma.logGamma(a + b);
        }

        return ret;
    }
}
