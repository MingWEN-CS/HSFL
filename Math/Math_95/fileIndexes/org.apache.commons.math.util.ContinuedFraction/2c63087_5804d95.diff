119,135d118
<     public double evaluate(double x, double epsilon, int maxIterations)
<         throws MathException
<     {
<         double[][] f = new double[2][2];
<         double[][] a = new double[2][2];
<         double[][] an = new double[2][2];
< 
<         a[0][0] = getA(0, x);
<         a[0][1] = 1.0;
<         a[1][0] = 1.0;
<         a[1][1] = 0.0;
< 
<         return evaluate(1, x, a, an, f, epsilon, maxIterations);
<     }
< 
<     
< 
145,155c128,129
< 
< 
< 
<     private double evaluate(
<         int n,
<         double x,
<         double[][] a,
<         double[][] an,
<         double[][] f,
<         double epsilon,
<         int maxIterations) throws MathException 
---
>     public double evaluate(double x, double epsilon, int maxIterations)
>         throws MathException
157,185c131,172
<         double ret;
< 
<         
<         an[0][0] = getA(n, x);
<         an[0][1] = 1.0;
<         an[1][0] = getB(n, x);
<         an[1][1] = 0.0;
< 
<         
<         f[0][0] = (a[0][0] * an[0][0]) + (a[0][1] * an[1][0]);
<         f[0][1] = (a[0][0] * an[0][1]) + (a[0][1] * an[1][1]);
<         f[1][0] = (a[1][0] * an[0][0]) + (a[1][1] * an[1][0]);
<         f[1][1] = (a[1][0] * an[0][1]) + (a[1][1] * an[1][1]);
< 
<         
<         if (Math.abs((f[0][0] * f[1][1]) - (f[1][0] * f[0][1])) <
<             Math.abs(epsilon * f[1][0] * f[1][1]))
<         {
<             ret = f[0][0] / f[1][0];
<         } else {
<             if (n >= maxIterations) {
<                 throw new ConvergenceException(
<                     "Continued fraction convergents failed to converge.");
<             }
<             
<             ret = evaluate(n + 1, x, f 
<             , an 
<             , a 
<             , epsilon, maxIterations);
---
>     	double p0 = 1.0;
>     	double p1 = getA(0, x);
>     	double q0 = 0.0;
>     	double q1 = 1.0;
>     	double c = p1 / q1;
>     	int n = 0;
>     	double relativeError = Double.MAX_VALUE;
>     	while (n < maxIterations && relativeError > epsilon) {
>     		++n;
>     		double a = getA(n, x);
>     		double b = getB(n, x);
>   			double p2 = a * p1 + b * p0;
>    			double q2 = a * q1 + b * q0;
>    			if (Double.isInfinite(p2) || Double.isInfinite(q2)) {
>    				
>    				if (a != 0.0) {
>    					p2 = p1 + (b / a * p0);
>    					q2 = q1 + (b / a * q0);
>    				} else if (b != 0) {
>    					p2 = (a / b * p1) + p0;
>    					q2 = (a / b * q1) + q0;
>    				} else {
>    					
>    		            throw new ConvergenceException(
>    	                	"Continued fraction convergents diverged to +/- " +
>    	                	"infinity.");
>    				}
>    			}
>    			double r = p2 / q2;
>    			relativeError = Math.abs(r / c - 1.0);
>     			
>    			
>    			c = p2 / q2;
>    			p0 = p1;
>    			p1 = p2;
>    			q0 = q1;
>    			q1 = q2;
>     	}
> 
>     	if (n >= maxIterations) {
>             throw new ConvergenceException(
>                 "Continued fraction convergents failed to converge.");
188c175
<         return ret;
---
>         return c;
