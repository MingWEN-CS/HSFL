




















































package org.apache.commons.math.distribution;

import org.apache.commons.math.MathException;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.UnivariateRealSolverUtils;








public abstract class AbstractContinuousDistribution
    implements ContinuousDistribution {

    


    protected AbstractContinuousDistribution() {
        super();
    }

    








    public double cumulativeProbability(double x0, double x1)
        throws MathException {
        return cumulativeProbability(x1) - cumulativeProbability(x0);
    }

    






    public double inverseCumulativeProbability(final double p)
        throws MathException {
        if (p < 0.0 || p > 1.0) {
            throw new IllegalArgumentException("p must be between 0.0 and 1.0, inclusive.");
        }

        
        
        UnivariateRealFunction rootFindingFunction =
            new UnivariateRealFunction() {

            public double value(double x) throws MathException {
                return cumulativeProbability(x) - p;
            }
        };

        
        double[] bracket =
            UnivariateRealSolverUtils.bracket(
                rootFindingFunction,
                getInitialDomain(p),
                getDomainLowerBound(p),
                getDomainUpperBound(p));

        
        double root =
            UnivariateRealSolverUtils.solve(
                rootFindingFunction,
                bracket[0],
                bracket[1]);

        return root;
    }

    







    protected abstract double getInitialDomain(double p);

    








    protected abstract double getDomainLowerBound(double p);

    








    protected abstract double getDomainUpperBound(double p);
}
