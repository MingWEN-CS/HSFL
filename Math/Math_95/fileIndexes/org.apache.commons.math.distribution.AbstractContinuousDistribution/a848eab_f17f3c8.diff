69c69
<         
---
> 
86c86,87
<     public double cummulativeProbability(double x0, double x1) {
---
>     public double cummulativeProbability(double x0, double x1)
>         throws MathException {
89c90
<     
---
> 
97c98,99
<     public double inverseCummulativeProbability(final double p) {
---
>     public double inverseCummulativeProbability(final double p)
>         throws MathException {
99,100c101
<             throw new IllegalArgumentException(
<                 "p must be between 0.0 and 1.0, inclusive.");
---
>             throw new IllegalArgumentException("p must be between 0.0 and 1.0, inclusive.");
102c103
<         
---
> 
107c108
<                 
---
> 
111a113
> 
113,116c115,119
<         try {
<             
<             double[] bracket = UnivariateRealSolverUtils.bracket(rootFindingFunction,
<                 getInitialDomain(p), getDomainLowerBound(p),
---
>         double[] bracket =
>             UnivariateRealSolverUtils.bracket(
>                 rootFindingFunction,
>                 getInitialDomain(p),
>                 getDomainLowerBound(p),
118,121c121
<             
<             
<             double root = UnivariateRealSolverUtils.solve(
<                 rootFindingFunction, bracket[0], bracket[1]);
---
> 
123,127c123,129
<             return root;
<         } catch (MathException ex) {
<             
<             return Double.NaN;
<         }
---
>         double root =
>             UnivariateRealSolverUtils.solve(
>                 rootFindingFunction,
>                 bracket[0],
>                 bracket[1]);
> 
>         return root;
129c131
<     
---
> 
139c141
<     
---
> 
150c152
<     
---
> 
