91a92,95
> 
> 
> 
> 
94c98,99
<             throw new IllegalArgumentException("p must be between 0.0 and 1.0 inclusive.");
---
>             throw new IllegalArgumentException(
>                 "p must be between 0.0 and 1.0, inclusive.");
100,103c105,108
< 			public double evaluate(double x) {
< 				return cummulativeProbability(x) - p;
< 			}
< 		};
---
>             public double evaluate(double x) {
>                 return cummulativeProbability(x) - p;
>             }
>         };
106c111,113
<         double[] bracket = RootFinding.bracket(rootFindingFunction, getMean(), getDomainLowerBound(), getDomainUpperBound());
---
>         double[] bracket = RootFinding.bracket(rootFindingFunction,
>             getInitialDomain(p), getDomainLowerBound(p),
>             getDomainUpperBound(p));
109c116,117
<         double root = RootFinding.bisection(rootFindingFunction, bracket[0], bracket[1]);
---
>         double root = RootFinding.bisection(rootFindingFunction, bracket[0],
>             bracket[1]);
112a121,152
>     
>     
> 
> 
> 
> 
> 
> 
> 
>     protected abstract double getInitialDomain(double p);
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     protected abstract double getDomainLowerBound(double p);
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     protected abstract double getDomainUpperBound(double p);
