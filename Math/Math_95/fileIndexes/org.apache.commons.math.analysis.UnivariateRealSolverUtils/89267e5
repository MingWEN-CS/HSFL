















package org.apache.commons.math.analysis;

import org.apache.commons.math.FunctionEvaluationException;
import org.apache.commons.math.ConvergenceException;






public class UnivariateRealSolverUtils {
    


    private UnivariateRealSolverUtils() {
        super();
    }
    
    
    private static UnivariateRealSolverFactory factory = null;

    













    public static double solve(UnivariateRealFunction f, double x0, double x1)
    throws ConvergenceException, FunctionEvaluationException {
        setup(f);
        return factory.newDefaultSolver(f).solve(x0, x1);
    }

    















    public static double solve(UnivariateRealFunction f, double x0, double x1,
            double absoluteAccuracy) throws ConvergenceException, 
            FunctionEvaluationException {    
       
        setup(f);
        UnivariateRealSolver solver = factory.newDefaultSolver(f);
        solver.setAbsoluteAccuracy(absoluteAccuracy);
        return solver.solve(x0, x1);
    }

    








































    public static double[] bracket(UnivariateRealFunction function, 
            double initial, double lowerBound, double upperBound) 
    throws ConvergenceException, FunctionEvaluationException {
        return bracket( function, initial, lowerBound, upperBound,
            Integer.MAX_VALUE ) ;
    }

     

































    public static double[] bracket(UnivariateRealFunction function,
            double initial, double lowerBound, double upperBound, 
            int maximumIterations) throws ConvergenceException, 
            FunctionEvaluationException {
        
        if (function == null) {
            throw new IllegalArgumentException ("function is null.");
        }
        if (maximumIterations <= 0)  {
            throw new IllegalArgumentException
            ("bad value for maximumIterations: " + maximumIterations);
        }
        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {
            throw new IllegalArgumentException
            ("Invalid endpoint parameters:  lowerBound=" + lowerBound + 
              " initial=" + initial + " upperBound=" + upperBound);
        }
        double a = initial;
        double b = initial;
        double fa;
        double fb;
        int numIterations = 0 ;
    
        do {
            a = Math.max(a - 1.0, lowerBound);
            b = Math.min(b + 1.0, upperBound);
            fa = function.value(a);
            
            fb = function.value(b);
            numIterations++ ;
        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && 
                ((a > lowerBound) || (b < upperBound)));
   
        if (fa * fb >= 0.0 ) {
            throw new ConvergenceException
            ("Number of iterations= " + numIterations +
              " maximum iterations= "  + maximumIterations +
              " initial= " + initial + " lowerBound=" + lowerBound +
              " upperBound=" + upperBound + " final a value=" + a +
              " final b value=" + b + " f(a)=" + fa + " f(b)=" + fb);
        }
        
        return new double[]{a, b};
    }

    






    public static double midpoint(double a, double b) {
        return (a + b) * .5;
    }
    
    






    private static void setup(UnivariateRealFunction f) {
       
        if (f == null) {
            throw new IllegalArgumentException("function can not be null.");    
        }
        
        if (factory == null) {
            factory = UnivariateRealSolverFactory.newInstance();
        }       
    }
}
