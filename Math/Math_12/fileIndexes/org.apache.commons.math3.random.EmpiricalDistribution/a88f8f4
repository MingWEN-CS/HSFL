
















package org.apache.commons.math3.random;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Serializable;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.math3.exception.MathIllegalArgumentException;
import org.apache.commons.math3.exception.MathIllegalStateException;
import org.apache.commons.math3.exception.NullArgumentException;
import org.apache.commons.math3.exception.ZeroException;
import org.apache.commons.math3.exception.util.LocalizedFormats;
import org.apache.commons.math3.stat.descriptive.StatisticalSummary;
import org.apache.commons.math3.stat.descriptive.SummaryStatistics;
import org.apache.commons.math3.util.FastMath;
import org.apache.commons.math3.util.MathUtils;













































public class EmpiricalDistribution implements Serializable {

    
    public static final int DEFAULT_BIN_COUNT = 1000;

    
    private static final long serialVersionUID = 5729073523949762654L;

    
    private final List<SummaryStatistics> binStats;

    
    private SummaryStatistics sampleStats = null;

    
    private double max = Double.NEGATIVE_INFINITY;

    
    private double min = Double.POSITIVE_INFINITY;

    
    private double delta = 0d;

    
    private final int binCount;

    
    private boolean loaded = false;

    
    private double[] upperBounds = null;

    
    private final RandomDataImpl randomData;

    


    public EmpiricalDistribution() {
        this(DEFAULT_BIN_COUNT, new RandomDataImpl());
    }

    




    public EmpiricalDistribution(int binCount) {
        this(binCount, new RandomDataImpl());
    }

    







    public EmpiricalDistribution(int binCount, RandomGenerator generator) {
        this.binCount = binCount;
        randomData = new RandomDataImpl(generator);
        binStats = new ArrayList<SummaryStatistics>();
    }

    






    public EmpiricalDistribution(RandomGenerator generator) {
        this(DEFAULT_BIN_COUNT, generator);
    }

    







    public EmpiricalDistribution(int binCount, RandomDataImpl randomData) {
        this.binCount = binCount;
        this.randomData = randomData;
        binStats = new ArrayList<SummaryStatistics>();
    }

    






    public EmpiricalDistribution(RandomDataImpl randomData) {
        this(DEFAULT_BIN_COUNT, randomData);
    }

     






    public void load(double[] in) throws NullArgumentException {
        DataAdapter da = new ArrayDataAdapter(in);
        try {
            da.computeStats();
            fillBinStats(in);
        } catch (IOException e) {
            throw new MathIllegalStateException(e, LocalizedFormats.SIMPLE_MESSAGE, e.getLocalizedMessage());
        }
        loaded = true;

    }

    






    public void load(URL url) throws IOException, NullArgumentException {
        MathUtils.checkNotNull(url);
        BufferedReader in =
            new BufferedReader(new InputStreamReader(url.openStream()));
        try {
            DataAdapter da = new StreamDataAdapter(in);
            da.computeStats();
            if (sampleStats.getN() == 0) {
                throw new ZeroException(LocalizedFormats.URL_CONTAINS_NO_DATA, url);
            }
            in = new BufferedReader(new InputStreamReader(url.openStream()));
            fillBinStats(in);
            loaded = true;
        } finally {
           try {
               in.close();
           } catch (IOException ex) {
               
           }
        }
    }

    






    public void load(File file) throws IOException, NullArgumentException {
        MathUtils.checkNotNull(file);
        BufferedReader in = new BufferedReader(new FileReader(file));
        try {
            DataAdapter da = new StreamDataAdapter(in);
            da.computeStats();
            in = new BufferedReader(new FileReader(file));
            fillBinStats(in);
            loaded = true;
        } finally {
            try {
                in.close();
            } catch (IOException ex) {
                
            }
        }
    }

    



    private abstract class DataAdapter{

        




        public abstract void computeBinStats() throws IOException;

        




        public abstract void computeStats() throws IOException;

    }

    




    private class DataAdapterFactory{
        





        public DataAdapter getAdapter(Object in) {
            if (in instanceof BufferedReader) {
                BufferedReader inputStream = (BufferedReader) in;
                return new StreamDataAdapter(inputStream);
            } else if (in instanceof double[]) {
                double[] inputArray = (double[]) in;
                return new ArrayDataAdapter(inputArray);
            } else {
                throw new MathIllegalArgumentException(
                      LocalizedFormats.INPUT_DATA_FROM_UNSUPPORTED_DATASOURCE,
                      in.getClass().getName(),
                      BufferedReader.class.getName(), double[].class.getName());
            }
        }
    }
    


    private class StreamDataAdapter extends DataAdapter{

        
        private BufferedReader inputStream;

        




        public StreamDataAdapter(BufferedReader in){
            super();
            inputStream = in;
        }

        
        @Override
        public void computeBinStats() throws IOException {
            String str = null;
            double val = 0.0d;
            while ((str = inputStream.readLine()) != null) {
                val = Double.parseDouble(str);
                SummaryStatistics stats = binStats.get(findBin(val));
                stats.addValue(val);
            }

            inputStream.close();
            inputStream = null;
        }

        
        @Override
        public void computeStats() throws IOException {
            String str = null;
            double val = 0.0;
            sampleStats = new SummaryStatistics();
            while ((str = inputStream.readLine()) != null) {
                val = Double.valueOf(str).doubleValue();
                sampleStats.addValue(val);
            }
            inputStream.close();
            inputStream = null;
        }
    }

    


    private class ArrayDataAdapter extends DataAdapter {

        
        private double[] inputArray;

        





        public ArrayDataAdapter(double[] in) throws NullArgumentException {
            super();
            MathUtils.checkNotNull(in);
            inputArray = in;
        }

        
        @Override
        public void computeStats() throws IOException {
            sampleStats = new SummaryStatistics();
            for (int i = 0; i < inputArray.length; i++) {
                sampleStats.addValue(inputArray[i]);
            }
        }

        
        @Override
        public void computeBinStats() throws IOException {
            for (int i = 0; i < inputArray.length; i++) {
                SummaryStatistics stats =
                    binStats.get(findBin(inputArray[i]));
                stats.addValue(inputArray[i]);
            }
        }
    }

    





    private void fillBinStats(Object in) throws IOException {
        
        min = sampleStats.getMin();
        max = sampleStats.getMax();
        delta = (max - min)/(Double.valueOf(binCount)).doubleValue();

        
        if (!binStats.isEmpty()) {
            binStats.clear();
        }
        for (int i = 0; i < binCount; i++) {
            SummaryStatistics stats = new SummaryStatistics();
            binStats.add(i,stats);
        }

        
        DataAdapterFactory aFactory = new DataAdapterFactory();
        DataAdapter da = aFactory.getAdapter(in);
        da.computeBinStats();

        
        upperBounds = new double[binCount];
        upperBounds[0] =
        ((double) binStats.get(0).getN()) / (double) sampleStats.getN();
        for (int i = 1; i < binCount-1; i++) {
            upperBounds[i] = upperBounds[i-1] +
            ((double) binStats.get(i).getN()) / (double) sampleStats.getN();
        }
        upperBounds[binCount-1] = 1.0d;
    }

    





    private int findBin(double value) {
        return FastMath.min(
                FastMath.max((int) FastMath.ceil((value- min) / delta) - 1, 0),
                binCount - 1);
        }

    






    public double getNextValue() throws MathIllegalStateException {

        if (!loaded) {
            throw new MathIllegalStateException(LocalizedFormats.DISTRIBUTION_NOT_LOADED);
        }

        
        double x = randomData.nextUniform(0,1);

        
        for (int i = 0; i < binCount; i++) {
           if (x <= upperBounds[i]) {
               SummaryStatistics stats = binStats.get(i);
               if (stats.getN() > 0) {
                   if (stats.getStandardDeviation() > 0) {  
                        return randomData.nextGaussian
                            (stats.getMean(),stats.getStandardDeviation());
                   } else {
                       return stats.getMean(); 
                   }
               }
           }
        }
        throw new MathIllegalStateException(LocalizedFormats.NO_BIN_SELECTED);
    }

    







    public StatisticalSummary getSampleStats() {
        return sampleStats;
    }

    




    public int getBinCount() {
        return binCount;
    }

    






    public List<SummaryStatistics> getBinStats() {
        return binStats;
    }

    












    public double[] getUpperBounds() {
        double[] binUpperBounds = new double[binCount];
        binUpperBounds[0] = min + delta;
        for (int i = 1; i < binCount - 1; i++) {
            binUpperBounds[i] = binUpperBounds[i-1] + delta;
        }
        binUpperBounds[binCount - 1] = max;
        return binUpperBounds;
    }

    










    public double[] getGeneratorUpperBounds() {
        int len = upperBounds.length;
        double[] out = new double[len];
        System.arraycopy(upperBounds, 0, out, 0, len);
        return out;
    }

    




    public boolean isLoaded() {
        return loaded;
    }

    





    public void reSeed(long seed) {
        randomData.reSeed(seed);
    }
}
