24a25
> import org.apache.commons.math.util.FastMath;
110,113c111,114
<     double cosDelta = Math.cos(delta);
<     this.x = Math.cos(alpha) * cosDelta;
<     this.y = Math.sin(alpha) * cosDelta;
<     this.z = Math.sin(delta);
---
>     double cosDelta = FastMath.cos(delta);
>     this.x = FastMath.cos(alpha) * cosDelta;
>     this.y = FastMath.sin(alpha) * cosDelta;
>     this.z = FastMath.sin(delta);
206c207
<     return Math.abs(x) + Math.abs(y) + Math.abs(z);
---
>     return FastMath.abs(x) + FastMath.abs(y) + FastMath.abs(z);
213c214
<     return Math.sqrt (x * x + y * y + z * z);
---
>     return FastMath.sqrt (x * x + y * y + z * z);
227c228
<     return Math.max(Math.max(Math.abs(x), Math.abs(y)), Math.abs(z));
---
>     return FastMath.max(FastMath.max(FastMath.abs(x), FastMath.abs(y)), FastMath.abs(z));
235c236
<     return Math.atan2(y, x);
---
>     return FastMath.atan2(y, x);
243c244
<     return Math.asin(z / getNorm());
---
>     return FastMath.asin(z / getNorm());
315c316
<       double inverse  = 1 / Math.sqrt(y * y + z * z);
---
>       double inverse  = 1 / FastMath.sqrt(y * y + z * z);
318c319
<       double inverse  = 1 / Math.sqrt(x * x + z * z);
---
>       double inverse  = 1 / FastMath.sqrt(x * x + z * z);
321c322
<     double inverse  = 1 / Math.sqrt(x * x + y * y);
---
>     double inverse  = 1 / FastMath.sqrt(x * x + y * y);
350c351
<         return Math.asin(v3.getNorm() / normProduct);
---
>         return FastMath.asin(v3.getNorm() / normProduct);
352c353
<       return Math.PI - Math.asin(v3.getNorm() / normProduct);
---
>       return FastMath.PI - FastMath.asin(v3.getNorm() / normProduct);
356c357
<     return Math.acos(dot / normProduct);
---
>     return FastMath.acos(dot / normProduct);
474,476c475,477
<     final double dx = Math.abs(v2.x - v1.x);
<     final double dy = Math.abs(v2.y - v1.y);
<     final double dz = Math.abs(v2.z - v1.z);
---
>     final double dx = FastMath.abs(v2.x - v1.x);
>     final double dy = FastMath.abs(v2.y - v1.y);
>     final double dz = FastMath.abs(v2.z - v1.z);
492c493
<     return Math.sqrt(dx * dx + dy * dy + dz * dz);
---
>     return FastMath.sqrt(dx * dx + dy * dy + dz * dz);
504,507c505,508
<     final double dx = Math.abs(v2.x - v1.x);
<     final double dy = Math.abs(v2.y - v1.y);
<     final double dz = Math.abs(v2.z - v1.z);
<     return Math.max(Math.max(dx, dy), dz);
---
>     final double dx = FastMath.abs(v2.x - v1.x);
>     final double dy = FastMath.abs(v2.y - v1.y);
>     final double dz = FastMath.abs(v2.z - v1.z);
>     return FastMath.max(FastMath.max(dx, dy), dz);
