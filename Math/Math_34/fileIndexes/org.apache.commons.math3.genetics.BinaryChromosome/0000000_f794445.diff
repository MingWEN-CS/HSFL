1a2,103
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> package org.apache.commons.math3.genetics;
> 
> import java.util.ArrayList;
> import java.util.List;
> import org.apache.commons.math3.exception.util.LocalizedFormats;
> 
> 
> 
> 
> 
> 
> 
> 
> public abstract class BinaryChromosome extends AbstractListChromosome<Integer> {
> 
>     
> 
> 
> 
> 
> 
>     public BinaryChromosome(List<Integer> representation) {
>         super(representation);
>     }
> 
>     
> 
> 
> 
> 
> 
>     public BinaryChromosome(Integer[] representation) {
>         super(representation);
>     }
> 
>     
> 
> 
>     @Override
>     protected void checkValidity(List<Integer> chromosomeRepresentation)
>         throws InvalidRepresentationException {
>         for (int i : chromosomeRepresentation) {
>             if (i < 0 || i >1) {
>                 throw new InvalidRepresentationException(LocalizedFormats.INVALID_BINARY_DIGIT,
>                                                          i);
>             }
>         }
>     }
> 
>     
> 
> 
> 
> 
>     public static List<Integer> randomBinaryRepresentation(int length) {
>         
>         List<Integer> rList= new ArrayList<Integer> (length);
>         for (int j=0; j<length; j++) {
>             rList.add(GeneticAlgorithm.getRandomGenerator().nextInt(2));
>         }
>         return rList;
>     }
> 
>     
> 
> 
>     @Override
>     protected boolean isSame(Chromosome another) {
>         
>         if (! (another instanceof BinaryChromosome)) {
>             return false;
>         }
>         BinaryChromosome anotherBc = (BinaryChromosome) another;
>         
>         if (getLength() != anotherBc.getLength()) {
>             return false;
>         }
> 
>         for (int i=0; i< getRepresentation().size(); i++) {
>             if (!(getRepresentation().get(i).equals(anotherBc.getRepresentation().get(i)))) {
>                 return false;
>             }
>         }
>         
>         return true;
>     }
> }
