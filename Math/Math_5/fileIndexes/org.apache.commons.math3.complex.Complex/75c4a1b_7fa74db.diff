24a25
> import org.apache.commons.math3.exception.MathInternalError;
569,571c570,573
<         if (isNaN) {
<             return NaN;
<         }
---
>         try {
>             if (isNaN) {
>                 return NaN;
>             }
573,574c575,580
<         return this.add(this.sqrt1z().multiply(I)).log()
<             .multiply(I.negate());
---
>             return this.add(this.sqrt1z().multiply(I)).log()
>                     .multiply(I.negate());
>         } catch (NullArgumentException e) {
>             
>             throw new MathInternalError(e);
>         }
594,596c600,603
<         if (isNaN) {
<             return NaN;
<         }
---
>         try {
>             if (isNaN) {
>                 return NaN;
>             }
598,599c605,610
<         return sqrt1z().add(this.multiply(I)).log()
<             .multiply(I.negate());
---
>             return sqrt1z().add(this.multiply(I)).log()
>                     .multiply(I.negate());
>         } catch (NullArgumentException e) {
>             
>             throw new MathInternalError(e);
>         }
619,621c630,633
<         if (isNaN) {
<             return NaN;
<         }
---
>         try {
>             if (isNaN) {
>                 return NaN;
>             }
623,624c635,640
<         return this.add(I).divide(I.subtract(this)).log()
<             .multiply(I.divide(createComplex(2.0, 0.0)));
---
>             return this.add(I).divide(I.subtract(this)).log()
>                     .multiply(I.divide(createComplex(2.0, 0.0)));
>         } catch (NullArgumentException e) {
>             
>             throw new MathInternalError(e);
>         }
982c998,1003
<         return createComplex(1.0, 0.0).subtract(this.multiply(this)).sqrt();
---
>         try {
>             return createComplex(1.0, 0.0).subtract(this.multiply(this)).sqrt();
>         } catch (NullArgumentException e) {
>             
>             throw new MathInternalError(e);
>         }
1131c1152
<     public List<Complex> nthRoot(int n) {
---
>     public List<Complex> nthRoot(int n) throws NotPositiveException {
