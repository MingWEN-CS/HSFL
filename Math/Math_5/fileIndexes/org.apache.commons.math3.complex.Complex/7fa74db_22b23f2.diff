25,26d24
< import org.apache.commons.math3.exception.MathInternalError;
< import org.apache.commons.math3.exception.NullArgumentException;
27a26
> import org.apache.commons.math3.exception.NullArgumentException;
29d27
< import org.apache.commons.math3.util.MathUtils;
30a29
> import org.apache.commons.math3.util.MathUtils;
570,579c569,570
<         try {
<             if (isNaN) {
<                 return NaN;
<             }
< 
<             return this.add(this.sqrt1z().multiply(I)).log()
<                     .multiply(I.negate());
<         } catch (NullArgumentException e) {
<             
<             throw new MathInternalError(e);
---
>         if (isNaN) {
>             return NaN;
580a572,573
> 
>         return this.add(this.sqrt1z().multiply(I)).log().multiply(I.negate());
600,609c593,594
<         try {
<             if (isNaN) {
<                 return NaN;
<             }
< 
<             return sqrt1z().add(this.multiply(I)).log()
<                     .multiply(I.negate());
<         } catch (NullArgumentException e) {
<             
<             throw new MathInternalError(e);
---
>         if (isNaN) {
>             return NaN;
610a596,597
> 
>         return sqrt1z().add(this.multiply(I)).log().multiply(I.negate());
630,639c617,618
<         try {
<             if (isNaN) {
<                 return NaN;
<             }
< 
<             return this.add(I).divide(I.subtract(this)).log()
<                     .multiply(I.divide(createComplex(2.0, 0.0)));
<         } catch (NullArgumentException e) {
<             
<             throw new MathInternalError(e);
---
>         if (isNaN) {
>             return NaN;
640a620,622
> 
>         return this.add(I).divide(I.subtract(this)).log()
>                 .multiply(I.divide(createComplex(2.0, 0.0)));
998,1003c980
<         try {
<             return createComplex(1.0, 0.0).subtract(this.multiply(this)).sqrt();
<         } catch (NullArgumentException e) {
<             
<             throw new MathInternalError(e);
<         }
---
>         return createComplex(1.0, 0.0).subtract(this.multiply(this)).sqrt();
