1a2,197
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> package org.apache.commons.math3.distribution;
> 
> import java.lang.reflect.Array;
> import java.util.ArrayList;
> import java.util.List;
> import org.apache.commons.math3.exception.MathArithmeticException;
> import org.apache.commons.math3.exception.MathIllegalArgumentException;
> import org.apache.commons.math3.exception.NotPositiveException;
> import org.apache.commons.math3.exception.NotStrictlyPositiveException;
> import org.apache.commons.math3.exception.util.LocalizedFormats;
> import org.apache.commons.math3.random.RandomGenerator;
> import org.apache.commons.math3.random.Well19937c;
> import org.apache.commons.math3.util.MathArrays;
> import org.apache.commons.math3.util.Pair;
> 
> 
> 
> 
> 
> 
> 
> 
> 
> public class DiscreteDistribution<T> {
> 
>     
> 
> 
>     protected final RandomGenerator random;
>     
> 
> 
>     private final List<T> singletons;
>     
> 
> 
>     private final double[] probabilities;
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public DiscreteDistribution(final List<Pair<T, Double>> samples)
>         throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException {
>         this(new Well19937c(), samples);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public DiscreteDistribution(final RandomGenerator rng, final List<Pair<T, Double>> samples)
>         throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException {
>         random = rng;
> 
>         singletons = new ArrayList<T>(samples.size());
>         final double[] probs = new double[samples.size()];
> 
>         for (int i = 0; i < samples.size(); i++) {
>             final Pair<T, Double> sample = samples.get(i);
>             singletons.add(sample.getKey());
>             if (sample.getValue() < 0) {
>                 throw new NotPositiveException(sample.getValue());
>             }
>             probs[i] = sample.getValue();
>         }
> 
>         probabilities = MathArrays.normalizeArray(probs, 1.0);
>     }
> 
>     
> 
> 
> 
> 
>     public void reseedRandomGenerator(long seed) {
>         random.setSeed(seed);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     double probability(final T x) {
>         double probability = 0;
> 
>         for (int i = 0; i < probabilities.length; i++) {
>             if ((x == null && singletons.get(i) == null) ||
>                 (x != null && x.equals(singletons.get(i)))) {
>                 probability += probabilities[i];
>             }
>         }
> 
>         return probability;
>     }
> 
>     
> 
> 
> 
> 
> 
>     public List<Pair<T, Double>> getSamples() {
>         final List<Pair<T, Double>> samples = new ArrayList<Pair<T, Double>>(probabilities.length);
> 
>         for (int i = 0; i < probabilities.length; i++) {
>             samples.add(new Pair<T, Double>(singletons.get(i), probabilities[i]));
>         }
> 
>         return samples;
>     }
> 
>     
> 
> 
> 
> 
>     public T sample() {
>         final double randomValue = random.nextDouble();
>         double sum = 0;
> 
>         for (int i = 0; i < probabilities.length; i++) {
>             sum += probabilities[i];
>             if (randomValue < sum) {
>                 return singletons.get(i);
>             }
>         }
> 
>         
> 
> 
>         return singletons.get(singletons.size() - 1);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     public T[] sample(int sampleSize) throws NotStrictlyPositiveException {
>         if (sampleSize <= 0) {
>             throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
>                     sampleSize);
>         }
>         @SuppressWarnings("unchecked")
>         final T[]out = (T[]) Array.newInstance(singletons.get(0).getClass(), sampleSize);
> 
>         for (int i = 0; i < sampleSize; i++) {
>             out[i] = sample();
>         }
> 
>         return out;
> 
>     }
> 
> }
