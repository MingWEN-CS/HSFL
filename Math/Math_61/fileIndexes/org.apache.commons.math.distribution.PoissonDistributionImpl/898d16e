















package org.apache.commons.math.distribution;

import java.io.Serializable;

import org.apache.commons.math.MathException;
import org.apache.commons.math.special.Gamma;
import org.apache.commons.math.util.MathUtils;






public class PoissonDistributionImpl extends AbstractIntegerDistribution
        implements PoissonDistribution, Serializable {

    
    private static final long serialVersionUID = -3349935121172596109L;
    
    private NormalDistribution normal;
    
    


    private double mean;

    







    public PoissonDistributionImpl(double p) {
        this(p, new NormalDistributionImpl());
    }

    









    public PoissonDistributionImpl(double p, NormalDistribution z) {
        super();
        setNormal(z);
        setMean(p);
    }

    




    public double getMean() {
        return this.mean;
    }

    







    public void setMean(double p) {
        if (p <= 0) {
            throw new IllegalArgumentException(
                    "The Poisson mean must be positive");
        }
        this.mean = p;
        normal.setMean(p);
        normal.setStandardDeviation(Math.sqrt(p));
    }

    





    public double probability(int x) {
        if (x < 0 || x == Integer.MAX_VALUE) {
            return 0;
        }
        return Math.pow(getMean(), x) / 
            MathUtils.factorialDouble(x) * Math.exp(-mean);
    }
    
    







    public double cumulativeProbability(int x) throws MathException {
        if (x < 0) {
            return 0;
        }
        if (x == Integer.MAX_VALUE) {
            return 1;
        }
        return Gamma.regularizedGammaQ((double)x + 1, mean, 
                1E-12, Integer.MAX_VALUE);
    }

    











    public double normalApproximateProbability(int x) throws MathException {
        
        return normal.cumulativeProbability(x + 0.5);
    }

    







    protected int getDomainLowerBound(double p) {
        return 0;
    }

    







    protected int getDomainUpperBound(double p) {
        return Integer.MAX_VALUE;
    }
    
    






    public void setNormal(NormalDistribution value) {
        normal = value;
    }
    
}
