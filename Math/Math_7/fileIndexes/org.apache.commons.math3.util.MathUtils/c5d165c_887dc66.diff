48c48
<     public static final double TWO_PI = 2 * Math.PI;
---
>     public static final double TWO_PI = 2 * FastMath.PI;
290c290
<         return Math.floor(result + 0.5);
---
>         return FastMath.floor(result + 0.5);
317c317
<             return Math.log(n);
---
>             return FastMath.log(n);
325c325
<             return Math.log(binomialCoefficient(n,k));
---
>             return FastMath.log(binomialCoefficient(n,k));
333c333
<             return Math.log(binomialCoefficientDouble(n, k));
---
>             return FastMath.log(binomialCoefficientDouble(n, k));
347c347
<             logSum += Math.log(i);
---
>             logSum += FastMath.log(i);
352c352
<             logSum -= Math.log(i);
---
>             logSum -= FastMath.log(i);
405c405
<         return (Math.exp(x) + Math.exp(-x)) / 2.0;
---
>         return (FastMath.exp(x) + FastMath.exp(-x)) / 2.0;
448c448
<         return equals(x, y, 1) || Math.abs(y - x) <= eps;
---
>         return equals(x, y, 1) || FastMath.abs(y - x) <= eps;
462c462
<         return equalsIncludingNaN(x, y) || (Math.abs(y - x) <= eps);
---
>         return equalsIncludingNaN(x, y) || (FastMath.abs(y - x) <= eps);
498c498
<         final boolean isEqual = Math.abs(xInt - yInt) <= maxUlps;
---
>         final boolean isEqual = FastMath.abs(xInt - yInt) <= maxUlps;
638c638
<         return Math.floor(Math.exp(factorialLog(n)) + 0.5);
---
>         return FastMath.floor(FastMath.exp(factorialLog(n)) + 0.5);
661c661
<             return Math.log(factorial(n));
---
>             return FastMath.log(factorial(n));
665c665
<             logSum += Math.log(i);
---
>             logSum += FastMath.log(i);
708c708
<             return Math.abs(u) + Math.abs(v);
---
>             return FastMath.abs(u) + FastMath.abs(v);
797c797
<             return Math.abs(u) + Math.abs(v);
---
>             return FastMath.abs(u) + FastMath.abs(v);
967c967
<         int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));
---
>         int lcm = FastMath.abs(mulAndCheck(a / gcd(a, b), b));
1002c1002
<         long lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));
---
>         long lcm = FastMath.abs(mulAndCheck(a / gcd(a, b), b));
1028c1028
<         return Math.log(x)/Math.log(base);
---
>         return FastMath.log(x)/FastMath.log(base);
1121,1157d1120
<     public static double nextAfter(double d, double direction) {
< 
<         
<         if (Double.isNaN(d) || Double.isInfinite(d)) {
<                 return d;
<         } else if (d == 0) {
<                 return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;
<         }
<         
<         
< 
<         
<         long bits     = Double.doubleToLongBits(d);
<         long sign     = bits & 0x8000000000000000L;
<         long exponent = bits & 0x7ff0000000000000L;
<         long mantissa = bits & 0x000fffffffffffffL;
< 
<         if (d * (direction - d) >= 0) {
<                 
<                 if (mantissa == 0x000fffffffffffffL) {
<                         return Double.longBitsToDouble(sign |
<                                         (exponent + 0x0010000000000000L));
<                 } else {
<                         return Double.longBitsToDouble(sign |
<                                         exponent | (mantissa + 1));
<                 }
<         } else {
<                 
<                 if (mantissa == 0L) {
<                         return Double.longBitsToDouble(sign |
<                                         (exponent - 0x0010000000000000L) |
<                                         0x000fffffffffffffL);
<                 } else {
<                         return Double.longBitsToDouble(sign |
<                                         exponent | (mantissa - 1));
<                 }
<         }
1158a1122,1124
>     @Deprecated
>     public static double nextAfter(double d, double direction) {
>         return FastMath.nextAfter(d, direction);
1208c1174
<          return a - TWO_PI * Math.floor((a + Math.PI - center) / TWO_PI);
---
>          return a - TWO_PI * FastMath.floor((a + FastMath.PI - center) / TWO_PI);
1334c1300
<         float factor = (float)Math.pow(10.0f, scale) * sign;
---
>         float factor = (float)FastMath.pow(10.0f, scale) * sign;
1355c1321
<                 unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));
---
>                 unscaled = FastMath.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));
1357c1323
<                 unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));
---
>                 unscaled = FastMath.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));
1361c1327
<             unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));
---
>             unscaled = FastMath.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));
1365c1331
<                 unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));
---
>                 unscaled = FastMath.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));
1367c1333
<                 unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));
---
>                 unscaled = FastMath.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));
1372c1338
<             double fraction = unscaled - Math.floor(unscaled);
---
>             double fraction = unscaled - FastMath.floor(unscaled);
1374c1340
<                 unscaled = Math.ceil(unscaled);
---
>                 unscaled = FastMath.ceil(unscaled);
1376c1342
<                 unscaled = Math.floor(unscaled);
---
>                 unscaled = FastMath.floor(unscaled);
1381c1347
<             double fraction = unscaled - Math.floor(unscaled);
---
>             double fraction = unscaled - FastMath.floor(unscaled);
1383c1349
<                 unscaled = Math.ceil(unscaled);
---
>                 unscaled = FastMath.ceil(unscaled);
1385c1351
<                 unscaled = Math.floor(unscaled);
---
>                 unscaled = FastMath.floor(unscaled);
1388c1354
<                 if (Math.floor(unscaled) / 2.0 == Math.floor(Math
---
>                 if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math
1390c1356
<                     unscaled = Math.floor(unscaled);
---
>                     unscaled = FastMath.floor(unscaled);
1392c1358
<                     unscaled = Math.ceil(unscaled);
---
>                     unscaled = FastMath.ceil(unscaled);
1399c1365
<             double fraction = unscaled - Math.floor(unscaled);
---
>             double fraction = unscaled - FastMath.floor(unscaled);
1401c1367
<                 unscaled = Math.ceil(unscaled);
---
>                 unscaled = FastMath.ceil(unscaled);
1403c1369
<                 unscaled = Math.floor(unscaled);
---
>                 unscaled = FastMath.floor(unscaled);
1408c1374
<             if (unscaled != Math.floor(unscaled)) {
---
>             if (unscaled != FastMath.floor(unscaled)) {
1413c1379
<             unscaled = Math.ceil(nextAfter(unscaled,  Double.POSITIVE_INFINITY));
---
>             unscaled = FastMath.ceil(nextAfter(unscaled,  Double.POSITIVE_INFINITY));
1533c1499
<         return (Math.exp(x) - Math.exp(-x)) / 2.0;
---
>         return (FastMath.exp(x) - FastMath.exp(-x)) / 2.0;
1790c1756
<             sum += Math.abs(p1[i] - p2[i]);
---
>             sum += FastMath.abs(p1[i] - p2[i]);
1805c1771
<           sum += Math.abs(p1[i] - p2[i]);
---
>           sum += FastMath.abs(p1[i] - p2[i]);
1823c1789
<         return Math.sqrt(sum);
---
>         return FastMath.sqrt(sum);
1839c1805
<       return Math.sqrt(sum);
---
>       return FastMath.sqrt(sum);
1852c1818
<             max = Math.max(max, Math.abs(p1[i] - p2[i]));
---
>             max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));
1867c1833
<             max = Math.max(max, Math.abs(p1[i] - p2[i]));
---
>             max = FastMath.max(max, FastMath.abs(p1[i] - p2[i]));
2072c2038
<     
---
> 
