20a21
> import java.math.BigInteger;
1246a1248,1447
>     }
> 
>     
> 
> 
> 
> 
> 
> 
>     public static int pow(final int k, int e)
>         throws IllegalArgumentException {
> 
>         if (e < 0) {
>             throw MathRuntimeException.createIllegalArgumentException(
>                 "cannot raise an integral value to a negative power ({0}^{1})",
>                 k, e);
>         }
> 
>         int result = 1;
>         int k2p    = k;
>         while (e != 0) {
>             if ((e & 0x1) != 0) {
>                 result *= k2p;
>             }
>             k2p *= k2p;
>             e = e >> 1;
>         }
> 
>         return result;
> 
>     }
> 
>     
> 
> 
> 
> 
> 
> 
>     public static int pow(final int k, long e)
>         throws IllegalArgumentException {
> 
>         if (e < 0) {
>             throw MathRuntimeException.createIllegalArgumentException(
>                 "cannot raise an integral value to a negative power ({0}^{1})",
>                 k, e);
>         }
> 
>         int result = 1;
>         int k2p    = k;
>         while (e != 0) {
>             if ((e & 0x1) != 0) {
>                 result *= k2p;
>             }
>             k2p *= k2p;
>             e = e >> 1;
>         }
> 
>         return result;
> 
>     }
> 
>     
> 
> 
> 
> 
> 
> 
>     public static long pow(final long k, int e)
>         throws IllegalArgumentException {
> 
>         if (e < 0) {
>             throw MathRuntimeException.createIllegalArgumentException(
>                 "cannot raise an integral value to a negative power ({0}^{1})",
>                 k, e);
>         }
> 
>         long result = 1l;
>         long k2p    = k;
>         while (e != 0) {
>             if ((e & 0x1) != 0) {
>                 result *= k2p;
>             }
>             k2p *= k2p;
>             e = e >> 1;
>         }
> 
>         return result;
> 
>     }
> 
>     
> 
> 
> 
> 
> 
> 
>     public static long pow(final long k, long e)
>         throws IllegalArgumentException {
> 
>         if (e < 0) {
>             throw MathRuntimeException.createIllegalArgumentException(
>                 "cannot raise an integral value to a negative power ({0}^{1})",
>                 k, e);
>         }
> 
>         long result = 1l;
>         long k2p    = k;
>         while (e != 0) {
>             if ((e & 0x1) != 0) {
>                 result *= k2p;
>             }
>             k2p *= k2p;
>             e = e >> 1;
>         }
> 
>         return result;
> 
>     }
> 
>     
> 
> 
> 
> 
> 
> 
>     public static BigInteger pow(final BigInteger k, int e)
>         throws IllegalArgumentException {
> 
>         if (e < 0) {
>             throw MathRuntimeException.createIllegalArgumentException(
>                 "cannot raise an integral value to a negative power ({0}^{1})",
>                 k, e);
>         }
> 
>         return k.pow(e);
> 
>     }
> 
>     
> 
> 
> 
> 
> 
> 
>     public static BigInteger pow(final BigInteger k, long e)
>         throws IllegalArgumentException {
> 
>         if (e < 0) {
>             throw MathRuntimeException.createIllegalArgumentException(
>                 "cannot raise an integral value to a negative power ({0}^{1})",
>                 k, e);
>         }
> 
>         BigInteger result = BigInteger.ONE;
>         BigInteger k2p    = k;
>         while (e != 0) {
>             if ((e & 0x1) != 0) {
>                 result = result.multiply(k2p);
>             }
>             k2p = k2p.multiply(k2p);
>             e = e >> 1;
>         }
> 
>         return result;
> 
>     }
> 
>     
> 
> 
> 
> 
> 
> 
>     public static BigInteger pow(final BigInteger k, BigInteger e)
>         throws IllegalArgumentException {
> 
>         if (e.compareTo(BigInteger.ZERO) < 0) {
>             throw MathRuntimeException.createIllegalArgumentException(
>                 "cannot raise an integral value to a negative power ({0}^{1})",
>                 k, e);
>         }
> 
>         BigInteger result = BigInteger.ONE;
>         BigInteger k2p    = k;
>         while (!BigInteger.ZERO.equals(e)) {
>             if (e.testBit(0)) {
>                 result = result.multiply(k2p);
>             }
>             k2p = k2p.multiply(k2p);
>             e = e.shiftRight(1);
>         }
> 
>         return result;
> 
