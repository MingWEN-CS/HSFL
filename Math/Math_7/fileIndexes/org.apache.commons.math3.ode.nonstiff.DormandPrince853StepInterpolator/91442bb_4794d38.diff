18c18
< package org.apache.commons.math.ode.nonstiff;
---
> package org.apache.commons.math3.ode.nonstiff;
24,26c24,26
< import org.apache.commons.math.ode.AbstractIntegrator;
< import org.apache.commons.math.ode.EquationsMapper;
< import org.apache.commons.math.ode.sampling.StepInterpolator;
---
> import org.apache.commons.math3.ode.AbstractIntegrator;
> import org.apache.commons.math3.ode.EquationsMapper;
> import org.apache.commons.math3.ode.sampling.StepInterpolator;
42c42
<     private static final long serialVersionUID = 20110928L;
---
>     private static final long serialVersionUID = 20111120L;
371,382c371,398
<     for (int i = 0; i < interpolatedState.length; ++i) {
<       interpolatedState[i] = currentState[i] -
<                              oneMinusThetaH * (v[0][i] -
<                                                theta * (v[1][i] +
<                                                         theta * (v[2][i] +
<                                                                  eta * (v[3][i] +
<                                                                         theta * (v[4][i] +
<                                                                                  eta * (v[5][i] +
<                                                                                         theta * (v[6][i])))))));
<       interpolatedDerivatives[i] =  v[0][i] + dot1 * v[1][i] + dot2 * v[2][i] +
<                                     dot3 * v[3][i] + dot4 * v[4][i] +
<                                     dot5 * v[5][i] + dot6 * v[6][i];
---
>     if ((previousState != null) && (theta <= 0.5)) {
>         for (int i = 0; i < interpolatedState.length; ++i) {
>             interpolatedState[i] = previousState[i] +
>                     theta * h * (v[0][i] +
>                             eta * (v[1][i] +
>                                     theta * (v[2][i] +
>                                             eta * (v[3][i] +
>                                                     theta * (v[4][i] +
>                                                             eta * (v[5][i] +
>                                                                     theta * (v[6][i])))))));
>             interpolatedDerivatives[i] =  v[0][i] + dot1 * v[1][i] + dot2 * v[2][i] +
>                     dot3 * v[3][i] + dot4 * v[4][i] +
>                     dot5 * v[5][i] + dot6 * v[6][i];
>         }
>     } else {
>         for (int i = 0; i < interpolatedState.length; ++i) {
>             interpolatedState[i] = currentState[i] -
>                     oneMinusThetaH * (v[0][i] -
>                             theta * (v[1][i] +
>                                     theta * (v[2][i] +
>                                             eta * (v[3][i] +
>                                                     theta * (v[4][i] +
>                                                             eta * (v[5][i] +
>                                                                     theta * (v[6][i])))))));
>             interpolatedDerivatives[i] =  v[0][i] + dot1 * v[1][i] + dot2 * v[2][i] +
>                     dot3 * v[3][i] + dot4 * v[4][i] +
>                     dot5 * v[5][i] + dot6 * v[6][i];
>         }
