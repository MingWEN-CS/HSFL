21,22d20
< import org.apache.commons.math.exception.MathUserException;
< import org.apache.commons.math.MathRuntimeException;
24a23,24
> import org.apache.commons.math.exception.MathInternalError;
> import org.apache.commons.math.exception.MathUserException;
41,42c41
< 
< public class EventState {
---
> public class EventState implements Comparable<EventState> {
197d195
< 
205,206c203,210
<             final int    n  = FastMath.max(1, (int) FastMath.ceil(FastMath.abs(t1 - t0) / maxCheckInterval));
<             final double h  = (t1 - t0) / n;
---
>             if (FastMath.abs(t1 - t0) < convergence) {
>                 
>                 return false;
>             }
>             final double start = forward ? (t0 + convergence) : t0 - convergence;
>             final double dt    = t1 - start;
>             final int    n     = FastMath.max(1, (int) FastMath.ceil(FastMath.abs(dt) / maxCheckInterval));
>             final double h     = dt / n;
210d213
<             double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
214c217
<                 tb += h;
---
>                 final double tb = start + (i + 1) * h;
222c225,240
<                     if (ga * gb > 0) {
---
>                     
>                     increasing = gb >= ga;
> 
>                     final UnivariateRealFunction f = new UnivariateRealFunction() {
>                         public double value(final double t) throws MathUserException {
>                             try {
>                                 interpolator.setInterpolatedTime(t);
>                                 return handler.g(t, interpolator.getInterpolatedState());
>                             } catch (EventException e) {
>                                 throw new MathUserException(e);
>                             }
>                         }
>                     };
>                     final BrentSolver solver = new BrentSolver(convergence);
> 
>                     if (ga * gb >= 0) {
233,234c251
<                             interpolator.setInterpolatedTime(ta);
<                             ga = handler.g(ta, interpolator.getInterpolatedState());
---
>                             ga = f.value(ta);
238c255
<                             throw MathRuntimeException.createInternalError(null);
---
>                             throw new MathInternalError();
242,255d258
<                     
<                     increasing = gb >= ga;
< 
<                     final UnivariateRealFunction f = new UnivariateRealFunction() {
<                         public double value(final double t) throws MathUserException {
<                             try {
<                                 interpolator.setInterpolatedTime(t);
<                                 return handler.g(t, interpolator.getInterpolatedState());
<                             } catch (EventException e) {
<                                 throw new MathUserException(e);
<                             }
<                         }
<                     };
<                     final BrentSolver solver = new BrentSolver(convergence);
257,260c260,265
<                         solver.solve(maxIterationCount, f, ta, tb) :
<                         solver.solve(maxIterationCount, f, tb, ta);
<                     if ((FastMath.abs(root - ta) <= convergence) &&
<                          (FastMath.abs(root - previousEventTime) <= convergence)) {
---
>                                         solver.solve(maxIterationCount, f, ta, tb) :
>                                         solver.solve(maxIterationCount, f, tb, ta);
> 
>                     if ((!Double.isNaN(previousEventTime)) &&
>                         (FastMath.abs(root - ta) <= convergence) &&
>                         (FastMath.abs(root - previousEventTime) <= convergence)) {
267,275d271
<                         if (pendingEvent && (FastMath.abs(t1 - pendingEventTime) <= convergence)) {
<                             
<                             
<                             
<                             
<                             return false;
<                         }
<                         
<                         
277a274,277
>                     } else {
>                         
>                         ta = tb;
>                         ga = gb;
326c326
<         if (pendingEvent) {
---
>         if (pendingEvent && (FastMath.abs(pendingEventTime - t) <= convergence)) {
357c357
<         if (! pendingEvent) {
---
>         if (!(pendingEvent && (FastMath.abs(pendingEventTime - t) <= convergence))) {
369a370,386
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public int compareTo(final EventState state) {
>         final double instanceTime = pendingEvent ? pendingEventTime : Double.POSITIVE_INFINITY;
>         final double otherTime = state.pendingEvent ? state.pendingEventTime : Double.POSITIVE_INFINITY;
>         return Double.compare(instanceTime, otherTime);
