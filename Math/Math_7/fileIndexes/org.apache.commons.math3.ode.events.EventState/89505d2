
















package org.apache.commons.math.ode.events;

import org.apache.commons.math.ConvergenceException;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.UnivariateRealSolver;
import org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils;
import org.apache.commons.math.exception.MathUserException;
import org.apache.commons.math.ode.sampling.StepInterpolator;
import org.apache.commons.math.util.FastMath;














public class EventState {

    
    private final EventHandler handler;

    
    private final double maxCheckInterval;

    
    private final double convergence;

    
    private final int maxIterationCount;

    
    private double t0;

    
    private double g0;

    
    private boolean g0Positive;

    
    private boolean pendingEvent;

    
    private double pendingEventTime;

    
    private double previousEventTime;

    
    private boolean forward;

    


    private boolean increasing;

    
    private int nextAction;

    
    private final UnivariateRealSolver solver;

    









    public EventState(final EventHandler handler, final double maxCheckInterval,
                      final double convergence, final int maxIterationCount,
                      final UnivariateRealSolver solver) {
        this.handler           = handler;
        this.maxCheckInterval  = maxCheckInterval;
        this.convergence       = FastMath.abs(convergence);
        this.maxIterationCount = maxIterationCount;
        this.solver            = solver;

        
        t0                = Double.NaN;
        g0                = Double.NaN;
        g0Positive        = true;
        pendingEvent      = false;
        pendingEventTime  = Double.NaN;
        previousEventTime = Double.NaN;
        increasing        = true;
        nextAction        = EventHandler.CONTINUE;

    }

    


    public EventHandler getEventHandler() {
        return handler;
    }

    


    public double getMaxCheckInterval() {
        return maxCheckInterval;
    }

    


    public double getConvergence() {
        return convergence;
    }

    


    public int getMaxIterationCount() {
        return maxIterationCount;
    }

    




    public void reinitializeBegin(final StepInterpolator interpolator)
        throws EventException {
        try {

            t0 = interpolator.getPreviousTime();
            interpolator.setInterpolatedTime(t0);
            g0 = handler.g(t0, interpolator.getInterpolatedState());
            if (g0 == 0) {
                
                
                
                
                
                
                
                
                
                

                
                
                final double epsilon = FastMath.max(solver.getAbsoluteAccuracy(),
                                                    FastMath.abs(solver.getRelativeAccuracy() * t0));
                final double tStart = t0 + 0.5 * epsilon;
                interpolator.setInterpolatedTime(tStart);
                g0 = handler.g(tStart, interpolator.getInterpolatedState());
            }
            g0Positive = g0 >= 0;

        } catch (MathUserException mue) {
            throw new EventException(mue);
        }
    }

    









    public boolean evaluateStep(final StepInterpolator interpolator)
        throws MathUserException, EventException, ConvergenceException {

        try {

            forward = interpolator.isForward();
            final double t1 = interpolator.getCurrentTime();
            final double dt = t1 - t0;
            if (FastMath.abs(dt) < convergence) {
                
                return false;
            }
            final int    n = FastMath.max(1, (int) FastMath.ceil(FastMath.abs(dt) / maxCheckInterval));
            final double h = dt / n;

            final UnivariateRealFunction f = new UnivariateRealFunction() {
                public double value(final double t) {
                    try {
                        interpolator.setInterpolatedTime(t);
                        return handler.g(t, interpolator.getInterpolatedState());
                    } catch (EventException e) {
                        throw new ConveyedException(e);
                    }
                }
            };

            double ta = t0;
            double ga = g0;
            for (int i = 0; i < n; ++i) {

                
                final double tb = t0 + (i + 1) * h;
                interpolator.setInterpolatedTime(tb);
                final double gb = handler.g(tb, interpolator.getInterpolatedState());

                
                if (g0Positive ^ (gb >= 0)) {
                    

                    
                    increasing = gb >= ga;

                    
                    final double root;
                    if (solver instanceof BracketedUnivariateRealSolver<?>) {
                        @SuppressWarnings("unchecked")
                        BracketedUnivariateRealSolver<UnivariateRealFunction> bracketing =
                                (BracketedUnivariateRealSolver<UnivariateRealFunction>) solver;
                        root = forward ?
                               bracketing.solve(maxIterationCount, f, ta, tb, AllowedSolution.RIGHT_SIDE) :
                               bracketing.solve(maxIterationCount, f, tb, ta, AllowedSolution.LEFT_SIDE);
                    } else {
                        final double baseRoot = forward ?
                                                solver.solve(maxIterationCount, f, ta, tb) :
                                                solver.solve(maxIterationCount, f, tb, ta);
                        final int remainingEval = maxIterationCount - solver.getEvaluations();
                        BracketedUnivariateRealSolver<UnivariateRealFunction> bracketing =
                                new PegasusSolver(solver.getRelativeAccuracy(), solver.getAbsoluteAccuracy());
                        root = forward ?
                               UnivariateRealSolverUtils.forceSide(remainingEval, f, bracketing,
                                                                   baseRoot, ta, tb, AllowedSolution.RIGHT_SIDE) :
                               UnivariateRealSolverUtils.forceSide(remainingEval, f, bracketing,
                                                                   baseRoot, tb, ta, AllowedSolution.LEFT_SIDE);
                    }

                    if ((!Double.isNaN(previousEventTime)) &&
                        (FastMath.abs(root - ta) <= convergence) &&
                        (FastMath.abs(root - previousEventTime) <= convergence)) {
                        
                        
                        ta = forward ? ta + convergence : ta - convergence;
                        ga = f.value(ta);
                        --i;
                    } else if (Double.isNaN(previousEventTime) ||
                               (FastMath.abs(previousEventTime - root) > convergence)) {
                        pendingEventTime = root;
                        pendingEvent = true;
                        return true;
                    } else {
                        
                        ta = tb;
                        ga = gb;
                    }

                } else {
                    
                    ta = tb;
                    ga = gb;
                }

            }

            
            pendingEvent     = false;
            pendingEventTime = Double.NaN;
            return false;

        } catch (ConveyedException ce) {
            throw ce.getConveyedException();
        }

    }

    



    public double getEventTime() {
        return pendingEvent ?
               pendingEventTime :
               (forward ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY);
    }

    







    public void stepAccepted(final double t, final double[] y)
        throws EventException {

        t0 = t;
        g0 = handler.g(t, y);

        if (pendingEvent && (FastMath.abs(pendingEventTime - t) <= convergence)) {
            
            previousEventTime = t;
            g0Positive        = increasing;
            nextAction        = handler.eventOccurred(t, y, !(increasing ^ forward));
        } else {
            g0Positive = g0 >= 0;
            nextAction = EventHandler.CONTINUE;
        }
    }

    



    public boolean stop() {
        return nextAction == EventHandler.STOP;
    }

    








    public boolean reset(final double t, final double[] y)
        throws EventException {

        if (!(pendingEvent && (FastMath.abs(pendingEventTime - t) <= convergence))) {
            return false;
        }

        if (nextAction == EventHandler.RESET_STATE) {
            handler.resetState(t, y);
        }
        pendingEvent      = false;
        pendingEventTime  = Double.NaN;

        return (nextAction == EventHandler.RESET_STATE) ||
               (nextAction == EventHandler.RESET_DERIVATIVES);

    }

    
    private static class ConveyedException extends RuntimeException {

        
        private static final long serialVersionUID = 2668348550531980574L;

        
        private final EventException conveyedException;

        


        public ConveyedException(final EventException conveyedException) {
            this.conveyedException = conveyedException;
        }

        


        public EventException getConveyedException() {
            return conveyedException;
        }

    }

}
