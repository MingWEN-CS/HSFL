21a22,24
> import org.apache.commons.math.analysis.solvers.AllowedSolutions;
> import org.apache.commons.math.analysis.solvers.BracketedUnivariateRealSolver;
> import org.apache.commons.math.analysis.solvers.PegasusSolver;
23c26
< import org.apache.commons.math.exception.MathInternalError;
---
> import org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils;
154,171d156
<             
<             
<             
<             
<             
<             
<             
<             
< 
<             
<             
<             
<             
<             
<             
<             
<             
<             
173,174c158
<             final double ignoreZone = interpolator.isForward() ? getConvergence() : -getConvergence();
<             t0 = interpolator.getPreviousTime() + ignoreZone;
---
>             t0 = interpolator.getPreviousTime();
180c164,177
<                 final double tStart = interpolator.getPreviousTime();
---
>                 
>                 
>                 
>                 
>                 
>                 
>                 
>                 
> 
>                 
>                 
>                 final double epsilon = FastMath.max(solver.getAbsoluteAccuracy(),
>                                                     FastMath.abs(solver.getRelativeAccuracy() * t0));
>                 final double tStart = t0 + 0.5 * epsilon;
182,184c179
<                 g0Positive = handler.g(tStart, interpolator.getInterpolatedState()) <= 0;
<             } else {
<                 g0Positive = g0 >= 0;
---
>                 g0 = handler.g(tStart, interpolator.getInterpolatedState());
185a181
>             g0Positive = g0 >= 0;
209c205,206
<             if (FastMath.abs(t1 - t0) < convergence) {
---
>             final double dt = t1 - t0;
>             if (FastMath.abs(dt) < convergence) {
213,216c210,222
<             final double start = forward ? (t0 + convergence) : t0 - convergence;
<             final double dt    = t1 - start;
<             final int    n     = FastMath.max(1, (int) FastMath.ceil(FastMath.abs(dt) / maxCheckInterval));
<             final double h     = dt / n;
---
>             final int    n = FastMath.max(1, (int) FastMath.ceil(FastMath.abs(dt) / maxCheckInterval));
>             final double h = dt / n;
> 
>             final UnivariateRealFunction f = new UnivariateRealFunction() {
>                 public double value(final double t) {
>                     try {
>                         interpolator.setInterpolatedTime(t);
>                         return handler.g(t, interpolator.getInterpolatedState());
>                     } catch (EventException e) {
>                         throw new ConveyedException(e);
>                     }
>                 }
>             };
223c229
<                 final double tb = start + (i + 1) * h;
---
>                 final double tb = t0 + (i + 1) * h;
234,261c240,260
<                     final UnivariateRealFunction f = new UnivariateRealFunction() {
<                         public double value(final double t) throws MathUserException {
<                             try {
<                                 interpolator.setInterpolatedTime(t);
<                                 return handler.g(t, interpolator.getInterpolatedState());
<                             } catch (EventException e) {
<                                 throw new MathUserException(e);
<                             }
<                         }
<                     };
< 
<                     if (ga * gb >= 0) {
<                         
<                         
<                         
<                         
<                         
<                         
<                         
<                         final double epsilon = (forward ? 0.25 : -0.25) * convergence;
<                         for (int k = 0; (k < 4) && (ga * gb > 0); ++k) {
<                             ta += epsilon;
<                             ga = f.value(ta);
<                         }
<                         if (ga * gb > 0) {
<                             
<                             throw new MathInternalError();
<                         }
---
>                     
>                     final double root;
>                     if (solver instanceof BracketedUnivariateRealSolver<?>) {
>                         @SuppressWarnings("unchecked")
>                         BracketedUnivariateRealSolver<UnivariateRealFunction> bracketing =
>                                 (BracketedUnivariateRealSolver<UnivariateRealFunction>) solver;
>                         root = forward ?
>                                bracketing.solve(maxIterationCount, f, ta, tb, AllowedSolutions.RIGHT_SIDE) :
>                                bracketing.solve(maxIterationCount, f, tb, ta, AllowedSolutions.LEFT_SIDE);
>                     } else {
>                         final double baseRoot = forward ?
>                                                 solver.solve(maxIterationCount, f, ta, tb) :
>                                                 solver.solve(maxIterationCount, f, tb, ta);
>                         final int remainingEval = maxIterationCount - solver.getEvaluations();
>                         BracketedUnivariateRealSolver<UnivariateRealFunction> bracketing =
>                                 new PegasusSolver(solver.getRelativeAccuracy(), solver.getAbsoluteAccuracy());
>                         root = forward ?
>                                UnivariateRealSolverUtils.forceSide(remainingEval, f, bracketing,
>                                                                    baseRoot, ta, tb, AllowedSolutions.RIGHT_SIDE) :
>                                UnivariateRealSolverUtils.forceSide(remainingEval, f, bracketing,
>                                                                    baseRoot, tb, ta, AllowedSolutions.LEFT_SIDE);
264,267d262
<                     final double root = (ta <= tb) ?
<                                         solver.solve(maxIterationCount, f, ta, tb) :
<                                         solver.solve(maxIterationCount, f, tb, ta);
< 
272,273c267,270
<                         ta = tb;
<                         ga = gb;
---
>                         
>                         ta = forward ? ta + convergence : ta - convergence;
>                         ga = f.value(ta);
>                         --i;
298,303c295,296
<         } catch (MathUserException mue) {
<             final Throwable cause = mue.getCause();
<             if ((cause != null) && (cause instanceof EventException)) {
<                 throw (EventException) cause;
<             }
<             throw mue;
---
>         } catch (ConveyedException ce) {
>             throw ce.getConveyedException();
313c306,308
<         return pendingEvent ? pendingEventTime : Double.POSITIVE_INFINITY;
---
>         return pendingEvent ?
>                pendingEventTime :
>                (forward ? Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY);
372a368,392
> 
>     }
> 
>     
>     private static class ConveyedException extends RuntimeException {
> 
>         
>         private static final long serialVersionUID = 2668348550531980574L;
> 
>         
>         private final EventException conveyedException;
> 
>         
> 
> 
>         public ConveyedException(final EventException conveyedException) {
>             this.conveyedException = conveyedException;
>         }
> 
>         
> 
> 
>         public EventException getConveyedException() {
>             return conveyedException;
>         }
