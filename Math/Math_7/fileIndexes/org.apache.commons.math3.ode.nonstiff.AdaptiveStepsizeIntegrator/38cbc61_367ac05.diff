25a26
> import org.apache.commons.math.util.FastMath;
108,109c109,110
<     this.minStep     = Math.abs(minStep);
<     this.maxStep     = Math.abs(maxStep);
---
>     this.minStep     = FastMath.abs(minStep);
>     this.maxStep     = FastMath.abs(maxStep);
242c243
<                1.0e-6 : (0.01 * Math.sqrt(yOnScale2 / yDotOnScale2));
---
>                1.0e-6 : (0.01 * FastMath.sqrt(yOnScale2 / yDotOnScale2));
259c260
<     yDDotOnScale = Math.sqrt(yDDotOnScale) / h;
---
>     yDDotOnScale = FastMath.sqrt(yDDotOnScale) / h;
263c264
<     final double maxInv2 = Math.max(Math.sqrt(yDotOnScale2), yDDotOnScale);
---
>     final double maxInv2 = FastMath.max(FastMath.sqrt(yDotOnScale2), yDDotOnScale);
265,268c266,269
<                       Math.max(1.0e-6, 0.001 * Math.abs(h)) :
<                       Math.pow(0.01 / maxInv2, 1.0 / order);
<     h = Math.min(100.0 * Math.abs(h), h1);
<     h = Math.max(h, 1.0e-12 * Math.abs(t0));  
---
>                       FastMath.max(1.0e-6, 0.001 * FastMath.abs(h)) :
>                       FastMath.pow(0.01 / maxInv2, 1.0 / order);
>     h = FastMath.min(100.0 * FastMath.abs(h), h1);
>     h = FastMath.max(h, 1.0e-12 * FastMath.abs(t0));  
296c297
<       if (Math.abs(h) < minStep) {
---
>       if (FastMath.abs(h) < minStep) {
302c303
<                       minStep, Math.abs(h));
---
>                       minStep, FastMath.abs(h));
331c332
<     stepSize  = Math.sqrt(minStep * maxStep);
---
>     stepSize  = FastMath.sqrt(minStep * maxStep);
