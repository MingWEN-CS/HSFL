80,81c80
<     
<   private static class ExpIntTable {
---
>     private static final boolean INIT_TABLES = true;
83a83,88
>     private static class ExpIntTable {
>         
> 
> 
>         private static final double[] EXP_INT_TABLE_A;
>         
86,87c91,115
<     private static final double EXP_INT_TABLE_A[] = 
<     {
---
>         private static final double[] EXP_INT_TABLE_B;
> 
>         static {
>             if (FastMath.INIT_TABLES) {
>                 EXP_INT_TABLE_A = new double[FastMath.EXP_INT_TABLE_LEN];
>                 EXP_INT_TABLE_B = new double[FastMath.EXP_INT_TABLE_LEN];
> 
>                 final double tmp[] = new double[2];
>                 final double recip[] = new double[2];
> 
>                 
>                 for (int i = 0; i < FastMath.EXP_INT_TABLE_MAX_INDEX; i++) {
>                     expint(i, tmp);
>                     EXP_INT_TABLE_A[i + FastMath.EXP_INT_TABLE_MAX_INDEX] = tmp[0];
>                     EXP_INT_TABLE_B[i + FastMath.EXP_INT_TABLE_MAX_INDEX] = tmp[1];
> 
>                     if (i != 0) {
>                         
>                         splitReciprocal(tmp, recip);
>                         EXP_INT_TABLE_A[FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[0];
>                         EXP_INT_TABLE_B[FastMath.EXP_INT_TABLE_MAX_INDEX - i] = recip[1];
>                     }
>                 }
>             } else {
>                 EXP_INT_TABLE_A = new double[] {
1588,1591c1616
<     };
< 
<     
< 
---
>                 };
1593,1594c1618
<     private static final double EXP_INT_TABLE_B[] =
<     {
---
>                 EXP_INT_TABLE_B = new double[] {
3095,3096c3119,3122
<     };
<   }
---
>                 };
>             }
>         }
>     }
3098,3099c3124,3125
<     private static final int TWO_POWER_10 = 1024;
<     private static final int EXP_FRAC_TABLE_LEN = TWO_POWER_10 + 1; 
---
>       private static final int TWO_POWER_10 = 1024;
>       private static final int EXP_FRAC_TABLE_LEN = TWO_POWER_10 + 1; 
3101,3102c3127,3129
<     
<   private static class ExpFracTable {
---
>       
>       private static class ExpFracTable {
>           
3104d3130
<     
3106a3133,3134
>           private static final double[] EXP_FRAC_TABLE_A;
>           
3108,3109c3136,3154
<     private static final double EXP_FRAC_TABLE_A[] = 
<         {
---
> 
>           private static final double[] EXP_FRAC_TABLE_B;
> 
>           static {
>               if (FastMath.INIT_TABLES) {
>                   EXP_FRAC_TABLE_A = new double[FastMath.EXP_INT_TABLE_LEN];
>                   EXP_FRAC_TABLE_B = new double[FastMath.EXP_INT_TABLE_LEN];
> 
>                   final double tmp[] = new double[2];
>                   final double recip[] = new double[2];
> 
>                   
>                   for (int i = 0; i < EXP_FRAC_TABLE_A.length; i++) {
>                       slowexp(i/1024.0, tmp); 
>                       EXP_FRAC_TABLE_A[i] = tmp[0];
>                       EXP_FRAC_TABLE_B[i] = tmp[1];
>                   }
>               } else {
>                   EXP_FRAC_TABLE_A = new double[] {
4135c4180
<     };
---
>                   };
4137,4141c4182
<     
< 
< 
<     private static final double EXP_FRAC_TABLE_B[] =
<         {
---
>                   EXP_FRAC_TABLE_B = new double[] {
5167,5168c5208,5211
<     };
<   }
---
>                   };
>               }
>           }
>       }
5195,5196c5238
<     };
<             
---
>         };
5201,5204c5243,5257
<   private static class lnMant {
< 
<     
<     private static final double LN_MANT[][] =     { 
---
>       private static class lnMant {
>           
>           private static final double[][] LN_MANT;
> 
>           static {
>               if (FastMath.INIT_TABLES) {
>                   LN_MANT = new double[FastMath.LN_MANT_LEN][];
> 
>                   
>                   for (int i = 0; i < LN_MANT.length; i++) {
>                       final double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );
>                       LN_MANT[i] = slowLog(d);
>                   }
>               } else {
>                   LN_MANT = new double[][] { 
6229,6231c6282,6285
<     };
<   }
< 
---
>                   };
>               }
>           }
>       }
6457,6458d6510
< 
<     private static final boolean INIT_TABLES = false;
6461,6493c6513,6515
<     static {
<       if (INIT_TABLES) { 
<         int i;
< 
<         
<         FACT[0] = 1.0;
<         for (i = 1; i < FACT.length; i++) {
<             FACT[i] = FACT[i-1] * i;
<         }
< 
<         double tmp[] = new double[2];
<         double recip[] = new double[2];
< 
<         
<         for (i = 0; i < EXP_INT_TABLE_MAX_INDEX; i++) {
<             expint(i, tmp);
<             ExpIntTable.EXP_INT_TABLE_A[i+EXP_INT_TABLE_MAX_INDEX] = tmp[0];
<             ExpIntTable.EXP_INT_TABLE_B[i+EXP_INT_TABLE_MAX_INDEX] = tmp[1];
< 
<             if (i != 0) {
<                 
<                 splitReciprocal(tmp, recip);
<                 ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX-i] = recip[0];
<                 ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX-i] = recip[1];
<             }
<         }
< 
<         
<         for (i = 0; i < ExpFracTable.EXP_FRAC_TABLE_A.length; i++) {
<             slowexp(i/1024.0, tmp); 
<             ExpFracTable.EXP_FRAC_TABLE_A[i] = tmp[0];
<             ExpFracTable.EXP_FRAC_TABLE_B[i] = tmp[1];
<         }
---
>     
>     
>     
6495,6499c6517,6521
<         
<         for (i = 0; i < lnMant.LN_MANT.length; i++) {
<             double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );
<             lnMant.LN_MANT[i] = slowLog(d);
<         }
---
>     
>     
>     
>     
>     
6501,6504c6523,6526
<         
<         buildSinCosTables();
<       }
<     }
---
>     
>     
>     
>     
