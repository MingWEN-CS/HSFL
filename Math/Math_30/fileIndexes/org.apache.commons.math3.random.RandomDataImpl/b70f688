
















package org.apache.commons.math.random;

import java.io.Serializable;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.SecureRandom;
import java.util.Collection;

import org.apache.commons.math.distribution.BetaDistribution;
import org.apache.commons.math.distribution.BinomialDistribution;
import org.apache.commons.math.distribution.CauchyDistribution;
import org.apache.commons.math.distribution.ChiSquaredDistribution;
import org.apache.commons.math.distribution.RealDistribution;
import org.apache.commons.math.distribution.FDistribution;
import org.apache.commons.math.distribution.HypergeometricDistribution;
import org.apache.commons.math.distribution.IntegerDistribution;
import org.apache.commons.math.distribution.PascalDistribution;
import org.apache.commons.math.distribution.TDistribution;
import org.apache.commons.math.distribution.WeibullDistribution;
import org.apache.commons.math.distribution.ZipfDistribution;
import org.apache.commons.math.exception.MathIllegalArgumentException;
import org.apache.commons.math.exception.MathInternalError;
import org.apache.commons.math.exception.NotStrictlyPositiveException;
import org.apache.commons.math.exception.NumberIsTooLargeException;
import org.apache.commons.math.exception.util.LocalizedFormats;
import org.apache.commons.math.util.ArithmeticUtils;
import org.apache.commons.math.util.FastMath;
import org.apache.commons.math.util.ResizableDoubleArray;


























































public class RandomDataImpl implements RandomData, Serializable {

    
    private static final long serialVersionUID = -626730818244969716L;

    












    private static double[] EXPONENTIAL_SA_QI = null;

    
    private RandomGenerator rand = null;

    
    private SecureRandom secRand = null;

    


    static {
        



        final double LN2 = FastMath.log(2);
        double qi = 0;
        int i = 1;

        





        final ResizableDoubleArray ra = new ResizableDoubleArray(20);

        while (qi < 1) {
            qi += FastMath.pow(LN2, i) / ArithmeticUtils.factorial(i);
            ra.addElement(qi);
            ++i;
        }

        EXPONENTIAL_SA_QI = ra.getElements();
    }

    







    public RandomDataImpl() {
    }

    







    public RandomDataImpl(RandomGenerator rand) {
        super();
        this.rand = rand;
    }

    















    public String nextHexString(int len) throws NotStrictlyPositiveException {
        if (len <= 0) {
            throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);
        }

        
        RandomGenerator ran = getRan();

        
        StringBuilder outBuffer = new StringBuilder();

        
        byte[] randomBytes = new byte[(len / 2) + 1];
        ran.nextBytes(randomBytes);

        
        for (int i = 0; i < randomBytes.length; i++) {
            Integer c = Integer.valueOf(randomBytes[i]);

            




            String hex = Integer.toHexString(c.intValue() + 128);

            
            if (hex.length() == 1) {
                hex = "0" + hex;
            }
            outBuffer.append(hex);
        }
        return outBuffer.toString().substring(0, len);
    }

    
    public int nextInt(int lower, int upper) throws NumberIsTooLargeException {
        if (lower >= upper) {
            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,
                                                lower, upper, false);
        }
        double r = getRan().nextDouble();
        double scaled = r * upper + (1.0 - r) * lower + r;
        return (int) FastMath.floor(scaled);
    }

    
    public long nextLong(long lower, long upper) {
        if (lower >= upper) {
            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,
                                                lower, upper, false);
        }
        double r = getRan().nextDouble();
        double scaled = r * upper + (1.0 - r) * lower + r;
        return (long)FastMath.floor(scaled);
    }

    















    public String nextSecureHexString(int len) throws NotStrictlyPositiveException {
        if (len <= 0) {
            throw new NotStrictlyPositiveException(LocalizedFormats.LENGTH, len);
        }

        
        SecureRandom secRan = getSecRan();
        MessageDigest alg = null;
        try {
            alg = MessageDigest.getInstance("SHA-1");
        } catch (NoSuchAlgorithmException ex) {
            
            throw new MathInternalError(ex);
        }
        alg.reset();

        
        int numIter = (len / 40) + 1;

        StringBuilder outBuffer = new StringBuilder();
        for (int iter = 1; iter < numIter + 1; iter++) {
            byte[] randomBytes = new byte[40];
            secRan.nextBytes(randomBytes);
            alg.update(randomBytes);

            
            byte[] hash = alg.digest();

            
            for (int i = 0; i < hash.length; i++) {
                Integer c = Integer.valueOf(hash[i]);

                




                String hex = Integer.toHexString(c.intValue() + 128);

                
                if (hex.length() == 1) {
                    hex = "0" + hex;
                }
                outBuffer.append(hex);
            }
        }
        return outBuffer.toString().substring(0, len);
    }

    
    public int nextSecureInt(int lower, int upper) {
        if (lower >= upper) {
            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,
                                                lower, upper, false);
        }
        SecureRandom sec = getSecRan();
        double r = sec.nextDouble();
        double scaled = r * upper + (1.0 - r) * lower + r;
        return (int)FastMath.floor(scaled);
    }

    
    public long nextSecureLong(long lower, long upper)
        throws NumberIsTooLargeException {

        if (lower >= upper) {
            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,
                                                lower, upper, false);
        }
        SecureRandom sec = getSecRan();
        double r = sec.nextDouble();
        double scaled = r * upper + (1.0 - r) * lower + r;
        return (long)FastMath.floor(scaled);
    }

    












    public long nextPoisson(double mean) throws NotStrictlyPositiveException {
        if (mean <= 0) {
            throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, mean);
        }

        final double pivot = 40.0d;
        if (mean < pivot) {
            final RandomGenerator generator = getRan();
            double p = FastMath.exp(-mean);
            long n = 0;
            double r = 1.0d;
            double rnd = 1.0d;

            while (n < 1000 * mean) {
                rnd = generator.nextDouble();
                r = r * rnd;
                if (r >= p) {
                    n++;
                } else {
                    return n;
                }
            }
            return n;
        } else {
            final double lambda = FastMath.floor(mean);
            final double lambdaFractional = mean - lambda;
            final double logLambda = FastMath.log(lambda);
            final double logLambdaFactorial = ArithmeticUtils.factorialLog((int) lambda);
            final long y2 = lambdaFractional < Double.MIN_VALUE ? 0 : nextPoisson(lambdaFractional);
            final double delta = FastMath.sqrt(lambda * FastMath.log(32 * lambda / FastMath.PI + 1));
            final double halfDelta = delta / 2;
            final double twolpd = 2 * lambda + delta;
            final double a1 = FastMath.sqrt(FastMath.PI * twolpd) * FastMath.exp(1 / 8 * lambda);
            final double a2 = (twolpd / delta) * FastMath.exp(-delta * (1 + delta) / twolpd);
            final double aSum = a1 + a2 + 1;
            final double p1 = a1 / aSum;
            final double p2 = a2 / aSum;
            final double c1 = 1 / (8 * lambda);

            double x = 0;
            double y = 0;
            double v = 0;
            int a = 0;
            double t = 0;
            double qr = 0;
            double qa = 0;
            for (;;) {
                final double u = nextUniform(0.0, 1);
                if (u <= p1) {
                    final double n = nextGaussian(0d, 1d);
                    x = n * FastMath.sqrt(lambda + halfDelta) - 0.5d;
                    if (x > delta || x < -lambda) {
                        continue;
                    }
                    y = x < 0 ? FastMath.floor(x) : FastMath.ceil(x);
                    final double e = nextExponential(1d);
                    v = -e - (n * n / 2) + c1;
                } else {
                    if (u > p1 + p2) {
                        y = lambda;
                        break;
                    } else {
                        x = delta + (twolpd / delta) * nextExponential(1d);
                        y = FastMath.ceil(x);
                        v = -nextExponential(1d) - delta * (x + 1) / twolpd;
                    }
                }
                a = x < 0 ? 1 : 0;
                t = y * (y + 1) / (2 * lambda);
                if (v < -t && a == 0) {
                    y = lambda + y;
                    break;
                }
                qr = t * ((2 * y + 1) / (6 * lambda) - 1);
                qa = qr - (t * t) / (3 * (lambda + a * (y + 1)));
                if (v < qa) {
                    y = lambda + y;
                    break;
                }
                if (v > qr) {
                    continue;
                }
                if (v < y * logLambda - ArithmeticUtils.factorialLog((int) (y + lambda)) + logLambdaFactorial) {
                    y = lambda + y;
                    break;
                }
            }
            return y2 + (long) y;
        }
    }

    
    public double nextGaussian(double mu, double sigma)
        throws NotStrictlyPositiveException {

        if (sigma <= 0) {
            throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sigma);
        }
        return sigma * getRan().nextGaussian() + mu;
    }

    










    public double nextExponential(double mean)
        throws NotStrictlyPositiveException {

        if (mean <= 0.0) {
            throw new NotStrictlyPositiveException(LocalizedFormats.MEAN, mean);
        }

        
        double a = 0;
        double u = this.nextUniform(0, 1);

        
        while (u < 0.5) {
            a += EXPONENTIAL_SA_QI[0];
            u *= 2;
        }

        
        u += u - 1;

        
        if (u <= EXPONENTIAL_SA_QI[0]) {
            return mean * (a + u);
        }

        
        int i = 0; 
        double u2 = this.nextUniform(0, 1);
        double umin = u2;

        
        do {
            ++i;
            u2 = this.nextUniform(0, 1);

            if (u2 < umin) {
                umin = u2;
            }

            
        } while (u > EXPONENTIAL_SA_QI[i]); 

        return mean * (a + umin * EXPONENTIAL_SA_QI[0]);
    }

    












    public double nextUniform(double lower, double upper)
        throws NumberIsTooLargeException, MathIllegalArgumentException {

        return nextUniform(lower, upper, false);
    }

    














    public double nextUniform(double lower, double upper,
        boolean lowerInclusive)
        throws NumberIsTooLargeException, MathIllegalArgumentException {

        if (lower >= upper) {
            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,
                                                lower, upper, false);
        }

        if (Double.isInfinite(lower) || Double.isInfinite(upper)) {
            throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_BOUND);
        }

        if (Double.isNaN(lower) || Double.isNaN(upper)) {
            throw new MathIllegalArgumentException(LocalizedFormats.NAN_NOT_ALLOWED);
        }

        final RandomGenerator generator = getRan();

        
        double u = generator.nextDouble();
        while (!lowerInclusive && u <= 0.0) {
            u = generator.nextDouble();
        }

        return u * upper + (1.0 - u) * lower;
    }

    









    public double nextBeta(double alpha, double beta) {
        return nextInversionDeviate(new BetaDistribution(alpha, beta));
    }

    









    public int nextBinomial(int numberOfTrials, double probabilityOfSuccess) {
        return nextInversionDeviate(new BinomialDistribution(numberOfTrials, probabilityOfSuccess));
    }

    









    public double nextCauchy(double median, double scale) {
        return nextInversionDeviate(new CauchyDistribution(median, scale));
    }

    








    public double nextChiSquare(double df) {
        return nextInversionDeviate(new ChiSquaredDistribution(df));
    }

    









    public double nextF(double numeratorDf, double denominatorDf) {
        return nextInversionDeviate(new FDistribution(numeratorDf, denominatorDf));
    }

    




















    public double nextGamma(double shape, double scale) {
        if (shape < 1) {
            

            while (true) {
                
                final double u = this.nextUniform(0, 1);
                final double bGS = 1 + shape/FastMath.E;
                final double p = bGS*u;

                if (p <= 1) {
                    

                    final double x = FastMath.pow(p, 1/shape);
                    final double u2 = this.nextUniform(0.0, 1);

                    if (u2 > FastMath.exp(-x)) {
                        
                        continue;
                    } else {
                        return scale*x;
                    }
                } else {
                    

                    final double x = -1 * FastMath.log((bGS-p)/shape);
                    final double u2 = this.nextUniform(0, 1);

                    if (u2 > FastMath.pow(x, shape - 1)) {
                        
                        continue;
                    } else {
                        return scale*x;
                    }
                }
            }
        }

        

        final RandomGenerator generator = this.getRan();
        final double d = shape - 0.333333333333333333;
        final double c = 1.0 / (3*FastMath.sqrt(d));

        while (true) {
            final double x = generator.nextGaussian();
            final double v = (1+c*x)*(1+c*x)*(1+c*x);

            if (v <= 0) {
                continue;
            }

            final double xx = x*x;
            final double u = this.nextUniform(0, 1);

            
            if (u < 1 - 0.0331*xx*xx) {
                return scale*d*v;
            }

            if (FastMath.log(u) < 0.5*xx + d*(1 - v + FastMath.log(v))) {
                return scale*d*v;
            }
        }
    }

    










    public int nextHypergeometric(int populationSize, int numberOfSuccesses, int sampleSize) {
        return nextInversionDeviate(new HypergeometricDistribution(populationSize, numberOfSuccesses, sampleSize));
    }

    









    public int nextPascal(int r, double p) {
        return nextInversionDeviate(new PascalDistribution(r, p));
    }

    








    public double nextT(double df) {
        return nextInversionDeviate(new TDistribution(df));
    }

    









    public double nextWeibull(double shape, double scale) {
        return nextInversionDeviate(new WeibullDistribution(shape, scale));
    }

    









    public int nextZipf(int numberOfElements, double exponent) {
        return nextInversionDeviate(new ZipfDistribution(numberOfElements, exponent));
    }

    









    private RandomGenerator getRan() {
        if (rand == null) {
            initRan();
        }
        return rand;
    }

    



    private void initRan() {
        rand = new Well19937c(System.currentTimeMillis() + System.identityHashCode(this));
    }

    








    private SecureRandom getSecRan() {
        if (secRand == null) {
            secRand = new SecureRandom();
            secRand.setSeed(System.currentTimeMillis() + System.identityHashCode(this));
        }
        return secRand;
    }

    








    public void reSeed(long seed) {
        if (rand == null) {
            initRan();
        }
        rand.setSeed(seed);
    }

    






    public void reSeedSecure() {
        if (secRand == null) {
            secRand = new SecureRandom();
        }
        secRand.setSeed(System.currentTimeMillis());
    }

    








    public void reSeedSecure(long seed) {
        if (secRand == null) {
            secRand = new SecureRandom();
        }
        secRand.setSeed(seed);
    }

    



    public void reSeed() {
        if (rand == null) {
            initRan();
        }
        rand.setSeed(System.currentTimeMillis() + System.identityHashCode(this));
    }

    



















    public void setSecureAlgorithm(String algorithm, String provider)
            throws NoSuchAlgorithmException, NoSuchProviderException {
        secRand = SecureRandom.getInstance(algorithm, provider);
    }

    








    public int[] nextPermutation(int n, int k) {
        if (k > n) {
            throw new NumberIsTooLargeException(LocalizedFormats.PERMUTATION_EXCEEDS_N,
                                                k, n, true);
        }
        if (k <= 0) {
            throw new NotStrictlyPositiveException(LocalizedFormats.PERMUTATION_SIZE,
                                                   k);
        }

        int[] index = getNatural(n);
        shuffle(index, n - k);
        int[] result = new int[k];
        for (int i = 0; i < k; i++) {
            result[i] = index[n - i - 1];
        }

        return result;
    }

    












    public Object[] nextSample(Collection<?> c, int k)
        throws NumberIsTooLargeException, NotStrictlyPositiveException {

        int len = c.size();
        if (k > len) {
            throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_EXCEEDS_COLLECTION_SIZE,
                                                k, len, true);
        }
        if (k <= 0) {
            throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, k);
        }

        Object[] objects = c.toArray();
        int[] index = nextPermutation(len, k);
        Object[] result = new Object[k];
        for (int i = 0; i < k; i++) {
            result[i] = objects[index[i]];
        }
        return result;
    }

    







    public double nextInversionDeviate(RealDistribution distribution) {
        return distribution.inverseCumulativeProbability(nextUniform(0, 1));

    }

    







    public int nextInversionDeviate(IntegerDistribution distribution) {
        return distribution.inverseCumulativeProbability(nextUniform(0, 1));
    }

    

    








    private void shuffle(int[] list, int end) {
        int target = 0;
        for (int i = list.length - 1; i >= end; i--) {
            if (i == 0) {
                target = 0;
            } else {
                target = nextInt(0, i);
            }
            int temp = list[target];
            list[target] = list[i];
            list[i] = temp;
        }
    }

    






    private int[] getNatural(int n) {
        int[] natural = new int[n];
        for (int i = 0; i < n; i++) {
            natural[i] = i;
        }
        return natural;
    }

}
