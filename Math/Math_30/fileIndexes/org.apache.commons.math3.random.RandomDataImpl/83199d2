





















































package org.apache.commons.math.random;

import java.security.MessageDigest;
import java.security.SecureRandom;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.util.Random;
import java.util.Collection;














































public class RandomDataImpl implements RandomData {
    
    
    private Random rand = null;
    
    
    private SecureRandom secRand = null;
    
    


    public RandomDataImpl() {
    }
          
    







    public String nextHexString(int len) {
        if (len <= 0) {
            throw new IllegalArgumentException("length must be positive");
        }
            
        
        Random ran = getRan();
        
        
        StringBuffer outBuffer = new StringBuffer();
            
        
        byte[] randomBytes = new byte[(len / 2) + 1];
        ran.nextBytes(randomBytes);
 
        
        for (int i = 0; i < randomBytes.length; i++) {
            Integer c = new Integer(randomBytes[i]);
                
            




             String hex = Integer.toHexString(c.intValue() + 128);
                
             
             if (hex.length() == 1)  {
                 hex = "0" + hex;
             }
             outBuffer.append(hex);
        }
        return outBuffer.toString().substring(0, len);
    }
       
    public int nextInt(int lower, int upper) {
        if (lower >= upper) {
            throw new IllegalArgumentException
                ("upper bound must be > lower bound");
        }
        Random rand = getRan();
        return lower + (int) (rand.nextDouble() * (upper - lower + 1));
    }
    
    public long nextLong(long lower, long upper) {
        if (lower >= upper) {
            throw new IllegalArgumentException
                ("upper bound must be > lower bound");
        }
        Random rand = getRan();
        return lower + (long) (rand.nextDouble() * (upper - lower + 1));
    }
    
     













    public String nextSecureHexString(int len) {
        if (len <= 0) {
            throw new IllegalArgumentException("length must be positive");
        }
       
       
       SecureRandom secRan = getSecRan();
       MessageDigest alg = null;
       try {
            alg = MessageDigest.getInstance("SHA-1");
       } catch (NoSuchAlgorithmException ex) {
           return null; 
       }
       alg.reset(); 
       
       
       int numIter = (len / 40) + 1;
       
       StringBuffer outBuffer = new StringBuffer();
       for (int iter = 1; iter < numIter + 1; iter++) {
            byte[] randomBytes = new byte[40];
            secRan.nextBytes(randomBytes);
            alg.update(randomBytes);
    
            
            byte hash[] = alg.digest();
            
            
            for (int i = 0; i < hash.length; i++) {
                Integer c = new Integer(hash[i]);
        
                




                String hex = Integer.toHexString(c.intValue() + 128);
                    
               
                if (hex.length() == 1) {
                    hex = "0" + hex;
                }
               outBuffer.append(hex);
            }
        }
        return outBuffer.toString().substring(0, len);
    }
     
    public int nextSecureInt(int lower, int upper) {
          if (lower >= upper) {
              throw new IllegalArgumentException
                ("lower bound must be < upper bound");
          }
          SecureRandom sec = getSecRan();
          return lower + (int) (sec.nextDouble() * (upper - lower + 1));
    }
     
    public long nextSecureLong(long lower, long upper) {
        if (lower >= upper) {
            throw new IllegalArgumentException
            ("lower bound must be < upper bound");
        }
        SecureRandom sec = getSecRan();
        return lower + (long) (sec.nextDouble() * (upper - lower + 1));
    }
    
    







    public long nextPoisson(double mean) {
        double p = Math.exp(-mean);
        long n = 0;
        double r = 1.0d;
        Random rand = getRan();
        if (mean <= 0) {
            throw new IllegalArgumentException("Poisson mean must be > 0");
        }
        while (true) {
            double rnd = rand.nextDouble();
            r = r * rnd;
            if (r >= p) {
                n++;
            } else {
                return n;
            }
        }
    }
    
    public double nextGaussian(double mu, double sigma) {
        if (sigma <= 0) {
            throw new IllegalArgumentException("Gaussian std dev must be > 0");
        }
        Random rand = getRan();
        return sigma * rand.nextGaussian() + mu;
    }
    
    




    public double nextExponential(double mean)  {
        if (mean < 0.0)  {
            throw new IllegalArgumentException
                ("Exponential mean must be >= 0");
        }
        Random rand = getRan();
        double unif = rand.nextDouble();
        while (unif == 0.0d) {
            unif = rand.nextDouble();
        }
        return -mean * Math.log(unif);
    }
    
    






    public double nextUniform(double lower, double upper) {
        if (lower >= upper) {
            throw new IllegalArgumentException
            ("lower bound must be <= upper bound");
        }
        Random rand = getRan();
        double result = lower + rand.nextDouble() * (upper - lower);
        while (result == lower) {
              result = lower + rand.nextDouble() * (upper - lower);
        }
        return result;   
    }
    
    






    private Random getRan() {
        if (rand == null) {
            rand = new Random();
            rand.setSeed(System.currentTimeMillis());
        }
        return rand;
    }
    
    






    private SecureRandom getSecRan() {
        if (secRand == null) {
            secRand = new SecureRandom();
            secRand.setSeed(System.currentTimeMillis());
        }
        return secRand;
    }
    
    






    public void reSeed(long seed) {
        if (rand == null) {
            rand = new Random();
        }
        rand.setSeed(seed);
    }
    
    





    public void reSeedSecure() {
        if (secRand == null) {
            secRand = new SecureRandom();
        }
        secRand.setSeed(System.currentTimeMillis());
    }
    
    






    public void reSeedSecure(long seed) {
        if (secRand == null) {
            secRand = new SecureRandom();
        }
        secRand.setSeed(seed);
    }
    
    



    public void reSeed() {
        if (rand == null) {
            rand = new Random();
        }
        rand.setSeed(System.currentTimeMillis());
    }
    
    
















    public void setSecureAlgorithm(String algorithm, String provider) 
        throws NoSuchAlgorithmException, NoSuchProviderException {
        secRand = SecureRandom.getInstance(algorithm, provider);
    }
    
    





    public int[] nextPermutation(int n, int k) {
        if (k > n) {
            throw new IllegalArgumentException
                ("permutation k exceeds n");
        }       
        if (k == 0) {
            throw new IllegalArgumentException
                ("permutation k must be > 0");
        }
        
        int[] index = getNatural(n);
        shuffle(index, n - k);
        int[] result = new int[k];
        for (int i = 0; i < k; i++) {
            result[i] = index[n - i - 1];
        }
  
        return result;
    }
    
    







 
    public Object[] nextSample(Collection c, int k) {
        int len = c.size();
        if (k > len) {
            throw new IllegalArgumentException
                ("sample size exceeds collection size");
        }
        if (k == 0) {
            throw new IllegalArgumentException
                ("sample size must be > 0");
        }
            
       Object[] objects = c.toArray();
       int[] index = nextPermutation(len, k);
       Object[] result = new Object[k];
       for (int i = 0; i < k; i++) {
           result[i] = objects[index[i]];
       }  
       return result;
    }
    
    
    
    






    private void shuffle(int[] list, int end) {
        int target = 0;
        for (int i = list.length - 1 ; i >= end; i--) {
            if (i == 0) {
                target = 0; 
            } else {
                target = nextInt(0, i);
            }
            int temp = list[target];
            list[target] = list[i];
            list[i] = temp;
        }      
    }
    
    





    private int[] getNatural(int n) {
        int[] natural = new int[n];
        for (int i = 0; i < n; i++) {
            natural[i] = i;
        }
        return natural;
    }
        
}
