200,202c200
< 
< 
<     public String nextHexString(int len) {
---
>     public String nextHexString(int len) throws NotStrictlyPositiveException {
238,248c236
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<     public int nextInt(int lower, int upper) {
---
>     public int nextInt(int lower, int upper) throws NumberIsTooLargeException {
255c243
<         return (int)FastMath.floor(scaled);
---
>         return (int) FastMath.floor(scaled);
259,268d246
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
295,300c273
< 
< 
< 
< 
< 
<     public String nextSecureHexString(int len) {
---
>     public String nextSecureHexString(int len) throws NotStrictlyPositiveException {
326c299
<             byte hash[] = alg.digest();
---
>             byte[] hash = alg.digest();
350,360d322
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
372a335,336
>     public long nextSecureLong(long lower, long upper)
>         throws NumberIsTooLargeException {
374,384d337
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<     public long nextSecureLong(long lower, long upper) {
408,412c361
< 
< 
< 
< 
<     public long nextPoisson(double mean) {
---
>     public long nextPoisson(double mean) throws NotStrictlyPositiveException {
503a453,454
>     public double nextGaussian(double mu, double sigma)
>         throws NotStrictlyPositiveException {
505,515d455
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<     public double nextGaussian(double mu, double sigma) {
532a473,474
>     public double nextExponential(double mean)
>         throws NotStrictlyPositiveException {
534,537d475
< 
< 
< 
<     public double nextExponential(double mean) {
592a531,532
>     public double nextUniform(double lower, double upper)
>         throws NumberIsTooLargeException, MathIllegalArgumentException {
594,597d533
< 
< 
< 
<     public double nextUniform(double lower, double upper) {
615a552,554
>     public double nextUniform(double lower, double upper,
>         boolean lowerInclusive)
>         throws NumberIsTooLargeException, MathIllegalArgumentException {
617,624d555
< 
< 
< 
< 
< 
< 
< 
<     public double nextUniform(double lower, double upper, boolean lowerInclusive) {
1008,1028d938
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1034c944
<         if (k == 0) {
---
>         if (k <= 0) {
1061a972,973
>     public Object[] nextSample(Collection<?> c, int k)
>         throws NumberIsTooLargeException, NotStrictlyPositiveException {
1063,1067d974
< 
< 
< 
< 
<     public Object[] nextSample(Collection<?> c, int k) {
