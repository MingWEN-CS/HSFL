21a22
> import org.apache.commons.math.util.FastMath;
61c62
<     private static final double HALF_LOG_2_PI = 0.5 * Math.log(2.0 * Math.PI);
---
>     private static final double HALF_LOG_2_PI = 0.5 * FastMath.log(2.0 * FastMath.PI);
109,110c110,111
<             ret = ((x + .5) * Math.log(tmp)) - tmp +
<                 HALF_LOG_2_PI + Math.log(sum / x);
---
>             ret = ((x + .5) * FastMath.log(tmp)) - tmp +
>                 HALF_LOG_2_PI + FastMath.log(sum / x);
178c179
<             while (Math.abs(an/sum) > epsilon && n < maxIterations && sum < Double.POSITIVE_INFINITY) {
---
>             while (FastMath.abs(an/sum) > epsilon && n < maxIterations && sum < Double.POSITIVE_INFINITY) {
191c192
<                 ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;
---
>                 ret = FastMath.exp(-x + (a * FastMath.log(x)) - logGamma(a)) * sum;
266c267
<             ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;
---
>             ret = FastMath.exp(-x + (a * FastMath.log(x)) - logGamma(a)) * ret;
306c307
<             return Math.log(x) - 0.5 / x - inv * ((1.0 / 12) + inv * (1.0 / 120 - inv / 252));
---
>             return FastMath.log(x) - 0.5 / x - inv * ((1.0 / 12) + inv * (1.0 / 120 - inv / 252));
