















package org.apache.commons.math.util;

import java.io.Serializable;
import java.util.Arrays;

import org.apache.commons.math.MathRuntimeException;



















































public class ResizableDoubleArray implements DoubleArray, Serializable {
    
    
    private static final long serialVersionUID = -3485529955529426875L; 
    
    
    public static final int ADDITIVE_MODE = 1;
    
    
    public static final int MULTIPLICATIVE_MODE = 0;
   
    




    protected float contractionCriteria = 2.5f;

    







    protected float expansionFactor = 2.0f;
    
    



    protected int expansionMode = MULTIPLICATIVE_MODE;

    



    protected int initialCapacity = 16;
    
    


    protected double[] internalArray;

    



    protected int numElements = 0;

    





    protected int startIndex = 0;

    








    public ResizableDoubleArray() {
        internalArray = new double[initialCapacity];
    }

    










    public ResizableDoubleArray(int initialCapacity) {
        setInitialCapacity(initialCapacity);
        internalArray = new double[this.initialCapacity];
    }

    





















    public ResizableDoubleArray(int initialCapacity, float expansionFactor) {
        this.expansionFactor = expansionFactor;
        setInitialCapacity(initialCapacity);
        internalArray = new double[initialCapacity];
        setContractionCriteria(expansionFactor +0.5f);
    }

    


















    public ResizableDoubleArray(int initialCapacity, float expansionFactor,
        float contractionCriteria) {
        this.expansionFactor = expansionFactor;
        setContractionCriteria(contractionCriteria);
        setInitialCapacity(initialCapacity);
        internalArray = new double[initialCapacity];
    }
    
    




















    public ResizableDoubleArray(int initialCapacity, float expansionFactor,
            float contractionCriteria, int expansionMode) {
        this.expansionFactor = expansionFactor;
        setContractionCriteria(contractionCriteria);
        setInitialCapacity(initialCapacity);
        setExpansionMode(expansionMode);
        internalArray = new double[initialCapacity];
    }
    
    








    public ResizableDoubleArray(ResizableDoubleArray original) {
        copy(original, this);
    }

    




    public synchronized void addElement(double value) {
        numElements++;
        if ((startIndex + numElements) > internalArray.length) {
            expand();
        }
        internalArray[startIndex + (numElements - 1)] = value;
        if (shouldContract()) {
            contract();
        }
    }

    















    public synchronized double addElementRolling(double value) {
        double discarded = internalArray[startIndex];

        if ((startIndex + (numElements + 1)) > internalArray.length) {
            expand();
        }
        
        startIndex += 1;

        
        internalArray[startIndex + (numElements - 1)] = value;

        
        if (shouldContract()) {
            contract();
        }
        return discarded;
    }
       
    








    public synchronized double substituteMostRecentElement(double value) {
        if (numElements < 1) {
            throw MathRuntimeException.createArrayIndexOutOfBoundsException(
                    "cannot substitute an element from an empty array", null);
        }

        double discarded = internalArray[startIndex + (numElements - 1)];

        internalArray[startIndex + (numElements - 1)] = value;

        return discarded;
    }

    
    









    protected void checkContractExpand(
        float contractionCritera,
        float expansionFactor) {

        if (contractionCritera < expansionFactor) {
            String msg =
                "Contraction criteria can never be smaller than " +
                "the expansion factor.  This would lead to a never " +
                "ending loop of expansion and contraction as a newly " +
                "expanded internal storage array would immediately " +
                "satisfy the criteria for contraction";
            throw new IllegalArgumentException(msg);
        }

        if (contractionCriteria <= 1.0) {
            String msg =
                "The contraction criteria must be a number larger " +
                "than one.  If the contractionCriteria is less than or " +
                "equal to one an endless loop of contraction and " +
                "expansion would ensue as an internalArray.length " +
                "== numElements would satisfy the contraction criteria";
            throw new IllegalArgumentException(msg);
        }

        if (expansionFactor <= 1.0) {
            String msg =
                "The expansion factor must be a number greater than 1.0";
            throw new IllegalArgumentException(msg);
        }
    }
    
    



    public synchronized void clear() {
        numElements = 0;
        internalArray = new double[initialCapacity];
    }
    
    




    public synchronized void contract() {
        double[] tempArray = new double[numElements + 1];

        
        System.arraycopy(internalArray, startIndex, tempArray, 0, numElements);
        internalArray = tempArray;

        
        startIndex = 0;
    }

    










    public synchronized void discardFrontElements(int i) {

        discardExtremeElements(i,true);
        
    }

    










    public synchronized void discardMostRecentElements(int i) {

        discardExtremeElements(i,false);
        
    }
    
    


















    private synchronized void discardExtremeElements(int i,boolean front) {
        if (i > numElements) {
            String msg = "Cannot discard more elements than are" +
            "contained in this array.";
            throw new IllegalArgumentException(msg);
        } else if (i < 0) {
            String msg = "Cannot discard a negative number of elements.";
            throw new IllegalArgumentException(msg);
        } else {
            
            numElements -= i;
            if (front) startIndex += i;
        }
        if (shouldContract()) {
            contract();
        }
    }

    








    protected synchronized void expand() {

        
        
        
        
        
        int newSize = 0;
        if (expansionMode == MULTIPLICATIVE_MODE) {
            newSize = (int) Math.ceil(internalArray.length * expansionFactor);
        } else {
            newSize = internalArray.length + Math.round(expansionFactor);
        }
        double[] tempArray = new double[newSize];

        
        System.arraycopy(internalArray, 0, tempArray, 0, internalArray.length);
        internalArray = tempArray;
    }
    
    




    private synchronized void expandTo(int size) {
        double[] tempArray = new double[size];
        
        System.arraycopy(internalArray, 0, tempArray, 0, internalArray.length);
        internalArray = tempArray;
    }

    











    public float getContractionCriteria() {
        return contractionCriteria;
    }
    
    







    public synchronized double getElement(int index) {
        if (index >= numElements) {
            throw MathRuntimeException.createArrayIndexOutOfBoundsException("the index specified: {0} is larger than the current maximal index {1}",
                                                                            new Object[] { index, numElements - 1 });
        } else if (index >= 0) {
            return internalArray[startIndex + index];
        } else {
            throw MathRuntimeException.createArrayIndexOutOfBoundsException("elements cannot be retrieved from a negative array index {0}",
                                                                            new Object[] { index });
        }
    }
    
     






    public synchronized double[] getElements() {
        double[] elementArray = new double[numElements];
        System.arraycopy( internalArray, startIndex, elementArray, 0,
                numElements);
        return elementArray;
    }
    
    











    public float getExpansionFactor() {
        return expansionFactor;
    }
    
    






    public int getExpansionMode() {
        return expansionMode;
    }
    
    







    synchronized int getInternalLength() {
        return (internalArray.length);
    }

    





    public synchronized int getNumElements() {
        return (numElements);
    }
    
    











    public synchronized double[] getValues() {
        return (internalArray);
    }

    











    public synchronized double[] getInternalValues() {
        return (internalArray);
    }

    




    public void setContractionCriteria(float contractionCriteria) {
        checkContractExpand(contractionCriteria, getExpansionFactor());
        this.contractionCriteria = contractionCriteria;
    }
    

    











    public synchronized void setElement(int index, double value) {
        if (index < 0) {
            throw MathRuntimeException.createArrayIndexOutOfBoundsException("cannot set an element at a negative index {0}",
                                                                            new Object[] { index });
        }
        if (index + 1 > numElements) {
            numElements = index + 1;
        }       
        if ((startIndex + index) >= internalArray.length) {
            expandTo(startIndex + (index + 1));
        }    
        internalArray[startIndex + index] = value;
    }

    










    public void setExpansionFactor(float expansionFactor) {
        checkContractExpand(getContractionCriteria(), expansionFactor);
        
        this.expansionFactor = expansionFactor;
    }

    






    public void setExpansionMode(int expansionMode) {
        if (expansionMode != MULTIPLICATIVE_MODE && 
                expansionMode != ADDITIVE_MODE) {
            throw new IllegalArgumentException("Illegal expansionMode setting.");  
        }
        this.expansionMode = expansionMode;
    }
    
    






    protected void setInitialCapacity(int initialCapacity) {
        if (initialCapacity > 0) {
            synchronized(this) {
                this.initialCapacity = initialCapacity;
            }
            } else {
            String msg =
                "The initial capacity supplied: " + initialCapacity +
                "must be a positive integer";
            throw new IllegalArgumentException(msg);
        }
    }
    
    







    public synchronized void setNumElements(int i) {

        
        if (i < 0) {
            String msg =
                "Number of elements must be zero or a positive " + "integer";
            throw new IllegalArgumentException(msg);
        }

        
        
        if ((startIndex + i) > internalArray.length) {
            expandTo(startIndex + i);
        }

        
        numElements = i;
    }

    





    private synchronized boolean shouldContract() {
        if (expansionMode == MULTIPLICATIVE_MODE) { 
            return (internalArray.length / ((float) numElements)) > contractionCriteria;
        } else {
            return (internalArray.length - numElements) > contractionCriteria;
        }
    }

    








    public synchronized int start() {
        return startIndex;
    }
    
    















    public static void copy(ResizableDoubleArray source, ResizableDoubleArray dest) {
       synchronized(source) {
           synchronized(dest) {
               dest.initialCapacity = source.initialCapacity;
               dest.contractionCriteria = source.contractionCriteria;
               dest.expansionFactor = source.expansionFactor;
               dest.expansionMode = source.expansionMode;
               dest.internalArray = new double[source.internalArray.length];
               System.arraycopy(source.internalArray, 0, dest.internalArray,
                       0, dest.internalArray.length);
               dest.numElements = source.numElements;
               dest.startIndex = source.startIndex;
           }
       }
    }
    
    







    public synchronized ResizableDoubleArray copy() {
        ResizableDoubleArray result = new ResizableDoubleArray();
        copy(this, result);
        return result;
    }
    
    








    public boolean equals(Object object) {
        if (object == this ) {
            return true;
        }
       if (object instanceof ResizableDoubleArray == false) {
            return false;
        }
       synchronized(this) {
           synchronized(object) {
               boolean result = true;
               ResizableDoubleArray other = (ResizableDoubleArray) object;
               result = result && (other.initialCapacity == initialCapacity);
               result = result && (other.contractionCriteria == contractionCriteria);
               result = result && (other.expansionFactor == expansionFactor);
               result = result && (other.expansionMode == expansionMode);
               result = result && (other.numElements == numElements);
               result = result && (other.startIndex == startIndex);
               if (!result) { 
                   return false;
               } else {
                   return Arrays.equals(internalArray, other.internalArray);
               }
           }
       }
    }
    
    





    public int hashCode() {
        int[] hashData = new int[7];
        hashData[0] = new Float(expansionFactor).hashCode();
        hashData[1] = new Float(contractionCriteria).hashCode();
        hashData[2] = expansionMode;
        synchronized(this) {
            hashData[3] = Arrays.hashCode(internalArray);
            hashData[4] = initialCapacity;
            hashData[5] = numElements;
            hashData[6] = startIndex;
        }
        return Arrays.hashCode(hashData);
    }
         
}
