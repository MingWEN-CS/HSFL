324c324
<                     "cannot substitute an element from an empty array", null);
---
>                     "cannot substitute an element from an empty array");
350,356c350,354
<             String msg =
<                 "Contraction criteria can never be smaller than " +
<                 "the expansion factor.  This would lead to a never " +
<                 "ending loop of expansion and contraction as a newly " +
<                 "expanded internal storage array would immediately " +
<                 "satisfy the criteria for contraction";
<             throw new IllegalArgumentException(msg);
---
>             throw MathRuntimeException.createIllegalArgumentException(
>                     "contraction criteria ({0}) smaller than the expansion factor ({1}).  This would " +
>                     "lead to a never ending loop of expansion and contraction as a newly expanded " +
>                     "internal storage array would immediately satisfy the criteria for contraction",
>                     contractionCritera, expansionFactor);
360,366c358,362
<             String msg =
<                 "The contraction criteria must be a number larger " +
<                 "than one.  If the contractionCriteria is less than or " +
<                 "equal to one an endless loop of contraction and " +
<                 "expansion would ensue as an internalArray.length " +
<                 "== numElements would satisfy the contraction criteria";
<             throw new IllegalArgumentException(msg);
---
>             throw MathRuntimeException.createIllegalArgumentException(
>                     "contraction criteria smaller than one ({0}).  This would lead to a never ending " +
>                     "loop of expansion and contraction as an internal storage array length equal " +
>                     "to the number of elements would satisfy the contraction criteria.",
>                     contractionCriteria);
370,372c366,368
<             String msg =
<                 "The expansion factor must be a number greater than 1.0";
<             throw new IllegalArgumentException(msg);
---
>             throw MathRuntimeException.createIllegalArgumentException(
>                     "expansion factor smaller than one ({0})",
>                     contractionCriteria);
456,461c452,458
<             String msg = "Cannot discard more elements than are" +
<             "contained in this array.";
<             throw new IllegalArgumentException(msg);
<         } else if (i < 0) {
<             String msg = "Cannot discard a negative number of elements.";
<             throw new IllegalArgumentException(msg);
---
>             throw MathRuntimeException.createIllegalArgumentException(
>                     "cannot discard {0} elements from a {1} elements array",
>                     i, numElements);
>        } else if (i < 0) {
>            throw MathRuntimeException.createIllegalArgumentException(
>                    "cannot discard a negative number of elements ({0})",
>                    i);
539,540c536,538
<             throw MathRuntimeException.createArrayIndexOutOfBoundsException("the index specified: {0} is larger than the current maximal index {1}",
<                                                                             new Object[] { index, numElements - 1 });
---
>             throw MathRuntimeException.createArrayIndexOutOfBoundsException(
>                     "the index specified: {0} is larger than the current maximal index {1}",
>                     index, numElements - 1);
544,545c542,544
<             throw MathRuntimeException.createArrayIndexOutOfBoundsException("elements cannot be retrieved from a negative array index {0}",
<                                                                             new Object[] { index });
---
>             throw MathRuntimeException.createArrayIndexOutOfBoundsException(
>                     "elements cannot be retrieved from a negative array index {0}",
>                     index);
669,670c668,670
<             throw MathRuntimeException.createArrayIndexOutOfBoundsException("cannot set an element at a negative index {0}",
<                                                                             new Object[] { index });
---
>             throw MathRuntimeException.createArrayIndexOutOfBoundsException(
>                     "cannot set an element at a negative index {0}",
>                     index);
708c708,711
<             throw new IllegalArgumentException("Illegal expansionMode setting.");  
---
>             throw MathRuntimeException.createIllegalArgumentException(
>                     "unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})",
>                     expansionMode, MULTIPLICATIVE_MODE, "MULTIPLICATIVE_MODE",
>                     ADDITIVE_MODE, "ADDITIVE_MODE");
725,729c728,731
<             } else {
<             String msg =
<                 "The initial capacity supplied: " + initialCapacity +
<                 "must be a positive integer";
<             throw new IllegalArgumentException(msg);
---
>         } else {
>             throw MathRuntimeException.createIllegalArgumentException(
>                     "initial capacity ({0}) is not positive",
>                     initialCapacity);
745,747c747,749
<             String msg =
<                 "Number of elements must be zero or a positive " + "integer";
<             throw new IllegalArgumentException(msg);
---
>             throw MathRuntimeException.createIllegalArgumentException(
>                     "index ({0}) is not positive",
>                     i);
