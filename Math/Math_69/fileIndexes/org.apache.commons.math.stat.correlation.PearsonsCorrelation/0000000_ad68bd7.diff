1a2,270
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> package org.apache.commons.math.stat.correlation;
> 
> import org.apache.commons.math.MathException;
> import org.apache.commons.math.MathRuntimeException;
> import org.apache.commons.math.distribution.TDistribution;
> import org.apache.commons.math.distribution.TDistributionImpl;
> import org.apache.commons.math.linear.RealMatrix;
> import org.apache.commons.math.linear.DenseRealMatrix;
> import org.apache.commons.math.stat.regression.SimpleRegression;
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> public class PearsonsCorrelation {
>     
>     
>     private final RealMatrix correlationMatrix;
>     
>     
>     private final int nObs;
>     
>     
> 
> 
>     public PearsonsCorrelation() {
>         super();
>         correlationMatrix = null;
>         nObs = 0;
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
>     public PearsonsCorrelation(double[][] data) {
>         this(new DenseRealMatrix(data));
>     }
>     
>     
> 
> 
> 
> 
> 
>     public PearsonsCorrelation(RealMatrix matrix) {
>         checkSufficientData(matrix);
>         nObs = matrix.getRowDimension();
>         correlationMatrix = computeCorrelation(matrix);
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
>     public PearsonsCorrelation(Covariance covariance) {
>         RealMatrix covarianceMatrix = covariance.getCovarianceMatrix();
>         if (covarianceMatrix == null) {
>             throw MathRuntimeException.createIllegalArgumentException(
>                     "Covariance matrix is null", null);
>         }
>         nObs = covariance.getN();
>         correlationMatrix = covarianceToCorrelation(covarianceMatrix);
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
>     public PearsonsCorrelation(RealMatrix covarianceMatrix, int numberOfObservations) {
>         nObs = numberOfObservations;
>         correlationMatrix = covarianceToCorrelation(covarianceMatrix);
>         
>     }
>     
>     
> 
> 
> 
> 
>     public RealMatrix getCorrelationMatrix() {
>         return correlationMatrix;  
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public RealMatrix getCorrelationStandardErrors() {
>         int nVars = correlationMatrix.getColumnDimension();
>         double[][] out = new double[nVars][nVars];
>         for (int i = 0; i < nVars; i++) {
>             for (int j = 0; j < nVars; j++) {
>                 double r = correlationMatrix.getEntry(i, j);
>                 out[i][j] = Math.sqrt((1 - r * r) /(nObs - 2));
>             }
>         }
>         return new DenseRealMatrix(out);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public RealMatrix getCorrelationPValues() throws MathException {
>         TDistribution tDistribution = new TDistributionImpl(nObs - 2);
>         int nVars = correlationMatrix.getColumnDimension();
>         double[][] out = new double[nVars][nVars];
>         for (int i = 0; i < nVars; i++) {
>             for (int j = 0; j < nVars; j++) {
>                 if (i == j) {
>                     out[i][j] = 0d;
>                 } else {
>                     double r = correlationMatrix.getEntry(i, j);
>                     double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));
>                     out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));
>                 }
>             }
>         }
>         return new DenseRealMatrix(out);
>     }
>     
>     
>     
> 
> 
> 
> 
> 
> 
>     public RealMatrix computeCorrelation(RealMatrix matrix) {
>         int nVars = matrix.getColumnDimension();
>         RealMatrix outMatrix = new DenseRealMatrix(nVars, nVars);
>         for (int i = 0; i < nVars; i++) {
>             for (int j = 0; j < i; j++) {
>               double corr = correlation(matrix.getColumn(i), matrix.getColumn(j));
>               outMatrix.setEntry(i, j, corr);
>               outMatrix.setEntry(j, i, corr);
>             }
>             outMatrix.setEntry(i, i, 1d);
>         }
>         return outMatrix;
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public double correlation(final double[] xArray, final double[] yArray) throws IllegalArgumentException {
>         SimpleRegression regression = new SimpleRegression();
>         if(xArray.length == yArray.length && xArray.length > 1) {
>             for(int i=0; i<xArray.length; i++) {
>                 regression.addData(xArray[i], yArray[i]);
>             }
>             return regression.getR();
>         }
>         else {
>             throw MathRuntimeException.createIllegalArgumentException(
>                     "Invalid array dimensions. xArray has size {0}; yArray has {1} elements",
>                     new Object[] {xArray.length, yArray.length});
>         }
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public RealMatrix covarianceToCorrelation(RealMatrix covarianceMatrix) {
>         int nVars = covarianceMatrix.getColumnDimension();
>         RealMatrix outMatrix = new DenseRealMatrix(nVars, nVars);
>         for (int i = 0; i < nVars; i++) {
>             double sigma = Math.sqrt(covarianceMatrix.getEntry(i, i));
>             outMatrix.setEntry(i, i, 1d);
>             for (int j = 0; j < i; j++) {
>                 double entry = covarianceMatrix.getEntry(i, j) / 
>                        (sigma * Math.sqrt(covarianceMatrix.getEntry(j, j)));
>                 outMatrix.setEntry(i, j, entry);
>                 outMatrix.setEntry(j, i, entry);
>             }
>         }
>         return outMatrix;
>     }
>     
>     
> 
> 
> 
> 
> 
>     private void checkSufficientData(final RealMatrix matrix) {
>         int nRows = matrix.getRowDimension();
>         int nCols = matrix.getColumnDimension();
>         if (nRows < 2 || nCols < 2) {
>             throw MathRuntimeException.createIllegalArgumentException(
>                     "Insufficient data: only {0} rows and {1} columns.",
>                     new Object[]{nRows, nCols});
>         }
>     }
> }
