19a20,28
> import java.util.Arrays;
> import java.util.Comparator;
> 
> import org.apache.commons.math.analysis.function.Gaussian;
> import org.apache.commons.math.exception.NullArgumentException;
> import org.apache.commons.math.exception.NumberIsTooSmallException;
> import org.apache.commons.math.exception.OutOfRangeException;
> import org.apache.commons.math.exception.ZeroException;
> import org.apache.commons.math.exception.util.LocalizedFormats;
50,52c59
< public class GaussianFitter {
<     
<     private final CurveFitter fitter;
---
> public class GaussianFitter extends CurveFitter {
60c67
<         fitter = new CurveFitter(optimizer);
---
>         super(optimizer);;
62a70
> 
70,71c78,82
<     public void addObservedPoint(double x, double y) {
<         addObservedPoint(1, x, y);
---
> 
> 
>     public double[] fit() {
>         return fit(new Gaussian.Parametric(),
>                    (new ParameterGuesser(getObservations())).guess());
78a90,92
>     public static class ParameterGuesser {
>         
>         private final WeightedObservedPoint[] observations;
79a94,95
>         
>         private double[] parameters;
80a97
>         
82,84d98
<     public void addObservedPoint(double weight, double x, double y) {
<         fitter.addObservedPoint(weight, x, y);
<     }
86c100,251
<     
---
> 
> 
>         public ParameterGuesser(WeightedObservedPoint[] observations) {
>             if (observations == null) {
>                 throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);
>             }
>             if (observations.length < 3) {
>                 throw new NumberIsTooSmallException(observations.length, 3, true);
>             }
>             this.observations = observations.clone();
>         }
> 
>         
> 
> 
> 
> 
>         public double[] guess() {
>             if (parameters == null) {
>                 parameters = basicGuess(observations);
>             }
>             return parameters.clone();
>         }
> 
>         
> 
> 
> 
> 
> 
> 
>         private double[] basicGuess(WeightedObservedPoint[] points) {
>             Arrays.sort(points, createWeightedObservedPointComparator());
>             double[] params = new double[3];
> 
> 
>             int maxYIdx = findMaxY(points);
>             params[0] = points[maxYIdx].getY();
>             params[1] = points[maxYIdx].getX();
> 
>             double fwhmApprox;
>             try {
>                 double halfY = params[0] + ((params[1] - params[0]) / 2.0);
>                 double fwhmX1 = interpolateXAtY(points, maxYIdx, -1, halfY);
>                 double fwhmX2 = interpolateXAtY(points, maxYIdx, +1, halfY);
>                 fwhmApprox = fwhmX2 - fwhmX1;
>             } catch (OutOfRangeException e) {
>                 fwhmApprox = points[points.length - 1].getX() - points[0].getX();
>             }
>             params[2] = fwhmApprox / (2.0 * Math.sqrt(2.0 * Math.log(2.0)));
> 
>             return params;
>         }
> 
>         
> 
> 
> 
> 
> 
> 
>         private int findMaxY(WeightedObservedPoint[] points) {
>             int maxYIdx = 0;
>             for (int i = 1; i < points.length; i++) {
>                 if (points[i].getY() > points[maxYIdx].getY()) {
>                     maxYIdx = i;
>                 }
>             }
>             return maxYIdx;
>         }
> 
>         
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>         private double interpolateXAtY(WeightedObservedPoint[] points,
>                                        int startIdx, int idxStep, double y)
>             throws OutOfRangeException {
>             if (idxStep == 0) {
>                 throw new ZeroException();
>             }
>             WeightedObservedPoint[] twoPoints = getInterpolationPointsForY(points, startIdx, idxStep, y);
>             WeightedObservedPoint pointA = twoPoints[0];
>             WeightedObservedPoint pointB = twoPoints[1];
>             if (pointA.getY() == y) {
>                 return pointA.getX();
>             }
>             if (pointB.getY() == y) {
>                 return pointB.getX();
>             }
>             return pointA.getX() +
>                    (((y - pointA.getY()) * (pointB.getX() - pointA.getX())) /
>                     (pointB.getY() - pointA.getY()));
>         }
> 
>         
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>         private WeightedObservedPoint[] getInterpolationPointsForY(WeightedObservedPoint[] points,
>                                                                    int startIdx, int idxStep, double y)
>             throws OutOfRangeException {
>             if (idxStep == 0) {
>                 throw new ZeroException();
>             }
>             for (int i = startIdx;
>                  (idxStep < 0) ? (i + idxStep >= 0) : (i + idxStep < points.length);
>                  i += idxStep) {
>                 if (isBetween(y, points[i].getY(), points[i + idxStep].getY())) {
>                     return (idxStep < 0) ?
>                            new WeightedObservedPoint[] { points[i + idxStep], points[i] } :
>                            new WeightedObservedPoint[] { points[i], points[i + idxStep] };
>                 }
>             }
> 
>             double minY = Double.POSITIVE_INFINITY;
>             double maxY = Double.NEGATIVE_INFINITY;
>             for (final WeightedObservedPoint point : points) {
>                 minY = Math.min(minY, point.getY());
>                 maxY = Math.max(maxY, point.getY());
>             }
>             throw new OutOfRangeException(y, minY, maxY);
> 
>         }
> 
>         
> 
94,97d258
<     public GaussianFunction fit() {
<         return new GaussianFunction(fitter.fit(new ParametricGaussianFunction(),
<                                                createParametersGuesser(fitter.getObservations()).guess()));
<     }
99d259
<     
100a261,264
>         private boolean isBetween(double value, double boundary1, double boundary2) {
>             return (value >= boundary1 && value <= boundary2) ||
>                    (value >= boundary2 && value <= boundary1);
>         }
101a266
>         
107,108c272,305
<     protected GaussianParametersGuesser createParametersGuesser(WeightedObservedPoint[] observations) {
<         return new GaussianParametersGuesser(observations);
---
>         private Comparator<WeightedObservedPoint> createWeightedObservedPointComparator() {
>             return new Comparator<WeightedObservedPoint>() {
>                 public int compare(WeightedObservedPoint p1, WeightedObservedPoint p2) {
>                     if (p1 == null && p2 == null) {
>                         return 0;
>                     }
>                     if (p1 == null) {
>                         return -1;
>                     }
>                     if (p2 == null) {
>                         return 1;
>                     }
>                     if (p1.getX() < p2.getX()) {
>                         return -1;
>                     }
>                     if (p1.getX() > p2.getX()) {
>                         return 1;
>                     }
>                     if (p1.getY() < p2.getY()) {
>                         return -1;
>                     }
>                     if (p1.getY() > p2.getY()) {
>                         return 1;
>                     }
>                     if (p1.getWeight() < p2.getWeight()) {
>                         return -1;
>                     }
>                     if (p1.getWeight() > p2.getWeight()) {
>                         return 1;
>                     }
>                     return 0;
>                 }
>             };
>         }
