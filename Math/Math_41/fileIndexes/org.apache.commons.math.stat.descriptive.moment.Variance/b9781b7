














package org.apache.commons.math.stat.descriptive.moment;

import java.io.Serializable;

import org.apache.commons.math.stat.descriptive.AbstractStorelessUnivariateStatistic;






















public class Variance extends AbstractStorelessUnivariateStatistic implements Serializable {

    
    static final long serialVersionUID = -9111962718267217978L;  
      
    
    protected SecondMoment moment = null;

    




    protected boolean incMoment = true;

    


    public Variance() {
        moment = new SecondMoment();
    }

    




    public Variance(final SecondMoment m2) {
        incMoment = false;
        this.moment = m2;
    }
    


    public void increment(final double d) {
        if (incMoment) {
            moment.increment(d);
        }
    }

    


    public double getResult() {
            if (moment.n == 0) {
                return Double.NaN;
            } else if (moment.n == 1) {
                return 0d;
            } else {
                return moment.m2 / ((double) moment.n - 1d);
            }
    }

    


    public long getN() {
        return moment.getN();
    }
    
    


    public void clear() {
        if (incMoment) {
            moment.clear();
        }
    }
    
    















    public double evaluate(final double[] values) {
        if (values == null) {
            throw new IllegalArgumentException("input values array is null");
        }
        return evaluate(values, 0, values.length);
    }

    



















    public double evaluate(final double[] values, final int begin, final int length) {

        double var = Double.NaN;

        if (test(values, begin, length)) {
            clear();
            if (length == 1) {
                var = 0.0;
            } else if (length > 1) {
                Mean mean = new Mean();
                double m = mean.evaluate(values, begin, length);
                var = evaluate(values, m, begin, length);
            }
        }
        return var;
    }
    
    

























    public double evaluate(final double[] values, final double mean, 
            final int begin, final int length) {
        
        double var = Double.NaN;

        if (test(values, begin, length)) {
            if (length == 1) {
                var = 0.0;
            } else if (length > 1) {
                double accum = 0.0;
                double accum2 = 0.0;
                for (int i = begin; i < begin + length; i++) {
                    accum += Math.pow((values[i] - mean), 2.0);
                    accum2 += (values[i] - mean);
                }
                var = (accum - (Math.pow(accum2, 2) / ((double) length))) /
                (double) (length - 1);
            }
        }
        return var;
    }
    
    






















    public double evaluate(final double[] values, final double mean) {
        return evaluate(values, mean, 0, values.length);
    }

}
