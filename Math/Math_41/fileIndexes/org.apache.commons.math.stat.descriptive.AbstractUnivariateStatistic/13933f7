















package org.apache.commons.math.stat.descriptive;

import org.apache.commons.math.MathRuntimeException;














public abstract class AbstractUnivariateStatistic
    implements UnivariateStatistic {

    


    public double evaluate(final double[] values) {
        test(values, 0, 0);
        return evaluate(values, 0, values.length);
    }

    


    public abstract double evaluate(final double[] values, final int begin, final int length);

    


    public abstract UnivariateStatistic copy();

    


















    protected boolean test(
        final double[] values,
        final int begin,
        final int length) {

        if (values == null) {
            throw MathRuntimeException.createIllegalArgumentException("input values array is null");
        }

        if (begin < 0) {
            throw MathRuntimeException.createIllegalArgumentException(
                  "start position cannot be negative ({0})", begin);
        }

        if (length < 0) {
            throw MathRuntimeException.createIllegalArgumentException(
                  "length cannot be negative ({0})", length);
        }

        if (begin + length > values.length) {
            throw MathRuntimeException.createIllegalArgumentException(
                  "subarray ends after array end");
        }

        if (length == 0) {
            return false;
        }

        return true;

    }

    



























    protected boolean test(
        final double[] values,
        final double[] weights,
        final int begin,
        final int length) {

        if (weights == null) {
            throw MathRuntimeException.createIllegalArgumentException("input weights array is null");
        }

        if (weights.length !=  values.length) {
            throw MathRuntimeException.createIllegalArgumentException(
                  "Different number of weights and values");
        }

        boolean containsPositiveWeight = false;
        for (int i = begin; i < begin + length; i++) {
            if (Double.isNaN(weights[i])) {
                throw MathRuntimeException.createIllegalArgumentException(
                        "NaN weight at index {0}", i);
            }
            if (Double.isInfinite(weights[i])) {
                throw MathRuntimeException.createIllegalArgumentException(
                        "Infinite weight at index {0}", i);
            }
            if (weights[i] < 0) {
                throw MathRuntimeException.createIllegalArgumentException(
                      "negative weight {0} at index {1} ", weights[i], i);
            }
            if (!containsPositiveWeight && weights[i] > 0.0) {
                containsPositiveWeight = true;
            }
        }

        if (!containsPositiveWeight) {
            throw MathRuntimeException.createIllegalArgumentException(
                    "weight array must contain at least one non-zero value");
        }

        return test(values, begin, length);
    }
}
