49c49
<     
---
> 
82c82
<         
---
> 
87c87
<         
---
> 
92c92
<         
---
> 
103a104,173
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     protected boolean test(
>         final double[] values,
>         final double[] weights,
>         final int begin,
>         final int length) {
> 
>         if (weights == null) {
>             throw MathRuntimeException.createIllegalArgumentException("input weights array is null");
>         }
> 
>         if (weights.length !=  values.length) {
>             throw MathRuntimeException.createIllegalArgumentException(
>                   "Different number of weights and values");
>         }
> 
>         boolean containsPositiveWeight = false;
>         for (int i = begin; i < begin + length; i++) {
>             if (Double.isNaN(weights[i])) {
>                 throw MathRuntimeException.createIllegalArgumentException(
>                         "NaN weight at index {0}", i);
>             }
>             if (Double.isInfinite(weights[i])) {
>                 throw MathRuntimeException.createIllegalArgumentException(
>                         "Infinite weight at index {0}", i);
>             }
>             if (weights[i] < 0) {
>                 throw MathRuntimeException.createIllegalArgumentException(
>                       "negative weight {0} at index {1} ", weights[i], i);
>             }
>             if (!containsPositiveWeight && weights[i] > 0.0) {
>                 containsPositiveWeight = true;
>             }
>         }
>         
>         if (!containsPositiveWeight) {
>             throw MathRuntimeException.createIllegalArgumentException(
>                     "weight array must contain at least one non-zero value");
>         }
> 
>         return test(values, begin, length);
