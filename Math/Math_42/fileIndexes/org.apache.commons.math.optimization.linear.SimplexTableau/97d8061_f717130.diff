139,180c139,182
<             copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions());
<             matrix[zIndex][width - 1] =
<                 maximize ? f.getConstantTerm() : -1 * f.getConstantTerm();
< 
<                 if (!restrictToNonNegative) {
<                     matrix[zIndex][getSlackVariableOffset() - 1] =
<                         getInvertedCoeffiecientSum(objectiveCoefficients);
<                 }
< 
<                 
<                 int slackVar = 0;
<                 int artificialVar = 0;
<                 for (int i = 0; i < constraints.size(); i++) {
<                     LinearConstraint constraint = constraints.get(i);
<                     int row = getNumObjectiveFunctions() + i;
< 
<                     
<                     copyArray(constraint.getCoefficients().getData(), matrix[row], 1);
< 
<                     
<                     if (!restrictToNonNegative) {
<                         matrix[row][getSlackVariableOffset() - 1] =
<                             getInvertedCoeffiecientSum(constraint.getCoefficients());
<                     }
< 
<                     
<                     matrix[row][width - 1] = constraint.getValue();
< 
<                     
<                     if (constraint.getRelationship() == Relationship.LEQ) {
<                         matrix[row][getSlackVariableOffset() + slackVar++] = 1;  
<                     } else if (constraint.getRelationship() == Relationship.GEQ) {
<                         matrix[row][getSlackVariableOffset() + slackVar++] = -1; 
<                     }
< 
<                     
<                     if ((constraint.getRelationship() == Relationship.EQ) ||
<                         (constraint.getRelationship() == Relationship.GEQ)) {
<                         matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 
<                         matrix[row][getArtificialVariableOffset() + artificialVar++] = 1; 
<                     }
<                 }
---
>         copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions());
>         matrix[zIndex][width - 1] =
>             maximize ? f.getConstantTerm() : -1 * f.getConstantTerm();
> 
>         if (!restrictToNonNegative) {
>             matrix[zIndex][getSlackVariableOffset() - 1] =
>                 getInvertedCoeffiecientSum(objectiveCoefficients);
>         }
> 
>         
>         int slackVar = 0;
>         int artificialVar = 0;
>         for (int i = 0; i < constraints.size(); i++) {
>             LinearConstraint constraint = constraints.get(i);
>             int row = getNumObjectiveFunctions() + i;
> 
>             
>             copyArray(constraint.getCoefficients().getData(), matrix[row], 1);
> 
>             
>             if (!restrictToNonNegative) {
>                 matrix[row][getSlackVariableOffset() - 1] =
>                     getInvertedCoeffiecientSum(constraint.getCoefficients());
>             }
> 
>             
>             matrix[row][width - 1] = constraint.getValue();
> 
>             
>             if (constraint.getRelationship() == Relationship.LEQ) {
>                 matrix[row][getSlackVariableOffset() + slackVar++] = 1;  
>             } else if (constraint.getRelationship() == Relationship.GEQ) {
>                 matrix[row][getSlackVariableOffset() + slackVar++] = -1; 
>             }
> 
>             
>             if ((constraint.getRelationship() == Relationship.EQ) ||
>                     (constraint.getRelationship() == Relationship.GEQ)) {
>                 matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 
>                 matrix[row][getArtificialVariableOffset() + artificialVar++] = 1; 
>             }
>         }
> 
>         return matrix;
182d183
<                 return matrix;
