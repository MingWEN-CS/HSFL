22d21
< import org.apache.commons.math.exception.DimensionMismatchException;
51d49
< 
54a53,54
>     private static final double MIN_RELATIVE_TOLERANCE = 2 * FastMath.ulp(1d);
>     
56a57,58
>     private final double relativeThreshold;
>     
58a61
>     private final double absoluteThreshold;
60,89c63
< 
< 
< 
<     public static class BrentConvergenceChecker
<         extends AbstractConvergenceChecker<UnivariateRealPointValuePair> {
<         
< 
< 
<         private static final double MIN_RELATIVE_TOLERANCE = 2 * FastMath.ulp(1d);
< 
<         
< 
< 
< 
< 
< 
<         public BrentConvergenceChecker(final double rel,
<                                        final double abs) {
<             super(rel, abs);
<             
<             if (rel < MIN_RELATIVE_TOLERANCE) {
<                 throw new NumberIsTooSmallException(rel, MIN_RELATIVE_TOLERANCE, true);
<             }
<             if (abs <= 0) {
<                 throw new NotStrictlyPositiveException(abs);
<             }
<         }
< 
<         
< 
---
>     
103,117c77,80
<         public boolean converged(final int iteration,
<                                  final UnivariateRealPointValuePair ... points) {
<             if (points.length != 3) {
<                 throw new DimensionMismatchException(points.length, 3);
<             }
<             
<             final double a = points[0].getPoint();
<             final double x = points[1].getPoint();
<             final double b = points[2].getPoint();
<             
<             final double tol1 = getRelativeThreshold() * FastMath.abs(x) + getAbsoluteThreshold();
<             final double tol2 = 2 * tol1;
<             
<             final double m = 0.5 * (a + b);
<             return FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
---
>     public BrentOptimizer(double rel,
>                           double abs) {
>         if (rel < MIN_RELATIVE_TOLERANCE) {
>             throw new NumberIsTooSmallException(rel, MIN_RELATIVE_TOLERANCE, true);
119,135c82,83
<     }
< 
<     
< 
< 
< 
< 
< 
< 
< 
< 
<     @Override
<     public void setConvergenceChecker(ConvergenceChecker<UnivariateRealPointValuePair> checker) {
<         if (checker instanceof BrentConvergenceChecker) {
<             super.setConvergenceChecker(checker);
<         } else {
<             throw new MathUnsupportedOperationException();
---
>         if (abs <= 0) {
>             throw new NotStrictlyPositiveException(abs);
136a85,86
>         relativeThreshold = rel;
>         absoluteThreshold = abs;
146a97
>         
149,150d99
<         final double eps = checker.getRelativeThreshold();
<         final double t = checker.getAbsoluteThreshold();
173a123,126
>         UnivariateRealPointValuePair previous = null;
>         UnivariateRealPointValuePair current
>             = new UnivariateRealPointValuePair(x, (isMinim ? fx : -fx));
> 
176,177c129,130
<             double m = 0.5 * (a + b);
<             final double tol1 = eps * FastMath.abs(x) + t;
---
>             final double m = 0.5 * (a + b);
>             final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;
181,186c134,135
<             
<             
<             if (!getConvergenceChecker().converged(iter,
<                                                    new UnivariateRealPointValuePair(a, Double.NaN),
<                                                    new UnivariateRealPointValuePair(x, Double.NaN),
<                                                    new UnivariateRealPointValuePair(b, Double.NaN))) {
---
>             final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
>             if (!stop) {
285a235,244
> 
>                 previous = current;
>                 current = new UnivariateRealPointValuePair(x, (isMinim ? fx : -fx));
> 
>                 
>                 if (checker != null) {
>                     if (checker.converged(iter, previous, current)) {
>                         return current;
>                     }
>                 }
287c246
<                 return new UnivariateRealPointValuePair(x, (isMinim ? fx : -fx));
---
>                 return current;
