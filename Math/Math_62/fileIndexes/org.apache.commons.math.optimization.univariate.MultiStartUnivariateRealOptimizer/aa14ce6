
















package org.apache.commons.math.optimization.univariate;

import java.util.Arrays;
import java.util.Comparator;

import org.apache.commons.math.FunctionEvaluationException;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.exception.MathIllegalStateException;
import org.apache.commons.math.exception.ConvergenceException;
import org.apache.commons.math.exception.util.LocalizedFormats;
import org.apache.commons.math.random.RandomGenerator;
import org.apache.commons.math.optimization.GoalType;
import org.apache.commons.math.optimization.ConvergenceChecker;
import org.apache.commons.math.util.FastMath;














public class MultiStartUnivariateRealOptimizer<FUNC extends UnivariateRealFunction>
    implements BaseUnivariateRealOptimizer<FUNC> {
    
    private final BaseUnivariateRealOptimizer<FUNC> optimizer;
    
    private int maxEvaluations;
    
    private int totalEvaluations;
    
    private int starts;
    
    private RandomGenerator generator;
    
    private UnivariateRealPointValuePair[] optima;

    








    public MultiStartUnivariateRealOptimizer(final BaseUnivariateRealOptimizer<FUNC> optimizer,
                                             final int starts,
                                             final RandomGenerator generator) {
        this.optimizer = optimizer;
        this.starts = starts;
        this.generator = generator;
    }

    


    public void setConvergenceChecker(ConvergenceChecker<UnivariateRealPointValuePair> checker) {
        optimizer.setConvergenceChecker(checker);
    }

    


    public ConvergenceChecker<UnivariateRealPointValuePair> getConvergenceChecker() {
        return optimizer.getConvergenceChecker();
    }

    
    public int getMaxEvaluations() {
        return maxEvaluations;
    }

    
    public int getEvaluations() {
        return totalEvaluations;
    }

    
    public void setMaxEvaluations(int maxEvaluations) {
        this.maxEvaluations = maxEvaluations;
        optimizer.setMaxEvaluations(maxEvaluations);
    }

    

























    public UnivariateRealPointValuePair[] getOptima() {
        if (optima == null) {
            throw new MathIllegalStateException(LocalizedFormats.NO_OPTIMUM_COMPUTED_YET);
        }
        return optima.clone();
    }

    
    public UnivariateRealPointValuePair optimize(final FUNC f,
                                                 final GoalType goal,
                                                 final double min, final double max)
        throws FunctionEvaluationException {

        optima = new UnivariateRealPointValuePair[starts];
        totalEvaluations = 0;

        
        for (int i = 0; i < starts; ++i) {
            try {
                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);
                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);
                optima[i] = optimizer.optimize(f, goal,
                                               FastMath.min(bound1, bound2),
                                               FastMath.max(bound1, bound2));
            } catch (FunctionEvaluationException fee) {
                optima[i] = null;
            } catch (ConvergenceException ce) {
                optima[i] = null;
            }

            final int usedEvaluations = optimizer.getEvaluations();
            optimizer.setMaxEvaluations(optimizer.getMaxEvaluations() - usedEvaluations);
            totalEvaluations += usedEvaluations;
        }

        sortPairs(goal);

        if (optima[0] == null) {
            throw new ConvergenceException(LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT,
                                           starts);
        }

        
        return optima[0];
    }

    
    public UnivariateRealPointValuePair optimize(final FUNC f, final GoalType goalType,
                                                 final double min, final double max,
                                                 final double startValue)
            throws FunctionEvaluationException {
        
        
        return optimize(f, goalType, min, max);
    }

    




    private void sortPairs(final GoalType goal) {
        Arrays.sort(optima, new Comparator<UnivariateRealPointValuePair>() {
                public int compare(final UnivariateRealPointValuePair o1,
                                   final UnivariateRealPointValuePair o2) {
                    if (o1 == null) {
                        return (o2 == null) ? 0 : 1;
                    } else if (o2 == null) {
                        return -1;
                    }
                    final double v1 = o1.getValue();
                    final double v2 = o2.getValue();
                    return (goal == GoalType.MINIMIZE) ?
                        Double.compare(v1, v2) : Double.compare(v2, v1);
                }
            });
    }
}
