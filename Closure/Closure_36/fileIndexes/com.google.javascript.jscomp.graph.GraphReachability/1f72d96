















package com.google.javascript.jscomp.graph;

import com.google.common.base.Preconditions;
import com.google.common.base.Predicate;
import com.google.javascript.jscomp.graph.FixedPointGraphTraversal.EdgeCallback;








public class GraphReachability<N, E> implements EdgeCallback<N, E> {

  
  
  private final DiGraph<N, E> graph;

  private final Predicate<EdgeTuple<N, E>> edgePredicate;

  public GraphReachability(DiGraph<N, E> graph) {
    this(graph, null);
  }

  





  public GraphReachability(DiGraph<N, E> graph,
                           Predicate<EdgeTuple<N, E>> edgePredicate) {
    this.graph = graph;
    this.edgePredicate = edgePredicate;
  }

  public void compute(N entry) {
    graph.clearNodeAnnotations();
    graph.getNode(entry).setAnnotation(REACHABLE);
    FixedPointGraphTraversal.newTraversal(this)
        .computeFixedPoint(graph, entry);
  }

  public void recompute(N reachableNode) {
    GraphNode<N, E> newReachable = graph.getNode(reachableNode);
    Preconditions.checkState(newReachable.getAnnotation() != REACHABLE);
    newReachable.setAnnotation(REACHABLE);
    FixedPointGraphTraversal.newTraversal(this)
        .computeFixedPoint(graph, reachableNode);
  }

  @Override
  public boolean traverseEdge(N source, E e, N destination) {
    if (graph.getNode(source).getAnnotation() == REACHABLE &&
        (edgePredicate == null ||
            edgePredicate.apply(new EdgeTuple<N, E>(source, e, destination)))) {
      GraphNode<N, E> destNode = graph.getNode(destination);
      if (destNode.getAnnotation() != REACHABLE) {
        destNode.setAnnotation(REACHABLE);
        return true;
      }
    }
    return false;
  }

  public static final Annotation REACHABLE = new Annotation() {};

  


  public static final class EdgeTuple<N, E> {
    public final N sourceNode;
    public final E edge;
    public final N destNode;
    public EdgeTuple(N sourceNode, E edge, N destNode) {
      this.sourceNode = sourceNode;
      this.edge = edge;
      this.destNode = destNode;
    }
  }
}
