















package com.google.javascript.jscomp;

import com.google.common.base.Preconditions;
import com.google.common.base.Predicates;
import com.google.common.collect.Lists;
import com.google.common.collect.Sets;
import com.google.javascript.jscomp.GlobalNamespace.Name;
import com.google.javascript.jscomp.GlobalNamespace.Ref;
import com.google.javascript.jscomp.GlobalNamespace.Ref.Type;
import com.google.javascript.jscomp.ReferenceCollectingCallback;
import com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.Scope.Var;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.Token;
import com.google.javascript.rhino.TokenStream;

import java.util.ArrayDeque;
import java.util.Deque;
import java.util.List;
import java.util.Map;
import java.util.Set;

































class CollapseProperties implements CompilerPass {

  
  static final DiagnosticType UNSAFE_NAMESPACE_WARNING =
      DiagnosticType.warning(
          "JSC_UNSAFE_NAMESPACE",
          "incomplete alias created for namespace {0}");

  static final DiagnosticType NAMESPACE_REDEFINED_WARNING =
      DiagnosticType.warning(
          "JSC_NAMESPACE_REDEFINED",
          "namespace {0} should not be redefined");

  static final DiagnosticType UNSAFE_THIS = DiagnosticType.warning(
      "JSC_UNSAFE_THIS",
      "dangerous use of 'this' in static method {0}");

  private AbstractCompiler compiler;

  
  private List<Name> globalNames;

  
  private Map<String, Name> nameMap;

  private final boolean collapsePropertiesOnExternTypes;
  private final boolean inlineAliases;

  








  CollapseProperties(AbstractCompiler compiler,
      boolean collapsePropertiesOnExternTypes, boolean inlineAliases) {
    this.compiler = compiler;
    this.collapsePropertiesOnExternTypes = collapsePropertiesOnExternTypes;
    this.inlineAliases = inlineAliases;
  }

  


  public void process(Node externs, Node root) {
    GlobalNamespace namespace;
    if (collapsePropertiesOnExternTypes) {
      namespace = new GlobalNamespace(compiler, externs, root);
    } else {
      namespace = new GlobalNamespace(compiler, root);
    }

    if (inlineAliases) {
      inlineAliases(namespace);
    }
    nameMap = namespace.getNameIndex();
    globalNames = namespace.getNameForest();
    checkNamespaces();

    for (Name n : globalNames) {
      flattenReferencesToCollapsibleDescendantNames(n, n.name);
    }

    
    
    
    for (Name n : globalNames) {
      collapseDeclarationOfNameAndDescendants(n, n.name);
    }
  }

  














  private void inlineAliases(GlobalNamespace namespace) {
    
    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());
    while (!workList.isEmpty()) {
      Name name = workList.pop();

      if (name.globalSets == 1 && name.localSets == 0 &&
          name.aliasingGets > 0) {
        
        
        List<Ref> refs = Lists.newArrayList(name.refs);
        for (Ref ref : refs) {
          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {
            
            if (inlineAliasIfPossible(ref, namespace)) {
              name.removeRef(ref);
            }
          }
        }
      }

      
      
      if ((name.type == Name.Type.OBJECTLIT ||
           name.type == Name.Type.FUNCTION) &&
          name.aliasingGets == 0 && name.props != null) {
        
        
        workList.addAll(name.props);
      }
    }
  }

  private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace) {
    
    
    
    
    Node aliasParent = alias.node.getParent();
    if (aliasParent.getType() == Token.NAME) {
      
      Scope scope = alias.scope;
      Var aliasVar = scope.getVar(aliasParent.getString());
      ReferenceCollectingCallback collector =
          new ReferenceCollectingCallback(compiler,
              ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR,
              Predicates.<Var>equalTo(aliasVar));
      (new NodeTraversal(compiler, collector)).traverseAtScope(scope);

      ReferenceCollection aliasRefs =
          collector.getReferenceCollection(aliasVar);
      if (aliasRefs.isWellDefined() && aliasRefs.isNeverReassigned()) {
        
        int size = aliasRefs.references.size();
        Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);
        for (int i = 1; i < size; i++) {
          ReferenceCollectingCallback.Reference aliasRef =
              aliasRefs.references.get(i);

          Node newNode = alias.node.cloneTree();
          aliasRef.getParent().replaceChild(aliasRef.getNameNode(), newNode);
          newNodes.add(newNode);
        }

        
        aliasParent.replaceChild(alias.node, new Node(Token.NULL));
        compiler.reportCodeChange();

        
        
        namespace.scanNewNodes(alias.scope, newNodes);
        return true;
      }
    }

    return false;
  }

  



  private void checkNamespaces() {
    for (Name name : nameMap.values()) {
      if (name.isNamespace() && name.refs != null &&
          (name.aliasingGets > 0 || name.localSets + name.globalSets > 1)) {
        boolean initialized = name.declaration != null;
        for (Ref ref : name.refs) {
          if (ref.type == Ref.Type.SET_FROM_GLOBAL ||
              ref.type == Ref.Type.SET_FROM_LOCAL) {
            if (initialized) {
              warnAboutNamespaceRedefinition(name, ref);
            }

            initialized = true;
          } else if (ref.type == Ref.Type.ALIASING_GET) {
            warnAboutNamespaceAliasing(name, ref);
          }
        }
      }
    }
  }

  





  private void warnAboutNamespaceAliasing(Name nameObj, Ref ref) {
    compiler.report(
        JSError.make(ref.sourceName, ref.node,
                     UNSAFE_NAMESPACE_WARNING, nameObj.fullName()));
  }

  





  private void warnAboutNamespaceRedefinition(Name nameObj, Ref ref) {
    compiler.report(
        JSError.make(ref.sourceName, ref.node,
                     NAMESPACE_REDEFINED_WARNING, nameObj.fullName()));
  }

  






  private void flattenReferencesToCollapsibleDescendantNames(
      Name n, String alias) {
    if (n.props == null) return;

    for (Name p : n.props) {
      String propAlias = alias + '$' + p.name;

      if (p.canCollapse()) {
        flattenReferencesTo(p, propAlias);
      }

      flattenReferencesToCollapsibleDescendantNames(p, propAlias);
    }
  }

  






  private void flattenReferencesTo(Name n, String alias) {
    if (n.refs != null) {
      String originalName = n.fullName();
      for (Ref r : n.refs) {
        Node rParent = r.node.getParent();

        
        
        
        
        
        if (!NodeUtil.isObjectLitKey(r.node, rParent) &&
            (r.getTwin() == null || r.isSet())) {
          flattenNameRef(alias, r.node, rParent, originalName);
        }
      }
    }

    
    
    
    if (n.props != null) {
      for (Name p : n.props) {
        flattenPrefixes(alias, p, 1);
      }
    }
  }

  








  private void flattenPrefixes(String alias, Name n, int depth) {
    
    
    String originalName = n.fullName();
    if (n.declaration != null && n.declaration.node != null &&
        n.declaration.node.getType() == Token.GETPROP) {
      flattenNameRefAtDepth(alias, n.declaration.node, depth, originalName);
    }

    if (n.refs != null) {
      for (Ref r : n.refs) {

        
        
        if (r.getTwin() == null || r.isSet()) {
          flattenNameRefAtDepth(alias, r.node, depth, originalName);
        }
      }
    }

    if (n.props != null) {
      for (Name p : n.props) {
        flattenPrefixes(alias, p, depth + 1);
      }
    }
  }

  








  private void flattenNameRefAtDepth(String alias, Node n, int depth,
      String originalName) {
    
    
    
    for (int i = 1; i < depth && n.hasChildren(); i++) {
      n = n.getFirstChild();
    }
    if (n.hasChildren()) {
      flattenNameRef(alias, n.getFirstChild(), n, originalName);
    }
  }

  







  private void flattenNameRef(String alias, Node n, Node parent,
      String originalName) {
    
    
    
    
    
    
    
    
    Node ref = NodeUtil.newName(alias, n, originalName);
    if (n.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)) {
      ref.putBooleanProp(Node.IS_CONSTANT_NAME, true);
    }
    parent.replaceChild(n, ref);
    compiler.reportCodeChange();
  }

  







  private void collapseDeclarationOfNameAndDescendants(Name n, String alias) {
    boolean canCollapseChildNames = n.canCollapseUnannotatedChildNames();

    
    if (n.canCollapse() && canCollapseChildNames) {
      updateObjLitOrFunctionDeclaration(n, alias);
    }

    if (n.props != null) {
      for (Name p : n.props) {
        
        collapseDeclarationOfNameAndDescendants(p, alias + '$' + p.name);

        if (!p.inExterns && canCollapseChildNames && p.declaration != null &&
            p.declaration.node != null &&
            p.declaration.node.getParent() != null &&
            p.declaration.node.getParent().getType() == Token.ASSIGN) {
          updateSimpleDeclaration(alias + '$' + p.name, p.declaration);
        }
      }
    }
  }

  









  private void updateSimpleDeclaration(String alias, Ref ref) {
    Node rvalue = ref.node.getNext();
    Node parent = ref.node.getParent();
    Node gramps = parent.getParent();
    Node greatGramps = gramps.getParent();
    Node greatGreatGramps = greatGramps.getParent();

    
    Node nameNode = NodeUtil.newName(alias, gramps.getFirstChild(),
        alias.replace("$", "."));
    if (ref.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)) {
      nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
    }

    if (gramps.getType() == Token.EXPR_RESULT) {
      
      
      
      
      
      
      
      
      
      
      
      
      

      
      parent.removeChild(rvalue);
      nameNode.addChildToFront(rvalue);

      Node varNode = new Node(Token.VAR, nameNode);
      greatGramps.replaceChild(gramps, varNode);
    } else {
      
      Preconditions.checkNotNull(ref.getTwin());

      
      
      
      
      
      

      Node current = gramps;
      Node currentParent = gramps.getParent();
      for (; currentParent.getType() != Token.SCRIPT &&
             currentParent.getType() != Token.BLOCK;
           current = currentParent,
           currentParent = currentParent.getParent()) {}

      
      
      Node stubVar = new Node(Token.VAR, nameNode.cloneTree());
      currentParent.addChildBefore(stubVar, current);

      parent.replaceChild(ref.node, nameNode);
    }

    compiler.reportCodeChange();
  }

  









  private void updateObjLitOrFunctionDeclaration(Name n, String alias) {
    switch (n.declaration.node.getParent().getType()) {
      case Token.ASSIGN:
        updateObjLitOrFunctionDeclarationAtAssignNode(n, alias);
        break;
      case Token.VAR:
        updateObjLitOrFunctionDeclarationAtVarNode(n);
        break;
      case Token.FUNCTION:
        updateFunctionDeclarationAtFunctionNode(n);
        break;
    }
  }

  







  private void updateObjLitOrFunctionDeclarationAtAssignNode(
      Name n, String alias) {
    
    
    

    Ref ref = n.declaration;
    Node rvalue = ref.node.getNext();
    Node varNode = new Node(Token.VAR);
    Node varParent = ref.node.getAncestor(3);
    Node gramps = ref.node.getAncestor(2);
    boolean isObjLit = rvalue.getType() == Token.OBJECTLIT;

    if (isObjLit && n.canEliminate()) {
      
      varParent.replaceChild(gramps, varNode);
      ref.node = null;

    } else {
      if (rvalue.getType() == Token.FUNCTION) {
        checkForHosedThisReferences(rvalue, n.docInfo, n);
      }

      ref.node.getParent().removeChild(rvalue);

      Node nameNode = NodeUtil.newName(
          alias, ref.node.getAncestor(2), n.fullName());

      if (ref.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)) {
        nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
      }

      varNode.addChildToBack(nameNode);
      nameNode.addChildToFront(rvalue);
      varParent.replaceChild(gramps, varNode);

      
      ref.node = nameNode;
    }

    if (isObjLit) {
      boolean discardKeys = n.aliasingGets == 0;
      declareVarsForObjLitValues(
          alias, rvalue,
          varNode, varParent.getChildBefore(varNode), varParent,
          discardKeys);
    }

    addStubsForUndeclaredProperties(n, alias, varParent, varNode);

    if (!varNode.hasChildren()) {
      varParent.removeChild(varNode);
    }

    compiler.reportCodeChange();
  }

  



  private void checkForHosedThisReferences(Node function, JSDocInfo docInfo,
      final Name name) {
    
    
    if (docInfo == null ||
        (!docInfo.isConstructor() && !docInfo.hasThisType())) {
      NodeTraversal.traverse(compiler, function.getLastChild(),
          new NodeTraversal.AbstractShallowCallback() {
            public void visit(NodeTraversal t, Node n, Node parent) {
              if (n.getType() == Token.THIS) {
                compiler.report(
                    JSError.make(name.declaration.sourceName, n,
                        UNSAFE_THIS, name.fullName()));
              }
            }
          });
    }
  }

  






  private void updateObjLitOrFunctionDeclarationAtVarNode(Name n) {
    Ref ref = n.declaration;
    String name = ref.node.getString();
    Node rvalue = ref.node.getFirstChild();
    Node varNode = ref.node.getParent();
    Node gramps = varNode.getParent();

    boolean isObjLit = rvalue.getType() == Token.OBJECTLIT;
    int numChanges = 0;

    if (isObjLit) {
      boolean discardKeys = n.aliasingGets == 0;
      numChanges += declareVarsForObjLitValues(
          name, rvalue, varNode, gramps.getChildBefore(varNode),
          gramps, discardKeys);
    }

    numChanges += addStubsForUndeclaredProperties(n, name, gramps, varNode);

    if (isObjLit && n.canEliminate()) {
      varNode.removeChild(ref.node);
      if (!varNode.hasChildren()) {
        gramps.removeChild(varNode);
      }
      numChanges++;

      
      
      ref.node = null;
    }

    if (numChanges > 0) {
      compiler.reportCodeChange();
    }
  }

  






  private void updateFunctionDeclarationAtFunctionNode(Name n) {
    Ref ref = n.declaration;
    String fnName = ref.node.getString();
    addStubsForUndeclaredProperties(
        n, fnName, ref.node.getAncestor(2), ref.node.getParent());
  }

  














  private int declareVarsForObjLitValues(
      String alias, Node objlit, Node varNode, Node nameToAddAfter,
      Node varParent, boolean discardKeys) {
    int numVars = 0;
    int arbitraryNameCounter = 0;

    for (Node key = objlit.getFirstChild(), nextKey; key != null;
         key = nextKey) {
      Node value = key.getNext();
      nextKey = value.getNext();

      
      
      
      
      
      boolean isJsIdentifier = key.getType() != Token.NUMBER &&
                               TokenStream.isJSIdentifier(key.getString());
      String propAlias = alias + '$' +
          (isJsIdentifier ? key.getString()
              : String.valueOf(++arbitraryNameCounter));
      String qName = propAlias.replace('$', '.');

      Node refNode = null;
      if (discardKeys) {
        objlit.removeChild(key);
        objlit.removeChild(value);
      } else {
        
        refNode = Node.newString(Token.NAME, propAlias);
        if (key.getBooleanProp(Node.IS_CONSTANT_NAME)) {
          refNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
        }
        objlit.replaceChildAfter(key, refNode);
      }

      
      Node nameNode = Node.newString(Token.NAME, propAlias);
      nameNode.addChildToFront(value);
      if (key.getBooleanProp(Node.IS_CONSTANT_NAME)) {
        nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
      }
      Node newVar = new Node(Token.VAR, nameNode);
      if (nameToAddAfter != null) {
        varParent.addChildAfter(newVar, nameToAddAfter);
      } else {
        varParent.addChildBefore(newVar, varNode);
      }
      compiler.reportCodeChange();
      nameToAddAfter = newVar;

      if (isJsIdentifier) {
        
        
        
        Name p = nameMap.get(qName);
        if (p != null) {
          if (!discardKeys) {
            Ref newAlias =
                p.declaration.cloneAndReclassify(Ref.Type.ALIASING_GET);
            newAlias.node = refNode;
            p.addRef(newAlias);
          }

          p.declaration.node = nameNode;

          if (value.getType() == Token.FUNCTION) {
            checkForHosedThisReferences(value, value.getJSDocInfo(), p);
          }
        }
      }

      numVars++;
    }
    return numVars;
  }

  












  private int addStubsForUndeclaredProperties(
      Name n, String alias, Node parent, Node addAfter) {
    Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));
    int numStubs = 0;
    if (n.props != null) {
      for (Name p : n.props) {
        if (p.needsToBeStubbed()) {
          String propAlias = alias + '$' + p.name;
          Node nameNode = Node.newString(Token.NAME, propAlias);
          Node newVar = new Node(Token.VAR, nameNode);
          if (addAfter == null) {
            parent.addChildToFront(newVar);
          } else {
            parent.addChildAfter(newVar, addAfter);
            addAfter = newVar;
          }
          numStubs++;
          compiler.reportCodeChange();

          
          
          if (p.refs.get(0).node.getLastChild().getBooleanProp(
                Node.IS_CONSTANT_NAME)) {
            nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
          }
        }
      }
    }
    return numStubs;
  }
}
