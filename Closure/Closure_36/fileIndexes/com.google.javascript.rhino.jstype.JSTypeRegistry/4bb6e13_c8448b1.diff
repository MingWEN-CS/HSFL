1,16c1,1006
< <!DOCTYPE HTML PUBLIC "-
< <!--NewPage-->
< <HTML>
< <HEAD>
< <TITLE>
< JSTypeRegistry (Compiler)
< </TITLE>
< 
< 
< <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../../dev_javadoc.css" TITLE="Style">
< 
< <SCRIPT type="text/javascript">
< function windowTitle()
< {
<     if (location.href.indexOf('is-external=true') == -1) {
<         parent.document.title="JSTypeRegistry (Compiler)";
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> package com.google.javascript.rhino.jstype;
> 
> import com.google.common.collect.ArrayListMultimap;
> import com.google.common.collect.HashMultimap;
> import com.google.common.collect.Maps;
> import com.google.common.collect.Multimap;
> import com.google.common.collect.Sets;
> import com.google.javascript.rhino.ErrorReporter;
> import com.google.javascript.rhino.Node;
> import com.google.javascript.rhino.ScriptRuntime;
> import com.google.javascript.rhino.Token;
> import static com.google.javascript.rhino.jstype.JSTypeNative.ALL_TYPE;
> import static com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_TYPE;
> import static com.google.javascript.rhino.jstype.JSTypeNative.NO_TYPE;
> import static com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE;
> import static com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE;
> 
> import java.io.Serializable;
> import java.util.Collection;
> import java.util.HashMap;
> import java.util.HashSet;
> import java.util.List;
> import java.util.Map;
> import java.util.Set;
> 
> 
> 
> 
> 
> 
> 
> 
> public class JSTypeRegistry implements Serializable {
>   private static final long serialVersionUID = 1L;
> 
>   
>   
>   
>   
> 
>   private final transient ErrorReporter reporter;
> 
>   
>   
>   
>   private final JSType[] nativeTypes;
> 
>   private final Map<String, JSType> namesToTypes;
> 
>   
>   private final Set<String> namespaces = new HashSet<String>();
> 
>   
>   
>   
>   
>   
>   
>   
>   
>   
>   
>   
>   
>   
>   private final Set<String> enumTypeNames = new HashSet<String>();
> 
>   
>   
>   
>   private final Set<String> forwardDeclaredTypes = new HashSet<String>();
> 
>   
>   
>   private final Map<String, Set<ObjectType>> typesIndexedByProperty =
>       Maps.newHashMap();
> 
>   
>   
>   
>   private final Map<String, JSType> greatestSubtypeByProperty =
>       Maps.newHashMap();
> 
>   
>   private final Multimap<String, FunctionType> interfaceToImplementors =
>       HashMultimap.create();
> 
>   
>   private final Multimap<StaticScope<JSType>, NamedType> unresolvedNamedTypes =
>       ArrayListMultimap.create();
> 
>   
>   private final Multimap<StaticScope<JSType>, NamedType> resolvedNamedTypes =
>       ArrayListMultimap.create();
> 
>   
>   private boolean lastGeneration = true;
> 
>   
>   private String templateTypeName;
> 
>   
>   private TemplateType templateType;
> 
>   private final boolean tolerateUndefinedValues;
> 
>   
> 
> 
>   public JSTypeRegistry(ErrorReporter reporter) {
>     this(reporter, false);
>   }
> 
>   
> 
> 
>   public JSTypeRegistry(
>       ErrorReporter reporter, boolean tolerateUndefinedValues) {
>     this.reporter = reporter;
>     nativeTypes = new JSType[JSTypeNative.values().length];
>     namesToTypes = new HashMap<String, JSType>();
>     resetForTypeCheck();
>     this.tolerateUndefinedValues = tolerateUndefinedValues;
>   }
> 
>   public boolean shouldTolerateUndefinedValues() {
>     return tolerateUndefinedValues;
>   }
> 
>   
> 
> 
>   public void resetForTypeCheck() {
>     typesIndexedByProperty.clear();
>     initializeBuiltInTypes();
>     namesToTypes.clear();
>     namespaces.clear();
>     initializeRegistry();
>   }
> 
>   private void initializeBuiltInTypes() {
>     
>     BooleanType BOOLEAN_TYPE = new BooleanType(this);
>     registerNativeType(JSTypeNative.BOOLEAN_TYPE, BOOLEAN_TYPE);
> 
>     NullType NULL_TYPE = new NullType(this);
>     registerNativeType(JSTypeNative.NULL_TYPE, NULL_TYPE);
> 
>     NumberType NUMBER_TYPE = new NumberType(this);
>     registerNativeType(JSTypeNative.NUMBER_TYPE, NUMBER_TYPE);
> 
>     StringType STRING_TYPE = new StringType(this);
>     registerNativeType(JSTypeNative.STRING_TYPE, STRING_TYPE);
> 
>     UnknownType UNKNOWN_TYPE = new UnknownType(this, false);
>     registerNativeType(JSTypeNative.UNKNOWN_TYPE, UNKNOWN_TYPE);
>     registerNativeType(
>         JSTypeNative.CHECKED_UNKNOWN_TYPE, new UnknownType(this, true));
> 
>     VoidType VOID_TYPE = new VoidType(this);
>     registerNativeType(JSTypeNative.VOID_TYPE, VOID_TYPE);
> 
>     AllType ALL_TYPE = new AllType(this);
>     registerNativeType(JSTypeNative.ALL_TYPE, ALL_TYPE);
> 
>     
>     
>     
>     
>     ObjectType TOP_LEVEL_PROTOTYPE =
>         new FunctionPrototypeType(this, null, null, true);
>     registerNativeType(JSTypeNative.TOP_LEVEL_PROTOTYPE, TOP_LEVEL_PROTOTYPE);
> 
>     
>     FunctionType OBJECT_FUNCTION_TYPE =
>         new FunctionType(this, "Object", null,
>             createOptionalParameters(ALL_TYPE), UNKNOWN_TYPE,
>             null, null, true, true);
>     OBJECT_FUNCTION_TYPE.defineDeclaredProperty(
>         "prototype", TOP_LEVEL_PROTOTYPE, true);
>     registerNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE, OBJECT_FUNCTION_TYPE);
> 
>     ObjectType OBJECT_PROTOTYPE = OBJECT_FUNCTION_TYPE.getPrototype();
>     registerNativeType(JSTypeNative.OBJECT_PROTOTYPE, OBJECT_PROTOTYPE);
> 
>     ObjectType OBJECT_TYPE = OBJECT_FUNCTION_TYPE.getInstanceType();
>     registerNativeType(JSTypeNative.OBJECT_TYPE, OBJECT_TYPE);
> 
>     
>     FunctionType FUNCTION_FUNCTION_TYPE =
>         new FunctionType(this, "Function", null,
>             createParametersWithVarArgs(ALL_TYPE), UNKNOWN_TYPE,
>             null, null, true, true);
>     FUNCTION_FUNCTION_TYPE.setPrototypeBasedOn(OBJECT_TYPE);
>     registerNativeType(
>         JSTypeNative.FUNCTION_FUNCTION_TYPE, FUNCTION_FUNCTION_TYPE);
> 
>     ObjectType FUNCTION_PROTOTYPE = FUNCTION_FUNCTION_TYPE.getPrototype();
>     registerNativeType(JSTypeNative.FUNCTION_PROTOTYPE, FUNCTION_PROTOTYPE);
> 
>     NoType NO_TYPE = new NoType(this);
>     registerNativeType(JSTypeNative.NO_TYPE, NO_TYPE);
> 
>     NoObjectType NO_OBJECT_TYPE = new NoObjectType(this);
>     registerNativeType(JSTypeNative.NO_OBJECT_TYPE, NO_OBJECT_TYPE);
> 
>     
>     FunctionType ARRAY_FUNCTION_TYPE =
>       new FunctionType(this, "Array", null,
>           createParametersWithVarArgs(ALL_TYPE), null, null, null, true, true) {
>         private static final long serialVersionUID = 1L;
> 
>         @Override
>         public JSType getReturnType() {
>           return getInstanceType();
>         }
>       };
>     ObjectType arrayPrototype = ARRAY_FUNCTION_TYPE.getPrototype();
>     registerNativeType(JSTypeNative.ARRAY_FUNCTION_TYPE, ARRAY_FUNCTION_TYPE);
> 
>     ObjectType ARRAY_TYPE = ARRAY_FUNCTION_TYPE.getInstanceType();
>     registerNativeType(JSTypeNative.ARRAY_TYPE, ARRAY_TYPE);
> 
>     
>     FunctionType BOOLEAN_OBJECT_FUNCTION_TYPE =
>         new FunctionType(this, "Boolean", null,
>             createParameters(false, ALL_TYPE), BOOLEAN_TYPE, null, null, true,
>             true);
>     ObjectType booleanPrototype = BOOLEAN_OBJECT_FUNCTION_TYPE.getPrototype();
>     registerNativeType(
>         JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE, BOOLEAN_OBJECT_FUNCTION_TYPE);
> 
>     ObjectType BOOLEAN_OBJECT_TYPE =
>         BOOLEAN_OBJECT_FUNCTION_TYPE.getInstanceType();
>     registerNativeType(JSTypeNative.BOOLEAN_OBJECT_TYPE, BOOLEAN_OBJECT_TYPE);
> 
>     
>     FunctionType DATE_FUNCTION_TYPE =
>       new FunctionType(this, "Date", null,
>           createOptionalParameters(UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE,
>               UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE),
>           STRING_TYPE, null, null, true, true);
>     ObjectType datePrototype = DATE_FUNCTION_TYPE.getPrototype();
>     registerNativeType(JSTypeNative.DATE_FUNCTION_TYPE, DATE_FUNCTION_TYPE);
> 
>     ObjectType DATE_TYPE = DATE_FUNCTION_TYPE.getInstanceType();
>     registerNativeType(JSTypeNative.DATE_TYPE, DATE_TYPE);
> 
>     
>     FunctionType ERROR_FUNCTION_TYPE = new ErrorFunctionType(this, "Error");
>     registerNativeType(JSTypeNative.ERROR_FUNCTION_TYPE, ERROR_FUNCTION_TYPE);
> 
>     ObjectType ERROR_TYPE = ERROR_FUNCTION_TYPE.getInstanceType();
>     registerNativeType(JSTypeNative.ERROR_TYPE, ERROR_TYPE);
> 
>     
>     FunctionType EVAL_ERROR_FUNCTION_TYPE =
>         new ErrorFunctionType(this, "EvalError");
>     EVAL_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);
>     registerNativeType(
>         JSTypeNative.EVAL_ERROR_FUNCTION_TYPE, EVAL_ERROR_FUNCTION_TYPE);
> 
>     ObjectType EVAL_ERROR_TYPE = EVAL_ERROR_FUNCTION_TYPE.getInstanceType();
>     registerNativeType(JSTypeNative.EVAL_ERROR_TYPE, EVAL_ERROR_TYPE);
> 
>     
>     FunctionType RANGE_ERROR_FUNCTION_TYPE =
>         new ErrorFunctionType(this, "RangeError");
>     RANGE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);
>     registerNativeType(
>         JSTypeNative.RANGE_ERROR_FUNCTION_TYPE, RANGE_ERROR_FUNCTION_TYPE);
> 
>     ObjectType RANGE_ERROR_TYPE = RANGE_ERROR_FUNCTION_TYPE.getInstanceType();
>     registerNativeType(JSTypeNative.RANGE_ERROR_TYPE, RANGE_ERROR_TYPE);
> 
>     
>     FunctionType REFERENCE_ERROR_FUNCTION_TYPE =
>         new ErrorFunctionType(this, "ReferenceError");
>     REFERENCE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);
>     registerNativeType(
>         JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE, REFERENCE_ERROR_FUNCTION_TYPE);
> 
>     ObjectType REFERENCE_ERROR_TYPE =
>         REFERENCE_ERROR_FUNCTION_TYPE.getInstanceType();
>     registerNativeType(JSTypeNative.REFERENCE_ERROR_TYPE, REFERENCE_ERROR_TYPE);
> 
>     
>     FunctionType SYNTAX_ERROR_FUNCTION_TYPE =
>         new ErrorFunctionType(this, "SyntaxError");
>     SYNTAX_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);
>     registerNativeType(
>         JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE, SYNTAX_ERROR_FUNCTION_TYPE);
> 
>     ObjectType SYNTAX_ERROR_TYPE = SYNTAX_ERROR_FUNCTION_TYPE.getInstanceType();
>     registerNativeType(JSTypeNative.SYNTAX_ERROR_TYPE, SYNTAX_ERROR_TYPE);
> 
>     
>     FunctionType TYPE_ERROR_FUNCTION_TYPE =
>         new ErrorFunctionType(this, "TypeError");
>     TYPE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);
>     registerNativeType(
>         JSTypeNative.TYPE_ERROR_FUNCTION_TYPE, TYPE_ERROR_FUNCTION_TYPE);
> 
>     ObjectType TYPE_ERROR_TYPE = TYPE_ERROR_FUNCTION_TYPE.getInstanceType();
>     registerNativeType(JSTypeNative.TYPE_ERROR_TYPE, TYPE_ERROR_TYPE);
> 
>     
>     FunctionType URI_ERROR_FUNCTION_TYPE =
>         new ErrorFunctionType(this, "URIError");
>     URI_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);
>     registerNativeType(
>         JSTypeNative.URI_ERROR_FUNCTION_TYPE, URI_ERROR_FUNCTION_TYPE);
> 
>     ObjectType URI_ERROR_TYPE = URI_ERROR_FUNCTION_TYPE.getInstanceType();
>     registerNativeType(JSTypeNative.URI_ERROR_TYPE, URI_ERROR_TYPE);
> 
>     
>     FunctionType NUMBER_OBJECT_FUNCTION_TYPE =
>         new FunctionType(this, "Number", null, createParameters(false, ALL_TYPE),
>             NUMBER_TYPE, null, null, true, true);
>     ObjectType numberPrototype = NUMBER_OBJECT_FUNCTION_TYPE.getPrototype();
>     registerNativeType(
>         JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE, NUMBER_OBJECT_FUNCTION_TYPE);
> 
>     ObjectType NUMBER_OBJECT_TYPE =
>         NUMBER_OBJECT_FUNCTION_TYPE.getInstanceType();
>     registerNativeType(JSTypeNative.NUMBER_OBJECT_TYPE, NUMBER_OBJECT_TYPE);
> 
>     
>     FunctionType REGEXP_FUNCTION_TYPE =
>       new FunctionType(this, "RegExp", null,
>           createOptionalParameters(ALL_TYPE, ALL_TYPE),
>           null, null, null, true, true) {
>         private static final long serialVersionUID = 1L;
> 
>         @Override
>         public JSType getReturnType() {
>           return getInstanceType();
>         }
>       };
>     ObjectType regexpPrototype = REGEXP_FUNCTION_TYPE.getPrototype();
>     registerNativeType(JSTypeNative.REGEXP_FUNCTION_TYPE, REGEXP_FUNCTION_TYPE);
> 
>     ObjectType REGEXP_TYPE = REGEXP_FUNCTION_TYPE.getInstanceType();
>     registerNativeType(JSTypeNative.REGEXP_TYPE, REGEXP_TYPE);
> 
>     
>     FunctionType STRING_OBJECT_FUNCTION_TYPE =
>         new FunctionType(this, "String", null, createParameters(false, ALL_TYPE),
>         STRING_TYPE, null, null, true, true);
>     ObjectType stringPrototype = STRING_OBJECT_FUNCTION_TYPE.getPrototype();
>     registerNativeType(
>         JSTypeNative.STRING_OBJECT_FUNCTION_TYPE, STRING_OBJECT_FUNCTION_TYPE);
> 
>     ObjectType STRING_OBJECT_TYPE =
>         STRING_OBJECT_FUNCTION_TYPE.getInstanceType();
>     registerNativeType(
>         JSTypeNative.STRING_OBJECT_TYPE, STRING_OBJECT_TYPE);
> 
>     
>     JSType OBJECT_NUMBER_STRING =
>         createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE);
>     registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING, OBJECT_NUMBER_STRING);
> 
>     
>     JSType OBJECT_NUMBER_STRING_BOOLEAN =
>         createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);
>     registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN,
>         OBJECT_NUMBER_STRING_BOOLEAN);
> 
>     
>     JSType NUMBER_STRING_BOOLEAN =
>         createUnionType(NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);
>     registerNativeType(JSTypeNative.NUMBER_STRING_BOOLEAN,
>         NUMBER_STRING_BOOLEAN);
> 
>     
>     JSType NUMBER_STRING = createUnionType(NUMBER_TYPE, STRING_TYPE);
>     registerNativeType(JSTypeNative.NUMBER_STRING, NUMBER_STRING);
> 
>     
> 
>     
>     JSType STRING_VALUE_OR_OBJECT_TYPE =
>         createUnionType(STRING_OBJECT_TYPE, STRING_TYPE);
>     registerNativeType(
>         JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE, STRING_VALUE_OR_OBJECT_TYPE);
> 
>     
>     JSType NUMBER_VALUE_OR_OBJECT_TYPE =
>         createUnionType(NUMBER_OBJECT_TYPE, NUMBER_TYPE);
>     registerNativeType(
>         JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE, NUMBER_VALUE_OR_OBJECT_TYPE);
> 
>     
>     FunctionType U2U_FUNCTION_TYPE =
>         createFunctionType(UNKNOWN_TYPE, true, UNKNOWN_TYPE);
>     registerNativeType(JSTypeNative.U2U_FUNCTION_TYPE, U2U_FUNCTION_TYPE);
> 
>     
>     
>     FunctionType U2U_CONSTRUCTOR_TYPE =
>         
>         
>         
>         
>         new FunctionType(this, "Function", null,
>           createParametersWithVarArgs(
>               UNKNOWN_TYPE), UNKNOWN_TYPE, NO_OBJECT_TYPE, null, true, true) {
>           private static final long serialVersionUID = 1L;
> 
>           @Override public FunctionType getConstructor() {
>             return registry.getNativeFunctionType(
>                 JSTypeNative.FUNCTION_FUNCTION_TYPE);
>           }
>         };
> 
>     
>     
>     registerNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE, U2U_CONSTRUCTOR_TYPE);
>     registerNativeType(
>         JSTypeNative.FUNCTION_INSTANCE_TYPE, U2U_CONSTRUCTOR_TYPE);
> 
>     FUNCTION_FUNCTION_TYPE.setInstanceType(U2U_CONSTRUCTOR_TYPE);
>     U2U_CONSTRUCTOR_TYPE.setImplicitPrototype(FUNCTION_PROTOTYPE);
> 
>     
>     FunctionType LEAST_FUNCTION_TYPE =
>         createFunctionType(NO_TYPE, true, ALL_TYPE);
>     registerNativeType(JSTypeNative.LEAST_FUNCTION_TYPE, LEAST_FUNCTION_TYPE);
> 
>     
>     ObjectType GLOBAL_THIS = createObjectType("global this", null,
>         UNKNOWN_TYPE );
>     registerNativeType(JSTypeNative.GLOBAL_THIS, GLOBAL_THIS);
> 
>     
>     FunctionType GREATEST_FUNCTION_TYPE =
>       createFunctionType(ALL_TYPE, true, NO_TYPE);
>     registerNativeType(JSTypeNative.GREATEST_FUNCTION_TYPE,
>         GREATEST_FUNCTION_TYPE);
>   }
> 
>   private void initializeRegistry() {
>     register(getNativeType(JSTypeNative.ARRAY_TYPE));
>     register(getNativeType(JSTypeNative.BOOLEAN_OBJECT_TYPE));
>     register(getNativeType(JSTypeNative.BOOLEAN_TYPE));
>     register(getNativeType(JSTypeNative.DATE_TYPE));
>     register(getNativeType(JSTypeNative.NULL_TYPE));
>     register(getNativeType(JSTypeNative.NULL_TYPE), "Null");
>     register(getNativeType(JSTypeNative.NUMBER_OBJECT_TYPE));
>     register(getNativeType(JSTypeNative.NUMBER_TYPE));
>     register(getNativeType(JSTypeNative.OBJECT_TYPE));
>     register(getNativeType(JSTypeNative.ERROR_TYPE));
>     register(getNativeType(JSTypeNative.URI_ERROR_TYPE));
>     register(getNativeType(JSTypeNative.EVAL_ERROR_TYPE));
>     register(getNativeType(JSTypeNative.TYPE_ERROR_TYPE));
>     register(getNativeType(JSTypeNative.RANGE_ERROR_TYPE));
>     register(getNativeType(JSTypeNative.REFERENCE_ERROR_TYPE));
>     register(getNativeType(JSTypeNative.SYNTAX_ERROR_TYPE));
>     register(getNativeType(JSTypeNative.REGEXP_TYPE));
>     register(getNativeType(JSTypeNative.STRING_OBJECT_TYPE));
>     register(getNativeType(JSTypeNative.STRING_TYPE));
>     register(getNativeType(JSTypeNative.VOID_TYPE));
>     register(getNativeType(JSTypeNative.VOID_TYPE), "Undefined");
>     register(getNativeType(JSTypeNative.VOID_TYPE), "void");
>     register(getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE), "Function");
>   }
> 
>   private void register(JSType type) {
>     register(type, type.toString());
>   }
> 
>   private void register(JSType type, String name) {
>     namesToTypes.put(name, type);
> 
>     
>     while (name.indexOf('.') > 0) {
>       name = name.substring(0, name.lastIndexOf('.'));
>       namespaces.add(name);
>     }
>   }
> 
>   private void registerNativeType(JSTypeNative typeId, JSType type) {
>     nativeTypes[typeId.ordinal()] = type;
>   }
> 
>   
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>   public void registerPropertyOnType(String propertyName, ObjectType owner) {
>     Set<ObjectType> typeSet = typesIndexedByProperty.get(propertyName);
>     if (typeSet == null) {
>       typesIndexedByProperty.put(propertyName, typeSet = Sets.newHashSet());
>     }
>     greatestSubtypeByProperty.remove(propertyName);
>     typeSet.add(owner);
>   }
> 
>   
> 
> 
> 
>   public JSType getGreatestSubtypeWithProperty(
>       JSType type, String propertyName) {
>     if (greatestSubtypeByProperty.containsKey(propertyName)) {
>       return greatestSubtypeByProperty.get(propertyName)
>           .getGreatestSubtype(type);
>     }
>     if (typesIndexedByProperty.containsKey(propertyName)) {
>       UnionTypeBuilder builder = new UnionTypeBuilder(this);
>       for (JSType alt : typesIndexedByProperty.get(propertyName)) {
>         builder.addAlternate(alt);
>       }
>       JSType built = builder.build();
>       greatestSubtypeByProperty.put(propertyName, built);
>       return built.getGreatestSubtype(type);
>     }
>     return getNativeType(NO_TYPE);
>   }
> 
>   
> 
> 
>   public boolean canPropertyBeDefined(JSType type, String propertyName) {
>     if (typesIndexedByProperty.containsKey(propertyName)) {
>       for (JSType alt : typesIndexedByProperty.get(propertyName)) {
>         if (alt.isSubtype(type) || type.isSubtype(alt)) {
>           return true;
>         }
>       }
>     }
> 
>     return false;
>   }
> 
>   
> 
> 
>   public Set<ObjectType> getTypesWithProperty(String propertyName) {
>     Set<ObjectType> typeSet = typesIndexedByProperty.get(propertyName);
>     if (typeSet == null) {
>       return Sets.newHashSet(getNativeObjectType(NO_TYPE));
>     }
>     return typeSet;
>   }
> 
>   
> 
> 
> 
> 
>   public void incrementGeneration() {
>     for (NamedType type : resolvedNamedTypes.values()) {
>       type.clearResolved();
>     }
>     unresolvedNamedTypes.putAll(resolvedNamedTypes);
>     resolvedNamedTypes.clear();
>   }
> 
>   boolean isLastGeneration() {
>     return lastGeneration;
>   }
> 
>   
> 
> 
> 
>   public void setLastGeneration(boolean lastGeneration) {
>     this.lastGeneration = lastGeneration;
>   }
> 
>   
> 
> 
> 
> 
> 
>   void registerTypeImplementingInterface(
>       FunctionType type, ObjectType interfaceInstance) {
>     interfaceToImplementors.put(interfaceInstance.getReferenceName(), type);
>   }
> 
>   
> 
> 
> 
> 
> 
>   public Collection<FunctionType> getDirectImplementors(
>       ObjectType interfaceInstance) {
>     return interfaceToImplementors.get(interfaceInstance.getReferenceName());
>   }
> 
>   
> 
> 
> 
> 
> 
> 
> 
> 
>   public boolean declareType(String name, JSType t) {
>     if (namesToTypes.containsKey(name)) {
>       return false;
>     }
>     register(t, name);
>     return true;
>   }
> 
>   
> 
> 
> 
>   public void forwardDeclareType(String name) {
>     forwardDeclaredTypes.add(name);
>   }
> 
>   
> 
> 
>   public boolean isForwardDeclaredType(String name) {
>     return forwardDeclaredTypes.contains(name);
>   }
> 
>   
>   public boolean hasNamespace(String name) {
>     return namespaces.contains(name);
>   }
> 
>   
> 
> 
> 
> 
> 
>   public JSType getType(String jsTypeName) {
>     
>     
>     if (jsTypeName.equals(templateTypeName)) {
>       return templateType;
>     }
>     return namesToTypes.get(jsTypeName);
>   }
> 
>   public JSType getNativeType(JSTypeNative typeId) {
>     return nativeTypes[typeId.ordinal()];
>   }
> 
>   public ObjectType getNativeObjectType(JSTypeNative typeId) {
>     return (ObjectType) getNativeType(typeId);
>   }
> 
>   public FunctionType getNativeFunctionType(JSTypeNative typeId) {
>     return (FunctionType) getNativeType(typeId);
>   }
> 
>   
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>   public JSType getType(StaticScope<JSType> scope, String jsTypeName,
>       String sourceName, int lineno, int charno) {
>     JSType type = getType(jsTypeName);
>     if (type == null) {
>       
>       
>       NamedType namedType =
>           new NamedType(this, jsTypeName, sourceName, lineno, charno);
>       unresolvedNamedTypes.put(scope, namedType);
>       type = namedType;
>     }
>     return type;
>   }
> 
>   public void resolveTypesInScope(StaticScope<JSType> scope) {
>     for (NamedType type : unresolvedNamedTypes.get(scope)) {
>       type.resolve(reporter, scope);
>     }
> 
>     resolvedNamedTypes.putAll(scope, unresolvedNamedTypes.removeAll(scope));
> 
>     if (scope != null && scope.getParentScope() == null) {
>       
>       
>       
>       PrototypeObjectType globalThis = (PrototypeObjectType) getNativeType(
>           JSTypeNative.GLOBAL_THIS);
>       JSType windowType = getType("Window");
>       if (globalThis.isUnknownType()) {
>         ObjectType windowObjType = ObjectType.cast(windowType);
>         if (windowObjType != null) {
>           globalThis.setImplicitPrototype(windowObjType);
>         } else {
>           globalThis.setImplicitPrototype(
>               getNativeObjectType(JSTypeNative.OBJECT_TYPE));
>         }
>       }
>     }
>   }
> 
>   
> 
> 
> 
>   public JSType createOptionalType(JSType type) {
>     if (type instanceof UnknownType || type.isAllType()) {
>       return type;
>     } else {
>       return createUnionType(type, getNativeType(JSTypeNative.VOID_TYPE));
>     }
>   }
> 
>   
> 
> 
> 
>   public JSType createDefaultObjectUnion(JSType type) {
>     return shouldTolerateUndefinedValues()
>         ? createOptionalNullableType(type)
>         : createNullableType(type);
>   }
> 
>   
> 
> 
> 
>   public JSType createNullableType(JSType type) {
>     return createUnionType(type, getNativeType(JSTypeNative.NULL_TYPE));
>   }
> 
>   
> 
> 
> 
>   public JSType createOptionalNullableType(JSType type) {
>     return createUnionType(type, getNativeType(JSTypeNative.VOID_TYPE),
>         getNativeType(JSTypeNative.NULL_TYPE));
>   }
> 
>   
> 
> 
>   public JSType createUnionType(JSType... variants) {
>     UnionTypeBuilder builder = new UnionTypeBuilder(this);
>     for (JSType type : variants) {
>       builder.addAlternate(type);
>     }
>     return builder.build();
>   }
> 
>   
> 
> 
> 
>   public JSType createUnionType(JSTypeNative... variants) {
>     UnionTypeBuilder builder = new UnionTypeBuilder(this);
>     for (JSTypeNative typeId : variants) {
>       builder.addAlternate(getNativeType(typeId));
>     }
>     return builder.build();
>   }
> 
>   
> 
> 
>   public EnumType createEnumType(String name, JSType elementsType) {
>     return new EnumType(this, name, elementsType);
>   }
> 
>   
> 
> 
> 
> 
> 
>   public FunctionType createFunctionType(
>       JSType returnType, JSType... parameterTypes) {
>     return new FunctionType(
>         this, null, null, createParameters(parameterTypes), returnType);
>   }
> 
>   
> 
> 
> 
> 
> 
> 
>   public FunctionType createFunctionTypeWithVarArgs(
>       JSType returnType, List<JSType> parameterTypes) {
>     return new FunctionType(
>         this, null, null, createParametersWithVarArgs(parameterTypes),
>         returnType);
>   }
> 
>   
> 
> 
> 
> 
> 
>   public FunctionType createFunctionType(
>       JSType returnType, List<JSType> parameterTypes) {
>     return new FunctionType(
>         this, null, null, createParameters(parameterTypes), returnType);
>   }
> 
>   
> 
> 
> 
> 
> 
> 
>   public FunctionType createFunctionTypeWithVarArgs(
>       JSType returnType, JSType... parameterTypes) {
>     return new FunctionType(
>         this, null, null, createParametersWithVarArgs(parameterTypes), returnType);
>   }
> 
>   
> 
> 
> 
> 
> 
>   public FunctionType createConstructorType(
>       JSType returnType, JSType... parameterTypes) {
>     return createConstructorType(
>         null, null, createParameters(parameterTypes), returnType);
>   }
> 
>   
> 
> 
> 
> 
> 
> 
>   public FunctionType createConstructorTypeWithVarArgs(
>       JSType returnType, JSType... parameterTypes) {
>     return createConstructorType(
>         null, null, createParametersWithVarArgs(parameterTypes), returnType);
>   }
> 
>   
> 
> 
> 
> 
> 
> 
>   public JSType createFunctionType(ObjectType instanceType,
>       JSType returnType, List<JSType> parameterTypes) {
>     return new FunctionType(this, null, null, createParameters(parameterTypes),
>         returnType, instanceType);
>   }
> 
>   
> 
> 
> 
> 
> 
> 
> 
> 
>   public JSType createFunctionTypeWithVarArgs(ObjectType instanceType,
>       JSType returnType, List<JSType> parameterTypes) {
>     return new FunctionType(this, null, null,
>         createParametersWithVarArgs(parameterTypes), returnType, instanceType);
>   }
> 
>   
> 
> 
> 
> 
> 
>   public Node createParameters(List<JSType> parameterTypes) {
>     return createParameters(
>         parameterTypes.toArray(new JSType[parameterTypes.size()]));
>   }
> 
>   
> 
> 
> 
> 
> 
> 
> 
>   public Node createParametersWithVarArgs(List<JSType> parameterTypes) {
>     return createParametersWithVarArgs(
>         parameterTypes.toArray(new JSType[parameterTypes.size()]));
>   }
> 
>   
> 
> 
> 
> 
> 
>   public Node createParameters(JSType... parameterTypes) {
>     return createParameters(false, parameterTypes);
>   }
> 
>   
> 
> 
> 
> 
> 
> 
> 
>   public Node createParametersWithVarArgs(JSType... parameterTypes) {
>     return createParameters(true, parameterTypes);
>   }
> 
>   
> 
> 
> 
>   public Node createOptionalParameters(JSType... parameterTypes) {
>     FunctionParamBuilder builder = new FunctionParamBuilder(this);
>     builder.addOptionalParams(parameterTypes);
>     return builder.build();
>   }
> 
>   
> 
> 
> 
> 
> 
> 
> 
> 
> 
>   private Node createParameters(boolean lastVarArgs, JSType... parameterTypes) {
>     FunctionParamBuilder builder = new FunctionParamBuilder(this);
>     int max = parameterTypes.length - 1;
>     for (int i = 0; i <= max; i++) {
>       if (lastVarArgs && i == max) {
>         builder.addVarArgs(parameterTypes[i]);
>       } else {
>         builder.addRequiredParams(parameterTypes[i]);
>       }
18,1684c1008,1243
< }
< </SCRIPT>
< <NOSCRIPT>
< </NOSCRIPT>
< 
< </HEAD>
< 
< <BODY BGCOLOR="white" onload="windowTitle();">
< <HR>
< 
< 
< <!-- ========= START OF TOP NAVBAR ======= -->
< <A NAME="navbar_top"><!-- --></A>
< <A HREF="#skip-navbar_top" title="Skip navigation links"></A>
< <TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
< <TR>
< <TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
< <A NAME="navbar_top_firstrow"><!-- --></A>
< <TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
<   <TR ALIGN="center" VALIGN="top">
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
<   </TR>
< </TABLE>
< </TD>
< <TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
< </EM>
< </TD>
< </TR>
< 
< <TR>
< <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
< &nbsp;<A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeNative.html" title="enum in com.google.javascript.rhino.jstype"><B>PREV CLASS</B></A>&nbsp;
< &nbsp;<A HREF="../../../../../com/google/javascript/rhino/jstype/NamedType.html" title="class in com.google.javascript.rhino.jstype"><B>NEXT CLASS</B></A></FONT></TD>
< <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
<   <A HREF="../../../../../index.html?com/google/javascript/rhino/jstype/JSTypeRegistry.html" target="_top"><B>FRAMES</B></A>  &nbsp;
< &nbsp;<A HREF="JSTypeRegistry.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
< &nbsp;<SCRIPT type="text/javascript">
<   <!--
<   if(window==top) {
<     document.writeln('<A HREF="../../../../../allclasses-noframe.html"><B>All Classes</B></A>');
<   }
<   
< </SCRIPT>
< <NOSCRIPT>
<   <A HREF="../../../../../allclasses-noframe.html"><B>All Classes</B></A>
< </NOSCRIPT>
< 
< 
< </FONT></TD>
< </TR>
< <TR>
< <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
<   SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
< <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
< DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
< </TR>
< </TABLE>
< <A NAME="skip-navbar_top"></A>
< <!-- ========= END OF TOP NAVBAR ========= -->
< 
< <HR>
< <!-- ======== START OF CLASS DATA ======== -->
< <H2>
< <FONT SIZE="-1">
< com.google.javascript.rhino.jstype</FONT>
< <BR>
< Class JSTypeRegistry</H2>
< <PRE>
< <A HREF="http:
<   <IMG SRC="../../../../../resources/inherit.gif" ALT="extended by "><B>com.google.javascript.rhino.jstype.JSTypeRegistry</B>
< </PRE>
< <DL>
< <DT><B>All Implemented Interfaces:</B> <DD><A HREF="http:
< </DL>
< <HR>
< <DL>
< <DT><PRE>public class <B>JSTypeRegistry</B><DT>extends <A HREF="http:
< </PRE>
< 
< <P>
< The type registry is used to resolve named types.
< 
<  <p>This class is not thread-safe.
< <P>
< 
< <P>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../../serialized-form.html#com.google.javascript.rhino.jstype.JSTypeRegistry">Serialized Form</A></DL>
< <HR>
< 
< <P>
< 
< <!-- ======== CONSTRUCTOR SUMMARY ======== -->
< 
< <A NAME="constructor_summary"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
< <B>Constructor Summary</B></FONT></TH>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#JSTypeRegistry(com.google.javascript.rhino.ErrorReporter)">JSTypeRegistry</A></B>(<A HREF="../../../../../com/google/javascript/rhino/ErrorReporter.html" title="interface in com.google.javascript.rhino">ErrorReporter</A>&nbsp;reporter)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constructs a new type registry populated with the built-in types.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#JSTypeRegistry(com.google.javascript.rhino.ErrorReporter, boolean)">JSTypeRegistry</A></B>(<A HREF="../../../../../com/google/javascript/rhino/ErrorReporter.html" title="interface in com.google.javascript.rhino">ErrorReporter</A>&nbsp;reporter,
<                boolean&nbsp;tolerateUndefinedValues)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constructs a new type registry populated with the built-in types.</TD>
< </TR>
< </TABLE>
< &nbsp;
< <!-- ========== METHOD SUMMARY =========== -->
< 
< <A NAME="method_summary"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
< <B>Method Summary</B></FONT></TH>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#canPropertyBeDefined(com.google.javascript.rhino.jstype.JSType, java.lang.String)">canPropertyBeDefined</A></B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;type,
<                      <A HREF="http:
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns whether the given property can possibly be set on the given type.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#clearTemplateTypeName()">clearTemplateTypeName</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Clears the template type name.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#createAnonymousObjectType()">createAnonymousObjectType</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create an anonymous object type.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html" title="class in com.google.javascript.rhino.jstype">FunctionType</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#createConstructorType(com.google.javascript.rhino.jstype.JSType, boolean, com.google.javascript.rhino.jstype.JSType...)">createConstructorType</A></B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;returnType,
<                       boolean&nbsp;lastVarArgs,
<                       <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>...&nbsp;parameterTypes)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a function type which can act as a constructor.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html" title="class in com.google.javascript.rhino.jstype">FunctionType</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#createConstructorType(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType...)">createConstructorType</A></B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;returnType,
<                       <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>...&nbsp;parameterTypes)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a function type which can act as a constructor.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html" title="class in com.google.javascript.rhino.jstype">FunctionType</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#createConstructorType(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType)">createConstructorType</A></B>(<A HREF="http:
<                       <A HREF="../../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;source,
<                       <A HREF="../../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;parameters,
<                       <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;returnType)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a constructor function type.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html" title="class in com.google.javascript.rhino.jstype">FunctionType</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#createConstructorTypeWithVarArgs(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType...)">createConstructorTypeWithVarArgs</A></B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;returnType,
<                                  <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>...&nbsp;parameterTypes)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a function type which can act as a constructor.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#createDefaultObjectUnion(com.google.javascript.rhino.jstype.JSType)">createDefaultObjectUnion</A></B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;type)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a type representing nullable values of the given type.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../../com/google/javascript/rhino/jstype/EnumType.html" title="class in com.google.javascript.rhino.jstype">EnumType</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#createEnumType(java.lang.String, com.google.javascript.rhino.jstype.JSType)">createEnumType</A></B>(<A HREF="http:
<                <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;elementsType)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates an enum type.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#createFromTypeNodes(com.google.javascript.rhino.Node, java.lang.String, com.google.javascript.rhino.jstype.StaticScope)">createFromTypeNodes</A></B>(<A HREF="../../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;n,
<                     <A HREF="http:
<                     <A HREF="../../../../../com/google/javascript/rhino/jstype/StaticScope.html" title="interface in com.google.javascript.rhino.jstype">StaticScope</A>&lt;<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&gt;&nbsp;scope)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a JSType from the nodes representing a type.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html" title="class in com.google.javascript.rhino.jstype">FunctionType</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#createFunctionType(com.google.javascript.rhino.jstype.JSType, boolean, com.google.javascript.rhino.jstype.JSType...)">createFunctionType</A></B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;returnType,
<                    boolean&nbsp;lastVarArgs,
<                    <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>...&nbsp;parameterTypes)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a function type.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html" title="class in com.google.javascript.rhino.jstype">FunctionType</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#createFunctionType(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType...)">createFunctionType</A></B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;returnType,
<                    <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>...&nbsp;parameterTypes)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a function type.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html" title="class in com.google.javascript.rhino.jstype">FunctionType</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#createFunctionType(com.google.javascript.rhino.jstype.JSType, java.util.List)">createFunctionType</A></B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;returnType,
<                    <A HREF="http:
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a function type.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#createFunctionType(com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.jstype.JSType, java.util.List)">createFunctionType</A></B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A>&nbsp;instanceType,
<                    <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;returnType,
<                    <A HREF="http:
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a function type in which <code>this</code> refers to an object instance.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html" title="class in com.google.javascript.rhino.jstype">FunctionType</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#createFunctionTypeWithNewReturnType(com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.JSType)">createFunctionTypeWithNewReturnType</A></B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html" title="class in com.google.javascript.rhino.jstype">FunctionType</A>&nbsp;existingFunctionType,
<                                     <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;returnType)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a new function type based on an existing function type but
<  with a new return type.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html" title="class in com.google.javascript.rhino.jstype">FunctionType</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#createFunctionTypeWithVarArgs(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType...)">createFunctionTypeWithVarArgs</A></B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;returnType,
<                               <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>...&nbsp;parameterTypes)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a function type.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html" title="class in com.google.javascript.rhino.jstype">FunctionType</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#createFunctionTypeWithVarArgs(com.google.javascript.rhino.jstype.JSType, java.util.List)">createFunctionTypeWithVarArgs</A></B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;returnType,
<                               <A HREF="http:
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a function type.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#createFunctionTypeWithVarArgs(com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.jstype.JSType, java.util.List)">createFunctionTypeWithVarArgs</A></B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A>&nbsp;instanceType,
<                               <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;returnType,
<                               <A HREF="http:
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a function type in which <code>this</code> refers to an object instance.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html" title="class in com.google.javascript.rhino.jstype">FunctionType</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#createInterfaceType(java.lang.String, com.google.javascript.rhino.Node)">createInterfaceType</A></B>(<A HREF="http:
<                     <A HREF="../../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;source)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates an interface function type.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#createNullableType(com.google.javascript.rhino.jstype.JSType)">createNullableType</A></B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;type)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a type representing nullable values of the given type.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#createObjectType(com.google.javascript.rhino.jstype.ObjectType)">createObjectType</A></B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A>&nbsp;implicitPrototype)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create an object type.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#createObjectType(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.ObjectType)">createObjectType</A></B>(<A HREF="http:
<                  <A HREF="../../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;n,
<                  <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A>&nbsp;implicitPrototype)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create an object type.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#createOptionalNullableType(com.google.javascript.rhino.jstype.JSType)">createOptionalNullableType</A></B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;type)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a nullabel and undefine-able value of the given type.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#createOptionalParameters(com.google.javascript.rhino.jstype.JSType...)">createOptionalParameters</A></B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>...&nbsp;parameterTypes)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a tree hierarchy representing a typed parameter list in which
<  every parameter is optional.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#createOptionalType(com.google.javascript.rhino.jstype.JSType)">createOptionalType</A></B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;type)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a type representing optional values of the given type.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;com.google.javascript.rhino.jstype.ParameterizedType</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#createParameterizedType(com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.jstype.JSType)">createParameterizedType</A></B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A>&nbsp;objectType,
<                         <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;parameterType)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a parameterized type.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#createParameters(com.google.javascript.rhino.jstype.JSType...)">createParameters</A></B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>...&nbsp;parameterTypes)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a tree hierarchy representing a typed argument list.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#createParameters(java.util.List)">createParameters</A></B>(<A HREF="http:
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a tree hierarchy representing a typed argument list.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#createParametersWithVarArgs(com.google.javascript.rhino.jstype.JSType...)">createParametersWithVarArgs</A></B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>...&nbsp;parameterTypes)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a tree hierarchy representing a typed argument list.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#createParametersWithVarArgs(java.util.List)">createParametersWithVarArgs</A></B>(<A HREF="http:
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a tree hierarchy representing a typed argument list.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../../com/google/javascript/rhino/jstype/RecordType.html" title="class in com.google.javascript.rhino.jstype">RecordType</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#createRecordType(java.util.Map)">createRecordType</A></B>(<A HREF="http:
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a record type.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#createRecordTypeFromNodes(com.google.javascript.rhino.Node, java.lang.String, com.google.javascript.rhino.jstype.StaticScope)">createRecordTypeFromNodes</A></B>(<A HREF="../../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;n,
<                           <A HREF="http:
<                           <A HREF="../../../../../com/google/javascript/rhino/jstype/StaticScope.html" title="interface in com.google.javascript.rhino.jstype">StaticScope</A>&lt;<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&gt;&nbsp;scope)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a RecordType from the nodes representing said record type.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#createUnionType(com.google.javascript.rhino.jstype.JSType...)">createUnionType</A></B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>...&nbsp;variants)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a union type whose variants are the arguments.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#createUnionType(com.google.javascript.rhino.jstype.JSTypeNative...)">createUnionType</A></B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeNative.html" title="enum in com.google.javascript.rhino.jstype">JSTypeNative</A>...&nbsp;variants)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a union type whose variants are the builtin types specified
<  by the arguments.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#declareType(java.lang.String, com.google.javascript.rhino.jstype.JSType)">declareType</A></B>(<A HREF="http:
<             <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;t)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Records declared type names.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#forwardDeclareType(java.lang.String)">forwardDeclareType</A></B>(<A HREF="http:
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Records a forward-declared type name.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#getDirectImplementors(com.google.javascript.rhino.jstype.ObjectType)">getDirectImplementors</A></B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A>&nbsp;interfaceInstance)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a collection of types that directly implement <code>interfaceInstance</code>.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#getGreatestSubtypeWithProperty(com.google.javascript.rhino.jstype.JSType, java.lang.String)">getGreatestSubtypeWithProperty</A></B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;type,
<                                <A HREF="http:
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the greatest subtype of the <code>type</code> that has a property
<  <code>propertyName</code> defined on it.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html" title="class in com.google.javascript.rhino.jstype">FunctionType</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#getNativeFunctionType(com.google.javascript.rhino.jstype.JSTypeNative)">getNativeFunctionType</A></B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeNative.html" title="enum in com.google.javascript.rhino.jstype">JSTypeNative</A>&nbsp;typeId)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative)">getNativeObjectType</A></B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeNative.html" title="enum in com.google.javascript.rhino.jstype">JSTypeNative</A>&nbsp;typeId)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#getNativeType(com.google.javascript.rhino.jstype.JSTypeNative)">getNativeType</A></B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeNative.html" title="enum in com.google.javascript.rhino.jstype">JSTypeNative</A>&nbsp;typeId)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#getType(com.google.javascript.rhino.jstype.StaticScope, java.lang.String, java.lang.String, int, int)">getType</A></B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/StaticScope.html" title="interface in com.google.javascript.rhino.jstype">StaticScope</A>&lt;<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&gt;&nbsp;scope,
<         <A HREF="http:
<         <A HREF="http:
<         int&nbsp;lineno,
<         int&nbsp;charno)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Looks up a type by name.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#getType(java.lang.String)">getType</A></B>(<A HREF="http:
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Looks up a type by name.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#getTypesWithProperty(java.lang.String)">getTypesWithProperty</A></B>(<A HREF="http:
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns each type that has a property <code>propertyName</code> defined on it.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#hasNamespace(java.lang.String)">hasNamespace</A></B>(<A HREF="http:
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Determines whether the given JS package exists.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#identifyEnumName(java.lang.String)">identifyEnumName</A></B>(<A HREF="http:
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Identifies the name of an enum before we actually declare it.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#incrementGeneration()">incrementGeneration</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Increments the current generation.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#isForwardDeclaredType(java.lang.String)">isForwardDeclaredType</A></B>(<A HREF="http:
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether this is a forward-declared type name.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#registerPropertyOnType(java.lang.String, com.google.javascript.rhino.jstype.ObjectType)">registerPropertyOnType</A></B>(<A HREF="http:
<                        <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A>&nbsp;owner)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tells the type system that <code>owner</code> may have a property named
<  <code>propertyName</code>.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#resetForTypeCheck()">resetForTypeCheck</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Reset to run the TypeCheck pass.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#resolveTypesInScope(com.google.javascript.rhino.jstype.StaticScope)">resolveTypesInScope</A></B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/StaticScope.html" title="interface in com.google.javascript.rhino.jstype">StaticScope</A>&lt;<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&gt;&nbsp;scope)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#setLastGeneration(boolean)">setLastGeneration</A></B>(boolean&nbsp;lastGeneration)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets whether this is the last generation.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#setTemplateTypeName(java.lang.String)">setTemplateTypeName</A></B>(<A HREF="http:
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the template type name.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html#shouldTolerateUndefinedValues()">shouldTolerateUndefinedValues</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< </TABLE>
< &nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
< <TH ALIGN="left"><B>Methods inherited from class java.lang.<A HREF="http:
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD><CODE><A HREF="http:
< </TR>
< </TABLE>
< &nbsp;
< <P>
< 
< <!-- ========= CONSTRUCTOR DETAIL ======== -->
< 
< <A NAME="constructor_detail"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
< <B>Constructor Detail</B></FONT></TH>
< </TR>
< </TABLE>
< 
< <A NAME="JSTypeRegistry(com.google.javascript.rhino.ErrorReporter)"><!-- --></A><H3>
< JSTypeRegistry</H3>
< <PRE>
< public <B>JSTypeRegistry</B>(<A HREF="../../../../../com/google/javascript/rhino/ErrorReporter.html" title="interface in com.google.javascript.rhino">ErrorReporter</A>&nbsp;reporter)</PRE>
< <DL>
< <DD>Constructs a new type registry populated with the built-in types.
< <P>
< </DL>
< <HR>
< 
< <A NAME="JSTypeRegistry(com.google.javascript.rhino.ErrorReporter, boolean)"><!-- --></A><H3>
< JSTypeRegistry</H3>
< <PRE>
< public <B>JSTypeRegistry</B>(<A HREF="../../../../../com/google/javascript/rhino/ErrorReporter.html" title="interface in com.google.javascript.rhino">ErrorReporter</A>&nbsp;reporter,
<                       boolean&nbsp;tolerateUndefinedValues)</PRE>
< <DL>
< <DD>Constructs a new type registry populated with the built-in types.
< <P>
< </DL>
< 
< <!-- ============ METHOD DETAIL ========== -->
< 
< <A NAME="method_detail"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
< <B>Method Detail</B></FONT></TH>
< </TR>
< </TABLE>
< 
< <A NAME="shouldTolerateUndefinedValues()"><!-- --></A><H3>
< shouldTolerateUndefinedValues</H3>
< <PRE>
< public boolean <B>shouldTolerateUndefinedValues</B>()</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="resetForTypeCheck()"><!-- --></A><H3>
< resetForTypeCheck</H3>
< <PRE>
< public void <B>resetForTypeCheck</B>()</PRE>
< <DL>
< <DD>Reset to run the TypeCheck pass.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="registerPropertyOnType(java.lang.String, com.google.javascript.rhino.jstype.ObjectType)"><!-- --></A><H3>
< registerPropertyOnType</H3>
< <PRE>
< public void <B>registerPropertyOnType</B>(<A HREF="http:
<                                    <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A>&nbsp;owner)</PRE>
< <DL>
< <DD>Tells the type system that <code>owner</code> may have a property named
<  <code>propertyName</code>. This allows the registry to keep track of what
<  types a property is defined upon.
< 
<  This is NOT the same as saying that <code>owner</code> must have a property
<  named type. ObjectType#hasProperty attempts to minimize false positives
<  ("if we're not sure, then don't type check this property"). The type
<  registry, on the other hand, should attempt to minimize false negatives
<  ("if this property is assigned anywhere in the program, it must
<  show up in the type registry").
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getGreatestSubtypeWithProperty(com.google.javascript.rhino.jstype.JSType, java.lang.String)"><!-- --></A><H3>
< getGreatestSubtypeWithProperty</H3>
< <PRE>
< public <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A> <B>getGreatestSubtypeWithProperty</B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;type,
<                                              <A HREF="http:
< <DL>
< <DD>Gets the greatest subtype of the <code>type</code> that has a property
<  <code>propertyName</code> defined on it.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="canPropertyBeDefined(com.google.javascript.rhino.jstype.JSType, java.lang.String)"><!-- --></A><H3>
< canPropertyBeDefined</H3>
< <PRE>
< public boolean <B>canPropertyBeDefined</B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;type,
<                                     <A HREF="http:
< <DL>
< <DD>Returns whether the given property can possibly be set on the given type.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getTypesWithProperty(java.lang.String)"><!-- --></A><H3>
< getTypesWithProperty</H3>
< <PRE>
< public <A HREF="http:
< <DL>
< <DD>Returns each type that has a property <code>propertyName</code> defined on it.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="incrementGeneration()"><!-- --></A><H3>
< incrementGeneration</H3>
< <PRE>
< public void <B>incrementGeneration</B>()</PRE>
< <DL>
< <DD>Increments the current generation. Clients must call this in order to
<  move to the next generation of type resolution, allowing types to attempt
<  resolution again.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="setLastGeneration(boolean)"><!-- --></A><H3>
< setLastGeneration</H3>
< <PRE>
< public void <B>setLastGeneration</B>(boolean&nbsp;lastGeneration)</PRE>
< <DL>
< <DD>Sets whether this is the last generation. In the last generation,
<  <A HREF="../../../../../com/google/javascript/rhino/jstype/NamedType.html" title="class in com.google.javascript.rhino.jstype"><CODE>NamedType</CODE></A> warns about unresolved types.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getDirectImplementors(com.google.javascript.rhino.jstype.ObjectType)"><!-- --></A><H3>
< getDirectImplementors</H3>
< <PRE>
< public <A HREF="http:
< <DL>
< <DD>Returns a collection of types that directly implement <code>interfaceInstance</code>.  Subtypes of implementing types are not guaranteed to
<  be returned.  <code>interfaceInstance</code> must be an ObjectType for the
<  instance of the interface.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="declareType(java.lang.String, com.google.javascript.rhino.jstype.JSType)"><!-- --></A><H3>
< declareType</H3>
< <PRE>
< public boolean <B>declareType</B>(<A HREF="http:
<                            <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;t)</PRE>
< <DL>
< <DD>Records declared type names. Given the limited scopes of JavaScript, all
<  named types are dumped in a common global scope. We may need to revise this
<  assumption in the future.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< <DT><B>Parameters:</B><DD><CODE>name</CODE> - The name of the type to be recorded.<DD><CODE>t</CODE> - The actual type being associated with the name.
< <DT><B>Returns:</B><DD>True if this name is not already defined, false otherwise.</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="forwardDeclareType(java.lang.String)"><!-- --></A><H3>
< forwardDeclareType</H3>
< <PRE>
< public void <B>forwardDeclareType</B>(<A HREF="http:
< <DL>
< <DD>Records a forward-declared type name. We will not emit errors if this
<  type name never resolves to anything.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="isForwardDeclaredType(java.lang.String)"><!-- --></A><H3>
< isForwardDeclaredType</H3>
< <PRE>
< public boolean <B>isForwardDeclaredType</B>(<A HREF="http:
< <DL>
< <DD>Whether this is a forward-declared type name.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="hasNamespace(java.lang.String)"><!-- --></A><H3>
< hasNamespace</H3>
< <PRE>
< public boolean <B>hasNamespace</B>(<A HREF="http:
< <DL>
< <DD>Determines whether the given JS package exists.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getType(java.lang.String)"><!-- --></A><H3>
< getType</H3>
< <PRE>
< public <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A> <B>getType</B>(<A HREF="http:
< <DL>
< <DD>Looks up a type by name.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< <DT><B>Parameters:</B><DD><CODE>jsTypeName</CODE> - The name string.
< <DT><B>Returns:</B><DD>the corresponding JSType object or <code>null</code> it cannot be found</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getNativeType(com.google.javascript.rhino.jstype.JSTypeNative)"><!-- --></A><H3>
< getNativeType</H3>
< <PRE>
< public <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A> <B>getNativeType</B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeNative.html" title="enum in com.google.javascript.rhino.jstype">JSTypeNative</A>&nbsp;typeId)</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative)"><!-- --></A><H3>
< getNativeObjectType</H3>
< <PRE>
< public <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A> <B>getNativeObjectType</B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeNative.html" title="enum in com.google.javascript.rhino.jstype">JSTypeNative</A>&nbsp;typeId)</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getNativeFunctionType(com.google.javascript.rhino.jstype.JSTypeNative)"><!-- --></A><H3>
< getNativeFunctionType</H3>
< <PRE>
< public <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html" title="class in com.google.javascript.rhino.jstype">FunctionType</A> <B>getNativeFunctionType</B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeNative.html" title="enum in com.google.javascript.rhino.jstype">JSTypeNative</A>&nbsp;typeId)</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getType(com.google.javascript.rhino.jstype.StaticScope, java.lang.String, java.lang.String, int, int)"><!-- --></A><H3>
< getType</H3>
< <PRE>
< public <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A> <B>getType</B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/StaticScope.html" title="interface in com.google.javascript.rhino.jstype">StaticScope</A>&lt;<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&gt;&nbsp;scope,
<                       <A HREF="http:
<                       <A HREF="http:
<                       int&nbsp;lineno,
<                       int&nbsp;charno)</PRE>
< <DL>
< <DD>Looks up a type by name. To allow for forward references to types, an
<  unrecognized string has to be bound to a NamedType object that will be
<  resolved later.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< <DT><B>Parameters:</B><DD><CODE>scope</CODE> - A scope for doing type name resolution.<DD><CODE>jsTypeName</CODE> - The name string.<DD><CODE>sourceName</CODE> - The name of the source file where this reference appears.<DD><CODE>lineno</CODE> - The line number of the reference.
< <DT><B>Returns:</B><DD>a NamedType if the string argument is not one of the known types,
<      otherwise the corresponding JSType object.</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="resolveTypesInScope(com.google.javascript.rhino.jstype.StaticScope)"><!-- --></A><H3>
< resolveTypesInScope</H3>
< <PRE>
< public void <B>resolveTypesInScope</B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/StaticScope.html" title="interface in com.google.javascript.rhino.jstype">StaticScope</A>&lt;<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&gt;&nbsp;scope)</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="createOptionalType(com.google.javascript.rhino.jstype.JSType)"><!-- --></A><H3>
< createOptionalType</H3>
< <PRE>
< public <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A> <B>createOptionalType</B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;type)</PRE>
< <DL>
< <DD>Creates a type representing optional values of the given type.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< 
< <DT><B>Returns:</B><DD>the union of the type and the void type</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="createDefaultObjectUnion(com.google.javascript.rhino.jstype.JSType)"><!-- --></A><H3>
< createDefaultObjectUnion</H3>
< <PRE>
< public <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A> <B>createDefaultObjectUnion</B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;type)</PRE>
< <DL>
< <DD>Creates a type representing nullable values of the given type.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< 
< <DT><B>Returns:</B><DD>the union of the type and the Null type</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="createNullableType(com.google.javascript.rhino.jstype.JSType)"><!-- --></A><H3>
< createNullableType</H3>
< <PRE>
< public <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A> <B>createNullableType</B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;type)</PRE>
< <DL>
< <DD>Creates a type representing nullable values of the given type.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< 
< <DT><B>Returns:</B><DD>the union of the type and the Null type</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="createOptionalNullableType(com.google.javascript.rhino.jstype.JSType)"><!-- --></A><H3>
< createOptionalNullableType</H3>
< <PRE>
< public <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A> <B>createOptionalNullableType</B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;type)</PRE>
< <DL>
< <DD>Creates a nullabel and undefine-able value of the given type.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< 
< <DT><B>Returns:</B><DD>The union of the type and null and undefined.</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="createUnionType(com.google.javascript.rhino.jstype.JSType...)"><!-- --></A><H3>
< createUnionType</H3>
< <PRE>
< public <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A> <B>createUnionType</B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>...&nbsp;variants)</PRE>
< <DL>
< <DD>Creates a union type whose variants are the arguments.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="createUnionType(com.google.javascript.rhino.jstype.JSTypeNative...)"><!-- --></A><H3>
< createUnionType</H3>
< <PRE>
< public <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A> <B>createUnionType</B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeNative.html" title="enum in com.google.javascript.rhino.jstype">JSTypeNative</A>...&nbsp;variants)</PRE>
< <DL>
< <DD>Creates a union type whose variants are the builtin types specified
<  by the arguments.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="createEnumType(java.lang.String, com.google.javascript.rhino.jstype.JSType)"><!-- --></A><H3>
< createEnumType</H3>
< <PRE>
< public <A HREF="../../../../../com/google/javascript/rhino/jstype/EnumType.html" title="class in com.google.javascript.rhino.jstype">EnumType</A> <B>createEnumType</B>(<A HREF="http:
<                                <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;elementsType)</PRE>
< <DL>
< <DD>Creates an enum type.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="createFunctionType(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType...)"><!-- --></A><H3>
< createFunctionType</H3>
< <PRE>
< public <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html" title="class in com.google.javascript.rhino.jstype">FunctionType</A> <B>createFunctionType</B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;returnType,
<                                        <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>...&nbsp;parameterTypes)</PRE>
< <DL>
< <DD>Creates a function type.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< <DT><B>Parameters:</B><DD><CODE>returnType</CODE> - the function's return type<DD><CODE>parameterTypes</CODE> - the parameters' types</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="createFunctionTypeWithVarArgs(com.google.javascript.rhino.jstype.JSType, java.util.List)"><!-- --></A><H3>
< createFunctionTypeWithVarArgs</H3>
< <PRE>
< public <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html" title="class in com.google.javascript.rhino.jstype">FunctionType</A> <B>createFunctionTypeWithVarArgs</B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;returnType,
<                                                   <A HREF="http:
< <DL>
< <DD>Creates a function type. The last parameter type of the function is
<  considered a variable length argument.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< <DT><B>Parameters:</B><DD><CODE>returnType</CODE> - the function's return type<DD><CODE>parameterTypes</CODE> - the parameters' types</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="createFunctionType(com.google.javascript.rhino.jstype.JSType, java.util.List)"><!-- --></A><H3>
< createFunctionType</H3>
< <PRE>
< public <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html" title="class in com.google.javascript.rhino.jstype">FunctionType</A> <B>createFunctionType</B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;returnType,
<                                        <A HREF="http:
< <DL>
< <DD>Creates a function type.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< <DT><B>Parameters:</B><DD><CODE>returnType</CODE> - the function's return type<DD><CODE>parameterTypes</CODE> - the parameters' types</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="createFunctionTypeWithVarArgs(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType...)"><!-- --></A><H3>
< createFunctionTypeWithVarArgs</H3>
< <PRE>
< public <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html" title="class in com.google.javascript.rhino.jstype">FunctionType</A> <B>createFunctionTypeWithVarArgs</B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;returnType,
<                                                   <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>...&nbsp;parameterTypes)</PRE>
< <DL>
< <DD>Creates a function type. The last parameter type of the function is
<  considered a variable length argument.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< <DT><B>Parameters:</B><DD><CODE>returnType</CODE> - the function's return type<DD><CODE>parameterTypes</CODE> - the parameters' types</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="createConstructorType(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType...)"><!-- --></A><H3>
< createConstructorType</H3>
< <PRE>
< public <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html" title="class in com.google.javascript.rhino.jstype">FunctionType</A> <B>createConstructorType</B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;returnType,
<                                           <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>...&nbsp;parameterTypes)</PRE>
< <DL>
< <DD>Creates a function type which can act as a constructor.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< <DT><B>Parameters:</B><DD><CODE>returnType</CODE> - the function's return type<DD><CODE>parameterTypes</CODE> - the parameters' types</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="createConstructorTypeWithVarArgs(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.JSType...)"><!-- --></A><H3>
< createConstructorTypeWithVarArgs</H3>
< <PRE>
< public <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html" title="class in com.google.javascript.rhino.jstype">FunctionType</A> <B>createConstructorTypeWithVarArgs</B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;returnType,
<                                                      <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>...&nbsp;parameterTypes)</PRE>
< <DL>
< <DD>Creates a function type which can act as a constructor. The last
<  parameter type of the constructor is considered a variable length argument.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< <DT><B>Parameters:</B><DD><CODE>returnType</CODE> - the function's return type<DD><CODE>parameterTypes</CODE> - the parameters' types</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="createFunctionType(com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.jstype.JSType, java.util.List)"><!-- --></A><H3>
< createFunctionType</H3>
< <PRE>
< public <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A> <B>createFunctionType</B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A>&nbsp;instanceType,
<                                  <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;returnType,
<                                  <A HREF="http:
< <DL>
< <DD>Creates a function type in which <code>this</code> refers to an object instance.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< <DT><B>Parameters:</B><DD><CODE>instanceType</CODE> - the type of <code>this</code><DD><CODE>returnType</CODE> - the function's return type<DD><CODE>parameterTypes</CODE> - the parameters' types</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="createFunctionTypeWithVarArgs(com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.jstype.JSType, java.util.List)"><!-- --></A><H3>
< createFunctionTypeWithVarArgs</H3>
< <PRE>
< public <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A> <B>createFunctionTypeWithVarArgs</B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A>&nbsp;instanceType,
<                                             <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;returnType,
<                                             <A HREF="http:
< <DL>
< <DD>Creates a function type in which <code>this</code> refers to an object instance.
<  The last parameter type of the function is considered a variable length
<  argument.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< <DT><B>Parameters:</B><DD><CODE>instanceType</CODE> - the type of <code>this</code><DD><CODE>returnType</CODE> - the function's return type<DD><CODE>parameterTypes</CODE> - the parameters' types</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="createParameters(java.util.List)"><!-- --></A><H3>
< createParameters</H3>
< <PRE>
< public <A HREF="../../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A> <B>createParameters</B>(<A HREF="http:
< <DL>
< <DD>Creates a tree hierarchy representing a typed argument list.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< <DT><B>Parameters:</B><DD><CODE>parameterTypes</CODE> - the parameter types.
< <DT><B>Returns:</B><DD>a tree hierarchy representing a typed argument list.</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="createParametersWithVarArgs(java.util.List)"><!-- --></A><H3>
< createParametersWithVarArgs</H3>
< <PRE>
< public <A HREF="../../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A> <B>createParametersWithVarArgs</B>(<A HREF="http:
< <DL>
< <DD>Creates a tree hierarchy representing a typed argument list. The last
<  parameter type is considered a variable length argument.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< <DT><B>Parameters:</B><DD><CODE>parameterTypes</CODE> - the parameter types. The last element of this array
<      is considered a variable length argument.
< <DT><B>Returns:</B><DD>a tree hierarchy representing a typed argument list.</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="createParameters(com.google.javascript.rhino.jstype.JSType...)"><!-- --></A><H3>
< createParameters</H3>
< <PRE>
< public <A HREF="../../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A> <B>createParameters</B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>...&nbsp;parameterTypes)</PRE>
< <DL>
< <DD>Creates a tree hierarchy representing a typed argument list.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< <DT><B>Parameters:</B><DD><CODE>parameterTypes</CODE> - the parameter types.
< <DT><B>Returns:</B><DD>a tree hierarchy representing a typed argument list.</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="createParametersWithVarArgs(com.google.javascript.rhino.jstype.JSType...)"><!-- --></A><H3>
< createParametersWithVarArgs</H3>
< <PRE>
< public <A HREF="../../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A> <B>createParametersWithVarArgs</B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>...&nbsp;parameterTypes)</PRE>
< <DL>
< <DD>Creates a tree hierarchy representing a typed argument list. The last
<  parameter type is considered a variable length argument.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< <DT><B>Parameters:</B><DD><CODE>parameterTypes</CODE> - the parameter types. The last element of this array
<      is considered a variable length argument.
< <DT><B>Returns:</B><DD>a tree hierarchy representing a typed argument list.</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="createOptionalParameters(com.google.javascript.rhino.jstype.JSType...)"><!-- --></A><H3>
< createOptionalParameters</H3>
< <PRE>
< public <A HREF="../../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A> <B>createOptionalParameters</B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>...&nbsp;parameterTypes)</PRE>
< <DL>
< <DD>Creates a tree hierarchy representing a typed parameter list in which
<  every parameter is optional.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="createFunctionType(com.google.javascript.rhino.jstype.JSType, boolean, com.google.javascript.rhino.jstype.JSType...)"><!-- --></A><H3>
< createFunctionType</H3>
< <PRE>
< public <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html" title="class in com.google.javascript.rhino.jstype">FunctionType</A> <B>createFunctionType</B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;returnType,
<                                        boolean&nbsp;lastVarArgs,
<                                        <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>...&nbsp;parameterTypes)</PRE>
< <DL>
< <DD>Creates a function type.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< <DT><B>Parameters:</B><DD><CODE>returnType</CODE> - the function's return type<DD><CODE>lastVarArgs</CODE> - whether the last parameter type should be considered as
<  an extensible var_args parameter<DD><CODE>parameterTypes</CODE> - the parameters' types</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="createFunctionTypeWithNewReturnType(com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.JSType)"><!-- --></A><H3>
< createFunctionTypeWithNewReturnType</H3>
< <PRE>
< public <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html" title="class in com.google.javascript.rhino.jstype">FunctionType</A> <B>createFunctionTypeWithNewReturnType</B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html" title="class in com.google.javascript.rhino.jstype">FunctionType</A>&nbsp;existingFunctionType,
<                                                         <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;returnType)</PRE>
< <DL>
< <DD>Creates a new function type based on an existing function type but
<  with a new return type.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< <DT><B>Parameters:</B><DD><CODE>existingFunctionType</CODE> - the existing function type.<DD><CODE>returnType</CODE> - the new return type.</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="createConstructorType(com.google.javascript.rhino.jstype.JSType, boolean, com.google.javascript.rhino.jstype.JSType...)"><!-- --></A><H3>
< createConstructorType</H3>
< <PRE>
< public <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html" title="class in com.google.javascript.rhino.jstype">FunctionType</A> <B>createConstructorType</B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;returnType,
<                                           boolean&nbsp;lastVarArgs,
<                                           <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>...&nbsp;parameterTypes)</PRE>
< <DL>
< <DD>Creates a function type which can act as a constructor.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< <DT><B>Parameters:</B><DD><CODE>returnType</CODE> - the function's return type<DD><CODE>lastVarArgs</CODE> - whether the last parameter type should be considered as
<  an extensible var_args parameter<DD><CODE>parameterTypes</CODE> - the parameters' types</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="createObjectType(com.google.javascript.rhino.jstype.ObjectType)"><!-- --></A><H3>
< createObjectType</H3>
< <PRE>
< public <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A> <B>createObjectType</B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A>&nbsp;implicitPrototype)</PRE>
< <DL>
< <DD>Create an object type.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="createRecordType(java.util.Map)"><!-- --></A><H3>
< createRecordType</H3>
< <PRE>
< public <A HREF="../../../../../com/google/javascript/rhino/jstype/RecordType.html" title="class in com.google.javascript.rhino.jstype">RecordType</A> <B>createRecordType</B>(<A HREF="http:
< <DL>
< <DD>Creates a record type.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="createObjectType(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.ObjectType)"><!-- --></A><H3>
< createObjectType</H3>
< <PRE>
< public <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A> <B>createObjectType</B>(<A HREF="http:
<                                    <A HREF="../../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;n,
<                                    <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A>&nbsp;implicitPrototype)</PRE>
< <DL>
< <DD>Create an object type.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="createAnonymousObjectType()"><!-- --></A><H3>
< createAnonymousObjectType</H3>
< <PRE>
< public <A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A> <B>createAnonymousObjectType</B>()</PRE>
< <DL>
< <DD>Create an anonymous object type.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="createConstructorType(java.lang.String, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.jstype.JSType)"><!-- --></A><H3>
< createConstructorType</H3>
< <PRE>
< public <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html" title="class in com.google.javascript.rhino.jstype">FunctionType</A> <B>createConstructorType</B>(<A HREF="http:
<                                           <A HREF="../../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;source,
<                                           <A HREF="../../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;parameters,
<                                           <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;returnType)</PRE>
< <DL>
< <DD>Creates a constructor function type.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< <DT><B>Parameters:</B><DD><CODE>name</CODE> - the function's name or <code>null</code> to indicate that the
<      function is anonymous.<DD><CODE>source</CODE> - the node defining this function. Its type
<      (<A HREF="../../../../../com/google/javascript/rhino/Node.html#getType()"><CODE>Node.getType()</CODE></A>) must be <A HREF="../../../../../com/google/javascript/rhino/Token.html#FUNCTION"><CODE>Token.FUNCTION</CODE></A>.<DD><CODE>parameters</CODE> - the function's parameters or <code>null</code>
<      to indicate that the parameter types are unknown.<DD><CODE>returnType</CODE> - the function's return type or <code>null</code> to indicate
<      that the return type is unknown.</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="createInterfaceType(java.lang.String, com.google.javascript.rhino.Node)"><!-- --></A><H3>
< createInterfaceType</H3>
< <PRE>
< public <A HREF="../../../../../com/google/javascript/rhino/jstype/FunctionType.html" title="class in com.google.javascript.rhino.jstype">FunctionType</A> <B>createInterfaceType</B>(<A HREF="http:
<                                         <A HREF="../../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;source)</PRE>
< <DL>
< <DD>Creates an interface function type.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< <DT><B>Parameters:</B><DD><CODE>name</CODE> - the function's name<DD><CODE>source</CODE> - the node defining this function. Its type
<      (<A HREF="../../../../../com/google/javascript/rhino/Node.html#getType()"><CODE>Node.getType()</CODE></A>) must be <A HREF="../../../../../com/google/javascript/rhino/Token.html#FUNCTION"><CODE>Token.FUNCTION</CODE></A>.</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="createParameterizedType(com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.jstype.JSType)"><!-- --></A><H3>
< createParameterizedType</H3>
< <PRE>
< public com.google.javascript.rhino.jstype.ParameterizedType <B>createParameterizedType</B>(<A HREF="../../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A>&nbsp;objectType,
<                                                                                     <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;parameterType)</PRE>
< <DL>
< <DD>Creates a parameterized type.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="identifyEnumName(java.lang.String)"><!-- --></A><H3>
< identifyEnumName</H3>
< <PRE>
< public void <B>identifyEnumName</B>(<A HREF="http:
< <DL>
< <DD>Identifies the name of an enum before we actually declare it.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="createRecordTypeFromNodes(com.google.javascript.rhino.Node, java.lang.String, com.google.javascript.rhino.jstype.StaticScope)"><!-- --></A><H3>
< createRecordTypeFromNodes</H3>
< <PRE>
< public <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A> <B>createRecordTypeFromNodes</B>(<A HREF="../../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;n,
<                                         <A HREF="http:
<                                         <A HREF="../../../../../com/google/javascript/rhino/jstype/StaticScope.html" title="interface in com.google.javascript.rhino.jstype">StaticScope</A>&lt;<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&gt;&nbsp;scope)</PRE>
< <DL>
< <DD>Creates a RecordType from the nodes representing said record type.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< <DT><B>Parameters:</B><DD><CODE>n</CODE> - The node with type info.<DD><CODE>sourceName</CODE> - The source file name.<DD><CODE>scope</CODE> - A scope for doing type name lookups.</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="createFromTypeNodes(com.google.javascript.rhino.Node, java.lang.String, com.google.javascript.rhino.jstype.StaticScope)"><!-- --></A><H3>
< createFromTypeNodes</H3>
< <PRE>
< public <A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A> <B>createFromTypeNodes</B>(<A HREF="../../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;n,
<                                   <A HREF="http:
<                                   <A HREF="../../../../../com/google/javascript/rhino/jstype/StaticScope.html" title="interface in com.google.javascript.rhino.jstype">StaticScope</A>&lt;<A HREF="../../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&gt;&nbsp;scope)</PRE>
< <DL>
< <DD>Creates a JSType from the nodes representing a type.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< <DT><B>Parameters:</B><DD><CODE>n</CODE> - The node with type info.<DD><CODE>sourceName</CODE> - The source file name.<DD><CODE>scope</CODE> - A scope for doing type name lookups.</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="setTemplateTypeName(java.lang.String)"><!-- --></A><H3>
< setTemplateTypeName</H3>
< <PRE>
< public void <B>setTemplateTypeName</B>(<A HREF="http:
< <DL>
< <DD>Sets the template type name.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="clearTemplateTypeName()"><!-- --></A><H3>
< clearTemplateTypeName</H3>
< <PRE>
< public void <B>clearTemplateTypeName</B>()</PRE>
< <DL>
< <DD>Clears the template type name.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <!-- ========= END OF CLASS DATA ========= -->
< <HR>
< 
< 
< <!-- ======= START OF BOTTOM NAVBAR ====== -->
< <A NAME="navbar_bottom"><!-- --></A>
< <A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
< <TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
< <TR>
< <TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
< <A NAME="navbar_bottom_firstrow"><!-- --></A>
< <TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
<   <TR ALIGN="center" VALIGN="top">
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
<   </TR>
< </TABLE>
< </TD>
< <TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
< </EM>
< </TD>
< </TR>
< 
< <TR>
< <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
< &nbsp;<A HREF="../../../../../com/google/javascript/rhino/jstype/JSTypeNative.html" title="enum in com.google.javascript.rhino.jstype"><B>PREV CLASS</B></A>&nbsp;
< &nbsp;<A HREF="../../../../../com/google/javascript/rhino/jstype/NamedType.html" title="class in com.google.javascript.rhino.jstype"><B>NEXT CLASS</B></A></FONT></TD>
< <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
<   <A HREF="../../../../../index.html?com/google/javascript/rhino/jstype/JSTypeRegistry.html" target="_top"><B>FRAMES</B></A>  &nbsp;
< &nbsp;<A HREF="JSTypeRegistry.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
< &nbsp;<SCRIPT type="text/javascript">
<   <!--
<   if(window==top) {
<     document.writeln('<A HREF="../../../../../allclasses-noframe.html"><B>All Classes</B></A>');
<   }
<   
< </SCRIPT>
< <NOSCRIPT>
<   <A HREF="../../../../../allclasses-noframe.html"><B>All Classes</B></A>
< </NOSCRIPT>
< 
< 
< </FONT></TD>
< </TR>
< <TR>
< <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
<   SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
< <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
< DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
< </TR>
< </TABLE>
< <A NAME="skip-navbar_bottom"></A>
< <!-- ======== END OF BOTTOM NAVBAR ======= -->
< 
< <HR>
< 
<         <div id="footer">
<           <div id="footerlogo">
<             <img src="http:
<                  alt="Google colored balls">
<           </div>
< 
<           <div id="copyright">
<           <p>&copy; 2009 Google -
<             <a href="http:
<             <a href="http:
<             <a href="http:
<           </p>
<           </div>
<         </div>
---
>     return builder.build();
>   }
> 
>   
> 
> 
> 
> 
> 
> 
>   public FunctionType createFunctionType(JSType returnType,
>       boolean lastVarArgs, JSType... parameterTypes) {
>     if (lastVarArgs) {
>       return createFunctionTypeWithVarArgs(returnType, parameterTypes);
>     } else {
>       return createFunctionType(returnType, parameterTypes);
>     }
>   }
> 
>   
> 
> 
> 
> 
> 
>   public FunctionType createFunctionTypeWithNewReturnType(
>       FunctionType existingFunctionType, JSType returnType) {
>     return new FunctionType(
>         this,
>         existingFunctionType.getReferenceName(),
>         existingFunctionType.getSource(),
>         existingFunctionType.getParametersNode(),
>         returnType,
>         existingFunctionType.getTypeOfThis(),
>         existingFunctionType.getTemplateTypeName());
>   }
> 
>   
> 
> 
> 
> 
> 
>   public FunctionType createFunctionTypeWithNewThisType(
>       FunctionType existingFunctionType, ObjectType thisType) {
>     return new FunctionType(
>         this,
>         existingFunctionType.getReferenceName(),
>         existingFunctionType.getSource(),
>         existingFunctionType.getParametersNode(),
>         existingFunctionType.getReturnType(),
>         thisType,
>         existingFunctionType.getTemplateTypeName());
>   }
> 
>   
> 
> 
> 
> 
> 
>   public FunctionType createFunctionType(
>       JSType returnType, Node parameters) {
>     return new FunctionType(this, null, null, parameters, returnType);
>   }
> 
>   
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>   public FunctionType createMethodTypeWithTypeTemplate(String name, Node source,
>       Node parameters, JSType returnType, ObjectType typeOfThis,
>       String templateTypeName) {
>     return new FunctionType(this, name, source, parameters, returnType,
>         typeOfThis, templateTypeName);
>   }
> 
>   
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>   public FunctionType createMethodType(String name, Node source,
>       Node parameters, JSType returnType, ObjectType typeOfThis) {
>     return new FunctionType(this, name, source, parameters, returnType,
>         typeOfThis);
>   }
> 
>   
> 
> 
> 
> 
> 
> 
> 
>   public FunctionType createMethodType(
>       JSType returnType, Node parameters, ObjectType typeOfThis) {
>     return new FunctionType(this, null, null, parameters,
>         returnType, typeOfThis);
>   }
> 
>   
> 
> 
> 
> 
> 
> 
>   public FunctionType createConstructorType(JSType returnType,
>       boolean lastVarArgs, JSType... parameterTypes) {
>     if (lastVarArgs) {
>       return createConstructorTypeWithVarArgs(returnType, parameterTypes);
>     } else {
>       return createConstructorType(returnType, parameterTypes);
>     }
>   }
> 
>   
> 
> 
>   public ObjectType createObjectType(ObjectType implicitPrototype) {
>     return createObjectType(null, null, implicitPrototype);
>   }
> 
>   
> 
> 
>   public RecordType createRecordType(Map<String, JSType> properties) {
>     return new RecordType(this, properties);
>   }
> 
>   
> 
> 
>   public ObjectType createObjectType(String name, Node n,
>       ObjectType implicitPrototype) {
>     return new PrototypeObjectType(this, name, implicitPrototype);
>   }
> 
>   
> 
> 
>   public ObjectType createAnonymousObjectType() {
>     PrototypeObjectType type =
>         new PrototypeObjectType(this, null, null);
>     type.setPrettyPrint(true);
>     return type;
>   }
> 
>   
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>   public FunctionType createConstructorType(String name, Node source,
>       Node parameters, JSType returnType) {
>     return new FunctionType(this, name, source, parameters, returnType, null,
>         null, true, false);
>   }
> 
>   
> 
> 
> 
> 
> 
>   public FunctionType createInterfaceType(String name, Node source) {
>     return new FunctionType(this, name, source);
>   }
> 
>   
> 
> 
>   public ParameterizedType createParameterizedType(
>       ObjectType objectType, JSType parameterType) {
>     return new ParameterizedType(this, objectType, parameterType);
>   }
> 
>   
> 
> 
>   public void identifyEnumName(String name) {
>     enumTypeNames.add(name);
>   }
> 
> 
>   
> 
> 
> 
> 
> 
>   public JSType createRecordTypeFromNodes(Node n, String sourceName,
>       StaticScope<JSType> scope) {
> 
>     RecordTypeBuilder builder = new RecordTypeBuilder(this);
> 
>     
>     for (Node fieldTypeNode = n.getFirstChild();
>          fieldTypeNode != null;
>          fieldTypeNode = fieldTypeNode.getNext()) {
> 
>       
>       Node fieldNameNode = fieldTypeNode;
>       boolean hasType = false;
> 
>       if (fieldTypeNode.getType() == Token.COLON) {
>         fieldNameNode = fieldTypeNode.getFirstChild();
>         hasType = true;
>       }
> 
>       String fieldName = fieldNameNode.getString();
> 
1687,1688c1246,1425
< </BODY>
< </HTML>
---
>       
>       if (fieldName.startsWith("'") || fieldName.startsWith("\"")) {
>         fieldName = fieldName.substring(1, fieldName.length() - 1);
>       }
> 
>       
>       JSType fieldType = null;
> 
>       if (hasType) {
>         
>         fieldType = createFromTypeNodes(
>             fieldTypeNode.getLastChild(), sourceName, scope);
>       } else {
>         
>         fieldType = getNativeType(JSTypeNative.UNKNOWN_TYPE);
>       }
> 
>       
>       builder.addProperty(fieldName, fieldType);
>     }
> 
>     return builder.build();
>   }
> 
>   
> 
> 
> 
> 
> 
>   public JSType createFromTypeNodes(Node n, String sourceName,
>       StaticScope<JSType> scope) {
>     switch (n.getType()) {
>       case Token.LC: 
>         return createRecordTypeFromNodes(n.getFirstChild(), sourceName, scope);
> 
>       case Token.BANG: 
>         return createFromTypeNodes(n.getFirstChild(), sourceName, scope)
>             .restrictByNotNullOrUndefined();
> 
>       case Token.QMARK: 
>         Node firstChild = n.getFirstChild();
>         if (firstChild == null) {
>           return getNativeType(UNKNOWN_TYPE);
>         }
>         return createDefaultObjectUnion(
>             createFromTypeNodes(firstChild, sourceName, scope));
> 
>       case Token.EQUALS: 
>         return createOptionalType(
>             createFromTypeNodes(n.getFirstChild(), sourceName, scope));
> 
>       case Token.ELLIPSIS: 
>         return createOptionalType(
>             createFromTypeNodes(n.getFirstChild(), sourceName, scope));
> 
>       case Token.STAR: 
>         return getNativeType(ALL_TYPE);
> 
>       case Token.LB: 
>         
>         return getNativeType(ARRAY_TYPE);
> 
>       case Token.PIPE: 
>         UnionTypeBuilder builder = new UnionTypeBuilder(this);
>         for (Node child = n.getFirstChild(); child != null;
>              child = child.getNext()) {
>           builder.addAlternate(createFromTypeNodes(child, sourceName, scope));
>         }
>         return builder.build();
> 
>       case Token.EMPTY: 
>         return getNativeType(UNKNOWN_TYPE);
> 
>       case Token.VOID: 
>         return getNativeType(VOID_TYPE);
> 
>       case Token.STRING:
>         JSType namedType = getType(scope, n.getString(), sourceName,
>             n.getLineno(), n.getCharno());
>         if ((namedType instanceof ObjectType) &&
>             !(enumTypeNames.contains(n.getString()))) {
>           Node typeList = n.getFirstChild();
>           if (typeList != null &&
>               ("Array".equals(n.getString()) ||
>                "Object".equals(n.getString()))) {
>             JSType parameterType =
>                 createFromTypeNodes(
>                     typeList.getLastChild(), sourceName, scope);
>             namedType = new ParameterizedType(
>                 this, (ObjectType) namedType, parameterType);
>             if (typeList.hasMoreThanOneChild()) {
>               JSType indexType =
>                   createFromTypeNodes(
>                       typeList.getFirstChild(), sourceName, scope);
>               namedType = new IndexedType(
>                   this, (ObjectType) namedType, indexType);
>             }
>           }
>           return createDefaultObjectUnion(namedType);
> 
>         } else {
>           return namedType;
>         }
> 
>       case Token.FUNCTION:
>         ObjectType thisType = null;
>         Node current = n.getFirstChild();
>         if (current.getType() == Token.THIS) {
>           Node thisNode = current.getFirstChild();
>           thisType =
>               ObjectType.cast(
>                   createFromTypeNodes(thisNode, sourceName, scope)
>                   .restrictByNotNullOrUndefined());
>           if (thisType == null) {
>             reporter.warning(
>                 ScriptRuntime.getMessage0("msg.jsdoc.function.thisnotobject"),
>                 sourceName, thisNode.getLineno(), "", thisNode.getCharno());
>           }
> 
>           current = current.getNext();
>         }
> 
>         FunctionParamBuilder paramBuilder = new FunctionParamBuilder(this);
> 
>         if (current.getType() == Token.LP) {
>           Node args = current.getFirstChild();
>           for (Node arg = current.getFirstChild(); arg != null;
>                arg = arg.getNext()) {
>             if (arg.getType() == Token.ELLIPSIS) {
>               if (arg.getChildCount() == 0) {
>                 paramBuilder.addVarArgs(getNativeType(UNKNOWN_TYPE));
>               } else {
>                 paramBuilder.addVarArgs(
>                     createFromTypeNodes(
>                         arg.getFirstChild(), sourceName, scope));
>               }
>             } else {
>               JSType type = createFromTypeNodes(arg, sourceName, scope);
>               if (arg.getType() == Token.EQUALS) {
>                 boolean addSuccess = paramBuilder.addOptionalParams(type);
>                 if (!addSuccess) {
>                   reporter.warning(
>                       ScriptRuntime.getMessage0("msg.jsdoc.function.varargs"),
>                       sourceName, arg.getLineno(), "", arg.getCharno());
>                 }
>               } else {
>                 paramBuilder.addRequiredParams(type);
>               }
>             }
>           }
>           current = current.getNext();
>         }
> 
>         JSType returnType = createFromTypeNodes(current, sourceName, scope);
> 
>         return new FunctionType(this, null, null, paramBuilder.build(),
>              returnType, thisType, null);
>     }
> 
>     throw new IllegalStateException(
>         "Unexpected node in type expression: " + n.toString());
>   }
> 
>   
> 
> 
>   public void setTemplateTypeName(String name) {
>     templateTypeName = name;
>     templateType = new TemplateType(this, name);
>   }
> 
>   
> 
> 
>   public void clearTemplateTypeName() {
>     templateTypeName = null;
>     templateType = null;
>   }
> }
