78a79,86
>   private static final DiagnosticType NAME_REF_GRAPH_FILE_ERROR =
>       DiagnosticType.error("JSC_NAME_REF_GRAPH_FILE_ERROR",
>           "Error \"{1}\" writing name reference graph to \"{0}\".");
> 
>   private static final DiagnosticType NAME_REF_REPORT_FILE_ERROR =
>       DiagnosticType.error("JSC_NAME_REF_REPORT_FILE_ERROR",
>           "Error \"{1}\" writing name reference report to \"{0}\".");
> 
298a307,316
>     if (options.nameReferenceGraphPath != null &&
>         !options.nameReferenceGraphPath.isEmpty()) {
>       checks.add(printNameReferenceGraph);
>     }
> 
>     if (options.nameReferenceReportPath != null &&
>         !options.nameReferenceReportPath.isEmpty()) {
>       checks.add(printNameReferenceReport);
>     }
> 
1935a1954,2004
> 
>   private final PassFactory printNameReferenceGraph =
>     new PassFactory("printNameReferenceGraph", true) {
>     @Override
>     protected CompilerPass createInternal(final AbstractCompiler compiler) {
>       return new CompilerPass() {
>         @Override
>         public void process(Node externs, Node jsRoot) {
>           NameReferenceGraphConstruction gc =
>               new NameReferenceGraphConstruction(compiler);
>           gc.process(externs, jsRoot);
>           String graphFileName = options.nameReferenceGraphPath;
>           try {
>             Files.write(DotFormatter.toDot(gc.getNameReferenceGraph()),
>                 new File(graphFileName),
>                 Charsets.UTF_8);
>           } catch (IOException e) {
>             compiler.report(
>                 JSError.make(
>                     NAME_REF_GRAPH_FILE_ERROR, e.getMessage(), graphFileName));
>           }
>         }
>       };
>     }
>   };
> 
>   private final PassFactory printNameReferenceReport =
>       new PassFactory("printNameReferenceReport", true) {
>     @Override
>     protected CompilerPass createInternal(final AbstractCompiler compiler) {
>       return new CompilerPass() {
>         @Override
>         public void process(Node externs, Node jsRoot) {
>           NameReferenceGraphConstruction gc =
>               new NameReferenceGraphConstruction(compiler);
>           String reportFileName = options.nameReferenceReportPath;
>           try {
>             NameReferenceGraphReport report =
>                 new NameReferenceGraphReport(gc.getNameReferenceGraph());
>             Files.write(report.getHtmlReport(),
>                 new File(reportFileName),
>                 Charsets.UTF_8);
>           } catch (IOException e) {
>             compiler.report(
>                 JSError.make(
>                     NAME_REF_REPORT_FILE_ERROR, e.getMessage(), reportFileName));
>           }
>         }
>       };
>     }
>   };
