72c72
<   private final boolean inlineAnonymousFunctionExpressions;
---
>   private final boolean inlineFunctionExpressions;
80c80
<       boolean inlineAnonymousFunctionExpressions,
---
>       boolean inlineFunctionExpressions,
89,90c89,90
<     this.inlineAnonymousFunctionExpressions =
<       inlineAnonymousFunctionExpressions;
---
>     this.inlineFunctionExpressions =
>       inlineFunctionExpressions;
155c155
<       return inlineLocalFunctions || inlineAnonymousFunctionExpressions
---
>       return inlineLocalFunctions || inlineFunctionExpressions
165,166c165,166
<         if (inlineAnonymousFunctionExpressions) {
<           findAnonymousFunctionExpressions(t, n);
---
>         if (inlineFunctionExpressions) {
>           findFunctionExpressions(t, n);
198c198
<           if (!NodeUtil.isFunctionAnonymous(n)) {
---
>           if (!NodeUtil.isFunctionExpression(n)) {
212c212
<     public void findAnonymousFunctionExpressions(NodeTraversal t, Node n) {
---
>     public void findFunctionExpressions(NodeTraversal t, Node n) {
229c229
<             Function fn = new AnonymousFunction(fnNode, callsSeen++);
---
>             Function fn = new FunctionExpression(fnNode, callsSeen++);
896a897,899
> 
> 
> 
951c954
<   private static class AnonymousFunction implements Function {
---
>   private static class FunctionExpression implements Function {
955c958
<     public AnonymousFunction(Node fn, int index) {
---
>     public FunctionExpression(Node fn, int index) {
