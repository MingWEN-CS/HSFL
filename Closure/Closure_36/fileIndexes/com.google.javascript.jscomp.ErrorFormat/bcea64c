















package com.google.javascript.jscomp;

import com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt;




public enum ErrorFormat {
  LEGACY {
    @Override
    public MessageFormatter toFormatter(
        SourceExcerptProvider source, boolean colorize) {
      VerboseMessageFormatter formatter = new VerboseMessageFormatter(source);
      formatter.setColorize(colorize);
      return formatter;
    }
  },
  SINGLELINE {
    @Override
    public MessageFormatter toFormatter(
        SourceExcerptProvider source, boolean colorize) {
      LightweightMessageFormatter formatter = new LightweightMessageFormatter(
          source);
      formatter.setColorize(colorize);
      return formatter;
    }
  },
  MULTILINE {
    @Override
    public MessageFormatter toFormatter(
        SourceExcerptProvider source, boolean colorize) {
      LightweightMessageFormatter formatter = new LightweightMessageFormatter(
          source, SourceExcerpt.REGION);
      formatter.setColorize(colorize);
      return formatter;
    }
  },
  SOURCELESS {
    @Override
    public MessageFormatter toFormatter(
        SourceExcerptProvider source, boolean colorize) {
      return new SourcelessMessageFormatter();
    }
  };

  


  public abstract MessageFormatter toFormatter(
      SourceExcerptProvider source, boolean colorize);

  
  private static class SourcelessMessageFormatter
      extends AbstractMessageFormatter {

    private SourcelessMessageFormatter() {
      super(null);
    }

    @Override
    public String formatError(JSError error) {
      return format(error, false);
    }

    @Override
    public String formatWarning(JSError warning) {
      return format(warning, true);
    }

    private String format(JSError error, boolean warning) {
      
      StringBuilder b = new StringBuilder();
      if (error.sourceName != null) {
        b.append(error.sourceName);
        if (error.lineNumber > 0) {
          b.append(':');
          b.append(error.lineNumber);
        }
        b.append(": ");
      }

      b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));
      b.append(" - ");

      b.append(error.description);
      b.append('\n');
      return b.toString();
    }
  }
}
