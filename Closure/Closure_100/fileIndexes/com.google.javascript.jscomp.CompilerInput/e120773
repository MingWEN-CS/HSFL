















package com.google.javascript.jscomp;

import com.google.common.base.Preconditions;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.Lists;
import com.google.common.collect.Sets;
import com.google.javascript.jscomp.deps.DependencyInfo;
import com.google.javascript.jscomp.deps.JsFileParser;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.Token;

import java.io.IOException;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Set;








public class CompilerInput implements SourceAst, DependencyInfo {
  private static final long serialVersionUID = 1L;

  
  private JSModule module;
  private final boolean isExtern;
  final private String name;

  
  private final SourceAst ast;

  
  private final Set<String> provides = Sets.newHashSet();
  private final Set<String> requires = Sets.newHashSet();
  private boolean generatedDependencyInfoFromSource = false;

  
  
  private ErrorManager errorManager;

  
  private AbstractCompiler compiler;

  public CompilerInput(SourceAst ast) {
    this(ast, ast.getSourceFile().getName(), false);
  }

  public CompilerInput(SourceAst ast, boolean isExtern) {
    this(ast, ast.getSourceFile().getName(), isExtern);
  }

  public CompilerInput(SourceAst ast, String inputName, boolean isExtern) {
    this.ast = ast;
    this.name = inputName;
    this.isExtern = isExtern;
  }

  public CompilerInput(JSSourceFile file) {
    this(file, false);
  }

  public CompilerInput(JSSourceFile file, boolean isExtern) {
    this.ast = new JsAst(file);
    this.name = file.getName();
    this.isExtern = isExtern;
  }

  
  @Override
  public String getName() {
    return name;
  }

  
  @Override
  public String getPathRelativeToClosureBase() {
    
    throw new UnsupportedOperationException();
  }

  @Override
  public Node getAstRoot(AbstractCompiler compiler) {
    return ast.getAstRoot(compiler);
  }

  @Override
  public void clearAst() {
    ast.clearAst();
  }

  @Override
  public SourceFile getSourceFile() {
    return ast.getSourceFile();
  }

  @Override
  public void setSourceFile(SourceFile file) {
    ast.setSourceFile(file);
  }

  
  public SourceAst getSourceAst() {
    return ast;
  }

  
  public void setErrorManager(ErrorManager errorManager) {
    this.errorManager = errorManager;
  }

  
  public void setCompiler(AbstractCompiler compiler) {
    this.compiler = compiler;
    setErrorManager(compiler.getErrorManager());
  }

  
  @Override
  public Collection<String> getRequires() {
    Preconditions.checkNotNull(errorManager,
        "Expected setErrorManager to be called first");
    try {
      regenerateDependencyInfoIfNecessary();
      return Collections.<String>unmodifiableSet(requires);
    } catch (IOException e) {
      errorManager.report(CheckLevel.ERROR,
          JSError.make(AbstractCompiler.READ_ERROR, getName()));
      return ImmutableList.<String>of();
    }
  }

  
  @Override
  public Collection<String> getProvides() {
    Preconditions.checkNotNull(errorManager,
        "Expected setErrorManager to be called first");
    try {
      regenerateDependencyInfoIfNecessary();
      return Collections.<String>unmodifiableSet(provides);
    } catch (IOException e) {
      errorManager.report(CheckLevel.ERROR,
          JSError.make(AbstractCompiler.READ_ERROR, getName()));
      return ImmutableList.<String>of();
    }
  }

  


  private void regenerateDependencyInfoIfNecessary() throws IOException {
    
    
    if (!(ast instanceof JsAst)) {
      Preconditions.checkNotNull(compiler,
          "Expected setCompiler to be called first");
      DepsFinder finder = new DepsFinder();
      Node root = getAstRoot(compiler);
      if (root == null) {
        return;
      }

      finder.visitTree(getAstRoot(compiler));

      
      
      
      
      
      
      
      
      
      

      provides.addAll(finder.provides);
      requires.addAll(finder.requires);
    } else {
      
      if (!generatedDependencyInfoFromSource) {
        
        
        
        
        DependencyInfo info = (new JsFileParser(errorManager)).parseFile(
            getName(), getName(), getCode());

        provides.addAll(info.getProvides());
        requires.addAll(info.getRequires());

        generatedDependencyInfoFromSource = true;
      }
    }
  }

  private static class DepsFinder {
    private final List<String> provides = Lists.newArrayList();
    private final List<String> requires = Lists.newArrayList();
    private final CodingConvention codingConvention =
        new ClosureCodingConvention();

    void visitTree(Node n) {
      visitSubtree(n, null);
    }

    void visitSubtree(Node n, Node parent) {
      if (n.getType() == Token.CALL) {
        String require =
            codingConvention.extractClassNameIfRequire(n, parent);
        if (require != null) {
          requires.add(require);
        }

        String provide =
            codingConvention.extractClassNameIfProvide(n, parent);
        if (provide != null) {
          provides.add(provide);
        }
        return;
      } else if (parent != null &&
          parent.getType() != Token.EXPR_RESULT &&
          parent.getType() != Token.SCRIPT) {
        return;
      }

      for (Node child = n.getFirstChild();
           child != null; child = child.getNext()) {
        visitSubtree(child, n);
      }
    }
  }

  







  public String getLine(int lineNumber) {
    return getSourceFile().getLine(lineNumber);
  }

  








  public Region getRegion(int lineNumber) {
    return getSourceFile().getRegion(lineNumber);
  }

  public String getCode() throws IOException {
    return getSourceFile().getCode();
  }

  
  public JSModule getModule() {
    return module;
  }

  
  public void setModule(JSModule module) {
    
    Preconditions.checkArgument(
        module == null || this.module == null || this.module == module);
    this.module = module;
  }

  public boolean isExtern() {
    return isExtern;
  }
}
