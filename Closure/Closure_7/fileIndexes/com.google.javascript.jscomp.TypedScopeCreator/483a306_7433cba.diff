1155,1171d1154
<         if ((fnType.isConstructor() || fnType.isInterface()) &&
<             !fnType.isEquivalentTo(getNativeType(U2U_CONSTRUCTOR_TYPE))) {
<           
<           FunctionType superClassCtor = fnType.getSuperClassConstructor();
<           ObjectType.Property prototypeSlot = fnType.getSlot("prototype");
< 
<           
<           
<           
<           
<           
<           
<           
<           
<           prototypeSlot.setNode(n);
< 
<           String prototypeName = variableName + ".prototype";
1173,1205c1156,1164
<           
<           
<           
<           Var prototypeVar = scopeToDeclareIn.getVar(prototypeName);
<           if (prototypeVar != null && prototypeVar.scope == scopeToDeclareIn) {
<             scopeToDeclareIn.undeclare(prototypeVar);
<           }
< 
<           scopeToDeclareIn.declare(prototypeName,
<               n, prototypeSlot.getType(), input,
<               
<               superClassCtor == null ||
<               superClassCtor.getInstanceType().isEquivalentTo(
<                   getNativeType(OBJECT_TYPE)));
< 
<           
<           
<           if (newVar.getInitialValue() == null &&
<               !isExtern &&
<               
<               
<               
<               
<               
<               
<               variableName.equals(
<                   fnType.getInstanceType().getReferenceName())) {
<             compiler.report(
<                 JSError.make(sourceName, n,
<                     fnType.isConstructor() ?
<                     CTOR_INITIALIZER : IFACE_INITIALIZER,
<                     variableName));
<           }
---
>         
>         
>         
>         
>         
>         if ((fnType.isConstructor() || fnType.isInterface()) &&
>             variableName.equals(fnType.getReferenceName())) {
>           finishConstructorDefinition(n, variableName, fnType, scopeToDeclareIn,
>                                       input, newVar);
1232a1192,1237
>       }
>     }
> 
>     private void finishConstructorDefinition(
>         Node n, String variableName, FunctionType fnType,
>         Scope scopeToDeclareIn, CompilerInput input, Var newVar) {
>       
>       FunctionType superClassCtor = fnType.getSuperClassConstructor();
>       ObjectType.Property prototypeSlot = fnType.getSlot("prototype");
> 
>       
>       
>       
>       
>       
>       
>       
>       
>       prototypeSlot.setNode(n);
> 
>       String prototypeName = variableName + ".prototype";
> 
>       
>       
>       
>       Var prototypeVar = scopeToDeclareIn.getVar(prototypeName);
>       if (prototypeVar != null && prototypeVar.scope == scopeToDeclareIn) {
>         scopeToDeclareIn.undeclare(prototypeVar);
>       }
> 
>       scopeToDeclareIn.declare(prototypeName,
>           n, prototypeSlot.getType(), input,
>           
>           superClassCtor == null ||
>           superClassCtor.getInstanceType().isEquivalentTo(
>               getNativeType(OBJECT_TYPE)));
> 
>       
>       
>       if (newVar.getInitialValue() == null &&
>           !n.isFromExterns()) {
>         compiler.report(
>             JSError.make(sourceName, n,
>                 fnType.isConstructor() ?
>                 CTOR_INITIALIZER : IFACE_INITIALIZER,
>                 variableName));
