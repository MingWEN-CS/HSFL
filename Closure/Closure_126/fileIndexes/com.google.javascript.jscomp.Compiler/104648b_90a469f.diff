19a20
> import com.google.common.base.Charsets;
24a26
> import com.google.common.io.CharStreams;
41a44
> import java.io.InputStreamReader;
105a109,112
>   
>   private final Map<String, Node> injectedLibraries = Maps.newLinkedHashMap();
> 
>   
2181a2189
>     private Map<String, Node> injectedLibraries;
2198a2207
>     state.injectedLibraries = Maps.newLinkedHashMap(injectedLibraries);
2216a2226,2228
> 
>     injectedLibraries.clear();
>     injectedLibraries.putAll(state.injectedLibraries);
2359a2372,2416
>   @Override
>   Node ensureLibraryInjected(String resourceName) {
>     if (injectedLibraries.containsKey(resourceName)) {
>       return null;
>     }
> 
>     
>     boolean isBase = "base".equals(resourceName);
>     if (!isBase) {
>       ensureLibraryInjected("base");
>     }
> 
>     Node firstChild = loadLibraryCode(resourceName).removeChildren();
>     Node lastChild = firstChild.getLastSibling();
> 
>     Node parent = getNodeForCodeInsertion(null);
>     if (isBase) {
>       parent.addChildrenToFront(firstChild);
>     } else {
>       parent.addChildrenAfter(
>           firstChild, injectedLibraries.get("base"));
>     }
>     reportCodeChange();
> 
>     injectedLibraries.put(resourceName, lastChild);
>     return lastChild;
>   }
> 
>   
>   @VisibleForTesting
>   Node loadLibraryCode(String resourceName) {
>     String originalCode;
>     try {
>       originalCode = CharStreams.toString(new InputStreamReader(
>           Compiler.class.getResourceAsStream(
>               String.format("js/%s.js", resourceName)),
>           Charsets.UTF_8));
>     } catch (IOException e) {
>       throw new RuntimeException(e);
>     }
> 
>     return Normalize.parseAndNormalizeSyntheticCode(
>         this, originalCode,
>         String.format("jscomp_%s_", resourceName));
>   }
