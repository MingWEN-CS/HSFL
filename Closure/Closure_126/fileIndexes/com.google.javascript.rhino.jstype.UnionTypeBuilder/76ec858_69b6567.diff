50d49
< import com.google.javascript.rhino.jstype.UnionType;
166a166
>           boolean removeCurrent = false;
183c183,246
<             if (alternate.isSubtype(current)) {
---
> 
>             
>             
>             
>             
>             
>             
>             
> 
>             if (alternate.isParameterizedType() || current.isParameterizedType()) {
>               
>               
>               
>               
>               
>               
>               
>               
>               
>               
>               
>               
>               
>               
>               
> 
>               if (!current.isParameterizedType()) {
>                 if (alternate.isSubtype(current)) {
>                   
>                   return this;
>                 }
>                 
>               } else if (!alternate.isParameterizedType()) {
>                 if (current.isSubtype(alternate)) {
>                   
>                   removeCurrent = true;
>                 }
>                 
>               } else {
>                 Preconditions.checkState(current.isParameterizedType()
>                     && alternate.isParameterizedType());
>                 ParameterizedType parameterizedAlternate = alternate.toMaybeParameterizedType();
>                 ParameterizedType parameterizedCurrent = current.toMaybeParameterizedType();
> 
>                 if (parameterizedCurrent.wrapsSameRawType(parameterizedAlternate)) {
>                   JSType alternateTypeParameter = parameterizedAlternate.getParameterType();
>                   JSType currentTypeParameter = parameterizedCurrent.getParameterType();
>                   if (currentTypeParameter.isEquivalentTo(parameterizedCurrent)) {
>                     
>                     return this;
>                   } else {
>                     
>                     
>                     
>                     
>                     JSType merged = parameterizedCurrent
>                         .getReferencedObjTypeInternal();
>                     return addAlternate(merged);
>                   }
>                 }
>                 
>               }
>               
>             } else if (alternate.isSubtype(current)) {
188c251,253
<               it.remove();
---
>               removeCurrent = true;
>             }
>           }
190,195c255,262
<               if (currentIndex == functionTypePosition) {
<                 functionTypePosition = -1;
<               } else if (currentIndex < functionTypePosition) {
<                 functionTypePosition--;
<                 currentIndex--;
<               }
---
>           if (removeCurrent) {
>             it.remove();
> 
>             if (currentIndex == functionTypePosition) {
>               functionTypePosition = -1;
>             } else if (currentIndex < functionTypePosition) {
>               functionTypePosition--;
>               currentIndex--;
