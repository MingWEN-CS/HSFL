108a109,118
>   static final DiagnosticType UNKNOWN_LENDS =
>       DiagnosticType.warning(
>           "JSC_UNKNOWN_LENDS",
>           "Variable {0} not declared before @lends annotation.");
> 
>   static final DiagnosticType LENDS_ON_NON_OBJECT =
>       DiagnosticType.warning(
>           "JSC_LENDS_ON_NON_OBJECT",
>           "May only lend properties to object types. {0} has type {1}.");
> 
312,353d321
<   private void attachLiteralTypes(Node n) {
<     switch (n.getType()) {
<       case Token.NULL:
<         n.setJSType(getNativeType(NULL_TYPE));
<         break;
< 
<       case Token.VOID:
<         n.setJSType(getNativeType(VOID_TYPE));
<         break;
< 
<       case Token.STRING:
<         n.setJSType(getNativeType(STRING_TYPE));
<         break;
< 
<       case Token.NUMBER:
<         n.setJSType(getNativeType(NUMBER_TYPE));
<         break;
< 
<       case Token.TRUE:
<       case Token.FALSE:
<         n.setJSType(getNativeType(BOOLEAN_TYPE));
<         break;
< 
<       case Token.REGEXP:
<         n.setJSType(getNativeType(REGEXP_TYPE));
<         break;
< 
<       case Token.REF_SPECIAL:
<         n.setJSType(getNativeType(UNKNOWN_TYPE));
<         break;
< 
<       case Token.OBJECTLIT:
<         if (n.getJSType() == null) {
<           n.setJSType(typeRegistry.createAnonymousObjectType());
<         }
<         break;
< 
<       
<       
<     }
<   }
< 
477a446,514
>       }
>     }
> 
>     private void attachLiteralTypes(Node n) {
>       switch (n.getType()) {
>         case Token.NULL:
>           n.setJSType(getNativeType(NULL_TYPE));
>           break;
> 
>         case Token.VOID:
>           n.setJSType(getNativeType(VOID_TYPE));
>           break;
> 
>         case Token.STRING:
>           n.setJSType(getNativeType(STRING_TYPE));
>           break;
> 
>         case Token.NUMBER:
>           n.setJSType(getNativeType(NUMBER_TYPE));
>           break;
> 
>         case Token.TRUE:
>         case Token.FALSE:
>           n.setJSType(getNativeType(BOOLEAN_TYPE));
>           break;
> 
>         case Token.REGEXP:
>           n.setJSType(getNativeType(REGEXP_TYPE));
>           break;
> 
>         case Token.REF_SPECIAL:
>           n.setJSType(getNativeType(UNKNOWN_TYPE));
>           break;
> 
>         case Token.OBJECTLIT:
>           processObjectLit(n);
>           break;
> 
>           
>           
>       }
>     }
> 
>     private void processObjectLit(Node objectLit) {
>       JSDocInfo info = objectLit.getJSDocInfo();
>       if (info != null &&
>           info.getLendsName() != null) {
>         String lendsName = info.getLendsName();
>         Var lendsVar = scope.getVar(lendsName);
>         if (lendsVar == null) {
>           compiler.report(
>               JSError.make(sourceName, objectLit, UNKNOWN_LENDS, lendsName));
>         } else {
>           JSType type = lendsVar.getType();
>           if (type == null) {
>             type = typeRegistry.getNativeType(UNKNOWN_TYPE);
>           }
>           if (!type.isSubtype(typeRegistry.getNativeType(OBJECT_TYPE))) {
>             compiler.report(
>                 JSError.make(sourceName, objectLit, LENDS_ON_NON_OBJECT,
>                     lendsName, type.toString()));
>           } else {
>             objectLit.setJSType(type);
>           }
>         }
>       }
> 
>       if (objectLit.getJSType() == null) {
>         objectLit.setJSType(typeRegistry.createAnonymousObjectType());
