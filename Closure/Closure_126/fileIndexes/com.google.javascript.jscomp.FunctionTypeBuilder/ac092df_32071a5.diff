151c151
<         reportWarning(EXTENDS_NON_OBJECT, fnName, type.toString());
---
>         reportWarning(EXTENDS_NON_OBJECT, formatFnName(), type.toString());
154c154
<         reportWarning(RESOLVED_TAG_EMPTY, "@extends", fnName);
---
>         reportWarning(RESOLVED_TAG_EMPTY, "@extends", formatFnName());
214a215,219
>   String formatFnName() {
>     return fnName.isEmpty() ? "<anonymous>" : fnName;
>   }
> 
>   
317c322
<         reportWarning(CONSTRUCTOR_REQUIRED, "@struct", fnName);
---
>         reportWarning(CONSTRUCTOR_REQUIRED, "@struct", formatFnName());
319c324
<         reportWarning(CONSTRUCTOR_REQUIRED, "@dict", fnName);
---
>         reportWarning(CONSTRUCTOR_REQUIRED, "@dict", formatFnName());
332c337
<           reportWarning(EXTENDS_WITHOUT_TYPEDEF, fnName);
---
>           reportWarning(EXTENDS_WITHOUT_TYPEDEF, formatFnName());
349c354
<               TypeCheck.CONFLICTING_IMPLEMENTED_TYPE, fnName);
---
>               TypeCheck.CONFLICTING_IMPLEMENTED_TYPE, formatFnName());
351c356
<           reportWarning(CONSTRUCTOR_REQUIRED, "@implements", fnName);
---
>           reportWarning(CONSTRUCTOR_REQUIRED, "@implements", formatFnName());
489c494
<       reportWarning(INEXISTANT_PARAM, inexistentName, fnName);
---
>       reportWarning(INEXISTANT_PARAM, inexistentName, formatFnName());
687c692
<           reportWarning(TYPE_REDEFINITION, fnName,
---
>           reportWarning(TYPE_REDEFINITION, formatFnName(),
