















package com.google.javascript.jscomp;

import com.google.common.base.Preconditions;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Iterables;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.javascript.jscomp.Scope.Var;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.StaticSymbolTable;

import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Map;













class MemoizedScopeCreator
    implements ScopeCreator, StaticSymbolTable<Var, Var> {

  private final Map<Node, Scope> scopes = Maps.newHashMap();
  private final ScopeCreator delegate;

  


  MemoizedScopeCreator(ScopeCreator delegate) {
    this.delegate = delegate;
  }

  @Override
  public Iterable<Var> getReferences(Var var) {
    return ImmutableList.of(var);
  }

  @Override
  public Scope getScope(Var var) {
    return var.scope;
  }

  @Override
  public Iterable<Var> getAllSymbols() {
    List<Var> vars = Lists.newArrayList();
    for (Scope s : scopes.values()) {
      Iterables.addAll(vars, s.getAllSymbols());
    }
    return vars;
  }

  @Override
  public Scope createScope(Node n, Scope parent) {
    Scope scope = scopes.get(n);
    if (scope == null) {
      scope = delegate.createScope(n, parent);
      scopes.put(n, scope);
    } else {
      Preconditions.checkState(parent == scope.getParent());
    }
    return scope;
  }

  Collection<Scope> getAllMemoizedScopes() {
    return Collections.unmodifiableCollection(scopes.values());
  }

  Scope getScopeIfMemoized(Node n) {
    return scopes.get(n);
  }

  




  void removeScopesForScript(String scriptName) {
    for (Node scopeRoot : ImmutableSet.copyOf(scopes.keySet())) {
      if (scriptName.equals(scopeRoot.getSourceFileName())) {
        scopes.remove(scopeRoot);
      }
    }
  }
}
