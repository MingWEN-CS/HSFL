















package com.google.javascript.jscomp;

import com.google.common.collect.Lists;
import com.google.javascript.jscomp.CheckLevel;

import java.util.*;












public class ComposeWarningsGuard extends WarningsGuard {

  private final List<WarningsGuard> guards;
  private static final Comparator<WarningsGuard> guardComparator =
      new Comparator<WarningsGuard>() {
    @Override
    public int compare(WarningsGuard a, WarningsGuard b) {
      return a.getPriority() - b.getPriority();
    }
  };

  public ComposeWarningsGuard(List<WarningsGuard> guards) {
    this.guards = Lists.newArrayList();
    addGuards(guards);
  }

  public ComposeWarningsGuard(WarningsGuard... guards) {
    this(Lists.newArrayList(guards));
  }

  void addGuard(WarningsGuard guard) {
    if (guard instanceof ComposeWarningsGuard) {
      
      addGuards(Lists.reverse(((ComposeWarningsGuard) guard).guards));
    } else {
      int index = Collections.binarySearch(this.guards, guard, guardComparator);
      if (index < 0) {
        index = -index - 1;
      }
      this.guards.add(index, guard);
    }
  }

  private void addGuards(Iterable<WarningsGuard> guards) {
    for (WarningsGuard guard : guards) {
      addGuard(guard);
    }
  }

  @Override
  public CheckLevel level(JSError error) {
    for (WarningsGuard guard : guards) {
      CheckLevel newLevel = guard.level(error);
      if (newLevel != null) {
        return newLevel;
      }
    }
    return null;
  }

  @Override
  public boolean disables(DiagnosticGroup group) {
    nextSingleton:
    for (DiagnosticType type : group.getTypes()) {
      DiagnosticGroup singleton = DiagnosticGroup.forType(type);

      for (WarningsGuard guard : guards) {
        if (guard.disables(singleton)) {
          continue nextSingleton;
        } else if (guard.enables(singleton)) {
          return false;
        }
      }

      return false;
    }

    return true;
  }

  



  @Override
  public boolean enables(DiagnosticGroup group) {
    for (WarningsGuard guard : guards) {
      if (guard.enables(group)) {
        return true;
      } else if (guard.disables(group)) {
        return false;
      }
    }

    return false;
  }

  List<WarningsGuard> getGuards() {
    return Collections.unmodifiableList(guards);
  }
}
