






































package com.google.javascript.rhino.jstype;

import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.Token;





public class FunctionParamBuilder {

  private final JSTypeRegistry registry;
  private final Node root = new Node(Token.LP);

  public FunctionParamBuilder(JSTypeRegistry registry) {
    this.registry = registry;
  }

  



  public boolean addRequiredParams(JSType ...types) {
    if (hasOptionalOrVarArgs()) {
      return false;
    }

    for (JSType type : types) {
      newParameter(type);
    }
    return true;
  }

  





  public boolean addOptionalParams(JSType ...types) {
    if (hasVarArgs()) {
      return false;
    }

    for (JSType type : types) {
      newParameter(registry.createOptionalType(type)).setOptionalArg(true);
    }
    return true;
  }

  



  public boolean addVarArgs(JSType type) {
    if (hasVarArgs()) {
      return false;
    }

    
    
    
    
    
    if (!type.isEmptyType()) {
      type = registry.createOptionalType(type);
    }
    newParameter(type).setVarArgs(true);
    return true;
  }

  


  public Node newParameterFromNode(Node n) {
    Node newParam = newParameter(n.getJSType());
    newParam.setVarArgs(n.isVarArgs());
    newParam.setOptionalArg(n.isOptionalArg());
    return newParam;
  }

  
  private Node newParameter(JSType type) {
    Node paramNode = Node.newString(Token.NAME, "");
    paramNode.setJSType(type);
    root.addChildToBack(paramNode);
    return paramNode;
  }

  public Node build() {
    return root;
  }

  private boolean hasOptionalOrVarArgs() {
    Node lastChild = root.getLastChild();
    return lastChild != null &&
        (lastChild.isOptionalArg() || lastChild.isVarArgs());
  }

  public boolean hasVarArgs() {
    Node lastChild = root.getLastChild();
    return lastChild != null && lastChild.isVarArgs();
  }
}
