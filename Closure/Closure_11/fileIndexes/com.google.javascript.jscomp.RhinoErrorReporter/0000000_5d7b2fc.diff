1a2,149
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> package com.google.javascript.jscomp;
> 
> import com.google.common.collect.ImmutableMap;
> import com.google.javascript.rhino.ErrorReporter;
> import com.google.javascript.rhino.EvaluatorException;
> import com.google.javascript.rhino.ScriptRuntime;
> import com.google.javascript.jscomp.CheckLevel;
> 
> import java.util.Map;
> import java.util.Map.Entry;
> import java.util.regex.Pattern;
> 
> 
> 
> 
> 
> class RhinoErrorReporter {
> 
>   static final DiagnosticType PARSE_ERROR =
>       DiagnosticType.error("JSC_PARSE_ERROR", "Parse error. {0}");
> 
>   
>   
>   static final DiagnosticType EXTRA_FILEOVERVIEW =
>       DiagnosticType.warning("JSC_EXTRA_FILEOVERVIEW", "Parse error. {0}");
> 
>   static final DiagnosticType TRAILING_COMMA =
>       DiagnosticType.error("JSC_TRAILING_COMMA", "Parse error. {0}");
> 
>   static final DiagnosticType BAD_JSDOC_ANNOTATION = 
>     DiagnosticType.warning("JSC_BAD_JSDOC_ANNOTATION", "Parse error. {0}");
>   
>   
>   private final Map<String, DiagnosticType> typeMap;
> 
>   private final AbstractCompiler compiler;
> 
>   
> 
> 
> 
> 
>   private String replacePlaceHolders(String s) {
>     s = Pattern.quote(s);
>     return s.replaceAll("\\{\\d+\\}", "\\\\E.*\\\\Q");
>   }
> 
>   private RhinoErrorReporter(AbstractCompiler compiler) {
>     this.compiler = compiler;
>     typeMap = ImmutableMap.of(
>         
>         
>         replacePlaceHolders(
>             ScriptRuntime.getMessage0("msg.jsdoc.fileoverview.extra")),
>         EXTRA_FILEOVERVIEW,
>         
>         
>         replacePlaceHolders(
>             com.google.javascript.jscomp.mozilla.rhino.ScriptRuntime
>               .getMessage0("msg.extra.trailing.comma")),
>         TRAILING_COMMA,
>     
>         
>         replacePlaceHolders(ScriptRuntime.getMessage0("msg.bad.jsdoc.tag")),
>         BAD_JSDOC_ANNOTATION);
>   }
> 
>   public static com.google.javascript.jscomp.mozilla.rhino.ErrorReporter
>       forNewRhino(AbstractCompiler compiler) {
>     return new NewRhinoErrorReporter(compiler);
>   }
> 
>   public static ErrorReporter forOldRhino(AbstractCompiler compiler) {
>     return new OldRhinoErrorReporter(compiler);
>   }
> 
>   public void warning(String message, String sourceName, int line,
>       String lineSource, int lineOffset) {
>     compiler.report(
>         makeError(message, sourceName, line, lineOffset, CheckLevel.WARNING));
>   }
> 
>   public void error(String message, String sourceName, int line,
>       String lineSource, int lineOffset) {
>     compiler.report(
>         makeError(message, sourceName, line, lineOffset, CheckLevel.ERROR));
>   }
> 
>   private JSError makeError(String message, String sourceName, int line,
>       int lineOffset, CheckLevel defaultLevel) {
> 
>     
>     
>     for (Entry<String, DiagnosticType> entry : typeMap.entrySet()) {
>       if (message.matches(entry.getKey())) {
>         return JSError.make(
>             sourceName, line, lineOffset, entry.getValue(), message);
>       }
>     }
> 
>     return JSError.make(sourceName, line, lineOffset, defaultLevel,
>         PARSE_ERROR, message);
>   }
> 
>   private static class OldRhinoErrorReporter extends RhinoErrorReporter
>       implements ErrorReporter {
> 
>     private OldRhinoErrorReporter(AbstractCompiler compiler) {
>       super(compiler);
>     }
> 
>     public EvaluatorException runtimeError(String message, String sourceName,
>         int line, String lineSource, int lineOffset) {
>       return new EvaluatorException(message, sourceName, line, lineSource,
>           lineOffset);
>     }
>   }
> 
>   private static class NewRhinoErrorReporter extends RhinoErrorReporter
>       implements com.google.javascript.jscomp.mozilla.rhino.ErrorReporter {
> 
>     private NewRhinoErrorReporter(AbstractCompiler compiler) {
>       super(compiler);
>     }
> 
>     public com.google.javascript.jscomp.mozilla.rhino.EvaluatorException
>         runtimeError(String message, String sourceName, int line,
>             String lineSource, int lineOffset) {
>       return new com.google.javascript.jscomp.mozilla.rhino.EvaluatorException(
>           message, sourceName, line, lineSource, lineOffset);
>     }
>   }
> }
