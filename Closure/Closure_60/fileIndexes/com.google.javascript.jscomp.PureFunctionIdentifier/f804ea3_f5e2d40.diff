19a20
> import com.google.common.base.Charsets;
23a25
> import com.google.common.io.Files;
34a37,38
> import java.io.File;
> import java.io.IOException;
1126a1131,1176
>     }
>   }
> 
>   
> 
> 
> 
>   static class Driver implements CompilerPass {
>     private final AbstractCompiler compiler;
>     private final String reportPath;
>     private final boolean useNameReferenceGraph;
> 
>     Driver(AbstractCompiler compiler, String reportPath,
>         boolean useNameReferenceGraph) {
>       this.compiler = compiler;
>       this.reportPath = reportPath;
>       this.useNameReferenceGraph = useNameReferenceGraph;
>     }
> 
>     @Override
>     public void process(Node externs, Node root) {
>       DefinitionProvider definitionProvider = null;
>       if (useNameReferenceGraph) {
>         NameReferenceGraphConstruction graphBuilder =
>             new NameReferenceGraphConstruction(compiler);
>         graphBuilder.process(externs, root);
>         definitionProvider = graphBuilder.getNameReferenceGraph();
>       } else {
>         SimpleDefinitionFinder defFinder = new SimpleDefinitionFinder(compiler);
>         defFinder.process(externs, root);
>         definitionProvider = defFinder;
>       }
> 
>       PureFunctionIdentifier pureFunctionIdentifier =
>           new PureFunctionIdentifier(compiler, definitionProvider);
>       pureFunctionIdentifier.process(externs, root);
> 
>       if (reportPath != null) {
>         try {
>           Files.write(pureFunctionIdentifier.getDebugReport(),
>               new File(reportPath),
>               Charsets.UTF_8);
>         } catch (IOException e) {
>           throw new RuntimeException(e);
>         }
>       }
