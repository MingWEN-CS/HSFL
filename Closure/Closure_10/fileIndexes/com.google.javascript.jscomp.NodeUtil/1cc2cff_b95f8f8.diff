50c50
<   static final long MAX_POSITIVE_INTEGER_NUMBER = (long)Math.pow(2, 53);
---
>   static final long MAX_POSITIVE_INTEGER_NUMBER = (long) Math.pow(2, 53);
52c52
<   final static String JSC_PROPERTY_NAME_FN = "JSCompiler_renameProperty";
---
>   static final String JSC_PROPERTY_NAME_FN = "JSCompiler_renameProperty";
54,55c54
<   
<   
---
>   static final char LARGEST_BASIC_LATIN = 0x7f;
523c522
<   public static boolean isSymmetricOperation(Node n) {
---
>   static boolean isSymmetricOperation(Node n) {
540c539
<   public static boolean isRelationalOperation(Node n) {
---
>   static boolean isRelationalOperation(Node n) {
555c554
<   public static int getInverseOperator(int type) {
---
>   static int getInverseOperator(int type) {
755c754
<   public static Node newExpr(Node child) {
---
>   static Node newExpr(Node child) {
875c874
<         if (isSimpleOperatorType(n.getType())) {
---
>         if (isSimpleOperator(n)) {
1043,1044c1042,1044
<               (param.isString() || param.isRegExp()))
<           return false;
---
>               (param.isString() || param.isRegExp())) {
>             return false;
>           }
1242a1243,1256
>   static boolean isUndefined(Node n) {
>     switch (n.getType()) {
>       case Token.VOID:
>         return true;
>       case Token.NAME:
>         return n.getString().equals("undefined");
>     }
>     return false;
>   }
> 
>   static boolean isNullOrUndefined(Node n) {
>     return n.isNull() || isUndefined(n);
>   }
> 
1361,1369d1374
<   static boolean isUndefined(Node n) {
<     switch (n.getType()) {
<       case Token.VOID:
<         return true;
<       case Token.NAME:
<         return n.getString().equals("undefined");
<     }
<     return false;
<   }
1371,1373d1375
<   static boolean isNullOrUndefined(Node n) {
<     return n.isNull() || isUndefined(n);
<   }
1807c1809
<           node.toString() + " of "+ parent.toString());
---
>           node.toString() + " of " + parent.toString());
1863,1869d1864
<   static boolean containsCall(Node n) {
<     return containsType(n, Token.CALL);
<   }
< 
<   
< 
< 
1992,2019d1986
<   static boolean isFunctionObjectCallOrApply(Node callNode) {
<     return isFunctionObjectCall(callNode) || isFunctionObjectApply(callNode);
<   }
< 
<   
< 
< 
< 
< 
< 
<   static boolean isSimpleFunctionObjectCall(Node callNode) {
<     if (isFunctionObjectCall(callNode)) {
<       if (callNode.getFirstChild().getFirstChild().isName()) {
<         return true;
<       }
<     }
< 
<     return false;
<   }
< 
<   
< 
< 
< 
< 
< 
< 
< 
2337c2304
<   public static Node getRootOfQualifiedName(Node qName) {
---
>   static Node getRootOfQualifiedName(Node qName) {
2418d2384
< 
2420d2385
<     char LARGEST_BASIC_LATIN = 0x7f;
2434c2399
<   public static boolean isValidSimpleName(String name) {
---
>   static boolean isValidSimpleName(String name) {
2492c2457
<   public static Collection<Node> getVarsDeclaredInBranch(Node root) {
---
>   static Collection<Node> getVarsDeclaredInBranch(Node root) {
2511a2477,2479
>   
> 
> 
3213a3182,3184
>   
> 
> 
3216a3188,3190
> 
>   
> 
