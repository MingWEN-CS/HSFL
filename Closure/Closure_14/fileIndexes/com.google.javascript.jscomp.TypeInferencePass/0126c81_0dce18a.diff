22c22
< import com.google.javascript.jscomp.NodeTraversal.ScopedCallback;
---
> import com.google.javascript.jscomp.NodeTraversal.AbstractScopedCallback;
99c99
<   private class TypeInferringCallback implements ScopedCallback {
---
>   private class TypeInferringCallback extends AbstractScopedCallback {
102,120c102
<       Scope scope = t.getScope();
<       Node node = t.getCurrentNode();
<       if (scope.isGlobal()) {
<         inferTypes(t, node, scope);
<       }
<     }
< 
<     @Override
<     public void exitScope(NodeTraversal t) {
<       Scope scope = t.getScope();
<       Node node = t.getCurrentNode();
<       if (scope.isLocal()) {
<         inferTypes(t, node, scope);
<       }
<     }
< 
<     @Override
<     public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
<       return true;
---
>       inferTypes(t, t.getCurrentNode(), t.getScope());
