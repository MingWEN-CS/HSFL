















package com.google.javascript.jscomp;

import com.google.common.base.Preconditions;
import com.google.common.collect.Maps;
import com.google.common.collect.Multimap;
import com.google.common.collect.Sets;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.Token;

import java.io.Serializable;
import java.nio.charset.Charset;
import java.util.Collections;
import java.util.Map;
import java.util.Set;





public class CompilerOptions implements Serializable, Cloneable {
  private static final long serialVersionUID = 7L;

  











  public boolean ideMode;

  


  boolean skipAllPasses;

  


  boolean nameAnonymousFunctionsOnly;

  



  DevMode devMode;

  
  
  

  
  public boolean checkSymbols;

  



  public CheckLevel checkShadowVars;

  
  public CheckLevel aggressiveVarCheck;

  
  public CheckLevel checkFunctions;

  
  public CheckLevel checkMethods;

  
  public boolean checkDuplicateMessages;

  
  public boolean allowLegacyJsMessages;

  



  public boolean strictMessageReplacement;

  
  public boolean checkSuspiciousCode;

  
  public boolean checkControlStructures;

  
  public CheckLevel checkUndefinedProperties;

  






  public boolean checkUnusedPropertiesEarly;

  
  public boolean checkTypes;

  
  public boolean tightenTypes;

  
  
  
  public boolean inferTypesInGlobalScope;

  
  public boolean checkTypedPropertyCalls;

  



  public CheckLevel reportMissingOverride;

  
  public CheckLevel reportUnknownTypes;

  
  public CheckLevel checkRequires;

  
  public CheckLevel checkProvides;

  



  public CheckLevel checkGlobalNamesLevel;

  
  public CheckLevel brokenClosureRequiresLevel;

  




  public CheckLevel checkGlobalThisLevel;

  



  public CheckLevel checkMissingGetCssNameLevel;

  


  public String checkMissingGetCssNameBlacklist;

  
  public boolean checkEs5Strict;

  
  public boolean checkCaja;

  
  
  

  
  public boolean foldConstants;

  public boolean removeConstantExpressions;

  public boolean deadAssignmentElimination;

  
  public boolean inlineConstantVars;

  
  public boolean inlineFunctions;

  
  public boolean decomposeExpressions;

  
  public boolean inlineAnonymousFunctionExpressions;

  
  public boolean inlineLocalFunctions;

  
  public boolean crossModuleCodeMotion;

  
  public boolean coalesceVariableNames;

  
  public boolean crossModuleMethodMotion;

  
  public boolean inlineGetters;

  
  public boolean inlineVariables;

  
  public boolean inlineLocalVariables;

  
  
  public boolean flowSensitiveInlineVariables;

  
  public boolean smartNameRemoval;

  
  public boolean removeDeadCode;

  
  public CheckLevel checkUnreachableCode;

  
  public CheckLevel checkMissingReturn;

  
  public boolean extractPrototypeMemberDeclarations;

  
  public boolean removeEmptyFunctions;

  
  public boolean removeUnusedPrototypeProperties;

  
  public boolean removeUnusedPrototypePropertiesInExterns;

  
  public boolean removeUnusedVars;

  
  public boolean removeUnusedVarsInGlobalScope;

  
  public boolean aliasExternals;

  



  public String aliasableGlobals;

  



  public String unaliasableGlobals;

  
  public boolean collapseVariableDeclarations;

  



  public boolean collapseAnonymousFunctions;

  




  public Set<String> aliasableStrings;

  




  public String aliasStringsBlacklist;

  




  public boolean aliasAllStrings;

  
  boolean outputJsStringUsage;

  
  public boolean convertToDottedProperties;

  
  public boolean rewriteFunctionExpressions;

  


  public boolean optimizeParameters;

  


  public boolean optimizeArgumentsArray;

  
  boolean chainCalls;

  
  
  

  
  public VariableRenamingPolicy variableRenaming;

  
  public PropertyRenamingPolicy propertyRenaming;

  
  public boolean labelRenaming;

  
  public boolean reserveRawExports;

  


  public boolean generatePseudoNames;

  
  public String renamePrefix;

  
  public boolean aliasKeywords;

  
  public boolean collapseProperties;

  
  boolean collapsePropertiesOnExternTypes;

  



  public boolean devirtualizePrototypeMethods;

  



  public boolean computeFunctionSideEffects;

  


  public String debugFunctionSideEffectsPath;

  



  public boolean disambiguateProperties;

  
  public boolean ambiguateProperties;

  
  public AnonymousFunctionNamingPolicy anonymousFunctionNaming;

  
  public byte[] inputVariableMapSerialized;

  
  public byte[] inputPropertyMapSerialized;

  
  public boolean exportTestFunctions;

  
  
  

  
  boolean runtimeTypeCheck;

  




  String runtimeTypeCheckLogFunction;

  
  private CodingConvention codingConvention;

  
  public boolean instrumentForCoverage;

  



  public boolean instrumentForCoverageOnly;

  
  public boolean ignoreCajaProperties;

  public String syntheticBlockStartMarker;

  public String syntheticBlockEndMarker;

  
  public String locale;

  
  public boolean markAsCompiled;

  
  public boolean removeTryCatchFinally;

  
  public boolean closurePass;

  
  boolean rewriteNewDateGoogNow;

  
  boolean removeAbstractMethods;

  
  public boolean gatherCssNames;

  
  public Set<String> stripTypes;

  
  public Set<String> stripNameSuffixes;

  
  public Set<String> stripNamePrefixes;

  
  public Set<String> stripTypePrefixes;

  
  public transient
      Multimap<CustomPassExecutionTime, CompilerPass> customPasses;

  
  public boolean markNoSideEffectCalls;

  
  private Map<String, Object> defineReplacements;

  
  public boolean moveFunctionDeclarations;

  
  public String instrumentationTemplate;

  



  public String appNameStr;

  
  public boolean recordFunctionInformation;

  public boolean generateExports;

  
  public CssRenamingMap cssRenamingMap;

  
  boolean processObjectPropertyString;

  
  Set<String> idGenerators;

  
  
  

  
  public boolean prettyPrint;

  
  public boolean lineBreak;

  
  public boolean printInputDelimiter;

  
  public String inputDelimiter = "

  
  public String reportPath;

  public TracerMode tracer;

  private boolean colorizeErrorOutput;

  public ErrorFormat errorFormat;

  public String jsOutputFile;

  private transient ComposeWarningsGuard warningsGuard;

  int summaryDetailLevel = 1;

  
  
  

  
  String externExportsPath;

  
  public String nameReferenceReportPath;

  
  public String nameReferenceGraphPath;

  
  
  

  
  public String sourceMapOutputPath;

  


  public Charset outputCharset;

  





  public CompilerOptions() {
    
    skipAllPasses = false;
    nameAnonymousFunctionsOnly = false;
    devMode = DevMode.OFF;
    checkSymbols = false;
    checkShadowVars = CheckLevel.OFF;
    aggressiveVarCheck = CheckLevel.OFF;
    checkFunctions = CheckLevel.OFF;
    checkMethods = CheckLevel.OFF;
    checkDuplicateMessages = false;
    allowLegacyJsMessages = false;
    strictMessageReplacement = false;
    checkSuspiciousCode = false;
    checkControlStructures = false;
    checkUndefinedProperties = CheckLevel.OFF;
    checkUnusedPropertiesEarly = false;
    checkTypes = false;
    tightenTypes = false;
    inferTypesInGlobalScope = false;
    checkTypedPropertyCalls = false;
    reportMissingOverride = CheckLevel.OFF;
    reportUnknownTypes = CheckLevel.OFF;
    checkRequires = CheckLevel.OFF;
    checkProvides = CheckLevel.OFF;
    checkGlobalNamesLevel = CheckLevel.OFF;
    brokenClosureRequiresLevel = CheckLevel.ERROR;
    checkGlobalThisLevel = CheckLevel.WARNING;
    checkUnreachableCode = CheckLevel.OFF;
    checkMissingReturn = CheckLevel.OFF;
    checkMissingGetCssNameLevel = CheckLevel.OFF;
    checkMissingGetCssNameBlacklist = null;
    checkEs5Strict = false;
    checkCaja = false;
    computeFunctionSideEffects = false;
    chainCalls = false;

    
    foldConstants = false;
    removeConstantExpressions = false;
    coalesceVariableNames = false;
    deadAssignmentElimination = false;
    inlineConstantVars = false;
    inlineFunctions = false;
    inlineLocalFunctions = false;
    crossModuleCodeMotion = false;
    crossModuleMethodMotion = false;
    inlineGetters = false;
    inlineVariables = false;
    inlineLocalVariables = false;
    smartNameRemoval = false;
    removeDeadCode = false;
    extractPrototypeMemberDeclarations = false;
    removeUnusedPrototypeProperties = false;
    removeUnusedPrototypePropertiesInExterns = false;
    removeUnusedVars = false;
    removeUnusedVarsInGlobalScope = true;
    aliasExternals = false;
    collapseVariableDeclarations = false;
    collapseAnonymousFunctions = false;
    aliasableStrings = Collections.emptySet();
    aliasStringsBlacklist = "";
    aliasAllStrings = false;
    outputJsStringUsage = false;
    convertToDottedProperties = false;
    rewriteFunctionExpressions = false;
    optimizeParameters = false;

    
    variableRenaming = VariableRenamingPolicy.OFF;
    propertyRenaming = PropertyRenamingPolicy.OFF;
    labelRenaming = false;
    generatePseudoNames = false;
    renamePrefix = null;
    aliasKeywords = false;
    collapseProperties = false;
    collapsePropertiesOnExternTypes = false;
    devirtualizePrototypeMethods = false;
    disambiguateProperties = false;
    ambiguateProperties = false;
    anonymousFunctionNaming = AnonymousFunctionNamingPolicy.OFF;
    exportTestFunctions = false;

    
    runtimeTypeCheck = false;
    runtimeTypeCheckLogFunction = null;
    instrumentForCoverage = false;
    instrumentForCoverageOnly = false;
    ignoreCajaProperties = false;
    syntheticBlockStartMarker = null;
    syntheticBlockEndMarker = null;
    locale = null;
    markAsCompiled = false;
    removeTryCatchFinally = false;
    closurePass = false;
    rewriteNewDateGoogNow = true;
    removeAbstractMethods = true;
    stripTypes = Collections.emptySet();
    stripNameSuffixes = Collections.emptySet();
    stripNamePrefixes = Collections.emptySet();
    stripTypePrefixes = Collections.emptySet();
    customPasses = null;
    markNoSideEffectCalls = false;
    defineReplacements = Maps.newHashMap();
    moveFunctionDeclarations = false;
    instrumentationTemplate = null;
    appNameStr = "";
    recordFunctionInformation = false;
    generateExports = false;
    cssRenamingMap = null;
    processObjectPropertyString = false;
    idGenerators = Collections.emptySet();

    
    printInputDelimiter = false;
    prettyPrint = false;
    lineBreak = false;
    reportPath = null;
    tracer = TracerMode.OFF;
    colorizeErrorOutput = false;
    errorFormat = ErrorFormat.SINGLELINE;
    warningsGuard = null;
    debugFunctionSideEffectsPath = null;
    jsOutputFile = "";
    nameReferenceReportPath = null;
    nameReferenceGraphPath = null;
  }

  


  public Map<String, Node> getDefineReplacements() {
    Map<String, Node> map = Maps.newHashMap();
    for (Map.Entry<String, Object> entry : defineReplacements.entrySet()) {
      String name = entry.getKey();
      Object value = entry.getValue();
      if (value instanceof Boolean) {
        map.put(name, ((Boolean) value).booleanValue() ?
            new Node(Token.TRUE) : new Node(Token.FALSE));
      } else if (value instanceof Integer) {
        map.put(name, Node.newNumber(((Integer) value).intValue()));
      } else if (value instanceof Double) {
        map.put(name, Node.newNumber(((Double) value).doubleValue()));
      } else {
        Preconditions.checkState(value instanceof String);
        map.put(name, Node.newString((String) value));
      }
    }
    return map;
  }

  



  public void setDefineToBooleanLiteral(String defineName, boolean value) {
    defineReplacements.put(defineName, new Boolean(value));
  }

  



  public void setDefineToStringLiteral(String defineName, String value) {
    defineReplacements.put(defineName, value);
  }

  



  public void setDefineToNumberLiteral(String defineName, int value) {
    defineReplacements.put(defineName, new Integer(value));
  }

  



  public void setDefineToDoubleLiteral(String defineName, double value) {
    defineReplacements.put(defineName, new Double(value));
  }

  


  public void skipAllCompilerPasses() {
    skipAllPasses = true;
  }

  



  boolean enables(DiagnosticGroup type) {
    return warningsGuard != null && warningsGuard.enables(type);
  }

  



  boolean disables(DiagnosticGroup type) {
    return warningsGuard != null && warningsGuard.disables(type);
  }

  


  public void setWarningLevel(DiagnosticGroup type, CheckLevel level) {
    addWarningsGuard(new DiagnosticGroupWarningsGuard(type, level));
  }

  WarningsGuard getWarningsGuard() {
    return warningsGuard;
  }

  


  public void addWarningsGuard(WarningsGuard guard) {
    if (warningsGuard == null) {
      warningsGuard = new ComposeWarningsGuard(guard);
    } else {
      warningsGuard.addGuard(guard);
    }
  }

  




  public void setRenamingPolicy(VariableRenamingPolicy newVariablePolicy,
      PropertyRenamingPolicy newPropertyPolicy) {
    this.variableRenaming = newVariablePolicy;
    this.propertyRenaming = newPropertyPolicy;
  }

  




  public void setCollapsePropertiesOnExternTypes(boolean collapse) {
    collapsePropertiesOnExternTypes = collapse;
  }

  


  public void setProcessObjectPropertyString(boolean process) {
    processObjectPropertyString = process;
  }

  


  public void setIdGenerators(Set<String> idGenerators) {
    this.idGenerators = Sets.newHashSet(idGenerators);
  }

  public void setRewriteNewDateGoogNow(boolean rewrite) {
    this.rewriteNewDateGoogNow = rewrite;
  }

  public void setRemoveAbstractMethods(boolean remove) {
    this.removeAbstractMethods = remove;
  }

  


  public void setNameAnonymousFunctionsOnly(boolean value) {
    this.nameAnonymousFunctionsOnly = value;
  }

  public void setColorizeErrorOutput(boolean colorizeErrorOutput) {
    this.colorizeErrorOutput = colorizeErrorOutput;
  }

  public boolean shouldColorizeErrorOutput() {
    return colorizeErrorOutput;
  }

  


  public void setChainCalls(boolean value) {
    this.chainCalls = value;
  }

  





  public void enableRuntimeTypeCheck(String logFunction) {
    this.runtimeTypeCheck = true;
    this.runtimeTypeCheckLogFunction = logFunction;
  }

  public void disableRuntimeTypeCheck() {
    this.runtimeTypeCheck = false;
  }

  public void setCodingConvention(CodingConvention codingConvention) {
    this.codingConvention = codingConvention;
  }

  public CodingConvention getCodingConvention() {
    return codingConvention;
  }

  






  public void setSummaryDetailLevel(int summaryDetailLevel) {
    this.summaryDetailLevel = summaryDetailLevel;
  }

  @Override
  public Object clone() throws CloneNotSupportedException {
    CompilerOptions clone = (CompilerOptions) super.clone();
    
    return clone;
  }

  
  

  
  static enum DevMode {
    


    OFF,

    


    START,

    


    START_AND_END,

    


    EVERY_PASS
  }

  public static enum TracerMode {
    ALL,  
    FAST, 
    OFF;  

    boolean isOn() {
      return this != OFF;
    }
  }
}
