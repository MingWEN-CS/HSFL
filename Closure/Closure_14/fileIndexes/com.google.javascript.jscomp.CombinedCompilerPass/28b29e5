















package com.google.javascript.jscomp;

import com.google.common.collect.Lists;
import com.google.javascript.jscomp.NodeTraversal.Callback;
import com.google.javascript.jscomp.NodeTraversal.ScopedCallback;
import com.google.javascript.rhino.Node;

import java.util.List;























final class CombinedCompilerPass implements HotSwapCompilerPass,
    ScopedCallback {

  
  private final CallbackWrapper[] callbacks;
  private final AbstractCompiler compiler;

  



  CombinedCompilerPass(
      AbstractCompiler compiler, Callback... callbacks) {
    this(compiler, Lists.<Callback>newArrayList(callbacks));
  }

  CombinedCompilerPass(
      AbstractCompiler compiler, List<Callback> callbacks) {
    this.compiler = compiler;
    this.callbacks = new CallbackWrapper[callbacks.size()];
    for (int i = 0; i < callbacks.size(); i++) {
      this.callbacks[i] = new CallbackWrapper(callbacks.get(i));
    }
  }

  static void traverse(AbstractCompiler compiler, Node root,
      List<Callback> callbacks) {
    if (callbacks.size() == 1) {
      NodeTraversal.traverse(compiler, root, callbacks.get(0));
    } else {
      (new CombinedCompilerPass(compiler, callbacks)).process(null, root);
    }
  }

  









  private static class CallbackWrapper {
    
    private final Callback callback;
    



    private final ScopedCallback scopedCallback;

    




    private Node waiting = null;

    private CallbackWrapper(Callback callback) {
      this.callback = callback;
      if (callback instanceof ScopedCallback) {
        scopedCallback = (ScopedCallback) callback;
      } else {
        scopedCallback = null;
      }
    }

    



    void visitOrMaybeActivate(NodeTraversal t, Node n, Node parent) {
      if (isActive()) {
        callback.visit(t, n, parent);
      } else if (waiting == n) {
        waiting = null;
      }
    }

    void shouldTraverseIfActive(NodeTraversal t, Node n, Node parent) {
      if (isActive() && !callback.shouldTraverse(t, n, parent)) {
        waiting = n;
      }
    }

    void enterScopeIfActive(NodeTraversal t) {
      if (isActive() && scopedCallback != null) {
        scopedCallback.enterScope(t);
      }
    }

    void exitScopeIfActive(NodeTraversal t) {
      if (isActive() && scopedCallback != null) {
        scopedCallback.exitScope(t);
      }
    }

    boolean isActive() {
      return waiting == null;
    }
  }

  @Override
  public final void process(Node externs, Node root) {
    NodeTraversal.traverse(compiler, root, this);
  }

  @Override
  public void hotSwapScript(Node scriptRoot, Node originalRoot) {
    NodeTraversal.traverse(compiler, scriptRoot, this);
  }

  @Override
  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
    for (CallbackWrapper callback : callbacks) {
      callback.shouldTraverseIfActive(t, n, parent);
    }
    
    
    
    
    
    return true;
  }

  @Override
  public void visit(NodeTraversal t, Node n, Node parent) {
    for (CallbackWrapper callback : callbacks) {
      callback.visitOrMaybeActivate(t, n, parent);
    }
  }

  @Override
  public void enterScope(NodeTraversal t) {
    for (CallbackWrapper callback : callbacks) {
      callback.enterScopeIfActive(t);
    }
  }

  @Override
  public void exitScope(NodeTraversal t) {
    for (CallbackWrapper callback : callbacks) {
      callback.exitScopeIfActive(t);
    }
  }
}
