















package com.google.javascript.jscomp.parsing;

import com.google.common.collect.ImmutableMap;
import com.google.javascript.rhino.jstype.JSTypeRegistry;

import java.util.Map;
import java.util.Set;







class Config {

  


  final JSTypeRegistry registry;

  


  final boolean parseJsDocDocumentation;

  



  final Map<String, Annotation> annotationNames;

  



  Config(JSTypeRegistry registry, Set<String> annotationWhitelist,
      boolean parseJsDocDocumentation) {
    this.registry = registry;
    this.annotationNames = buildAnnotationNames(annotationWhitelist);
    this.parseJsDocDocumentation = parseJsDocDocumentation;
  }

  



  private static Map<String, Annotation> buildAnnotationNames(
      Set<String> annotationWhitelist) {
    ImmutableMap.Builder<String, Annotation> annotationBuilder =
        ImmutableMap.builder();
    annotationBuilder.putAll(Annotation.recognizedAnnotations);
    for (String unrecognizedAnnotation : annotationWhitelist) {
      if (!Annotation.recognizedAnnotations.containsKey(
              unrecognizedAnnotation)) {
        annotationBuilder.put(
            unrecognizedAnnotation, Annotation.NOT_IMPLEMENTED);
      }
    }
    return annotationBuilder.build();
  }
}
