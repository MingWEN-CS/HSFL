64,68d63
<   
<   
<   
<   private final Set<Var> declaredConstants = Sets.newHashSet();
< 
83d77
<             
85,88c79
<             
<             
<             Predicates.<Var>or(
<                 identifyConstants, Predicates.<Var>alwaysTrue()));
---
>             Predicates.<Var>alwaysTrue());
103,124c94
<       if (declaredConstants.contains(var)) {
<         return true;
<       }
< 
<       if (!var.isConst()) {
<         return false;
<       }
< 
<       if (var.getInitialValue() == null) {
<         
<         
<         
<         return false;
<       }
< 
<       
<       if (!NodeUtil.isImmutableValue(var.getInitialValue())) {
<         return false;
<       }
< 
<       declaredConstants.add(var);
<       return true;
---
>       return var.isConst();
181,185c151,154
<               referenceInfo.isNeverReassigned()) {
<             Reference declaration = referenceInfo.references.get(0);
<             Node value = declaration.getNameNode().getFirstChild();
<             if (declaration.getParent().getType() == Token.VAR &&
<                 value != null && value.getType() == Token.NAME) {
---
>               referenceInfo.isAssignedOnce()) {
>             Reference init = referenceInfo.getInitializingReference();
>             Node value = init.getAssignedValue();
>             if (value != null && value.getType() == Token.NAME) {
212,213c181,184
<         } else if (isInlineableDeclaredConstant(v, referenceInfo.references)) {
<           inlineDeclaredConstant(v, referenceInfo.references);
---
>         } else if (isInlineableDeclaredConstant(v, referenceInfo)) {
>           Reference init = referenceInfo.getInitializingReferenceForConstants();
>           Node value = init.getAssignedValue();
>           inlineDeclaredConstant(v, value, referenceInfo.references);
220c191
<           inlineNonConstants(t.getScope(), v, referenceInfo);
---
>           inlineNonConstants(v, referenceInfo);
225c196
<     private void inlineNonConstants(Scope scope,
---
>     private void inlineNonConstants(
227c198,203
<       if (referenceInfo.references.size() >= 2 &&
---
>       int refCount = referenceInfo.references.size();
>       Reference declaration = referenceInfo.references.get(0);
>       Reference init = referenceInfo.getInitializingReference();
>       int firstRefAfterInit = (declaration == init) ? 2 : 3;
> 
>       if (refCount > 1 &&
231c207,209
<         inlineWellDefinedVariable(v, referenceInfo.references);
---
>         Node value = init.getAssignedValue();
>         Preconditions.checkNotNull(value);
>         inlineWellDefinedVariable(v, value, referenceInfo.references);
233c211
<       } else if (referenceInfo.references.size() == 2) {
---
>       } else if (refCount == firstRefAfterInit) {
236,242c214,221
<         Reference declaration = referenceInfo.references.get(0);
<         Reference reference = referenceInfo.references.get(1);
< 
<         if (canInline(declaration, reference)) {
<           
<           
<           
---
>         Reference reference = referenceInfo.references.get(
>             firstRefAfterInit - 1);
>         if (canInline(declaration, init, reference)) {
>           inline(v, declaration, init, reference);
>           staleVars.add(v);
>         }
>       } else if (declaration != init && refCount == 2) {
>         if (isValidDeclaration(declaration) && isValidInitialization(init)) {
245,248c224,226
<           blacklistVarReferencesInTree(
<               declaration.getNameNode().getFirstChild(), scope);
< 
<           inline(v, declaration, reference);
---
>           Node value = init.getAssignedValue();
>           Preconditions.checkNotNull(value);
>           inlineWellDefinedVariable(v, value, referenceInfo.references);
258c236
<           referenceInfo.isNeverReassigned()) {
---
>           referenceInfo.isAssignedOnce()) {
265,266c243,249
<               inlineWellDefinedVariable(
<                   candidate.alias, candidate.refInfo.references);
---
>               Reference aliasInit;
>               aliasInit = candidate.refInfo.getInitializingReference();
>               Node value = aliasInit.getAssignedValue();
>               Preconditions.checkNotNull(value);
>               inlineWellDefinedVariable(candidate.alias,
>                   value,
>                   candidate.refInfo.references);
305,309c288,298
<     private void inline(Var v, Reference declaration, Reference reference) {
<       Node name = declaration.getNameNode();
<       Preconditions.checkState(name.getFirstChild() != null);
<       Node value = name.removeFirstChild();
<       inlineValue(v, reference, value);
---
>     private void inline(Var v, Reference declaration,
>                         Reference init, Reference reference) {
>       Node value = init.getAssignedValue();
>       Preconditions.checkState(value != null);
> 
>       inlineValue(v, reference, value.detachFromParent());
>       if (declaration != init) {
>         Node expressRoot = init.getGrandparent();
>         Preconditions.checkState(expressRoot.getType() == Token.EXPR_RESULT);
>         NodeUtil.removeChild(expressRoot.getParent(), expressRoot);
>       }
316c305
<     private void inlineWellDefinedVariable(Var v,
---
>     private void inlineWellDefinedVariable(Var v, Node value,
319d307
< 
321,322c309
<         inlineValue(v, refSet.get(i),
<             decl.getNameNode().getFirstChild().cloneTree());
---
>         inlineValue(v, refSet.get(i), value.cloneTree());
330c317,318
<     private void inlineDeclaredConstant(Var v, List<Reference> refSet) {
---
>     private void inlineDeclaredConstant(Var v, Node value,
>         List<Reference> refSet) {
338c326
<           inlineValue(v, r, v.getInitialValue().cloneTree());
---
>           inlineValue(v, r, value.cloneTree());
372c360,366
<       ref.getParent().replaceChild(ref.getNameNode(), value);
---
>       Node parent = ref.getParent();
>       if (ref.isSimpleAssignmentToName()) {
>         
>         ref.getGrandparent().replaceChild(parent, value);
>       } else {
>         ref.getParent().replaceChild(ref.getNameNode(), value);
>       }
382c376
<         List<Reference> refs) {
---
>         ReferenceCollection refInfo) {
386a381,397
>       if (!refInfo.isAssignedOnce()) {
>         return false;
>       }
> 
>       Reference init = refInfo.getInitializingReferenceForConstants();
>       if (init == null) {
>         return false;
>       }
> 
>       Node value = init.getAssignedValue();
>       if (value == null) {
>         
>         
>         
>         return false;
>       }
> 
388,389c399,405
<       return var.getInitialValue().getType() != Token.STRING ||
<           isStringWorthInlining(var, refs);
---
>       if (!NodeUtil.isImmutableValue(value)) {
>         return false;
>       }
> 
>       
>       return value.getType() != Token.STRING ||
>           isStringWorthInlining(var, refInfo.references);
424,425c440,454
<     private boolean canInline(Reference declaration, Reference reference) {
<       if (!isValidDeclaration(declaration) || !isValidReference(reference)) {
---
>     private boolean canInline(
>         Reference declaration,
>         Reference initialization,
>         Reference reference) {
>       if (!isValidDeclaration(declaration)
>           || !isValidInitialization(initialization)
>           || !isValidReference(reference)) {
>         return false;
>       }
> 
>       
>       
>       
>       if (declaration != initialization &&
>           initialization.getGrandparent().getType() != Token.EXPR_RESULT) {
431c460,461
<       if (declaration.getBasicBlock() != reference.getBasicBlock()) {
---
>       if (declaration.getBasicBlock() != initialization.getBasicBlock()
>           || declaration.getBasicBlock() != reference.getBasicBlock()) {
441,442c471,478
<       if (declaration.getNameNode().getFirstChild().getType() == Token.GETPROP
<           && reference.getParent().getType() == Token.CALL) {
---
>       
>       
>       
>       Node value = initialization.getAssignedValue();
>       Preconditions.checkState(value != null);
>       if (value.getType() == Token.GETPROP
>           && reference.getParent().getType() == Token.CALL
>           && reference.getParent().getFirstChild() == reference.getNameNode()) {
446,447c482,483
<       return canMoveAggressively(declaration) ||
<           canMoveModerately(declaration, reference);
---
>       return canMoveAggressively(value) ||
>           canMoveModerately(initialization, reference);
453c489
<     private boolean canMoveAggressively(Reference declaration) {
---
>     private boolean canMoveAggressively(Node value) {
456d491
<       Node value = declaration.getNameNode().getFirstChild();
466c501,502
<     private boolean canMoveModerately(Reference declaration,
---
>     private boolean canMoveModerately(
>         Reference initialization,
470,473c506,522
<       Iterator<Node> it = new NodeIterators.LocalVarMotion(
<           declaration.getNameNode(),
<           declaration.getParent(),
<           declaration.getGrandparent());
---
>       Iterator<Node> it;
>       if (initialization.getParent().getType() == Token.VAR) {
>         it = NodeIterators.LocalVarMotion.forVar(
>             initialization.getNameNode(),     
>             initialization.getParent(),       
>             initialization.getGrandparent()); 
>       } else if (initialization.getParent().getType() == Token.ASSIGN) {
>         Preconditions.checkState(
>             initialization.getGrandparent().getType() == Token.EXPR_RESULT);
>         it = NodeIterators.LocalVarMotion.forAssign(
>             initialization.getNameNode(),     
>             initialization.getParent(),       
>             initialization.getGrandparent(),  
>             initialization.getGrandparent().getParent()); 
>       } else {
>         throw new IllegalStateException("Unexpected initialiation parent");
>       }
490,491c539,558
<       return declaration.isDeclaration() &&
<           declaration.getNameNode().getFirstChild() != null;
---
>       return declaration.getParent().getType() == Token.VAR
>           && declaration.getGrandparent().getType() != Token.FOR;
>     }
> 
>     
> 
> 
>     private boolean isValidInitialization(Reference initialization) {
>       if (initialization == null) {
>         return false;
>       } else if (initialization.isDeclaration()) {
>         
>         return initialization.getNameNode().getFirstChild() != null;
>       } else {
>         Node parent = initialization.getParent();
>         Preconditions.checkState(
>             parent.getType() == Token.ASSIGN
>             && parent.getFirstChild() == initialization.getNameNode());
>         return true;
>       }
509c576,578
<       if (!isValidDeclaration(refSet.get(0))) {
---
>       int startingReadRef = 1;
>       Reference refDecl = refSet.get(0);
>       if (!isValidDeclaration(refDecl)) {
513c582,592
<       for (int i = 1; i < refSet.size(); i++) {
---
>       Reference refInit = refInfo.getInitializingReference();
>       if (!isValidInitialization(refInit)) {
>         return false;
>       }
> 
>       if (refDecl != refInit) {
>         Preconditions.checkState(refInit == refSet.get(1));
>         startingReadRef = 2;
>       }
> 
>       for (int i = startingReadRef; i < refSet.size(); i++) {
524c603,604
<       Node value = refSet.get(0).getNameNode().getFirstChild();
---
>       Node value = refInit.getAssignedValue();
>       Preconditions.checkNotNull(value);
