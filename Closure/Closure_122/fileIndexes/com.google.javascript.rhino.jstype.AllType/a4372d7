






































package com.google.javascript.rhino.jstype;

import static com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;

import com.google.javascript.rhino.ErrorReporter;




public final class AllType extends JSType {
  private static final long serialVersionUID = 1L;

  AllType(JSTypeRegistry registry) {
    super(registry);
  }

  @Override
  public boolean isAllType() {
    return true;
  }

  @Override
  public boolean matchesStringContext() {
    
    return true;
  }

  @Override
  public boolean matchesObjectContext() {
    
    return true;
  }

  @Override
  public boolean canBeCalled() {
    return false;
  }

  @Override
  public TernaryValue testForEquality(JSType that) {
    return UNKNOWN;
  }

  @Override
  String toStringHelper(boolean forAnnotations) {
    return "*";
  }

  @Override
  public String getDisplayName() {
    return "<Any Type>";
  }

  @Override
  public boolean hasDisplayName() {
    return true;
  }

  @Override
  public <T> T visit(Visitor<T> visitor) {
    return visitor.caseAllType();
  }

  @Override <T> T visit(RelationshipVisitor<T> visitor, JSType that) {
    return visitor.caseAllType(that);
  }

  @Override
  public BooleanLiteralSet getPossibleToBooleanOutcomes() {
    return BooleanLiteralSet.BOTH;
  }

  @Override
  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
    return this;
  }
}
