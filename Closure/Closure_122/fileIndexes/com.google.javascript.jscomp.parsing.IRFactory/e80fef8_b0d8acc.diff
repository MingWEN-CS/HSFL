21a22,25
> import com.google.common.collect.HashMultimap;
> import com.google.common.collect.LinkedHashMultimap;
> import com.google.common.collect.Lists;
> import com.google.common.collect.Multimap;
72a77,79
> import java.util.Collection;
> import java.util.Iterator;
> import java.util.List;
81,85d87
<   
< 
< 
< 
<   private static int TMP_JSDOC_PROP = Node.LAST_PROP + 1;
96a99,116
>   
>   
>   
>   
>   
>   
>   
>   
>   
>   
>   
>   
>   
>   
>   
>   private final Multimap<String, NodeWithJsDoc> nodesWithJsDoc =
>       LinkedHashMultimap.create();
> 
127,135c147,158
<         if (comment.getCommentType() == JSDOC &&
<             (comment.getValue().contains("@fileoverview") ||
<              comment.getValue().contains("@preserve") ||
<              comment.getValue().contains("@license"))) {
<           JSDocInfo info = irFactory.parseJSDocInfo(comment.getValue(),
<               comment.getLineno(), comment.getAbsolutePosition(),
<               fileLevelJsDocBuilder, fileOverviewInfo);
<           if (info != null && fileOverviewInfo == null) {
<             fileOverviewInfo = info;
---
>         if (comment.getCommentType() == JSDOC) {
>           JsDocInfoParser jsDocParser =
>               irFactory.createJsDocInfoParser(comment.getValue(),
>                   comment.getLineno(), comment.getAbsolutePosition(),
>                   fileLevelJsDocBuilder, fileOverviewInfo);
>           if (jsDocParser.getFileOverviewJSDocInfo() != fileOverviewInfo) {
>             fileOverviewInfo = jsDocParser.getFileOverviewJSDocInfo();
>           } else {
>             JSDocInfo info = jsDocParser.retrieveAndResetParsedJSDocInfo();
>             if (info != null) {
>               irFactory.attachJsDoc(comment, info);
>             }
150,153d172
< 
<       Comment[] comments = new Comment[node.getComments().size()];
<       comments = node.getComments().toArray(comments);
<       irFactory.parseAllJsDocInfo(irNode, comments, 0);
158a178,184
>     String jsDoc = node.getJsDoc();
>     NodeWithJsDoc nodeWithJsDoc = null;
>     if (jsDoc != null) {
>       nodeWithJsDoc = new NodeWithJsDoc();
>       nodesWithJsDoc.put(jsDoc, nodeWithJsDoc);
>     }
> 
159a186,189
>     if (nodeWithJsDoc != null) {
>       nodeWithJsDoc.node = irNode;
>     }
> 
176,178d205
<     if (node.getJsDoc() != null) {
<       irNode.putProp(TMP_JSDOC_PROP, node.getJsDoc());
<     }
193,197d219
<   private int parseAllJsDocInfo(Node node, Comment[] comments, int ci) {
<     if (ci >= comments.length) {
<       
<       return ci;
<     }
199,201d220
<     
<     if (node.getProp(TMP_JSDOC_PROP) != null) {
<       String jsDoc = (String) node.getProp(TMP_JSDOC_PROP);
203,222d221
<       
<       while (comments[ci].getCommentType() != JSDOC ||
<           !comments[ci].getValue().equals(jsDoc)) {
<         ci++;
<         Preconditions.checkState(ci < comments.length);
<       }
< 
<       JSDocInfo info = parseJSDocInfo(jsDoc, comments[ci].getLineno(),
<           comments[ci].getAbsolutePosition());
<       node.setJSDocInfo(info);
<       if (info != null && info.hasEnumParameterType()) {
<         if (node.getType() == Token.NAME) {
<           registry.identifyEnumName(node.getString());
<         } else if (node.getType() == Token.VAR &&
<             node.getChildCount() == 1) {
<           registry.identifyEnumName(node.getFirstChild().getString());
<         } else if (node.getType() == Token.ASSIGN) {
<           registry.identifyEnumName(node.getFirstChild().getQualifiedName());
<         }
<       }
224,259c223,224
<       ci++;
<       node.removeProp(TMP_JSDOC_PROP);
<     }
< 
<     
<     for (Node child : node.children()) {
<       ci = parseAllJsDocInfo(child, comments, ci);
<     }
< 
<     return ci;
<   }
< 
<   private JSDocInfo parseJSDocInfo(String comment, int lineno, int position) {
<     return parseJSDocInfo(comment, lineno, position, null, null);
<   }
< 
<   
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<   private JSDocInfo parseJSDocInfo(String comment, int lineno, int position,
---
>   private JsDocInfoParser createJsDocInfoParser(
>       String comment, int lineno, int position,
275,278c240,265
<     if (fileLevelJsDocBuilder != null) {
<       return jsdocParser.getFileOverviewJSDocInfo();
<     } else {
<       return jsdocParser.retrieveAndResetParsedJSDocInfo();
---
>     return jsdocParser;
>   }
> 
>   
>   private void attachJsDoc(Comment comment, JSDocInfo info) {
>     Collection<NodeWithJsDoc> candidates =
>         nodesWithJsDoc.get(comment.getValue());
>     if (candidates.isEmpty()) {
>       return;
>     }
> 
>     Iterator<NodeWithJsDoc> candidateIter = candidates.iterator();
>     Node node = candidateIter.next().node;
>     candidateIter.remove();
>     node.setJSDocInfo(info);
>     if (info.hasEnumParameterType()) {
>       if (node.getType() == Token.NAME) {
>         registry.identifyEnumName(node.getString());
>       } else if (node.getType() == Token.VAR &&
>             node.getChildCount() == 1) {
>         registry.identifyEnumName(
>             node.getFirstChild().getString());
>       } else if (node.getType() == Token.ASSIGN) {
>         registry.identifyEnumName(
>             node.getFirstChild().getQualifiedName());
>       }
1163a1151,1158
>   }
> 
>   
> 
> 
> 
>   private final class NodeWithJsDoc {
>     private Node node = null;
