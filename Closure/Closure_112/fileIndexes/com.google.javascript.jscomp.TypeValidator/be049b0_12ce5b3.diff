366,380c366,374
<       if (bothIntrinsics(rightType, leftType)) {
<         
<         
<         registerMismatch(rightType, leftType, null);
<       } else {
<         
<         
<         
<         JSType ownerType = getJSType(owner);
<         if (ownerType.isFunctionPrototypeType()) {
<           FunctionType ownerFn = ownerType.toObjectType().getOwnerFunction();
<           if (ownerFn.isInterface() &&
<               rightType.isFunctionType() && leftType.isFunctionType()) {
<             return true;
<           }
---
>       
>       
>       
>       JSType ownerType = getJSType(owner);
>       if (ownerType.isFunctionPrototypeType()) {
>         FunctionType ownerFn = ownerType.toObjectType().getOwnerFunction();
>         if (ownerFn.isInterface() &&
>             rightType.isFunctionType() && leftType.isFunctionType()) {
>           return true;
382,386d375
< 
<         mismatch(t, n,
<             "assignment to property " + propName + " of " +
<             getReadableJSTypeName(owner, true),
<             rightType, leftType);
387a377,381
> 
>       mismatch(t, n,
>           "assignment to property " + propName + " of " +
>           getReadableJSTypeName(owner, true),
>           rightType, leftType);
407,413c401
<       if (bothIntrinsics(rightType, leftType)) {
<         
<         
<         registerMismatch(rightType, leftType, null);
<       } else {
<         mismatch(t, n, msg, rightType, leftType);
<       }
---
>       mismatch(t, n, msg, rightType, leftType);
419,423d406
<   private boolean bothIntrinsics(JSType rightType, JSType leftType) {
<     return (leftType.isConstructor() || leftType.isEnumType()) &&
<         (rightType.isConstructor() || rightType.isEnumType());
<   }
< 
696c679
<         fnTypeA.getReturnType(), fnTypeB.getReturnType(), error);
---
>           fnTypeA.getReturnType(), fnTypeB.getReturnType(), error);
