















package com.google.javascript.jscomp;

import com.google.common.base.Preconditions;
import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.Token;
import com.google.javascript.rhino.jstype.EnumType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.ObjectType;

import javax.annotation.Nullable;
































class InferJSDocInfo extends AbstractPostOrderCallback
    implements HotSwapCompilerPass {

  private final AbstractCompiler compiler;
  @SuppressWarnings("unused")
  private boolean inExterns;

  InferJSDocInfo(AbstractCompiler compiler) {
    this.compiler = compiler;
  }

  @Override
  public void process(Node externs, Node root) {
    if (externs != null) {
      inExterns = true;
      NodeTraversal.traverse(compiler, externs, this);
    }
    if (root != null) {
      inExterns = false;
      NodeTraversal.traverse(compiler, root, this);
    }
  }

  @Override
  public void hotSwapScript(Node root, Node originalRoot) {
    Preconditions.checkNotNull(root);
    Preconditions.checkState(root.getType() == Token.SCRIPT);
    inExterns = false;
    NodeTraversal.traverse(compiler, root, this);
  }

  @Override
  public void visit(NodeTraversal t, Node n, Node parent) {
    JSDocInfo docInfo;

    switch (n.getType()) {
      
      case Token.NAME:
        if (parent == null) {
          return;
        }

        
        if (parent.getType() != Token.VAR &&
            !NodeUtil.isFunctionDeclaration(parent) &&
            !(parent.getType() == Token.ASSIGN &&
              n == parent.getFirstChild())) {
          return;
        }

        
        
        
        
        
        
        
        
        
        docInfo = n.getJSDocInfo();
        if (docInfo == null &&
            !(parent.getType() == Token.VAR &&
                !parent.hasOneChild())) {
          docInfo = parent.getJSDocInfo();
        }

        
        JSType varType = n.getJSType();
        if (varType == null && parent.getType() == Token.FUNCTION) {
          varType = parent.getJSType();
        }

        
        
        if (varType == null || docInfo == null) {
          return;
        }

        
        
        ObjectType objType = dereferenceToObject(varType);
        if (objType == null || objType.getJSDocInfo() != null) {
          return;
        }

        attachJSDocInfoToNominalTypeOrShape(objType, docInfo, n.getString());
        break;

      case Token.GETPROP:
        
        
        
        
        
        
        
        
        
        
        if (NodeUtil.isExpressionNode(parent) ||
            (parent.getType() == Token.ASSIGN &&
             parent.getFirstChild() == n)) {
          docInfo = n.getJSDocInfo();
          if (docInfo == null) {
            docInfo = parent.getJSDocInfo();
          }
          if (docInfo != null) {
            ObjectType lhsType =
                dereferenceToObject(n.getFirstChild().getJSType());
            if (lhsType != null) {
              
              String propName = n.getLastChild().getString();
              if (lhsType.hasOwnProperty(propName)) {
                lhsType.setPropertyJSDocInfo(propName, docInfo);
              }

              
              ObjectType propType =
                  dereferenceToObject(lhsType.getPropertyType(propName));
              if (propType != null) {
                attachJSDocInfoToNominalTypeOrShape(
                    propType, docInfo, n.getQualifiedName());
              }
            }
          }
        }
        break;
    }
  }

  


  private ObjectType dereferenceToObject(JSType type) {
    return ObjectType.cast(type == null ? null : type.dereference());
  }

  


  private void attachJSDocInfoToNominalTypeOrShape(
      ObjectType objType, JSDocInfo docInfo, @Nullable String qName) {
    if (objType.isConstructor() ||
        objType.isEnumType() ||
        objType.isInterface()) {
      
      if (objType.hasReferenceName() &&
          objType.getReferenceName().equals(qName)) {
        objType.setJSDocInfo(docInfo);

        if (objType.isConstructor() || objType.isInterface()) {
          JSType.toMaybeFunctionType(objType).getInstanceType().setJSDocInfo(
              docInfo);
        } else if (objType instanceof EnumType) {
          ((EnumType) objType).getElementsType().setJSDocInfo(docInfo);
        }
      }
    } else if (!objType.isNativeObjectType() &&
        objType.isFunctionType()) {
      
      objType.setJSDocInfo(docInfo);
    }
  }
}
