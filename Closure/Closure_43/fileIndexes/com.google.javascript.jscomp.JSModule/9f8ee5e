















package com.google.javascript.jscomp;

import com.google.common.base.Preconditions;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.Lists;
import com.google.common.collect.Sets;
import com.google.javascript.jscomp.deps.DependencyInfo;
import com.google.javascript.jscomp.deps.SortedDependencies;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Set;








public class JSModule implements DependencyInfo {
  
  private final String name;

  
  private final List<CompilerInput> inputs = new ArrayList<CompilerInput>();

  
  private final List<JSModule> deps = new ArrayList<JSModule>();

  




  public JSModule(String name) {
    this.name = name;
  }

  
  public String getName() {
    return name;
  }

  @Override
  public List<String> getProvides() {
    return ImmutableList.<String>of(name);
  }

  @Override
  public List<String> getRequires() {
    ImmutableList.Builder<String> builder = ImmutableList.builder();
    for (JSModule m : deps) {
      builder.add(m.getName());
    }
    return builder.build();
  }

  @Override
  public String getPathRelativeToClosureBase() {
    throw new UnsupportedOperationException();
  }

  
  public void add(JSSourceFile file) {
    add(new CompilerInput(file));
  }

  
  public void addFirst(JSSourceFile file) {
    addFirst(new CompilerInput(file));
  }

  
  public void add(CompilerInput input) {
    inputs.add(input);
    input.setModule(this);
  }

  
  public void addFirst(CompilerInput input) {
    inputs.add(0, input);
    input.setModule(this);
  }

  
  public void addAfter(CompilerInput input, CompilerInput other) {
    Preconditions.checkState(inputs.contains(other));
    inputs.add(inputs.indexOf(other), input);
    input.setModule(this);
  }

  
  public void addDependency(JSModule dep) {
    Preconditions.checkState(dep != this);
    deps.add(dep);
  }

  
  public void removeAll() {
    for (CompilerInput input : inputs) {
      input.setModule(null);
    }
    inputs.clear();
  }

  




  public List<JSModule> getDependencies() {
    return deps;
  }

  



  public Set<JSModule> getAllDependencies() {
    Set<JSModule> allDeps = Sets.newHashSet(deps);
    List<JSModule> workList = Lists.newArrayList(deps);
    while (workList.size() > 0) {
      JSModule module = workList.remove(workList.size() - 1);
      for (JSModule dep : module.getDependencies()) {
        if (allDeps.add(dep)) {
          workList.add(dep);
        }
      }
    }
    return allDeps;
  }

  
  public Set<JSModule> getThisAndAllDependencies() {
    Set<JSModule> deps = getAllDependencies();
    deps.add(this);
    return deps;
  }

  




  public List<CompilerInput> getInputs() {
    return inputs;
  }

  
  public CompilerInput getByName(String name) {
    for (CompilerInput input : inputs) {
      if (name.equals(input.getName())) {
        return input;
      }
    }
    return null;
  }

  


  public boolean removeByName(String name) {
    boolean found = false;
    Iterator<CompilerInput> iter = inputs.iterator();
    while (iter.hasNext()) {
      CompilerInput file = iter.next();
      if (name.equals(file.getName())) {
        iter.remove();
        file.setModule(null);
        found = true;
      }
    }
    return found;
  }

  
  @Override
  public String toString() {
    return name;
  }

  



  public void clearAsts() {
    for (CompilerInput input : inputs) {
      input.clearAst();
    }
  }

  


  public void sortInputsByDeps(Compiler compiler) {
    
    
    for (CompilerInput input : inputs) {
      input.setCompiler(compiler);
    }

    
    List<CompilerInput> sortedList =
        (new SortedDependencies<CompilerInput>(
            Collections.<CompilerInput>unmodifiableList(inputs)))
        .getSortedList();
    inputs.clear();
    inputs.addAll(sortedList);
  }

  







  public static JSModule[] sortJsModules(Collection<JSModule> modules) {
    
    List<JSModule> sortedList = (new SortedDependencies<JSModule>(
            Lists.newArrayList(modules))).getSortedList();
    return sortedList.toArray(new JSModule[sortedList.size()]);
  }
}
