















package com.google.javascript.jscomp;

import com.google.common.base.Preconditions;
import com.google.common.collect.Lists;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.Token;

import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Stack;








class NodeIterators {

  private NodeIterators() {} 

  


  static class FunctionlessLocalScope implements Iterator<Node> {
    private final Stack<Node> ancestors = new Stack<Node>();

    




    FunctionlessLocalScope(Node ... ancestors) {
      Preconditions.checkArgument(ancestors.length > 0);

      for (Node n : ancestors) {
        if (n.getType() == Token.FUNCTION) {
          break;
        }

        this.ancestors.add(0, n);
      }
    }

    @Override
    public boolean hasNext() {
      
      return !(ancestors.size() == 1 && ancestors.peek().getNext() == null);
    }

    @Override
    public Node next() {
      Node current = ancestors.pop();
      if (current.getNext() == null) {
        current = ancestors.peek();

        
        if (current.getType() == Token.FUNCTION) {
          return next();
        }
      } else {
        current = current.getNext();
        ancestors.push(current);

        
        if (current.getType() == Token.FUNCTION) {
          return next();
        }

        while (current.hasChildren()) {
          current = current.getFirstChild();
          ancestors.push(current);

          
          if (current.getType() == Token.FUNCTION) {
            return next();
          }
        }
      }

      return current;
    }

    @Override
    public void remove() {
      throw new UnsupportedOperationException("Not implemented");
    }

    


    protected Node current() {
      return ancestors.peek();
    }

    


    protected Node currentParent() {
      return ancestors.size() >= 2 ?
          ancestors.get(ancestors.size() - 2) : null;
    }

    



    List<Node> currentAncestors() {
      List<Node> list = Lists.newArrayList(ancestors);
      Collections.reverse(list);
      return list;
    }
  }

  



















  static class LocalVarMotion implements Iterator<Node> {
    private final boolean valueHasSideEffects;
    private final FunctionlessLocalScope iterator;
    private final String varName;
    private Node lookAhead;

    



    static LocalVarMotion forVar(
        Node name, Node var, Node block) {
      Preconditions.checkArgument(var.getType() == Token.VAR);
      Preconditions.checkArgument(NodeUtil.isStatement(var));
      
      
      
      
      return new LocalVarMotion(
          name, new FunctionlessLocalScope(name, var, block));
    }

    



    static LocalVarMotion forAssign(
        Node name, Node assign, Node expr, Node block) {
      Preconditions.checkArgument(assign.getType() == Token.ASSIGN);
      Preconditions.checkArgument(expr.getType() == Token.EXPR_RESULT);
      
      
      return new LocalVarMotion(
          name, new FunctionlessLocalScope(assign, expr, block));
    }

    



    private LocalVarMotion(Node nameNode, FunctionlessLocalScope iterator) {
      Preconditions.checkArgument(nameNode.getType() == Token.NAME);
      Node valueNode = NodeUtil.getAssignedValue(nameNode);
      this.varName = nameNode.getString();
      this.valueHasSideEffects = valueNode != null &&
          NodeUtil.mayHaveSideEffects(valueNode);
      this.iterator = iterator;
      advanceLookAhead(true);
    }

    @Override
    public boolean hasNext() {
      return lookAhead != null;
    }

    @Override
    public Node next() {
      Node next = lookAhead;
      advanceLookAhead(false);
      return next;
    }

    @Override
    public void remove() {
      throw new UnsupportedOperationException("Not implemented");
    }

    private void advanceLookAhead(boolean atStart) {
      if (!atStart) {
        if (lookAhead == null) {
          return;
        }

        
        
        Node curNode = iterator.current();
        if (curNode.getType() == Token.NAME &&
            varName.equals(curNode.getString())) {
          lookAhead = null;
          return;
        }
      }

      if (!iterator.hasNext()) {
        lookAhead = null;
        return;
      }

      Node nextNode = iterator.next();
      Node nextParent = iterator.currentParent();
      int type = nextNode.getType();

      if (valueHasSideEffects) {
        
        

        if (type == Token.NAME && !varName.equals(nextNode.getString())) {
          boolean blocked = false;
          if (nextParent == null) {
            blocked = true;
          } else {
            boolean assignsName = (nextParent.getType() == Token.ASSIGN
                    && nextNode == nextParent.getFirstChild());
            boolean isVarDeclaration = (nextParent.getType() == Token.VAR);

            if (!assignsName && !isVarDeclaration) {
              blocked = true;
            }
          }

          if (blocked) {
            lookAhead = null;
            return;
          }
        }
      }

      
      
      
      
      
      
      if (NodeUtil.nodeTypeMayHaveSideEffects(nextNode) && type != Token.NAME
          || type == Token.NAME && nextParent.getType() == Token.CATCH) {
        lookAhead = null;
        return;
      }

      lookAhead = nextNode;
    }
  }
}
