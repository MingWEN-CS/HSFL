239c239
<     return (NodeUtil.isNullOrUndefined(n) || n.getType() == Token.EMPTY)
---
>     return (NodeUtil.isNullOrUndefined(n) || n.isEmpty())
302c302
<         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME
---
>         if (n.getChildCount() == 1 && n.getFirstChild().isName()
586,587c586
<           if (child.getType() != Token.EMPTY
<               && !isLiteralValue(child, includeFunctions)) {
---
>           if ((!child.isEmpty()) && !isLiteralValue(child, includeFunctions)) {
681c680
<     if (block.getType() != Token.BLOCK) {
---
>     if (!block.isBlock()) {
686c685
<       if (n.getType() != Token.EMPTY) {
---
>       if (!n.isEmpty()) {
939c938
<     if (callNode.getType() != Token.NEW) {
---
>     if (!callNode.isNew()) {
949c948
<     if (nameNode.getType() == Token.NAME &&
---
>     if (nameNode.isName() &&
988c987
<     if (callNode.getType() != Token.CALL) {
---
>     if (!callNode.isCall()) {
1000c999
<     if (nameNode.getType() == Token.NAME) {
---
>     if (nameNode.isName()) {
1005c1004
<     } else if (nameNode.getType() == Token.GETPROP) {
---
>     } else if (nameNode.isGetProp()) {
1020c1019
<       if (nameNode.getFirstChild().getType() == Token.NAME) {
---
>       if (nameNode.getFirstChild().isName()) {
1027c1026
<         if (nameNode.getFirstChild().getType() == Token.REGEXP
---
>         if (nameNode.getFirstChild().isRegExp()
1030c1029
<         } else if (nameNode.getFirstChild().getType() == Token.STRING
---
>         } else if (nameNode.getFirstChild().isString()
1035,1036c1034
<               (param.getType() == Token.STRING
<                   || param.getType() == Token.REGEXP))
---
>               (param.isString() || param.isRegExp()))
1049c1047
<     Preconditions.checkState(n.getType() == Token.CALL);
---
>     Preconditions.checkState(n.isCall());
1057c1055
<     Preconditions.checkState(n.getType() == Token.NEW);
---
>     Preconditions.checkState(n.isNew());
1364c1362
<     return n.getType() == Token.NULL;
---
>     return n.isNull();
1488c1486
<     return n.getType() == Token.EXPR_RESULT;
---
>     return n.isExprResult();
1511,1512c1509
<     return n.getType() == Token.GETPROP
<         || n.getType() == Token.GETELEM;
---
>     return n.isGetProp() || n.isGetElem();
1519c1516
<     return n.getType() == Token.GETPROP;
---
>     return n.isGetProp();
1526c1523
<     return n.getType() == Token.NAME;
---
>     return n.isName();
1533c1530
<     return n.getType() == Token.NEW;
---
>     return n.isNew();
1540c1537
<     return n.getType() == Token.VAR;
---
>     return n.isVar();
1552c1549
<     return n.getType() == Token.NAME && n.getParent().getType() == Token.VAR;
---
>     return n.isName() && n.getParent().isVar();
1575c1572
<     return n.getType() == Token.STRING;
---
>     return n.isString();
1586,1587c1583,1584
<     return n.getType() == Token.EXPR_RESULT
<         && n.getFirstChild().getType() == Token.ASSIGN;
---
>     return n.isExprResult()
>         && n.getFirstChild().isAssign();
1594c1591
<     return n.getType() == Token.ASSIGN;
---
>     return n.isAssign();
1605,1606c1602,1603
<     return n.getType() == Token.EXPR_RESULT
<         && n.getFirstChild().getType() == Token.CALL;
---
>     return n.isExprResult()
>         && n.getFirstChild().isCall();
1613c1610
<     return n.getType() == Token.FOR
---
>     return n.isFor()
1747c1744
<     return n.getType() == Token.SCRIPT || n.getType() == Token.BLOCK;
---
>     return n.isScript() || n.isBlock();
1774c1771
<     return n.getType() == Token.CASE || n.getType() == Token.DEFAULT;
---
>     return n.isCase() || n.isDefault();
1787c1784
<     return (n != null && n.getType() == Token.LABEL_NAME);
---
>     return (n != null && n.isLabelName());
1792c1789
<     return parent.getType() == Token.TRY && parent.getChildCount() == 3
---
>     return parent.isTry() && parent.getChildCount() == 3
1799c1796
<     return parent.getType() == Token.TRY
---
>     return parent.isTry()
1813c1810
<     } else if (node.getType() == Token.CATCH) {
---
>     } else if (node.isCatch()) {
1824c1821
<     } else if (node.getType() == Token.BLOCK) {
---
>     } else if (node.isBlock()) {
1832c1829
<     } else if (parent.getType() == Token.VAR) {
---
>     } else if (parent.isVar()) {
1841c1838
<     } else if (parent.getType() == Token.LABEL
---
>     } else if (parent.isLabel()
1847c1844
<     } else if (parent.getType() == Token.FOR
---
>     } else if (parent.isFor()
1863c1860
<     Preconditions.checkState(tryNode.getType() == Token.TRY);
---
>     Preconditions.checkState(tryNode.isTry());
1875c1872
<     Preconditions.checkState(block.getType() == Token.BLOCK);
---
>     Preconditions.checkState(block.isBlock());
1897c1894
<     return n.getType() == Token.CALL;
---
>     return n.isCall();
1912c1909
<     return n.getType() == Token.FUNCTION;
---
>     return n.isFunction();
1927c1924
<     return node.getType() == Token.THIS;
---
>     return node.isThis();
1935c1932
<     return node.getType() == Token.ARRAYLIT;
---
>     return node.isArrayLit();
1951c1948
<     return n.getType() == Token.FUNCTION && isStatement(n);
---
>     return n.isFunction() && isStatement(n);
1961,1962c1958,1959
<         && (n.getParent().getType() == Token.SCRIPT
<             || n.getParent().getParent().getType() == Token.FUNCTION);
---
>         && (n.getParent().isScript()
>             || n.getParent().getParent().isFunction());
1989c1986
<     return n.getType() == Token.FUNCTION && !isStatement(n);
---
>     return n.isFunction() && !isStatement(n);
2020c2017
<     if (callNode.getType() == Token.CALL) {
---
>     if (callNode.isCall()) {
2024c2021
<         if (last != null && last.getType() == Token.STRING) {
---
>         if (last != null && last.isString()) {
2072c2069
<       if (callNode.getFirstChild().getFirstChild().getType() == Token.NAME) {
---
>       if (callNode.getFirstChild().getFirstChild().isName()) {
2090,2091c2087,2088
<     return (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) ||
<            parent.getType() == Token.VAR;
---
>     return (parent.isAssign() && parent.getFirstChild() == n) ||
>            parent.isVar();
2107,2120c2104,2115
<   static boolean isLValue(Node node) {
<     int nType = node.getType();
<     Preconditions.checkArgument(nType == Token.NAME || nType == Token.GETPROP ||
<         nType == Token.GETELEM);
<     Node parent = node.getParent();
<     return (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == node)
<         || (NodeUtil.isForIn(parent) && parent.getFirstChild() == node)
<         || NodeUtil.isVar(parent)
<         || (parent.getType() == Token.FUNCTION &&
<             parent.getFirstChild() == node)
<         || parent.getType() == Token.DEC
<         || parent.getType() == Token.INC
<         || parent.getType() == Token.LP
<         || parent.getType() == Token.CATCH;
---
>   static boolean isLValue(Node n) {
>     Preconditions.checkArgument(n.isName() || n.isGetProp() ||
>         n.isGetElem());
>     Node parent = n.getParent();
>     return (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n)
>         || (NodeUtil.isForIn(parent) && parent.getFirstChild() == n)
>         || parent.isVar()
>         || (parent.isFunction() && parent.getFirstChild() == n)
>         || parent.isDec()
>         || parent.isInc()
>         || parent.isLP()
>         || parent.isCatch();
2133c2128
<         return parent.getType() == Token.OBJECTLIT;
---
>         return parent.isObjectLit();
2345,2346c2340,2341
<     Preconditions.checkState(addingRoot.getType() == Token.BLOCK ||
<         addingRoot.getType() == Token.SCRIPT);
---
>     Preconditions.checkState(addingRoot.isBlock() ||
>         addingRoot.isScript());
2348c2343
<         addingRoot.getFirstChild().getType() != Token.SCRIPT);
---
>         !addingRoot.getFirstChild().isScript());
2427,2428c2422
<       int type = current.getType();
<       if (type == Token.NAME || type == Token.THIS) {
---
>       if (current.isName() || current.isThis()) {
2431c2425
<       Preconditions.checkState(type == Token.GETPROP);
---
>       Preconditions.checkState(current.isGetProp());
2571c2565
<       if (n.getType() == Token.NAME) {
---
>       if (n.isName()) {
2573c2567
<         if (parent != null && parent.getType() == Token.VAR) {
---
>         if (parent != null && parent.isVar()) {
2680,2681c2674
<       return n.getType() == Token.NAME
<           && n.getString().equals(name);
---
>       return n.isName() && n.getString().equals(name);
2708c2701
<       return isFunctionDeclaration(n) || n.getType() == Token.VAR;
---
>       return isFunctionDeclaration(n) || n.isVar();
2731c2724
<       return n.getType() == Token.BLOCK
---
>       return n.isBlock()
2858c2851
<     Preconditions.checkArgument(n.getType() == Token.TRY);
---
>     Preconditions.checkArgument(n.isTry());
2867c2860
<     Preconditions.checkArgument(n.getType() == Token.TRY);
---
>     Preconditions.checkArgument(n.isTry());
2876,2877c2869,2870
<     Preconditions.checkArgument(n.getType() == Token.BLOCK);
<     return n.hasChildren() && n.getFirstChild().getType() == Token.CATCH;
---
>     Preconditions.checkArgument(n.isBlock());
>     return n.hasChildren() && n.getFirstChild().isCatch();
2886c2879
<     Preconditions.checkArgument(fnNode.getType() == Token.FUNCTION);
---
>     Preconditions.checkArgument(fnNode.isFunction());
2915c2908
<     if (parent.getType() == Token.GETPROP &&
---
>     if (parent.isGetProp() &&
2929c2922
<     Preconditions.checkState(n.getType() == Token.FUNCTION);
---
>     Preconditions.checkState(n.isFunction());
2934c2927
<       if (parent.getType() == Token.ASSIGN) {
---
>       if (parent.isAssign()) {
2937c2930
<       } else if (parent.getType() == Token.NAME) {
---
>       } else if (parent.isName()) {
2976c2969
<     while (n != null && n.getType() != Token.SCRIPT) {
---
>     while (n != null && !n.isScript()) {
2980c2973
<     return (n != null && n.getType() == Token.SCRIPT) ? n.getInputId() : null;
---
>     return (n != null && n.isScript()) ? n.getInputId() : null;
3127,3128c3120
<       int parentType = parent.getType();
<       if (parentType == Token.NAME) {
---
>       if (parent.isName()) {
3130c3122
<       } else if (parentType == Token.ASSIGN) {
---
>       } else if (parent.isAssign()) {
3134c3126
<       } else if (parentType == Token.FUNCTION) {
---
>       } else if (parent.isFunction()) {
3136c3128
<       } else if (parentType == Token.VAR && parent.hasOneChild()) {
---
>       } else if (parent.isVar() && parent.hasOneChild()) {
3146d3137
<     int parentType = parent.getType();
3150c3141
<     } else if (parentType == Token.NAME) {
---
>     } else if (parent.isName()) {
3152c3143
<     } else if (parentType == Token.ASSIGN) {
---
>     } else if (parent.isAssign()) {
