1,347c1,16
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< package com.google.javascript.jscomp;
< 
< import com.google.common.collect.Lists;
< import com.google.common.flags.DocLevel;
< import com.google.common.flags.Flag;
< import com.google.common.flags.FlagSpec;
< import com.google.common.flags.Flags;
< import com.google.common.io.LimitInputStream;
< import com.google.javascript.jscomp.AbstractCommandLineRunner.CommandLineConfig;
< 
< import java.io.IOException;
< import java.io.InputStream;
< import java.io.PrintStream;
< import java.util.List;
< import java.util.logging.Level;
< import java.util.zip.ZipEntry;
< import java.util.zip.ZipInputStream;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< public class CommandLineRunner extends
<     AbstractCommandLineRunner<Compiler, CompilerOptions> {
< 
<   @FlagSpec(help = "Prints out the parse tree and exits",
<       docLevel = DocLevel.SECRET)
<   static final Flag<Boolean> FLAG_print_tree = Flag.value(false);
< 
<   @FlagSpec(help = "Runs the compile job many times, then prints out the " +
<       "best phase ordering from this run",
<       docLevel = DocLevel.SECRET)
<   static final Flag<Boolean> FLAG_compute_phase_ordering =
<       Flag.value(false);
< 
<   @FlagSpec(help = "Prints a dot file describing the internal abstract syntax"
<       + " tree and exits",
<       docLevel = DocLevel.SECRET)
<   static final Flag<Boolean> FLAG_print_ast = Flag.value(false);
< 
<   @FlagSpec(help = "Prints a dot file describing the passes that will get run"
<       + " and exits",
<       docLevel = DocLevel.SECRET)
<   static final Flag<Boolean> FLAG_print_pass_graph = Flag.value(false);
< 
<   @FlagSpec(help = "Turns on extra sanity checks", altName = "dev_mode",
<       docLevel = DocLevel.SECRET)
<   static final Flag<CompilerOptions.DevMode> FLAG_jscomp_dev_mode =
<       Flag.value(CompilerOptions.DevMode.OFF);
< 
<   
<   @FlagSpec(help = "The logging level (standard java.util.logging.Level"
<       + " values) for Compiler progress. Does not control errors or"
<       + " warnings for the JavaScript code under compilation",
<       docLevel = DocLevel.SECRET)
<   public static final Flag<String> FLAG_logging_level =
<       Flag.value(Level.WARNING.getName());
< 
<   @FlagSpec(help = "The file containing javascript externs. You may specify"
<       + " multiple")
<   public static final Flag<List<String>> FLAG_externs = Flag.stringCollector();
< 
<   @FlagSpec(help = "The javascript filename. You may specify multiple")
<   static final Flag<List<String>> FLAG_js = Flag.stringCollector();
< 
<   @FlagSpec(help = "Primary output filename. If not specified, output is " +
<             "written to stdout")
<   static final Flag<String> FLAG_js_output_file = Flag.value("");
< 
<   @FlagSpec(help = "A javascript module specification. The format is "
<       + "<name>:<num-js-files>[:[<dep>,...][:]]]. Module names must be "
<       + "unique. Each dep is the name of a module that this module "
<       + "depends on. Modules must be listed in dependency order, and js "
<       + "source files must be listed in the corresponding order. Where "
<       + "--module flags occur in relation to --js flags is unimportant")
<   static final Flag<List<String>> FLAG_module = Flag.stringCollector();
< 
<   @FlagSpec(help = "File containing the serialized version of the variable "
<       + "renaming map produced by a previous compilation")
<   static final Flag<String> FLAG_variable_map_input_file =
<       Flag.value("");
< 
<   @FlagSpec(help = "File containing the serialized version of the property "
<       + "renaming map produced by a previous compilation",
<       docLevel = DocLevel.SECRET)
<   static final Flag<String> FLAG_property_map_input_file =
<       Flag.value("");
< 
<   @FlagSpec(help = "File where the serialized version of the variable "
<       + "renaming map produced should be saved",
<       docLevel = DocLevel.SECRET)
<   static final Flag<String> FLAG_variable_map_output_file =
<       Flag.value("");
< 
<   @FlagSpec(help = "If true, variable renaming and property renaming map "
<       + "files will be produced as {binary name}_vars_map.out and "
<       + "{binary name}_props_map.out. Note that this flag cannot be used "
<       + "in conjunction with either variable_map_output_file or "
<       + "property_map_output_file",
<       docLevel = DocLevel.SECRET)
<   static final Flag<Boolean> FLAG_create_name_map_files =
<       Flag.value(false);
< 
<   @FlagSpec(help = "File where the serialized version of the property "
<       + "renaming map produced should be saved")
<   static final Flag<String> FLAG_property_map_output_file =
<       Flag.value("");
< 
<   @FlagSpec(help = "Check source validity but do not enforce Closure style "
<       + "rules and conventions")
<   static final Flag<Boolean> FLAG_third_party = Flag.value(false);
< 
< 
<   @FlagSpec(help = "Controls how detailed the compilation summary is. Values:"
<       + " 0 (never print summary), 1 (print summary only if there are "
<       + "errors or warnings), 2 (print summary if type checking is on, "
<       + "see --check_types), 3 (always print summary). The default level "
<       + "is 1")
<   static final Flag<Integer> FLAG_summary_detail_level = Flag.value(1);
< 
<   @FlagSpec(help = "Interpolate output into this string at the place denoted"
<       + " by the marker token %output%. See --output_wrapper_marker")
<   static final Flag<String> FLAG_output_wrapper = Flag.value("");
< 
<   @FlagSpec(help = "Use this token as output marker in the value of"
<       + " --output_wrapper")
<   static final Flag<String> FLAG_output_wrapper_marker =
<       Flag.value("%output%");
< 
<   @FlagSpec(help = "An output wrapper for a javascript module (optional). "
<       + "The format is <name>:<wrapper>. The module name must correspond "
<       + "with a module specified using --module. The wrapper must "
<       + "contain %s as the code placeholder")
<   static final Flag<List<String>> FLAG_module_wrapper =
<       Flag.stringCollector();
< 
<   @FlagSpec(help = "Prefix for filenames of compiled js modules. "
<       + "<module-name>.js will be appended to this prefix. Directories "
<       + "will be created as needed. Use with --module")
<   static final Flag<String> FLAG_module_output_path_prefix =
<       Flag.value("./");
< 
<   @FlagSpec(help = "If specified, a source map file mapping the generated " +
<             "source files back to the original source file will be " +
<             "output to the specified path. The %outname% placeholder will " +
<             "expand to the name of the output file that the source map " +
<             "corresponds to.")
<   static final Flag<String> FLAG_create_source_map =
<       Flag.value("");
< 
<   @FlagSpec(help = "Make the named class of warnings an error. Options:" +
<       DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)
<   static final Flag<List<String>> FLAG_jscomp_error =
<       Flag.stringCollector();
< 
<   @FlagSpec(help = "Make the named class of warnings a normal warning. " +
<                 "Options:" + DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)
<   static final Flag<List<String>> FLAG_jscomp_warning =
<       Flag.stringCollector();
< 
<   @FlagSpec(help = "Turn off the named class of warnings. Options:" +
<       DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)
<   static final Flag<List<String>> FLAG_jscomp_off =
<       Flag.stringCollector();
< 
<   @FlagSpec(altName = "D",
<       help = "Override the value of a variable annotated @define. " +
<       "The format is <name>[=<val>], where <name> is the name of a @define " +
<       "variable and <val> is a boolean, number, or a single-quoted string " +
<       "that contains no single quotes. If [=<val>] is omitted, " +
<       "the variable is marked true")
<   static final Flag<List<String>> FLAG_define = Flag.stringCollector();
< 
<   @FlagSpec(help = "Input charset for all files.")
<   static final Flag<String> FLAG_charset = Flag.value("");
< 
<   @FlagSpec(help = "Specifies the compilation level to use. Options: " +
<             "WHITESPACE_ONLY, SIMPLE_OPTIMIZATIONS, ADVANCED_OPTIMIZATIONS")
<   static final Flag<CompilationLevel> FLAG_compilation_level
<       = Flag.value(CompilationLevel.SIMPLE_OPTIMIZATIONS);
< 
<   @FlagSpec(help = "Specifies the warning level to use. Options: " +
<             "QUIET, DEFAULT, VERBOSE")
<   static final Flag<WarningLevel> FLAG_warning_level
<       = Flag.value(WarningLevel.DEFAULT);
< 
<   @FlagSpec(help = "Specifies whether the default externs should be excluded")
<   static final Flag<Boolean> FLAG_use_only_custom_externs
<       = Flag.value(false);
< 
<   @FlagSpec(help = "Enable debugging options")
<   static final Flag<Boolean> FLAG_debug = Flag.value(false);
< 
<   
< 
< 
<   private static enum FormattingOption {
<     PRETTY_PRINT,
<     PRINT_INPUT_DELIMITER,
<     ;
< 
<     private void applyToOptions(CompilerOptions options) {
<       switch (this) {
<         case PRETTY_PRINT:
<           options.prettyPrint = true;
<           break;
<         case PRINT_INPUT_DELIMITER:
<           options.printInputDelimiter = true;
<           break;
<         default:
<           throw new RuntimeException("Unknown formatting option: " + this);
<       }
<     }
<   }
< 
<   @FlagSpec(help = "Specifies which formatting options, if any, should be "
<       + "applied to the output JS. Options: "
<       + "PRETTY_PRINT, PRINT_INPUT_DELIMITER")
<   static final Flag<List<FormattingOption>> FLAG_formatting
<       = Flag.enumList(FormattingOption.class);
< 
<   @FlagSpec(help = "Processes built-ins from the Closure library, such as "
<       + "goog.require(), goog.provide(), and goog.exportSymbol()")
<   static final Flag<Boolean> FLAG_process_closure_primitives
<       = Flag.value(true);
< 
<   
< 
< 
< 
< 
<   protected CommandLineRunner(String[] args) {
<     super(readConfigFromFlags(args));
<   }
< 
<   protected CommandLineRunner(String[] args, PrintStream out, PrintStream err) {
<     super(readConfigFromFlags(args), out, err);
<   }
< 
<   private static CommandLineConfig readConfigFromFlags(String[] args) {
<     Flags.parse(args);
<     return new CommandLineConfig()
<         .setPrintTree(FLAG_print_tree.get())
<         .setComputePhaseOrdering(FLAG_compute_phase_ordering.get())
<         .setPrintAst(FLAG_print_ast.get())
<         .setPrintPassGraph(FLAG_print_pass_graph.get())
<         .setJscompDevMode(FLAG_jscomp_dev_mode.get())
<         .setLoggingLevel(FLAG_logging_level.get())
<         .setExterns(FLAG_externs.get())
<         .setJs(FLAG_js.get())
<         .setJsOutputFile(FLAG_js_output_file.get())
<         .setModule(FLAG_module.get())
<         .setVariableMapInputFile(FLAG_variable_map_input_file.get())
<         .setPropertyMapInputFile(FLAG_property_map_input_file.get())
<         .setVariableMapOutputFile(FLAG_variable_map_output_file.get())
<         .setCreateNameMapFiles(FLAG_create_name_map_files.get())
<         .setPropertyMapOutputFile(FLAG_property_map_output_file.get())
<         .setThirdParty(FLAG_third_party.get())
<         .setSummaryDetailLevel(FLAG_summary_detail_level.get())
<         .setOutputWrapper(FLAG_output_wrapper.get())
<         .setOutputWrapperMarker(FLAG_output_wrapper_marker.get())
<         .setModuleWrapper(FLAG_module_wrapper.get())
<         .setModuleOutputPathPrefix(FLAG_module_output_path_prefix.get())
<         .setCreateSourceMap(FLAG_create_source_map.get())
<         .setJscompError(FLAG_jscomp_error.get())
<         .setJscompWarning(FLAG_jscomp_warning.get())
<         .setJscompOff(FLAG_jscomp_off.get())
<         .setDefine(FLAG_define.get())
<         .setCharset(FLAG_charset.get());
<   }
< 
<   @Override
<   protected CompilerOptions createOptions() {
<     CompilerOptions options = new CompilerOptions();
<     options.setCodingConvention(new ClosureCodingConvention());
<     CompilationLevel level = FLAG_compilation_level.get();
<     level.setOptionsForCompilationLevel(options);
<     if (FLAG_debug.get()) {
<       level.setDebugOptionsForCompilationLevel(options);
<     }
< 
<     WarningLevel wLevel = FLAG_warning_level.get();
<     wLevel.setOptionsForWarningLevel(options);
<     for (FormattingOption formattingOption : FLAG_formatting.get()) {
<       formattingOption.applyToOptions(options);
<     }
<     if (FLAG_process_closure_primitives.get()) {
<       options.closurePass = true;
<     }
< 
<     initOptionsFromFlags(options);
<     return options;
<   }
< 
<   @Override
<   protected Compiler createCompiler() {
<     return new Compiler(getErrorPrintStream());
<   }
< 
<   @Override
<   protected List<JSSourceFile> createExterns() throws FlagUsageException,
<       IOException {
<     List<JSSourceFile> externs = super.createExterns();
<     if (!FLAG_use_only_custom_externs.get()) {
<       List<JSSourceFile> defaultExterns = getDefaultExterns();
<       defaultExterns.addAll(externs);
<       return defaultExterns;
<     } else {
<       return externs;
---
> <!DOCTYPE HTML PUBLIC "-
> <!--NewPage-->
> <HTML>
> <HEAD>
> <TITLE>
> CommandLineRunner (Compiler)
> </TITLE>
> 
> 
> <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../dev_javadoc.css" TITLE="Style">
> 
> <SCRIPT type="text/javascript">
> function windowTitle()
> {
>     if (location.href.indexOf('is-external=true') == -1) {
>         parent.document.title="CommandLineRunner (Compiler)";
348a18,63
> }
> </SCRIPT>
> <NOSCRIPT>
> </NOSCRIPT>
> 
> </HEAD>
> 
> <BODY BGCOLOR="white" onload="windowTitle();">
> <HR>
> 
> 
> <!-- ========= START OF TOP NAVBAR ======= -->
> <A NAME="navbar_top"><!-- --></A>
> <A HREF="#skip-navbar_top" title="Skip navigation links"></A>
> <TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
> <TR>
> <TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
> <A NAME="navbar_top_firstrow"><!-- --></A>
> <TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
>   <TR ALIGN="center" VALIGN="top">
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
>   <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
>   </TR>
> </TABLE>
> </TD>
> <TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
> </EM>
> </TD>
> </TR>
> 
> <TR>
> <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
> &nbsp;<A HREF="../../../../com/google/javascript/jscomp/CodingConvention.SubclassType.html" title="enum in com.google.javascript.jscomp"><B>PREV CLASS</B></A>&nbsp;
> &nbsp;<A HREF="../../../../com/google/javascript/jscomp/CompilationLevel.html" title="enum in com.google.javascript.jscomp"><B>NEXT CLASS</B></A></FONT></TD>
> <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
>   <A HREF="../../../../index.html?com/google/javascript/jscomp/CommandLineRunner.html" target="_top"><B>FRAMES</B></A>  &nbsp;
> &nbsp;<A HREF="CommandLineRunner.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
> &nbsp;<SCRIPT type="text/javascript">
>   <!--
>   if(window==top) {
>     document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
350d64
< 
352,364c66,582
< 
< 
< 
<   private List<JSSourceFile> getDefaultExterns() throws IOException {
<     InputStream input = CommandLineRunner.class.getResourceAsStream(
<         "/externs.zip");
<     ZipInputStream zip = new ZipInputStream(input);
<     List<JSSourceFile> externs = Lists.newLinkedList();
<     for (ZipEntry entry = null; (entry = zip.getNextEntry()) != null; ) {
<       LimitInputStream entryStream = new LimitInputStream(zip, entry.getSize());
<       externs.add(JSSourceFile.fromInputStream(entry.getName(), entryStream));
<     }
<     return externs;
---
> </SCRIPT>
> <NOSCRIPT>
>   <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
> </NOSCRIPT>
> 
> 
> </FONT></TD>
> </TR>
> <TR>
> <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
>   SUMMARY:&nbsp;<A HREF="#nested_class_summary">NESTED</A>&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
> <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
> DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
> </TR>
> </TABLE>
> <A NAME="skip-navbar_top"></A>
> <!-- ========= END OF TOP NAVBAR ========= -->
> 
> <HR>
> <!-- ======== START OF CLASS DATA ======== -->
> <H2>
> <FONT SIZE="-1">
> com.google.javascript.jscomp</FONT>
> <BR>
> Class CommandLineRunner</H2>
> <PRE>
> <A HREF="http:
>   <IMG SRC="../../../../resources/inherit.gif" ALT="extended by "><B>com.google.javascript.jscomp.CommandLineRunner</B>
> </PRE>
> <HR>
> <DL>
> <DT><PRE>public class <B>CommandLineRunner</B><DT>extends <A HREF="http:
> </PRE>
> 
> <P>
> CommandLineRunner translates flags into Java API calls on the Compiler.
> 
>  This class may be extended and used to create other Java classes
>  that behave the same as running the Compiler from the command line. If you
>  want to run the compiler in-process in Java, you should look at this class
>  for hints on what API calls to make, but you should not use this class directly.
> 
>  Example:
>  <pre>
>  class MyCommandLineRunner extends CommandLineRunner {
>    MyCommandLineRunner(String[] args) { super(args); }
> 
>    <code>@Override</code> protected CompilerOptions createOptions() {
>      CompilerOptions options = super.createOptions();
>      addMyCrazyCompilerPassThatOutputsAnExtraFile(options);
>      return options;
>    }
> 
>    public static void main(String[] args) {
>      (new MyCommandLineRunner(args)).run();
>    }
>  }
>  </pre>
> <P>
> 
> <P>
> <HR>
> 
> <P>
> <!-- ======== NESTED CLASS SUMMARY ======== -->
> 
> <A NAME="nested_class_summary"><!-- --></A>
> <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
> <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
> <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
> <B>Nested Class Summary</B></FONT></TH>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
> <CODE>protected static&nbsp;class</CODE></FONT></TD>
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/AbstractCommandLineRunner.FlagUsageException.html" title="class in com.google.javascript.jscomp">AbstractCommandLineRunner.FlagUsageException</A></B></CODE>
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;An exception thrown when command-line flags are used incorrectly.</TD>
> </TR>
> </TABLE>
> &nbsp;<!-- =========== FIELD SUMMARY =========== -->
> 
> <A NAME="field_summary"><!-- --></A>
> <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
> <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
> <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
> <B>Field Summary</B></FONT></TH>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
> <CODE>static&nbsp;com.google.common.flags.Flag&lt;<A HREF="http:
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/CommandLineRunner.html#FLAG_externs">FLAG_externs</A></B></CODE>
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
> <CODE>static&nbsp;com.google.common.flags.Flag&lt;<A HREF="http:
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/CommandLineRunner.html#FLAG_logging_level">FLAG_logging_level</A></B></CODE>
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
> </TR>
> </TABLE>
> &nbsp;
> <!-- ======== CONSTRUCTOR SUMMARY ======== -->
> 
> <A NAME="constructor_summary"><!-- --></A>
> <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
> <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
> <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
> <B>Constructor Summary</B></FONT></TH>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
> <CODE>protected </CODE></FONT></TD>
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/CommandLineRunner.html#CommandLineRunner(java.lang.String[])">CommandLineRunner</A></B>(<A HREF="http:
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Create a new command-line runner.</TD>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
> <CODE>protected </CODE></FONT></TD>
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/CommandLineRunner.html#CommandLineRunner(java.lang.String[], java.io.PrintStream, java.io.PrintStream)">CommandLineRunner</A></B>(<A HREF="http:
>                   <A HREF="http:
>                   <A HREF="http:
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
> </TR>
> </TABLE>
> &nbsp;
> <!-- ========== METHOD SUMMARY =========== -->
> 
> <A NAME="method_summary"><!-- --></A>
> <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
> <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
> <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
> <B>Method Summary</B></FONT></TH>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
> <CODE>protected &nbsp;<A HREF="../../../../com/google/javascript/jscomp/Compiler.html" title="class in com.google.javascript.jscomp">Compiler</A></CODE></FONT></TD>
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/CommandLineRunner.html#createCompiler()">createCompiler</A></B>()</CODE>
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the instance of the Compiler to use when <A HREF="../../../../com/google/javascript/jscomp/CommandLineRunner.html#run()"><CODE>run()</CODE></A> is
>  called.</TD>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
> <CODE>protected &nbsp;<A HREF="http:
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/CommandLineRunner.html#createExterns()">createExterns</A></B>()</CODE>
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
> <CODE>protected &nbsp;<A HREF="../../../../com/google/javascript/jscomp/CompilerOptions.html" title="class in com.google.javascript.jscomp">CompilerOptions</A></CODE></FONT></TD>
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/CommandLineRunner.html#createOptions()">createOptions</A></B>()</CODE>
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the instance of the Options to use when <A HREF="../../../../com/google/javascript/jscomp/CommandLineRunner.html#run()"><CODE>run()</CODE></A> is called.</TD>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
> <CODE>protected &nbsp;int</CODE></FONT></TD>
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/CommandLineRunner.html#doRun()">doRun</A></B>()</CODE>
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parses command-line arguments and runs the compiler.</TD>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
> <CODE>protected &nbsp;A</CODE></FONT></TD>
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/CommandLineRunner.html#getCompiler()">getCompiler</A></B>()</CODE>
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
> <CODE>protected &nbsp;<A HREF="../../../../com/google/javascript/jscomp/DiagnosticGroups.html" title="class in com.google.javascript.jscomp">DiagnosticGroups</A></CODE></FONT></TD>
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/CommandLineRunner.html#getDiagnoticGroups()">getDiagnoticGroups</A></B>()</CODE>
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
> <CODE>protected &nbsp;<A HREF="http:
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/CommandLineRunner.html#getErrorPrintStream()">getErrorPrintStream</A></B>()</CODE>
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the PrintStream for writing errors associated with this
>  AbstractCommandLineRunner.</TD>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
> <CODE>protected &nbsp;void</CODE></FONT></TD>
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/CommandLineRunner.html#initOptionsFromFlags(com.google.javascript.jscomp.CompilerOptions)">initOptionsFromFlags</A></B>(<A HREF="../../../../com/google/javascript/jscomp/CompilerOptions.html" title="class in com.google.javascript.jscomp">CompilerOptions</A>&nbsp;options)</CODE>
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
> <CODE>static&nbsp;void</CODE></FONT></TD>
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/CommandLineRunner.html#main(java.lang.String[])">main</A></B>(<A HREF="http:
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Runs the Compiler.</TD>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
> <CODE>&nbsp;void</CODE></FONT></TD>
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/CommandLineRunner.html#run()">run</A></B>()</CODE>
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Runs the Compiler and calls System.exit() with the exit status of the
>  compiler.</TD>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
> <CODE>protected &nbsp;void</CODE></FONT></TD>
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/CommandLineRunner.html#setRunOptions(B)">setRunOptions</A></B>(B&nbsp;options)</CODE>
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
> </TR>
> </TABLE>
> &nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
> <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
> <TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
> <TH ALIGN="left"><B>Methods inherited from class java.lang.<A HREF="http:
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD><CODE><A HREF="http:
> </TR>
> </TABLE>
> &nbsp;
> <P>
> 
> <!-- ============ FIELD DETAIL =========== -->
> 
> <A NAME="field_detail"><!-- --></A>
> <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
> <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
> <TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
> <B>Field Detail</B></FONT></TH>
> </TR>
> </TABLE>
> 
> <A NAME="FLAG_logging_level"><!-- --></A><H3>
> FLAG_logging_level</H3>
> <PRE>
> public static final com.google.common.flags.Flag&lt;<A HREF="http:
> <DL>
> <DL>
> </DL>
> </DL>
> <HR>
> 
> <A NAME="FLAG_externs"><!-- --></A><H3>
> FLAG_externs</H3>
> <PRE>
> public static final com.google.common.flags.Flag&lt;<A HREF="http:
> <DL>
> <DL>
> </DL>
> </DL>
> 
> <!-- ========= CONSTRUCTOR DETAIL ======== -->
> 
> <A NAME="constructor_detail"><!-- --></A>
> <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
> <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
> <TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
> <B>Constructor Detail</B></FONT></TH>
> </TR>
> </TABLE>
> 
> <A NAME="CommandLineRunner(java.lang.String[])"><!-- --></A><H3>
> CommandLineRunner</H3>
> <PRE>
> protected <B>CommandLineRunner</B>(<A HREF="http:
> <DL>
> <DD>Create a new command-line runner. You should only need to call
>  the constructor if you're extending this class. Otherwise, the main
>  method should instantiate it.
> <P>
> </DL>
> <HR>
> 
> <A NAME="CommandLineRunner(java.lang.String[], java.io.PrintStream, java.io.PrintStream)"><!-- --></A><H3>
> CommandLineRunner</H3>
> <PRE>
> protected <B>CommandLineRunner</B>(<A HREF="http:
>                             <A HREF="http:
>                             <A HREF="http:
> <DL>
> </DL>
> 
> <!-- ============ METHOD DETAIL ========== -->
> 
> <A NAME="method_detail"><!-- --></A>
> <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
> <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
> <TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
> <B>Method Detail</B></FONT></TH>
> </TR>
> </TABLE>
> 
> <A NAME="createOptions()"><!-- --></A><H3>
> createOptions</H3>
> <PRE>
> protected <A HREF="../../../../com/google/javascript/jscomp/CompilerOptions.html" title="class in com.google.javascript.jscomp">CompilerOptions</A> <B>createOptions</B>()</PRE>
> <DL>
> <DD>Returns the instance of the Options to use when <A HREF="../../../../com/google/javascript/jscomp/CommandLineRunner.html#run()"><CODE>run()</CODE></A> is called.
>  createCompiler() is called before createOptions(), so getCompiler()
>  will not return null when createOptions() is called.
> <P>
> <DD><DL>
> </DL>
> </DD>
> <DD><DL>
> </DL>
> </DD>
> </DL>
> <HR>
> 
> <A NAME="createCompiler()"><!-- --></A><H3>
> createCompiler</H3>
> <PRE>
> protected <A HREF="../../../../com/google/javascript/jscomp/Compiler.html" title="class in com.google.javascript.jscomp">Compiler</A> <B>createCompiler</B>()</PRE>
> <DL>
> <DD>Returns the instance of the Compiler to use when <A HREF="../../../../com/google/javascript/jscomp/CommandLineRunner.html#run()"><CODE>run()</CODE></A> is
>  called.
> <P>
> <DD><DL>
> </DL>
> </DD>
> <DD><DL>
> </DL>
> </DD>
> </DL>
> <HR>
> 
> <A NAME="createExterns()"><!-- --></A><H3>
> createExterns</H3>
> <PRE>
> protected <A HREF="http:
>                                     throws <A HREF="../../../../com/google/javascript/jscomp/AbstractCommandLineRunner.FlagUsageException.html" title="class in com.google.javascript.jscomp">AbstractCommandLineRunner.FlagUsageException</A>,
>                                            <A HREF="http:
> <DL>
> <DD><DL>
> </DL>
> </DD>
> <DD><DL>
> 
> <DT><B>Throws:</B>
> <DD><CODE><A HREF="../../../../com/google/javascript/jscomp/AbstractCommandLineRunner.FlagUsageException.html" title="class in com.google.javascript.jscomp">AbstractCommandLineRunner.FlagUsageException</A></CODE>
> <DD><CODE><A HREF="http:
> </DD>
> </DL>
> <HR>
> 
> <A NAME="main(java.lang.String[])"><!-- --></A><H3>
> main</H3>
> <PRE>
> public static void <B>main</B>(<A HREF="http:
> <DL>
> <DD>Runs the Compiler. Exits cleanly in the event of an error.
> <P>
> <DD><DL>
> </DL>
> </DD>
> </DL>
> <HR>
> 
> <A NAME="getDiagnoticGroups()"><!-- --></A><H3>
> getDiagnoticGroups</H3>
> <PRE>
> protected <A HREF="../../../../com/google/javascript/jscomp/DiagnosticGroups.html" title="class in com.google.javascript.jscomp">DiagnosticGroups</A> <B>getDiagnoticGroups</B>()</PRE>
> <DL>
> <DD><DL>
> </DL>
> </DD>
> </DL>
> <HR>
> 
> <A NAME="initOptionsFromFlags(com.google.javascript.jscomp.CompilerOptions)"><!-- --></A><H3>
> initOptionsFromFlags</H3>
> <PRE>
> protected void <B>initOptionsFromFlags</B>(<A HREF="../../../../com/google/javascript/jscomp/CompilerOptions.html" title="class in com.google.javascript.jscomp">CompilerOptions</A>&nbsp;options)</PRE>
> <DL>
> <DD><DL>
> </DL>
> </DD>
> </DL>
> <HR>
> 
> <A NAME="getCompiler()"><!-- --></A><H3>
> getCompiler</H3>
> <PRE>
> protected final A <B>getCompiler</B>()</PRE>
> <DL>
> <DD><DL>
> </DL>
> </DD>
> </DL>
> <HR>
> 
> <A NAME="setRunOptions(com.google.javascript.jscomp.CompilerOptions)"><!-- --></A><A NAME="setRunOptions(B)"><!-- --></A><H3>
> setRunOptions</H3>
> <PRE>
> protected final void <B>setRunOptions</B>(B&nbsp;options)
>                             throws <A HREF="http:
>                                    <A HREF="../../../../com/google/javascript/jscomp/AbstractCommandLineRunner.FlagUsageException.html" title="class in com.google.javascript.jscomp">AbstractCommandLineRunner.FlagUsageException</A></PRE>
> <DL>
> <DD><DL>
> 
> <DT><B>Throws:</B>
> <DD><CODE><A HREF="http:
> <DD><CODE><A HREF="../../../../com/google/javascript/jscomp/AbstractCommandLineRunner.FlagUsageException.html" title="class in com.google.javascript.jscomp">AbstractCommandLineRunner.FlagUsageException</A></CODE></DL>
> </DD>
> </DL>
> <HR>
> 
> <A NAME="run()"><!-- --></A><H3>
> run</H3>
> <PRE>
> public final void <B>run</B>()</PRE>
> <DL>
> <DD>Runs the Compiler and calls System.exit() with the exit status of the
>  compiler.
> <P>
> <DD><DL>
> </DL>
> </DD>
> </DL>
> <HR>
> 
> <A NAME="getErrorPrintStream()"><!-- --></A><H3>
> getErrorPrintStream</H3>
> <PRE>
> protected <A HREF="http:
> <DL>
> <DD>Returns the PrintStream for writing errors associated with this
>  AbstractCommandLineRunner.
> <P>
> <DD><DL>
> </DL>
> </DD>
> </DL>
> <HR>
> 
> <A NAME="doRun()"><!-- --></A><H3>
> doRun</H3>
> <PRE>
> protected int <B>doRun</B>()
>              throws <A HREF="../../../../com/google/javascript/jscomp/AbstractCommandLineRunner.FlagUsageException.html" title="class in com.google.javascript.jscomp">AbstractCommandLineRunner.FlagUsageException</A>,
>                     <A HREF="http:
> <DL>
> <DD>Parses command-line arguments and runs the compiler.
> <P>
> <DD><DL>
> 
> <DT><B>Returns:</B><DD>system exit status
> <DT><B>Throws:</B>
> <DD><CODE><A HREF="../../../../com/google/javascript/jscomp/AbstractCommandLineRunner.FlagUsageException.html" title="class in com.google.javascript.jscomp">AbstractCommandLineRunner.FlagUsageException</A></CODE>
> <DD><CODE><A HREF="http:
> </DD>
> </DL>
> <!-- ========= END OF CLASS DATA ========= -->
> <HR>
> 
> 
> <!-- ======= START OF BOTTOM NAVBAR ====== -->
> <A NAME="navbar_bottom"><!-- --></A>
> <A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
> <TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
> <TR>
> <TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
> <A NAME="navbar_bottom_firstrow"><!-- --></A>
> <TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
>   <TR ALIGN="center" VALIGN="top">
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
>   <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
>   </TR>
> </TABLE>
> </TD>
> <TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
> </EM>
> </TD>
> </TR>
> 
> <TR>
> <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
> &nbsp;<A HREF="../../../../com/google/javascript/jscomp/CodingConvention.SubclassType.html" title="enum in com.google.javascript.jscomp"><B>PREV CLASS</B></A>&nbsp;
> &nbsp;<A HREF="../../../../com/google/javascript/jscomp/CompilationLevel.html" title="enum in com.google.javascript.jscomp"><B>NEXT CLASS</B></A></FONT></TD>
> <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
>   <A HREF="../../../../index.html?com/google/javascript/jscomp/CommandLineRunner.html" target="_top"><B>FRAMES</B></A>  &nbsp;
> &nbsp;<A HREF="CommandLineRunner.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
> &nbsp;<SCRIPT type="text/javascript">
>   <!--
>   if(window==top) {
>     document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
366d583
< 
368,373c585,622
< 
< 
<   public static void main(String[] args) {
<     (new CommandLineRunner(args)).run();
<   }
< }
---
> </SCRIPT>
> <NOSCRIPT>
>   <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
> </NOSCRIPT>
> 
> 
> </FONT></TD>
> </TR>
> <TR>
> <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
>   SUMMARY:&nbsp;<A HREF="#nested_class_summary">NESTED</A>&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
> <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
> DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
> </TR>
> </TABLE>
> <A NAME="skip-navbar_bottom"></A>
> <!-- ======== END OF BOTTOM NAVBAR ======= -->
> 
> <HR>
> 
>         <div id="footer">
>           <div id="footerlogo">
>             <img src="http:
>                  alt="Google colored balls">
>           </div>
> 
>           <div id="copyright">
>           <p>&copy; 2009 Google -
>             <a href="http:
>             <a href="http:
>             <a href="http:
>           </p>
>           </div>
>         </div>
>       
>       
> </BODY>
> </HTML>
