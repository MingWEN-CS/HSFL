1a2,642
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> package com.google.javascript.jscomp;
> 
> import com.google.common.base.Preconditions;
> import com.google.common.collect.ImmutableSet;
> import com.google.common.collect.Lists;
> import com.google.common.collect.Maps;
> import com.google.common.collect.Sets;
> import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;
> import com.google.javascript.jscomp.Scope.Var;
> import com.google.javascript.jscomp.graph.FixedPointGraphTraversal;
> import com.google.javascript.jscomp.graph.FixedPointGraphTraversal.EdgeCallback;
> import com.google.javascript.jscomp.graph.LinkedDirectedGraph;
> import com.google.javascript.rhino.Node;
> import com.google.javascript.rhino.Token;
> 
> import java.util.ArrayDeque;
> import java.util.Collection;
> import java.util.Deque;
> import java.util.List;
> import java.util.Map;
> import java.util.Set;
> import java.util.Stack;
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> class AnalyzePrototypeProperties implements CompilerPass {
> 
>   
>   private final SymbolType PROPERTY = SymbolType.PROPERTY;
>   private final SymbolType VAR = SymbolType.VAR;
> 
>   private final AbstractCompiler compiler;
>   private final boolean canModifyExterns;
>   private final boolean anchorUnusedVars;
>   private final JSModuleGraph moduleGraph;
>   private final JSModule firstModule;
> 
>   
>   private static final Set<String> IMPLICITLY_USED_PROPERTIES =
>       ImmutableSet.of("length", "toString", "valueOf");
> 
>   
>   
>   
>   
>   
>   
>   
>   
>   
>   
>   
>   
>   
>   
>   
>   
>   private final LinkedDirectedGraph<NameInfo, JSModule> symbolGraph =
>       new LinkedDirectedGraph<NameInfo, JSModule>();
> 
>   
>   private final NameInfo globalNode = new NameInfo(null);
> 
>   
>   private final NameInfo externNode = new NameInfo(null);
> 
>   
>   
>   private final Map<String, NameInfo> propertyNameInfo = Maps.newHashMap();
> 
>   
>   
>   private final Map<String, NameInfo> varNameInfo = Maps.newHashMap();
> 
>   
> 
> 
> 
> 
> 
> 
> 
> 
> 
>   AnalyzePrototypeProperties(AbstractCompiler compiler,
>       JSModuleGraph moduleGraph, boolean canModifyExterns,
>       boolean anchorUnusedVars) {
>     this.compiler = compiler;
>     this.moduleGraph = moduleGraph;
>     this.canModifyExterns = canModifyExterns;
>     this.anchorUnusedVars = anchorUnusedVars;
> 
>     if (moduleGraph != null) {
>       firstModule = moduleGraph.getRootModule();
>     } else {
>       firstModule = null;
>     }
> 
>     globalNode.markReference(null);
>     externNode.markReference(null);
>     symbolGraph.createNode(globalNode);
>     symbolGraph.createNode(externNode);
> 
>     for (String property : IMPLICITLY_USED_PROPERTIES) {
>       NameInfo nameInfo = getNameInfoForName(property, PROPERTY);
>       if (moduleGraph == null) {
>         symbolGraph.connect(externNode, null, nameInfo);
>       } else {
>         for (JSModule module : moduleGraph.getAllModules()) {
>           symbolGraph.connect(externNode, module, nameInfo);
>         }
>       }
>     }
>   }
> 
>   public void process(Node externRoot, Node root) {
>     if (!canModifyExterns) {
>       NodeTraversal.traverse(compiler, externRoot,
>           new ProcessExternProperties());
>     }
> 
>     NodeTraversal.traverse(compiler, root, new ProcessProperties());
> 
>     FixedPointGraphTraversal<NameInfo, JSModule> t =
>         FixedPointGraphTraversal.newTraversal(new PropagateReferences());
>     t.computeFixedPoint(symbolGraph,
>         Sets.newHashSet(externNode, globalNode));
>   }
> 
>   
> 
> 
>   public Collection<NameInfo> getAllNameInfo() {
>     List<NameInfo> result = Lists.newArrayList(propertyNameInfo.values());
>     result.addAll(varNameInfo.values());
>     return result;
>   }
> 
>   
> 
> 
> 
> 
> 
> 
>   private NameInfo getNameInfoForName(String name, SymbolType type) {
>     Map<String, NameInfo> map = type == PROPERTY ?
>         propertyNameInfo : varNameInfo;
>     if (map.containsKey(name)) {
>       return map.get(name);
>     } else {
>       NameInfo nameInfo = new NameInfo(name);
>       map.put(name, nameInfo);
>       symbolGraph.createNode(nameInfo);
>       return nameInfo;
>     }
>   }
> 
>   private class ProcessProperties implements NodeTraversal.Callback {
>     private Stack<NameInfo> symbolStack = new Stack<NameInfo>();
> 
>     public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
>       if (isPrototypePropertyAssign(n)) {
>         symbolStack.push(getNameInfoForName(
>                 n.getFirstChild().getLastChild().getString(), PROPERTY));
>       } else if (isGlobalFunctionDeclaration(t, n, parent)) {
>         String name = parent.getType() == Token.NAME ?
>             parent.getString()  :
>             n.getFirstChild().getString() ;
>         symbolStack.push(getNameInfoForName(name, VAR));
>       }
>       return true;
>     }
> 
>     public void visit(NodeTraversal t, Node n, Node parent) {
>       if (n.getType() == Token.GETPROP) {
>         String propName = n.getFirstChild().getNext().getString();
>         if (propName.equals("prototype")) {
>           processPrototypeParent(t, parent);
>         } else if (compiler.getCodingConvention().isExported(propName)) {
>           addGlobalUseOfSymbol(propName, t.getModule(), PROPERTY);
>         } else {
>           addSymbolUse(propName, t.getModule(), PROPERTY);
>         }
>       } else if (n.getType() == Token.OBJECTLIT &&
>           
>           
>           
>           !(parent.getType() == Token.ASSIGN &&
>             parent.getFirstChild().getType() == Token.GETPROP &&
>             parent.getFirstChild().getLastChild().getString().equals(
>                 "prototype"))) {
>         
>         
>         for (Node propNameNode = n.getFirstChild(); propNameNode != null;
>              propNameNode = propNameNode.getNext().getNext()) {
>           if (propNameNode.getType() == Token.STRING &&
>               !propNameNode.isQuotedString()) {
>             addSymbolUse(propNameNode.getString(), t.getModule(), PROPERTY);
>           }
>         }
>       } else if (n.getType() == Token.NAME) {
>         String name = n.getString();
> 
>         
>         Var var = t.getScope().getVar(name);
>         if (var != null && var.isGlobal() &&
>             var.getInitialValue() != null &&
>             var.getInitialValue().getType() == Token.FUNCTION) {
>           if (t.inGlobalScope()) {
>             if (!processGlobalFunctionDeclaration(t, n, parent,
>                     parent.getParent())) {
>               addGlobalUseOfSymbol(name, t.getModule(), VAR);
>             }
>           } else {
>             addSymbolUse(name, t.getModule(), VAR);
>           }
>         }
>       }
> 
>       if (isPrototypePropertyAssign(n) ||
>           isGlobalFunctionDeclaration(t, n, parent)) {
>         symbolStack.pop();
>       }
>     }
> 
>     private void addSymbolUse(String name, JSModule module, SymbolType type) {
>       if (symbolStack.empty()) {
>         addGlobalUseOfSymbol(name, module, type);
>       } else {
>         NameInfo info = getNameInfoForName(name, type);
>         if (!symbolStack.peek().equals(info)) {
>           symbolGraph.connect(symbolStack.peek(), module, info);
>         }
>       }
>     }
> 
>     
> 
> 
> 
>     private boolean isGlobalFunctionDeclaration(NodeTraversal t,
>         Node n, Node parent) {
>       return t.inGlobalScope() &&
>           (NodeUtil.isFunctionDeclaration(n) ||
>            n.getType() == Token.FUNCTION && parent.getType() == Token.NAME);
>     }
> 
>     private boolean isPrototypePropertyAssign(Node assign) {
>       Node n = assign.getFirstChild();
>       if (n != null && NodeUtil.isLhs(n, assign) &&
>           n.getType() == Token.GETPROP) {
>         
>         boolean isChainedProperty =
>             n.getFirstChild().getType() == Token.GETPROP;
> 
>         if (isChainedProperty) {
>           Node child = n.getFirstChild().getFirstChild().getNext();
> 
>           if (child.getType() == Token.STRING &&
>               child.getString().equals("prototype")) {
>             return true;
>           }
>         }
>       }
> 
>       return false;
>     }
> 
>     
> 
> 
> 
>     private boolean processGlobalFunctionDeclaration(NodeTraversal t,
>         Node nameNode, Node parent, Node gramps) {
>       Node firstChild = nameNode.getFirstChild();
> 
>       if (
>           isGlobalFunctionDeclaration(t, parent, gramps) ||
>           
>           firstChild != null &&
>           isGlobalFunctionDeclaration(t, firstChild, nameNode)) {
>         String name = nameNode.getString();
>         getNameInfoForName(name, VAR).getDeclarations().add(
>             new GlobalFunction(nameNode, parent, gramps, t.getModule()));
> 
>         
>         
>         if (compiler.getCodingConvention().isExported(name) ||
>             anchorUnusedVars) {
>           addGlobalUseOfSymbol(name, t.getModule(), VAR);
>         }
> 
>         return true;
>       }
>       return false;
>     }
> 
>     
> 
> 
> 
> 
>     private void processPrototypeParent(NodeTraversal t, Node n) {
>       switch (n.getType()) {
>         
>         case Token.GETPROP:
>           Node dest = n.getFirstChild().getNext();
>           Node parent = n.getParent();
>           Node grandParent = parent.getParent();
> 
>           if (dest.getType() == Token.STRING &&
>               NodeUtil.isExprAssign(grandParent) &&
>               NodeUtil.isLhs(n, parent)) {
>             String name = dest.getString();
>             Property prop = new AssignmentProperty(grandParent,
>                 grandParent.getParent(), t.getModule());
>             getNameInfoForName(name, PROPERTY).getDeclarations().add(prop);
>           }
>           break;
> 
>         
>         case Token.ASSIGN:
>           Node map = n.getFirstChild().getNext();
>           if (map.getType() == Token.OBJECTLIT) {
>             
>             
>             for (Node key = map.getFirstChild();
>                  key != null; key = key.getNext().getNext()) {
>               if (key.getType() == Token.STRING) {
>                 String name = key.getString();
>                 Property prop = new LiteralProperty(
>                     key, key.getNext(), map, n, t.getModule());
>                 getNameInfoForName(name, PROPERTY).getDeclarations().add(prop);
>               }
>             }
>           }
>           break;
>       }
>     }
> 
>     private void addGlobalUseOfSymbol(String name, JSModule module,
>         SymbolType type) {
>       symbolGraph.connect(globalNode, module, getNameInfoForName(name, type));
>     }
>   }
> 
>   private class ProcessExternProperties extends AbstractPostOrderCallback {
>     public void visit(NodeTraversal t, Node n, Node parent) {
>       if (n.getType() == Token.GETPROP) {
>         symbolGraph.connect(externNode, firstModule,
>             getNameInfoForName(n.getLastChild().getString(), PROPERTY));
>       }
>     }
>   }
> 
>   private class PropagateReferences
>       implements EdgeCallback<NameInfo, JSModule> {
>     public boolean traverseEdge(NameInfo start, JSModule edge, NameInfo dest) {
>       if (start.isReferenced()) {
>         JSModule startModule = start.getDeepestCommonModuleRef();
>         if (startModule != null &&
>             moduleGraph.dependsOn(startModule, edge)) {
>           return dest.markReference(startModule);
>         } else {
>           return dest.markReference(edge);
>         }
>       }
>       return false;
>     }
>   }
> 
>   
>   
>   
> 
>   
> 
> 
>   interface Symbol {
>     
> 
> 
>     void remove();
> 
>     
> 
> 
>     JSModule getModule();
>   }
> 
>   private enum SymbolType {
>     PROPERTY,
>     VAR;
>   }
> 
>   
> 
> 
>   private class GlobalFunction implements Symbol {
>     private final Node nameNode;
>     private final JSModule module;
> 
>     GlobalFunction(Node nameNode, Node parent, Node gramps, JSModule module) {
>       Preconditions.checkState(
>           parent.getType() == Token.VAR ||
>           NodeUtil.isFunctionDeclaration(parent));
>       this.nameNode = nameNode;
>       this.module = module;
>     }
> 
>     @Override
>     public void remove() {
>       Node parent = nameNode.getParent();
>       if (parent.getType() == Token.FUNCTION || parent.getChildCount() == 1) {
>         NodeUtil.removeChild(parent.getParent(), parent);
>       } else {
>         Preconditions.checkState(parent.getType() == Token.VAR);
>         parent.removeChild(nameNode);
>       }
>     }
> 
>     @Override
>     public JSModule getModule() {
>       return module;
>     }
>   }
> 
>   
> 
> 
> 
>   interface Property extends Symbol {
> 
>     
>     Node getPrototype();
> 
>     
>     Node getValue();
> 
>     
>     Node getValueParent();
>   }
> 
>   
> 
> 
> 
> 
> 
>   private static class AssignmentProperty implements Property {
>     private final Node node;
>     private final JSModule module;
> 
>     
> 
> 
> 
>     AssignmentProperty(Node node, Node parent, JSModule module) {
>       this.node = node;
>       this.module = module;
>     }
> 
>     @Override
>     public void remove() {
>       NodeUtil.removeChild(node.getParent(), node);
>     }
> 
>     @Override
>     public Node getPrototype() {
>       return getValueParent().getFirstChild().getFirstChild();
>     }
> 
>     @Override
>     public Node getValue() {
>       return getValueParent().getLastChild();
>     }
> 
>     @Override
>     public Node getValueParent() {
>       return node.getFirstChild();
>     }
> 
>     @Override
>     public JSModule getModule() {
>       return module;
>     }
>   }
> 
>   
> 
> 
> 
> 
> 
>   private static class LiteralProperty implements Property {
>     private final Node key;
>     private final Node value;
>     private final Node map;
>     private final Node assign;
>     private final JSModule module;
> 
>     LiteralProperty(Node key, Node value, Node map, Node assign,
>         JSModule module) {
>       this.key = key;
>       this.value = value;
>       this.map = map;
>       this.assign = assign;
>       this.module = module;
>     }
> 
>     @Override
>     public void remove() {
>       map.removeChild(key);
>       map.removeChild(value);
>     }
> 
>     @Override
>     public Node getPrototype() {
>       return assign.getFirstChild();
>     }
> 
>     @Override
>     public Node getValue() {
>       return value;
>     }
> 
>     @Override
>     public Node getValueParent() {
>       return map;
>     }
> 
>     @Override
>     public JSModule getModule() {
>       return module;
>     }
>   }
> 
>   
> 
> 
>   class NameInfo {
> 
>     final String name;
> 
>     private boolean referenced = false;
>     private final Deque<Symbol> declarations = new ArrayDeque<Symbol>();
>     private JSModule deepestCommonModuleRef = null;
> 
>     
> 
> 
> 
> 
>     NameInfo(String name) {
>       this.name = name;
>     }
> 
>     @Override public String toString() { return name; }
> 
>     
>     boolean isReferenced() {
>       return referenced;
>     }
> 
>     
> 
> 
> 
> 
> 
>     boolean markReference(JSModule module) {
>       boolean hasChanged = false;
>       if (!referenced) {
>         referenced = true;
>         hasChanged = true;
>       }
> 
>       if (moduleGraph != null) {
>         JSModule originalDeepestCommon = deepestCommonModuleRef;
> 
>         if (deepestCommonModuleRef == null) {
>           deepestCommonModuleRef = module;
>         } else {
>           deepestCommonModuleRef =
>               moduleGraph.getDeepestCommonDependencyInclusive(
>                   deepestCommonModuleRef, module);
>         }
> 
>         if (originalDeepestCommon != deepestCommonModuleRef) {
>           hasChanged = true;
>         }
>       }
> 
>       return hasChanged;
>     }
> 
>     
> 
> 
> 
>     JSModule getDeepestCommonModuleRef() {
>       return deepestCommonModuleRef;
>     }
> 
>     
> 
> 
> 
>     Deque<Symbol> getDeclarations() {
>       return declarations;
>     }
>   }
> }
