1a2,164
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>  
> package com.google.javascript.rhino.jstype;
> 
> import com.google.common.collect.Lists;
> import com.google.common.collect.Sets;
> import com.google.javascript.rhino.jstype.UnionType;
> 
> import static com.google.javascript.rhino.jstype.JSTypeNative.ALL_TYPE;
> import static com.google.javascript.rhino.jstype.JSTypeNative.CHECKED_UNKNOWN_TYPE;
> import static com.google.javascript.rhino.jstype.JSTypeNative.NO_TYPE;
> import static com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE;
> 
> import java.io.Serializable;
> import java.util.Iterator;
> import java.util.List;
> import java.util.Set;
> 
> 
> 
> 
> 
> 
> class UnionTypeBuilder implements Serializable {
>   private static final long serialVersionUID = 1L;
> 
>   
>   
>   private static final int MAX_UNION_SIZE = 20;
> 
>   private final JSTypeRegistry registry;
>   private final List<JSType> alternates = Lists.newArrayList();
>   private boolean isAllType = false;
>   private boolean isNativeUnknownType = false;
>   private boolean areAllUnknownsChecked = true;
> 
>   
>   private JSType result = null;
> 
>   UnionTypeBuilder(JSTypeRegistry registry) {
>     this.registry = registry;
>   }
> 
>   
> 
> 
> 
>   UnionTypeBuilder addAlternate(JSType alternate) {
>     
>     
>     if (alternate.isNoType()) {
>       return this;
>     }
> 
>     isAllType = isAllType || alternate.isAllType();
> 
>     boolean isAlternateUnknown = alternate instanceof UnknownType;
>     isNativeUnknownType = isNativeUnknownType || isAlternateUnknown;
>     if (isAlternateUnknown) {
>       areAllUnknownsChecked = areAllUnknownsChecked &&
>           alternate.isCheckedUnknownType();
>     }
>     if (!isAllType && !isNativeUnknownType) {
>       if (alternate instanceof UnionType) {
>         UnionType union = (UnionType) alternate;
>         for (JSType unionAlt : union.getAlternates()) {
>           addAlternate(unionAlt);
>         }
>       } else {
>         if (!alternate.isUnknownType()) {
>           Iterator<JSType> it = alternates.iterator();
>           while (it.hasNext()) {
>             JSType current = it.next();
>             if (!current.isUnknownType()) {
>               if (alternate.isSubtype(current)) {
>                 
>                 return this;
>               } else if (current.isSubtype(alternate)) {
>                 
>                 it.remove();
>               }
>             }
>           }
>         }
>         alternates.add(alternate);
>         result = null; 
>       }
>     } else {
>       result = null;
>     }
>     return this;
>   }
> 
>   
> 
> 
> 
> 
>   JSType build() {
>     if (result == null) {
>       if (isAllType) {
>         result = registry.getNativeType(ALL_TYPE);
>       } else if (isNativeUnknownType) {
>         if (areAllUnknownsChecked) {
>           result = registry.getNativeType(CHECKED_UNKNOWN_TYPE);
>         } else {
>           result = registry.getNativeType(UNKNOWN_TYPE);
>         }
>       } else {
>         Set<JSType> alternateSet = Sets.newUnmodifiableHashSet(alternates);
>         int size = alternateSet.size();
>         if (size > MAX_UNION_SIZE) {
>           result = registry.getNativeType(UNKNOWN_TYPE);
>         } else {
>           if (size > 1) {
>             result = new UnionType(registry, alternateSet);
>           } else if (size == 1) {
>             result = alternates.iterator().next();
>           } else {
>             result = registry.getNativeType(NO_TYPE);
>           }
>         }
>       }
>     }
>     return result;
>   }
> }
