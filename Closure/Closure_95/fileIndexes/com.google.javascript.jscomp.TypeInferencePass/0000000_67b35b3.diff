1a2,108
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> package com.google.javascript.jscomp;
> 
> import com.google.common.base.Preconditions;
> import com.google.javascript.jscomp.NodeTraversal.ScopedCallback;
> import com.google.javascript.rhino.Node;
> 
> 
> 
> 
> 
> 
> 
> class TypeInferencePass implements CompilerPass {
> 
>   static final DiagnosticType DATAFLOW_ERROR = DiagnosticType.warning(
>       "JSC_INTERNAL_ERROR_DATAFLOW",
>       "non-monotonic data-flow analysis");
> 
>   private final AbstractCompiler compiler;
>   private final ReverseAbstractInterpreter reverseInterpreter;
>   private Scope topScope;
>   private ScopeCreator scopeCreator;
> 
>   TypeInferencePass(AbstractCompiler compiler,
>       ReverseAbstractInterpreter reverseInterpreter,
>       Scope topScope, ScopeCreator scopeCreator) {
>     this.compiler = compiler;
>     this.reverseInterpreter = reverseInterpreter;
>     this.topScope = topScope;
>     this.scopeCreator = scopeCreator;
>   }
> 
>   
> 
> 
> 
> 
> 
>   public void process(Node externsRoot, Node jsRoot) {
>     Node externsAndJs = jsRoot.getParent();
>     Preconditions.checkState(externsAndJs != null);
>     Preconditions.checkState(
>         externsRoot == null || externsAndJs.hasChild(externsRoot));
> 
>     inferTypes(externsAndJs);
>   }
> 
>   
>   void inferTypes(Node node) {
>     NodeTraversal inferTypes = new NodeTraversal(
>         compiler, new TypeInferringCallback(), scopeCreator);
>     inferTypes.traverseWithScope(node, topScope);
>   }
> 
>   void inferTypes(NodeTraversal t, Node n, Scope scope) {
>     TypeInference typeInference =
>         new TypeInference(compiler, computeCfg(n), reverseInterpreter, scope);
>     try {
>       typeInference.analyze();
> 
>       
>       compiler.getTypeRegistry().resolveTypesInScope(scope);
> 
>     } catch (DataFlowAnalysis.MaxIterationsExceededException e) {
>       compiler.report(JSError.make(t, n, DATAFLOW_ERROR));
>     }
>   }
> 
>   private class TypeInferringCallback implements ScopedCallback {
>     public void enterScope(NodeTraversal t) {
>       Scope scope = t.getScope();
>       Node node = t.getCurrentNode();
>       inferTypes(t, node, scope);
>     }
> 
>     public void exitScope(NodeTraversal t) {}
> 
>     public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
>       return true;
>     }
> 
>     public void visit(NodeTraversal t, Node n, Node parent) {
>       
>     }
>   }
> 
>   private ControlFlowGraph<Node> computeCfg(Node n) {
>     ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false);
>     cfa.process(null, n);
>     return cfa.getCfg();
>   }
> }
