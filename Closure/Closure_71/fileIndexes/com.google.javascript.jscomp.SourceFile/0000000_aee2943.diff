1a2,310
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> package com.google.javascript.jscomp;
> 
> import com.google.common.base.Charsets;
> import com.google.common.io.Files;
> 
> import com.google.common.io.CharStreams;
> import com.google.common.annotations.VisibleForTesting;
> 
> import java.io.File;
> import java.io.IOException;
> import java.io.InputStream;
> import java.io.InputStreamReader;
> import java.io.Reader;
> 
> 
> 
> 
> 
> 
> 
> 
> public abstract class SourceFile {
> 
>   
> 
> 
>   public interface Generator {
>     public String getCode();
>   }
> 
>   
> 
> 
> 
>   private static final int SOURCE_EXCERPT_REGION_LENGTH = 5;
> 
>   private final String fileName;
> 
>   
>   
>   
>   private int lastOffset;
>   private int lastLine;
> 
>   private String code = null;
> 
>   
> 
> 
> 
> 
> 
> 
>   SourceFile(String fileName) {
>     this.fileName = fileName;
>     
>     this.lastOffset = 0;
>     this.lastLine = 1;
>   }
> 
>   
>   
> 
>   
>   public String getCode() throws IOException {
>     return code;
>   }
> 
>   @VisibleForTesting
>   String getCodeNoCache() {
>     return code;
>   }
> 
>   private void setCode(String sourceCode) {
>     code = sourceCode;
>   }
> 
>   
>   
>   
>   
>   public void clearCachedSource() {
>     
>     
>   }
> 
>   
>   public String getName() {
>     return fileName;
>   }
> 
>   
> 
> 
> 
> 
> 
> 
> 
>   public String getLine(int lineNumber) {
>     String js = "";
>     try {
>       
>       
>       
>       js = getCode();
>     } catch (IOException e) {
>       return null;
>     }
> 
>     int pos = 0;
>     int startLine = 1;
> 
>     
>     
>     if (lineNumber >= lastLine) {
>       pos = lastOffset;
>       startLine = lastLine;
>     }
> 
>     for (int n = startLine; n < lineNumber; n++) {
>       int nextpos = js.indexOf('\n', pos);
>       if (nextpos == -1) {
>         return null;
>       }
>       pos = nextpos + 1;
>     }
> 
>     
>     lastOffset = pos;
>     lastLine = lineNumber;
> 
>     return (js.indexOf('\n', pos) == -1) ? null :
>         js.substring(pos, js.indexOf('\n', pos));
>   }
> 
>   
> 
> 
> 
> 
> 
> 
> 
> 
>   public Region getRegion(int lineNumber) {
>     String js = "";
>     try {
>       js = getCode();
>     } catch (IOException e) {
>       return null;
>     }
>     int pos = 0;
>     int startLine = Math.max(1,
>         lineNumber - (SOURCE_EXCERPT_REGION_LENGTH + 1) / 2 + 1);
>     for (int n = 1; n < startLine; n++) {
>       int nextpos = js.indexOf('\n', pos);
>       if (nextpos == -1) {
>         break;
>       }
>       pos = nextpos + 1;
>     }
>     int end = pos;
>     int endLine = startLine;
>     for (int n = 0; n < SOURCE_EXCERPT_REGION_LENGTH; n++, endLine++) {
>       end = js.indexOf('\n', end);
>       if (end == -1) {
>         break;
>       }
>       end++;
>     }
>     if (lineNumber >= endLine) {
>       return null;
>     }
>     if (end == -1) {
>       int last = js.length() - 1;
>       if (js.charAt(last) == '\n') {
>         return
>             new SimpleRegion(startLine, endLine, js.substring(pos, last));
>       } else {
>         return new SimpleRegion(startLine, endLine, js.substring(pos));
>       }
>     } else {
>       return new SimpleRegion(startLine, endLine, js.substring(pos, end));
>     }
>   }
> 
>   public static SourceFile fromFile(String fileName) {
>     return fromFile(new File(fileName));
>   }
> 
>   public static SourceFile fromFile(File file) {
>     return new OnDisk(file);
>   }
> 
>   public static SourceFile fromCode(String fileName, String code) {
>     return new Preloaded(fileName, code);
>   }
> 
>   public static SourceFile fromInputStream(String fileName, InputStream s)
>       throws IOException {
>     return fromCode(fileName,
>         CharStreams.toString(new InputStreamReader(s, Charsets.UTF_8)));
>   }
> 
>   public static SourceFile fromReader(String fileName, Reader r)
>       throws IOException {
>     return fromCode(fileName, CharStreams.toString(r));
>   }
> 
>   public static SourceFile fromGenerator(String fileName,
>       Generator generator) {
>     return new Generated(fileName, generator);
>   }
> 
> 
>   
>   
> 
>   
> 
> 
>   static class Preloaded extends SourceFile {
> 
>     Preloaded(String fileName, String code) {
>       super(fileName);
>       super.setCode(code);
>     }
>   }
> 
>   
> 
> 
> 
>   static class Generated extends SourceFile {
>     private final Generator generator;
> 
>     
>     Generated(String fileName, Generator generator) {
>       super(fileName);
>       this.generator = generator;
>     }
> 
>     @Override
>     public synchronized String getCode() throws IOException {
>       String cachedCode = super.getCode();
> 
>       if (cachedCode == null) {
>         cachedCode = generator.getCode();
>         super.setCode(cachedCode);
>       }
>       return cachedCode;
>     }
> 
>     
>     
>     @Override
>     public void clearCachedSource() {
>       super.setCode(null);
>     }
>   }
> 
>   
> 
> 
> 
> 
>   static class OnDisk extends SourceFile {
>     private final File file;
> 
>     OnDisk(File file) {
>       super(file.getPath());
>       this.file = file;
>     }
> 
>     @Override
>     public synchronized String getCode() throws IOException {
>       String cachedCode = super.getCode();
> 
>       if (cachedCode == null) {
>         cachedCode = Files.toString(file, Charsets.UTF_8);
>         super.setCode(cachedCode);
>       }
>       return cachedCode;
>     }
> 
>     
>     
>     @Override
>     public void clearCachedSource() {
>       super.setCode(null);
>     }
>   }
> }
