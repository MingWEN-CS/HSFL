1,16c1,1303
< <!DOCTYPE HTML PUBLIC "-
< <!--NewPage-->
< <HTML>
< <HEAD>
< <TITLE>
< Compiler (Compiler)
< </TITLE>
< 
< 
< <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../dev_javadoc.css" TITLE="Style">
< 
< <SCRIPT type="text/javascript">
< function windowTitle()
< {
<     if (location.href.indexOf('is-external=true') == -1) {
<         parent.document.title="Compiler (Compiler)";
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> package com.google.javascript.jscomp;
> 
> import com.google.common.annotations.VisibleForTesting;
> import com.google.common.base.Preconditions;
> import com.google.common.base.Supplier;
> import com.google.common.base.Tracer;
> import com.google.common.collect.Lists;
> import com.google.common.collect.Maps;
> import com.google.javascript.jscomp.CompilerOptions.DevMode;
> import com.google.javascript.jscomp.CompilerOptions.TracerMode;
> import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;
> import com.google.javascript.rhino.Node;
> import com.google.javascript.rhino.Token;
> import com.google.javascript.rhino.jstype.JSTypeRegistry;
> 
> import java.io.FileReader;
> import java.io.IOException;
> import java.io.PrintStream;
> import java.io.Serializable;
> import java.text.ParseException;
> import java.util.ArrayList;
> import java.util.HashMap;
> import java.util.List;
> import java.util.Map;
> import java.util.Set;
> import java.util.concurrent.Callable;
> import java.util.logging.Level;
> import java.util.logging.Logger;
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> public class Compiler extends AbstractCompiler {
>   CompilerOptions options_ = createDefaultOptions();
> 
>   private PassConfig passes = null;
> 
>   
>   private CompilerInput[] externs_;
> 
>   
>   private JSModule[] modules_;
> 
>   
>   private JSModuleGraph moduleGraph_;
> 
>   
>   private CompilerInput[] inputs_;
> 
>   
>   private ErrorManager errorManager;
> 
>   
>   private SymbolTable symbolTable = null;
> 
>   
>   Node externsRoot;
>   Node jsRoot;
>   Node externAndJsRoot;
> 
>   private Map<String, CompilerInput> inputsByName_;
> 
>   
>   private FunctionNames functionNames_;
> 
>   
>   private VariableMap variableMap_;
> 
>   
>   private VariableMap propertyMap_;
> 
>   
>   private SourceMap sourceMap_;
> 
>   
>   private String externExports_ = null;
> 
>   
> 
> 
> 
>   private int uniqueNameId = 0;
> 
>   
> 
> 
> 
>   private boolean normalized = false;
> 
>   
>   private boolean useThreads = true;
> 
>   
>   private VariableMap anonFunctionNameMap_;
> 
>   
>   private FunctionInformationMap functionInformationMap_;
> 
>   
>   private final StringBuilder debugLog_ = new StringBuilder();
> 
>   
>   CodingConvention defaultCodingConvention = new GoogleCodingConvention();
> 
>   private JSTypeRegistry typeRegistry;
> 
>   private ReverseAbstractInterpreter abstractInterpreter;
>   private final TypeValidator typeValidator;
> 
>   public PerformanceTracker tracker;
> 
>   
>   private final com.google.javascript.rhino.ErrorReporter oldErrorReporter =
>       RhinoErrorReporter.forOldRhino(this);
> 
>   
>   private final ErrorReporter defaultErrorReporter =
>       RhinoErrorReporter.forNewRhino(this);
> 
>   
>   public static final DiagnosticType READ_ERROR = DiagnosticType.error(
>       "JSC_READ_ERROR", "Cannot read: {0}");
>   public static final DiagnosticType OPTIMIZE_LOOP_ERROR = DiagnosticType.error(
>       "JSC_OPTIMIZE_LOOP_ERROR",
>       "Exceeded max number of optimization iterations: {0}");
>   public static final DiagnosticType MOTION_ITERATIONS_ERROR =
>       DiagnosticType.error("JSC_OPTIMIZE_LOOP_ERROR",
>           "Exceeded max number of code motion iterations: {0}");
>   private static final DiagnosticType INPUT_MAP_PROP_PARSE =
>       DiagnosticType.error("JSC_INPUT_MAP_PROP_PARSE",
>           "Input property map parse error: {0}");
>   private static final DiagnosticType INPUT_VAR_PROP_PARSE =
>       DiagnosticType.error("JSC_INPUT_MAP_VAR_PARSE",
>           "Input variable map parse error: {0}");
> 
>   private static final long COMPILER_STACK_SIZE = 1048576L;
> 
> 
>   
> 
> 
> 
> 
>   private static final Logger logger_ =
>       Logger.getLogger("com.google.javascript.jscomp");
> 
>   
> 
> 
>   public Compiler() {
>     addChangeHandler(recentChange);
>     this.typeValidator = new TypeValidator(this);
>     setErrorManager(new LoggerErrorManager(createMessageFormatter(), logger_));
>   }
> 
>   
> 
> 
> 
>   public Compiler(PrintStream stream) {
>     this();
>     setErrorManager(
>         new PrintStreamErrorManager(createMessageFormatter(), stream));
>   }
> 
>   
> 
> 
>   public Compiler(ErrorManager errorManager) {
>     this();
>     setErrorManager(errorManager);
>   }
> 
>   CompilerOptions createDefaultOptions() {
>     return new CompilerOptions();
>   }
> 
>   
> 
> 
>   @Override
>   SymbolTable acquireSymbolTable() {
>     if (symbolTable == null) {
>       symbolTable = new SymbolTable(this);
>     }
>     symbolTable.acquire();
>     return symbolTable;
>   }
> 
>   
> 
> 
> 
> 
>   public void setErrorManager(ErrorManager errorManager) {
>     Preconditions.checkNotNull(
>         errorManager, "the error manager cannot be null");
>     this.errorManager = errorManager;
>   }
> 
>   
> 
> 
> 
>   private MessageFormatter createMessageFormatter() {
>     boolean colorize = options_.shouldColorizeErrorOutput();
>     return options_.errorFormat.toFormatter(this, colorize);
>   }
> 
>   
> 
> 
>   public void init(JSSourceFile[] externs, JSSourceFile[] inputs,
>       CompilerOptions options) {
>     externs_ = makeCompilerInput(externs, true);
>     modules_ = null;
>     moduleGraph_ = null;
>     inputs_ = makeCompilerInput(inputs, false);
>     options_ = options;
> 
>     initInputsByNameMap();
>   }
> 
>   static final DiagnosticType MODULE_DEPENDENCY_ERROR =
>       DiagnosticType.error("JSC_MODULE_DEPENDENCY_ERROR",
>           "Bad dependency: {0} -> {1}. "
>               + "Modules must be listed in dependency order.");
> 
>   
> 
> 
>   public void init(JSSourceFile[] externs, JSModule[] modules,
>       CompilerOptions options) {
> 
>     checkFirstModule(modules);
> 
>     externs_ = makeCompilerInput(externs, true);
>     modules_ = modules;
>     
>     
>     try {
>       moduleGraph_ = new JSModuleGraph(modules);
>     } catch (JSModuleGraph.ModuleDependenceException e) {
>       
>       
>       report(JSError.make(MODULE_DEPENDENCY_ERROR,
>           e.getModule().getName(), e.getDependentModule().getName()));
>       return;
>     }
>     inputs_ = getAllInputsFromModules();
>     options_ = options;
> 
> 
>     initInputsByNameMap();
>   }
> 
>   private CompilerInput[] makeCompilerInput(
>       JSSourceFile[] files, boolean isExtern) {
>     CompilerInput [] inputs = new CompilerInput[files.length];
>     for (int i = 0; i < files.length; ++i) {
>       inputs[i] = new CompilerInput(files[i], isExtern);
>     }
>     return inputs;
>   }
> 
>   private static final DiagnosticType EMPTY_MODULE_LIST_ERROR =
>       DiagnosticType.error("JSC_EMPTY_MODULE_LIST_ERROR",
>           "At least one module must be provided");
> 
>   private static final DiagnosticType EMPTY_ROOT_MODULE_ERROR =
>       DiagnosticType.error("JSC_EMPTY_ROOT_MODULE_ERROR",
>           "Root module '{0}' must contain at least one source code input");
> 
>   
> 
> 
> 
>   private void checkFirstModule(JSModule[] modules) {
>     if (modules.length == 0) {
>       report(JSError.make(EMPTY_MODULE_LIST_ERROR));
>     } else if (modules[0].getInputs().isEmpty()) {
>       report(JSError.make(EMPTY_ROOT_MODULE_ERROR,
>           modules[0].getName()));
>     }
>   }
> 
>   static final DiagnosticType DUPLICATE_INPUT_IN_MODULES =
>       DiagnosticType.error("JSC_DUPLICATE_INPUT_IN_MODULES_ERROR",
>           "Two modules cannot contain the same input, but module {0} and {1} "
>               + "both include \"{2}\"");
> 
>   
> 
> 
> 
> 
>   public void rebuildInputsFromModules() {
>     inputs_ = getAllInputsFromModules();
>     initInputsByNameMap();
>   }
> 
>   
> 
> 
> 
>   private CompilerInput[] getAllInputsFromModules() {
>     List<CompilerInput> inputs = new ArrayList<CompilerInput>();
>     Map<String, JSModule> inputMap = new HashMap<String, JSModule>();
>     for (JSModule module : modules_) {
>       for (CompilerInput input : module.getInputs()) {
>         String inputName = input.getName();
>         JSModule firstModule = inputMap.get(inputName);
>         if (firstModule == null) {
>           inputs.add(input);
>           inputMap.put(inputName, module);
>         } else {
>           report(JSError.make(DUPLICATE_INPUT_IN_MODULES,
>               firstModule.getName(), module.getName(), inputName));
>         }
>       }
>     }
>     if (hasErrors()) {
> 
>       
>       return new CompilerInput[0];
>     }
> 
>     return inputs.toArray(new CompilerInput[inputs.size()]);
>   }
> 
>   static final DiagnosticType DUPLICATE_INPUT =
>       DiagnosticType.error("JSC_DUPLICATE_INPUT", "Duplicate input: {0}");
>   static final DiagnosticType DUPLICATE_EXTERN_INPUT =
>       DiagnosticType.error("JSC_DUPLICATE_EXTERN_INPUT",
>           "Duplicate extern input: {0}");
> 
>   
> 
> 
> 
>   void initInputsByNameMap() {
>     inputsByName_ = new HashMap<String, CompilerInput>();
>     for (CompilerInput input : externs_) {
>       String name = input.getName();
>       if (!inputsByName_.containsKey(name)) {
>         inputsByName_.put(name, input);
>       } else {
>         report(JSError.make(DUPLICATE_EXTERN_INPUT, name));
>       }
>     }
>     for (CompilerInput input : inputs_) {
>       String name = input.getName();
>       if (!inputsByName_.containsKey(name)) {
>         inputsByName_.put(name, input);
>       } else {
>         report(JSError.make(DUPLICATE_INPUT, name));
>       }
>     }
>   }
> 
>   public Result compile(
>       JSSourceFile extern, JSSourceFile input, CompilerOptions options) {
>      return compile(extern, new JSSourceFile[] { input }, options);
>   }
> 
>   public Result compile(
>       JSSourceFile extern, JSSourceFile[] input, CompilerOptions options) {
>      return compile(new JSSourceFile[] { extern }, input, options);
>   }
> 
>   public Result compile(
>       JSSourceFile extern, JSModule[] modules, CompilerOptions options) {
>      return compile(new JSSourceFile[] { extern }, modules, options);
>   }
> 
>   
> 
> 
>   public Result compile(JSSourceFile[] externs,
>                         JSSourceFile[] inputs,
>                         CompilerOptions options) {
> 
>     
>     Preconditions.checkState(jsRoot == null);
> 
>     try {
>       init(externs, inputs, options);
>       if (hasErrors()) {
>         return getResult();
>       }
>       return compile();
>     } finally {
>       Tracer t = newTracer("generateReport");
>       errorManager.generateReport();
>       stopTracer(t, "generateReport");
>     }
>   }
> 
>   
> 
> 
>   public Result compile(JSSourceFile[] externs,
>                         JSModule[] modules,
>                         CompilerOptions options) {
>     
>     Preconditions.checkState(jsRoot == null);
> 
>     try {
>       init(externs, modules, options);
>       if (hasErrors()) {
>         return getResult();
>       }
>       return compile();
>     } finally {
>       Tracer t = newTracer("generateReport");
>       errorManager.generateReport();
>       stopTracer(t, "generateReport");
>     }
>   }
> 
>   private Result compile() {
>     return runInCompilerThread(new Callable<Result>() {
>       public Result call() throws Exception {
>         compileInternal();
>         return getResult();
>       }
>     });
>   }
> 
>   
> 
> 
> 
>   public void disableThreads() {
>     useThreads = false;
>   }
> 
>   @SuppressWarnings("unchecked")
>   private <T> T runInCompilerThread(final Callable<T> callable) {
> 
>     
>     
>     
>     
>     
> 
>     final boolean dumpTraceReport = options_.tracer.isOn();
>     final Object[] result = new Object[1];
>     final Throwable[] exception = new Throwable[1];
>     Runnable runnable = new Runnable() {
>       public void run() {
>         try {
>           if (dumpTraceReport) {
>             Tracer.initCurrentThreadTrace();
>           }
>           result[0] = callable.call();
>         } catch (Throwable e) {
>           exception[0] = e;
>         } finally {
>           if (dumpTraceReport) {
>             Tracer.logAndClearCurrentThreadTrace();
>           }
>         }
>       }
>     };
> 
>     if (useThreads) {
>       Thread th = new Thread(null, runnable, "jscompiler", COMPILER_STACK_SIZE);
>       th.start();
>       while (true) {
>         try {
>           th.join();
>           break;
>         } catch (InterruptedException ignore) {
>           
>         }
>       }
>     } else {
>       runnable.run();
>     }
> 
>     
>     if (exception[0] != null) {
>       throw new RuntimeException(exception[0]);
>     }
> 
>     return (T) result[0];
>   }
> 
>   private void compileInternal() {
>     parse();
>     if (hasErrors()) {
>       return;
>     }
> 
>     if (!precheck()) {
>       return;
>     }
> 
>     if (options_.nameAnonymousFunctionsOnly) {
>       nameAnonymousFunctions(options_.anonymousFunctionNaming);
>       return;
>     }
> 
>     if (!options_.skipAllPasses) {
>       check();
>       if (hasErrors()) {
>         return;
>       }
> 
>       if (options_.externExportsPath != null) {
>         externExports();
>       }
> 
>       
>       if (!options_.ideMode) {
>         optimize();
>       }
>     }
> 
>     if (options_.recordFunctionInformation) {
>       recordFunctionInformation();
>     }
>   }
> 
>   public void parse() {
>     parseInputs();
>   }
> 
>   PassConfig getPassConfig() {
>     if (passes == null) {
>       passes = createPassConfigInternal();
>     }
>     return passes;
>   }
> 
>   
> 
> 
> 
>   PassConfig createPassConfigInternal() {
>     return new DefaultPassConfig(options_);
>   }
> 
>   
> 
> 
> 
> 
>   public void setPassConfig(PassConfig passes) {
>     
>     
>     
>     
>     
>     Preconditions.checkNotNull(passes);
> 
>     if (this.passes != null) {
>       throw new IllegalStateException("this.passes has already been assigned");
>     }
>     this.passes = passes;
>   }
> 
>   
> 
> 
> 
> 
> 
>   boolean precheck() {
>     return true;
>   }
> 
>   public void check() {
>     runCustomPasses(CustomPassExecutionTime.BEFORE_CHECKS);
> 
>     PhaseOptimizer phaseOptimizer = new PhaseOptimizer(this, tracker);
>     if (options_.devMode == DevMode.EVERY_PASS) {
>       phaseOptimizer.setSanityCheck(sanityCheck);
>     }
>     phaseOptimizer.consume(getPassConfig().getChecks());
>     phaseOptimizer.process(externsRoot, jsRoot);
>     if (hasErrors()) {
>       return;
>     }
> 
>     if (options_.instrumentationTemplate != null ||
>         options_.recordFunctionInformation) {
>       computeFunctionNames();
>     }
> 
>     if (options_.removeTryCatchFinally) {
>       removeTryCatchFinally();
>     }
> 
>     if (!options_.stripTypes.isEmpty() ||
>         !options_.stripNameSuffixes.isEmpty() ||
>         !options_.stripTypePrefixes.isEmpty() ||
>         !options_.stripNamePrefixes.isEmpty()) {
>       stripCode(options_.stripTypes, options_.stripNameSuffixes,
>           options_.stripTypePrefixes, options_.stripNamePrefixes);
>     }
> 
>     runCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATIONS);
> 
>     
>     
>     
>     
>     
>     normalize();
> 
>     
>     if (options_.sourceMapOutputPath != null) {
>       this.sourceMap_ = new SourceMap();
>     }
>   }
> 
>   private void externExports() {
>     logger_.info("Creating extern file for exports");
>     startPass("externExports");
> 
>     ExternExportsPass pass = new ExternExportsPass(this);
>     process(pass);
> 
>     externExports_ = pass.getGeneratedExterns();
> 
>     endPass();
>   }
> 
>   void process(CompilerPass p) {
>     p.process(externsRoot, jsRoot);
>   }
> 
>   private final PassFactory sanityCheck =
>       new PassFactory("sanityCheck", false) {
>     @Override
>     protected CompilerPass createInternal(AbstractCompiler compiler) {
>       return new SanityCheck(compiler);
>     }
>   };
> 
>   private void maybeSanityCheck(String passName) {
>     if (options_.devMode == DevMode.EVERY_PASS) {
>       sanityCheck.create(this).process(null, jsRoot);
>     }
>   }
> 
>   
> 
> 
>   void removeTryCatchFinally() {
>     logger_.info("Remove try/catch/finally");
>     startPass("removeTryCatchFinally");
>     RemoveTryCatch r = new RemoveTryCatch(this);
>     process(r);
>     endPass();
>   }
> 
>   
> 
> 
> 
>   void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes,
>       Set<String> stripTypePrefixes, Set<String> stripNamePrefixes) {
>     logger_.info("Strip code");
>     startPass("stripCode");
>     StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,
>         stripTypePrefixes, stripNamePrefixes);
>     process(r);
>     endPass();
>   }
> 
>   
> 
> 
> 
>   private void aliasStrings(Set<String> aliasableStrings,
>                             boolean aliasAllStrings,
>                             String aliasStringsBlacklist,
>                             boolean outputStringUsage) {
>     logger_.info("Aliasing strings");
>     startPass("aliasStrings");
>     AliasStrings aliasStrings = new AliasStrings(
>         this,
>         getModuleGraph(),
>         aliasAllStrings ? null : aliasableStrings,
>         aliasStringsBlacklist,
>         outputStringUsage);
>     process(aliasStrings);
>     endPass();
>   }
> 
>   private void aliasKeywords() {
>     logger_.info("Aliasing true/false/null");
>     startPass("aliasKeywords");
>     AliasKeywords aliasKeywords = new AliasKeywords(this);
>     process(aliasKeywords);
>     endPass();
>   }
> 
>   
> 
> 
>   private void runCustomPasses(CustomPassExecutionTime executionTime) {
>     if (options_.customPasses != null) {
>       Tracer t = newTracer("runCustomPasses");
>       try {
>         for (CompilerPass p : options_.customPasses.get(executionTime)) {
>           process(p);
>         }
>       } finally {
>         stopTracer(t, "runCustomPasses");
>       }
>     }
>   }
> 
>   private Tracer currentTracer = null;
>   private String currentPassName = null;
> 
>   
> 
> 
>   void startPass(String passName) {
>     Preconditions.checkState(currentTracer == null);
>     currentPassName = passName;
>     currentTracer = newTracer(passName);
>   }
> 
>   
> 
> 
>   void endPass() {
>     Preconditions.checkState(currentTracer != null,
>         "Tracer should not be null at the end of a pass.");
>     stopTracer(currentTracer, currentPassName);
>     String passToCheck = currentPassName;
>     currentPassName = null;
>     currentTracer = null;
> 
>     maybeSanityCheck(passToCheck);
>   }
> 
>   
> 
> 
>   Tracer newTracer(String passName) {
>     String comment = passName
>         + (recentChange.hasCodeChanged() ? " on recently changed AST" : "");
>     if (options_.tracer.isOn()) {
>       tracker.recordPassStart(passName);
>     }
>     return new Tracer("Compiler", comment);
>   }
> 
>   void stopTracer(Tracer t, String passName) {
>     long result = t.stop();
>     if (options_.tracer.isOn()) {
>       tracker.recordPassStop(passName, result);
>     }
>   }
> 
>   
> 
> 
>   public Result getResult() {
>     return new Result(getErrors(), getWarnings(), debugLog_.toString(),
>                       variableMap_, propertyMap_, anonFunctionNameMap_,
>                       functionInformationMap_, sourceMap_, externExports_,
>                       getPassConfig().getCssNames());
>   }
> 
>   
> 
> 
>   public JSError[] getMessages() {
>     return getErrors();
>   }
> 
>   
> 
> 
>   public JSError[] getErrors() {
>     return errorManager.getErrors();
>   }
> 
>   
> 
> 
>   public JSError[] getWarnings() {
>     return errorManager.getWarnings();
>   }
> 
>   
> 
> 
>   public Node getRoot() {
>     return externAndJsRoot;
>   }
> 
>   
> 
> 
>   private int nextUniqueNameId() {
>     return uniqueNameId++;
>   }
> 
>   
> 
> 
>   @VisibleForTesting
>   void resetUniqueNameId() {
>     uniqueNameId = 0;
>   }
> 
>   @Override
>   Supplier<String> getUniqueNameIdSupplier() {
>     final Compiler self = this;
>     return new Supplier<String>() {
>       public String get() {
>         return String.valueOf(self.nextUniqueNameId());
>       }
>     };
>   }
> 
>   
> 
> 
> 
>   void setNormalized() {
>     normalized = true;
>   }
> 
>   
> 
> 
> 
>   void setUnnormalized() {
>     normalized = false;
>   }
> 
>   @Override
>   boolean isNormalized() {
>     return normalized;
>   }
> 
>   
>   
>   
> 
>   
>   
> 
>   @Override
>   public CompilerInput getInput(String name) {
>     return inputsByName_.get(name);
>   }
> 
>   @Override
>   public CompilerInput newExternInput(String name) {
>     if (inputsByName_.containsKey(name)) {
>       throw new IllegalArgumentException("Conflicting externs name: " + name);
>     }
>     SourceAst ast = new SyntheticAst(name);
>     CompilerInput input = new CompilerInput(ast, name, true);
>     inputsByName_.put(name, input);
>     externsRoot.addChildToFront(ast.getAstRoot(this));
>     return input;
>   }
> 
>   
>   void addIncrementalSourceAst(JsAst ast) {
>     String sourceName = ast.getSourceFile().getName();
>     Preconditions.checkState(
>         getInput(sourceName) == null,
>         "Duplicate input of name " + sourceName);
>     inputsByName_.put(sourceName, new CompilerInput(ast));
>   }
> 
>   @Override
>   JSModuleGraph getModuleGraph() {
>     return moduleGraph_;
>   }
> 
>   @Override
>   public JSTypeRegistry getTypeRegistry() {
>     if (typeRegistry == null) {
>       typeRegistry = new JSTypeRegistry(oldErrorReporter);
>     }
>     return typeRegistry;
>   }
> 
>   @Override
>   ScopeCreator getScopeCreator() {
>     return getPassConfig().getScopeCreator();
>   }
> 
>   @Override
>   public Scope getTopScope() {
>     return getPassConfig().getTopScope();
>   }
> 
>   @Override
>   public ReverseAbstractInterpreter getReverseAbstractInterpreter() {
>     if (abstractInterpreter == null) {
>       ChainableReverseAbstractInterpreter interpreter =
>           new SemanticReverseAbstractInterpreter(
>               getCodingConvention(), getTypeRegistry());
>       if (options_.closurePass) {
>         interpreter = new ClosureReverseAbstractInterpreter(
>             getCodingConvention(), getTypeRegistry())
>             .append(interpreter).getFirst();
>       }
>       abstractInterpreter = interpreter;
>     }
>     return abstractInterpreter;
>   }
> 
>   @Override
>   TypeValidator getTypeValidator() {
>     return typeValidator;
>   }
> 
>   
>   
>   
> 
>   
> 
> 
> 
> 
> 
>   Node parseInputs() {
>     boolean devMode = options_.devMode != DevMode.OFF;
> 
>     
>     
>     if (externsRoot != null) {
>       externsRoot.detachChildren();
>     }
>     if (jsRoot != null) {
>       jsRoot.detachChildren();
>     }
> 
>     
>     jsRoot = new Node(Token.BLOCK);
>     jsRoot.setIsSyntheticBlock(true);
> 
>     if (options_.tracer.isOn()) {
>       tracker = new PerformanceTracker(jsRoot,
>           options_.tracer == TracerMode.ALL);
>       addChangeHandler(tracker.getCodeChangeHandler());
>     }
> 
>     Tracer tracer = newTracer("parseInputs");
> 
>     try {
>       
>       externsRoot = new Node(Token.BLOCK);
>       externsRoot.setIsSyntheticBlock(true);
>       for (CompilerInput input : externs_) {
>         Node n = input.getAstRoot(this);
>         if (hasErrors()) {
>           return null;
>         }
>         externsRoot.addChildToBack(n);
>       }
> 
>       for (CompilerInput input : inputs_) {
>         Node n = input.getAstRoot(this);
>         if (hasErrors()) {
>           return null;
>         }
> 
>         
>         if (n == null) {
>           continue;
>         }
> 
>         if (devMode) {
>           sanityCheck.create(this).process(null, n);
>           if (hasErrors()) {
>             return null;
>           }
>         }
> 
>         if (options_.sourceMapOutputPath != null ||
>             options_.nameReferenceReportPath != null) {
> 
>           
>           
>           SourceInformationAnnotator sia =
>               new SourceInformationAnnotator(input.getName());
>           NodeTraversal.traverse(this, n, sia);
>         }
> 
>         jsRoot.addChildToBack(n);
>       }
> 
>       externAndJsRoot = new Node(Token.BLOCK, externsRoot, jsRoot);
>       externAndJsRoot.setIsSyntheticBlock(true);
> 
>       return externAndJsRoot;
>     } finally {
>       stopTracer(tracer, "parseInputs");
>     }
>   }
> 
>   public Node parse(JSSourceFile file) {
>     addToDebugLog("Parsing: " + file.getName());
>     return new JsAst(file).getAstRoot(this);
>   }
> 
>   @Override
>   Node parseSyntheticCode(String js) {
>     CompilerInput input = new CompilerInput(
>         JSSourceFile.fromCode(" [synthetic] ", js));
>     inputsByName_.put(input.getName(), input);
>     return input.getAstRoot(this);
>   }
> 
>   @Override
>   Node parseSyntheticCode(String fileName, String js) {
>     return parse(JSSourceFile.fromCode(fileName, js));
>   }
> 
>   Node parseTestCode(String js) {
>     CompilerInput input = new CompilerInput(
>         JSSourceFile.fromCode(" [testcode] ", js));
>     if (inputsByName_ == null) {
>       inputsByName_ = Maps.newHashMap();
>     }
>     inputsByName_.put(input.getName(), input);
>     return input.getAstRoot(this);
>   }
> 
>   @Override
>   ErrorReporter getDefaultErrorReporter() {
>     return defaultErrorReporter;
>   }
> 
>   
>   
>   
> 
>   
> 
> 
>   public String toSource() {
>     return runInCompilerThread(new Callable<String>() {
>       public String call() throws Exception {
>         Tracer tracer = newTracer("toSource");
>         try {
>           CodeBuilder cb = new CodeBuilder();
>           if (jsRoot != null) {
>             int i = 0;
>             for (Node scriptNode = jsRoot.getFirstChild();
>                  scriptNode != null;
>                  scriptNode = scriptNode.getNext()) {
>               toSource(cb, i++, scriptNode);
>             }
>           }
>           return cb.toString();
>         } finally {
>           stopTracer(tracer, "toSource");
>         }
>       }
>     });
>   }
> 
>   
> 
> 
>   public String[] toSourceArray() {
>     return runInCompilerThread(new Callable<String[]>() {
>       public String[] call() throws Exception {
>         Tracer tracer = newTracer("toSourceArray");
>         try {
>           int numInputs = inputs_.length;
>           String[] sources = new String[numInputs];
>           CodeBuilder cb = new CodeBuilder();
>           for (int i = 0; i < numInputs; i++) {
>             Node scriptNode = inputs_[i].getAstRoot(Compiler.this);
>             cb.reset();
>             toSource(cb, i, scriptNode);
>             sources[i] = cb.toString();
>           }
>           return sources;
>         } finally {
>           stopTracer(tracer, "toSourceArray");
>         }
>       }
>     });
>   }
> 
>   
> 
> 
>   public String toSource(final JSModule module) {
>     return runInCompilerThread(new Callable<String>() {
>       public String call() throws Exception {
>         List<CompilerInput> inputs = module.getInputs();
>         int numInputs = inputs.size();
>         if (numInputs == 0) {
>           return "";
>         }
>         CodeBuilder cb = new CodeBuilder();
>         for (int i = 0; i < numInputs; i++) {
>           Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);
>           if (scriptNode == null) {
>             throw new IllegalArgumentException(
>                 "Bad module: " + module.getName());
>           }
>           toSource(cb, i, scriptNode);
>         }
>         return cb.toString();
>       }
>     });
>   }
> 
> 
>   
> 
> 
>   public String[] toSourceArray(final JSModule module) {
>     return runInCompilerThread(new Callable<String[]>() {
>       public String[] call() throws Exception {
>         List<CompilerInput> inputs = module.getInputs();
>         int numInputs = inputs.size();
>         if (numInputs == 0) {
>           return new String[0];
>         }
> 
>         String[] sources = new String[numInputs];
>         CodeBuilder cb = new CodeBuilder();
>         for (int i = 0; i < numInputs; i++) {
>           Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);
>           if (scriptNode == null) {
>             throw new IllegalArgumentException(
>                 "Bad module input: " + inputs.get(i).getName());
>           }
> 
>           cb.reset();
>           toSource(cb, i, scriptNode);
>           sources[i] = cb.toString();
>         }
>         return sources;
>       }
>     });
>   }
> 
>   
> 
> 
> 
> 
> 
> 
>   public void toSource(final CodeBuilder cb,
>                        final int inputSeqNum,
>                        final Node root) {
>     runInCompilerThread(new Callable<Void>() {
>       public Void call() throws Exception {
>         if (options_.printInputDelimiter) {
>           if ((cb.getLength() > 0) && !cb.endsWith("\n")) {
>             cb.append("\n");  
>           }
>           cb.append("
>             .append(String.valueOf(inputSeqNum))
>             .append("\n");
>         }
>         if (root.getJSDocInfo() != null &&
>             root.getJSDocInfo().getLicense() != null) {
>           cb.append("
> 
> \n");
>         }
> 
>         
>         
>         if (options_.sourceMapOutputPath != null) {
>           sourceMap_.setStartingPosition(
>               cb.getLineIndex(), cb.getColumnIndex());
>         }
> 
>         String code = toSource(root);
>         if (!code.isEmpty()) {
>           cb.append(code);
>           if (!code.endsWith(";")) {
>             cb.append(";");
>           }
>         }
>         return null;
>       }
>     });
>   }
> 
>   
> 
> 
>   @Override
>   String toSource(Node n) {
>     CodePrinter.Builder builder = new CodePrinter.Builder(n);
>     builder.setPrettyPrint(options_.prettyPrint);
>     builder.setLineBreak(options_.lineBreak);
>     builder.setSourceMap(sourceMap_);
>     return builder.build();
>   }
> 
>   
> 
> 
> 
>   public static class CodeBuilder {
>     private final StringBuilder sb = new StringBuilder();
>     private int lineCount = 0;
> 
>     
>     void reset() {
>       sb.setLength(0);
>     }
> 
>     
>     CodeBuilder append(String str) {
>       sb.append(str);
> 
>       
>       int index = -1;
>       while ((index = str.indexOf('\n', index + 1)) >= 0) {
>         ++lineCount;
>       }
> 
>       return this;
>     }
> 
>     
>     @Override
>     public String toString() {
>       return sb.toString();
>     }
> 
>     
>     public int getLength() {
>       return sb.length();
>     }
> 
>     
>     int getLineIndex() {
>       return lineCount;
>     }
> 
>     
>     int getColumnIndex() {
>       int index = sb.lastIndexOf("\n");
>       return (index >= 0) ? sb.length() - (index + 1) : sb.length();
>     }
> 
>     
>     boolean endsWith(String suffix) {
>       return (sb.length() > suffix.length())
>           && suffix.equals(sb.substring(sb.length() - suffix.length()));
>     }
>   }
> 
>   
>   
>   
> 
>   public void optimize() {
>     PhaseOptimizer phaseOptimizer = new PhaseOptimizer(this, tracker);
>     if (options_.devMode == DevMode.EVERY_PASS) {
>       phaseOptimizer.setSanityCheck(sanityCheck);
18,1538c1305,1421
< }
< </SCRIPT>
< <NOSCRIPT>
< </NOSCRIPT>
< 
< </HEAD>
< 
< <BODY BGCOLOR="white" onload="windowTitle();">
< <HR>
< 
< 
< <!-- ========= START OF TOP NAVBAR ======= -->
< <A NAME="navbar_top"><!-- --></A>
< <A HREF="#skip-navbar_top" title="Skip navigation links"></A>
< <TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
< <TR>
< <TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
< <A NAME="navbar_top_firstrow"><!-- --></A>
< <TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
<   <TR ALIGN="center" VALIGN="top">
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
<   </TR>
< </TABLE>
< </TD>
< <TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
< </EM>
< </TD>
< </TR>
< 
< <TR>
< <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
< &nbsp;<A HREF="../../../../com/google/javascript/jscomp/CompilationLevel.html" title="enum in com.google.javascript.jscomp"><B>PREV CLASS</B></A>&nbsp;
< &nbsp;<A HREF="../../../../com/google/javascript/jscomp/Compiler.CodeBuilder.html" title="class in com.google.javascript.jscomp"><B>NEXT CLASS</B></A></FONT></TD>
< <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
<   <A HREF="../../../../index.html?com/google/javascript/jscomp/Compiler.html" target="_top"><B>FRAMES</B></A>  &nbsp;
< &nbsp;<A HREF="Compiler.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
< &nbsp;<SCRIPT type="text/javascript">
<   <!--
<   if(window==top) {
<     document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
<   }
<   
< </SCRIPT>
< <NOSCRIPT>
<   <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
< </NOSCRIPT>
< 
< 
< </FONT></TD>
< </TR>
< <TR>
< <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
<   SUMMARY:&nbsp;<A HREF="#nested_class_summary">NESTED</A>&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
< <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
< DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
< </TR>
< </TABLE>
< <A NAME="skip-navbar_top"></A>
< <!-- ========= END OF TOP NAVBAR ========= -->
< 
< <HR>
< <!-- ======== START OF CLASS DATA ======== -->
< <H2>
< <FONT SIZE="-1">
< com.google.javascript.jscomp</FONT>
< <BR>
< Class Compiler</H2>
< <PRE>
< <A HREF="http:
<   <IMG SRC="../../../../resources/inherit.gif" ALT="extended by "><A HREF="../../../../com/google/javascript/jscomp/AbstractCompiler.html" title="class in com.google.javascript.jscomp">com.google.javascript.jscomp.AbstractCompiler</A>
<       <IMG SRC="../../../../resources/inherit.gif" ALT="extended by "><B>com.google.javascript.jscomp.Compiler</B>
< </PRE>
< <DL>
< <DT><B>All Implemented Interfaces:</B> <DD><A HREF="../../../../com/google/javascript/jscomp/SourceExcerptProvider.html" title="interface in com.google.javascript.jscomp">SourceExcerptProvider</A></DD>
< </DL>
< <HR>
< <DL>
< <DT><PRE>public class <B>Compiler</B><DT>extends <A HREF="../../../../com/google/javascript/jscomp/AbstractCompiler.html" title="class in com.google.javascript.jscomp">AbstractCompiler</A></DL>
< </PRE>
< 
< <P>
< Compiler (and the other classes in this package) does the following:
<  <ul>
<  <li>parses JS code
<  <li>checks for undefined variables
<  <li>performs optimizations such as constant folding and constants inlining
<  <li>renames variables (to short names)
<  <li>outputs compact javascript code
<  </ul>
< 
<  External variables are declared in 'externs' files. For instance, the file
<  may include definitions for global javascript/browser objects such as
<  window, document.
< <P>
< 
< <P>
< <HR>
< 
< <P>
< <!-- ======== NESTED CLASS SUMMARY ======== -->
< 
< <A NAME="nested_class_summary"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
< <B>Nested Class Summary</B></FONT></TH>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;class</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.CodeBuilder.html" title="class in com.google.javascript.jscomp">Compiler.CodeBuilder</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Stores a buffer of text to which more can be appended.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;class</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.IntermediateState.html" title="class in com.google.javascript.jscomp">Compiler.IntermediateState</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Stores the internal compiler state just before optimization is performed.</TD>
< </TR>
< </TABLE>
< &nbsp;<A NAME="nested_classes_inherited_from_class_com.google.javascript.jscomp.SourceExcerptProvider"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
< <TH ALIGN="left"><B>Nested classes/interfaces inherited from interface com.google.javascript.jscomp.<A HREF="../../../../com/google/javascript/jscomp/SourceExcerptProvider.html" title="interface in com.google.javascript.jscomp">SourceExcerptProvider</A></B></TH>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD><CODE><A HREF="../../../../com/google/javascript/jscomp/SourceExcerptProvider.ExcerptFormatter.html" title="interface in com.google.javascript.jscomp">SourceExcerptProvider.ExcerptFormatter</A>, <A HREF="../../../../com/google/javascript/jscomp/SourceExcerptProvider.SourceExcerpt.html" title="enum in com.google.javascript.jscomp">SourceExcerptProvider.SourceExcerpt</A></CODE></TD>
< </TR>
< </TABLE>
< &nbsp;
< <!-- =========== FIELD SUMMARY =========== -->
< 
< <A NAME="field_summary"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
< <B>Field Summary</B></FONT></TH>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;<A HREF="../../../../com/google/javascript/jscomp/DiagnosticType.html" title="class in com.google.javascript.jscomp">DiagnosticType</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#MOTION_ITERATIONS_ERROR">MOTION_ITERATIONS_ERROR</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;<A HREF="../../../../com/google/javascript/jscomp/DiagnosticType.html" title="class in com.google.javascript.jscomp">DiagnosticType</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#OPTIMIZE_LOOP_ERROR">OPTIMIZE_LOOP_ERROR</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;<A HREF="../../../../com/google/javascript/jscomp/DiagnosticType.html" title="class in com.google.javascript.jscomp">DiagnosticType</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#READ_ERROR">READ_ERROR</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Error strings used for reporting JSErrors</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>protected &nbsp;<A HREF="../../../../com/google/javascript/jscomp/CodeChangeHandler.RecentChange.html" title="class in com.google.javascript.jscomp">CodeChangeHandler.RecentChange</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#recentChange">recentChange</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/jscomp/PerformanceTracker.html" title="class in com.google.javascript.jscomp">PerformanceTracker</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#tracker">tracker</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< </TABLE>
< &nbsp;
< <!-- ======== CONSTRUCTOR SUMMARY ======== -->
< 
< <A NAME="constructor_summary"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
< <B>Constructor Summary</B></FONT></TH>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#Compiler()">Compiler</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a Compiler that reports errors and warnings to its logger.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#Compiler(com.google.javascript.jscomp.ErrorManager)">Compiler</A></B>(<A HREF="../../../../com/google/javascript/jscomp/ErrorManager.html" title="interface in com.google.javascript.jscomp">ErrorManager</A>&nbsp;errorManager)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a Compiler that uses a custom error manager.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#Compiler(java.io.PrintStream)">Compiler</A></B>(<A HREF="http:
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates n Compiler that reports errors and warnings to an output
<  stream.</TD>
< </TR>
< </TABLE>
< &nbsp;
< <!-- ========== METHOD SUMMARY =========== -->
< 
< <A NAME="method_summary"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
< <B>Method Summary</B></FONT></TH>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#check()">check</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/jscomp/Result.html" title="class in com.google.javascript.jscomp">Result</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#compile(com.google.javascript.jscomp.JSSourceFile[], com.google.javascript.jscomp.JSModule[], com.google.javascript.jscomp.CompilerOptions)">compile</A></B>(<A HREF="../../../../com/google/javascript/jscomp/JSSourceFile.html" title="class in com.google.javascript.jscomp">JSSourceFile</A>[]&nbsp;externs,
<         <A HREF="../../../../com/google/javascript/jscomp/JSModule.html" title="class in com.google.javascript.jscomp">JSModule</A>[]&nbsp;modules,
<         <A HREF="../../../../com/google/javascript/jscomp/CompilerOptions.html" title="class in com.google.javascript.jscomp">CompilerOptions</A>&nbsp;options)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Compiles a list of modules.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/jscomp/Result.html" title="class in com.google.javascript.jscomp">Result</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#compile(com.google.javascript.jscomp.JSSourceFile[], com.google.javascript.jscomp.JSSourceFile[], com.google.javascript.jscomp.CompilerOptions)">compile</A></B>(<A HREF="../../../../com/google/javascript/jscomp/JSSourceFile.html" title="class in com.google.javascript.jscomp">JSSourceFile</A>[]&nbsp;externs,
<         <A HREF="../../../../com/google/javascript/jscomp/JSSourceFile.html" title="class in com.google.javascript.jscomp">JSSourceFile</A>[]&nbsp;inputs,
<         <A HREF="../../../../com/google/javascript/jscomp/CompilerOptions.html" title="class in com.google.javascript.jscomp">CompilerOptions</A>&nbsp;options)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Compiles a list of inputs.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/jscomp/Result.html" title="class in com.google.javascript.jscomp">Result</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#compile(com.google.javascript.jscomp.JSSourceFile, com.google.javascript.jscomp.JSModule[], com.google.javascript.jscomp.CompilerOptions)">compile</A></B>(<A HREF="../../../../com/google/javascript/jscomp/JSSourceFile.html" title="class in com.google.javascript.jscomp">JSSourceFile</A>&nbsp;extern,
<         <A HREF="../../../../com/google/javascript/jscomp/JSModule.html" title="class in com.google.javascript.jscomp">JSModule</A>[]&nbsp;modules,
<         <A HREF="../../../../com/google/javascript/jscomp/CompilerOptions.html" title="class in com.google.javascript.jscomp">CompilerOptions</A>&nbsp;options)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/jscomp/Result.html" title="class in com.google.javascript.jscomp">Result</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#compile(com.google.javascript.jscomp.JSSourceFile, com.google.javascript.jscomp.JSSourceFile[], com.google.javascript.jscomp.CompilerOptions)">compile</A></B>(<A HREF="../../../../com/google/javascript/jscomp/JSSourceFile.html" title="class in com.google.javascript.jscomp">JSSourceFile</A>&nbsp;extern,
<         <A HREF="../../../../com/google/javascript/jscomp/JSSourceFile.html" title="class in com.google.javascript.jscomp">JSSourceFile</A>[]&nbsp;input,
<         <A HREF="../../../../com/google/javascript/jscomp/CompilerOptions.html" title="class in com.google.javascript.jscomp">CompilerOptions</A>&nbsp;options)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/jscomp/Result.html" title="class in com.google.javascript.jscomp">Result</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#compile(com.google.javascript.jscomp.JSSourceFile, com.google.javascript.jscomp.JSSourceFile, com.google.javascript.jscomp.CompilerOptions)">compile</A></B>(<A HREF="../../../../com/google/javascript/jscomp/JSSourceFile.html" title="class in com.google.javascript.jscomp">JSSourceFile</A>&nbsp;extern,
<         <A HREF="../../../../com/google/javascript/jscomp/JSSourceFile.html" title="class in com.google.javascript.jscomp">JSSourceFile</A>&nbsp;input,
<         <A HREF="../../../../com/google/javascript/jscomp/CompilerOptions.html" title="class in com.google.javascript.jscomp">CompilerOptions</A>&nbsp;options)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#disableThreads()">disableThreads</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Disable threads.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#getAstDotGraph()">getAstDotGraph</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the DOT graph of the AST generated at the end of compilation.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html" title="interface in com.google.javascript.jscomp">CodingConvention</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#getCodingConvention()">getCodingConvention</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the current coding convention.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#getErrorCount()">getErrorCount</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the number of errors.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/jscomp/ErrorManager.html" title="interface in com.google.javascript.jscomp">ErrorManager</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#getErrorManager()">getErrorManager</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the error manager.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/jscomp/JSError.html" title="class in com.google.javascript.jscomp">JSError</A>[]</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#getErrors()">getErrors</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the array of errors (never null).</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/jscomp/CompilerInput.html" title="class in com.google.javascript.jscomp">CompilerInput</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#getInput(java.lang.String)">getInput</A></B>(<A HREF="http:
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Looks up an input (possibly an externs input) by name.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/jscomp/JSError.html" title="class in com.google.javascript.jscomp">JSError</A>[]</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#getMessages()">getMessages</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns an array constructed from errors + temporary warnings.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/jscomp/Result.html" title="class in com.google.javascript.jscomp">Result</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#getResult()">getResult</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the result of the compilation.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;com.google.javascript.jscomp.ReverseAbstractInterpreter</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#getReverseAbstractInterpreter()">getReverseAbstractInterpreter</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get an interpreter for type analysis.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#getRoot()">getRoot</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the root node of the AST, which includes both externs and source.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#getSourceLine(java.lang.String, int)">getSourceLine</A></B>(<A HREF="http:
<               int&nbsp;lineNumber)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get the line indicated by the line number.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/jscomp/SourceMap.html" title="class in com.google.javascript.jscomp">SourceMap</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#getSourceMap()">getSourceMap</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/jscomp/Region.html" title="interface in com.google.javascript.jscomp">Region</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#getSourceRegion(java.lang.String, int)">getSourceRegion</A></B>(<A HREF="http:
<                 int&nbsp;lineNumber)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get a region around the indicated line number.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/jscomp/Compiler.IntermediateState.html" title="class in com.google.javascript.jscomp">Compiler.IntermediateState</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#getState()">getState</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the current internal state, excluding the input files and modules.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/jscomp/Scope.html" title="class in com.google.javascript.jscomp">Scope</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#getTopScope()">getTopScope</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the top scope.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html" title="class in com.google.javascript.rhino.jstype">JSTypeRegistry</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#getTypeRegistry()">getTypeRegistry</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets a central registry of type information from the compiled JS.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#getWarningCount()">getWarningCount</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the number of warnings.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/jscomp/JSError.html" title="class in com.google.javascript.jscomp">JSError</A>[]</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#getWarnings()">getWarnings</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the array of warnings (never null).</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#hasErrors()">hasErrors</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Consults the <A HREF="../../../../com/google/javascript/jscomp/ErrorManager.html" title="interface in com.google.javascript.jscomp"><CODE>ErrorManager</CODE></A> to see if we've encountered errors
<  that should halt compilation.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#init(com.google.javascript.jscomp.JSSourceFile[], com.google.javascript.jscomp.JSModule[], com.google.javascript.jscomp.CompilerOptions)">init</A></B>(<A HREF="../../../../com/google/javascript/jscomp/JSSourceFile.html" title="class in com.google.javascript.jscomp">JSSourceFile</A>[]&nbsp;externs,
<      <A HREF="../../../../com/google/javascript/jscomp/JSModule.html" title="class in com.google.javascript.jscomp">JSModule</A>[]&nbsp;modules,
<      <A HREF="../../../../com/google/javascript/jscomp/CompilerOptions.html" title="class in com.google.javascript.jscomp">CompilerOptions</A>&nbsp;options)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Initializes the instance state needed for a compile job.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#init(com.google.javascript.jscomp.JSSourceFile[], com.google.javascript.jscomp.JSSourceFile[], com.google.javascript.jscomp.CompilerOptions)">init</A></B>(<A HREF="../../../../com/google/javascript/jscomp/JSSourceFile.html" title="class in com.google.javascript.jscomp">JSSourceFile</A>[]&nbsp;externs,
<      <A HREF="../../../../com/google/javascript/jscomp/JSSourceFile.html" title="class in com.google.javascript.jscomp">JSSourceFile</A>[]&nbsp;inputs,
<      <A HREF="../../../../com/google/javascript/jscomp/CompilerOptions.html" title="class in com.google.javascript.jscomp">CompilerOptions</A>&nbsp;options)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Initializes the instance state needed for a compile job.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#isIdeMode()">isIdeMode</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns true if compiling in IDE mode.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#isTypeCheckingEnabled()">isTypeCheckingEnabled</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns true if type checking is enabled.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/jscomp/CompilerInput.html" title="class in com.google.javascript.jscomp">CompilerInput</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#newExternInput(java.lang.String)">newExternInput</A></B>(<A HREF="http:
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a new externs file.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#normalize()">normalize</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#optimize()">optimize</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#parse()">parse</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#parse(com.google.javascript.jscomp.JSSourceFile)">parse</A></B>(<A HREF="../../../../com/google/javascript/jscomp/JSSourceFile.html" title="class in com.google.javascript.jscomp">JSSourceFile</A>&nbsp;file)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#processDefines()">processDefines</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Reprocesses the current defines over the AST.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#rebuildInputsFromModules()">rebuildInputsFromModules</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Rebuilds the internal list of inputs by iterating over all modules.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#reportCodeChange()">reportCodeChange</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;All passes should call reportCodeChange() when they alter
<  the JS tree structure.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#setCodingConvention(com.google.javascript.jscomp.CodingConvention)">setCodingConvention</A></B>(<A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html" title="interface in com.google.javascript.jscomp">CodingConvention</A>&nbsp;convention)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#setErrorManager(com.google.javascript.jscomp.ErrorManager)">setErrorManager</A></B>(<A HREF="../../../../com/google/javascript/jscomp/ErrorManager.html" title="interface in com.google.javascript.jscomp">ErrorManager</A>&nbsp;errorManager)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the error manager.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#setLoggingLevel(java.util.logging.Level)">setLoggingLevel</A></B>(<A HREF="http:
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the logging level for the com.google.javascript.jscomp package.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#setPassConfig(com.google.javascript.jscomp.PassConfig)">setPassConfig</A></B>(<A HREF="../../../../com/google/javascript/jscomp/PassConfig.html" title="class in com.google.javascript.jscomp">PassConfig</A>&nbsp;passes)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#setState(com.google.javascript.jscomp.Compiler.IntermediateState)">setState</A></B>(<A HREF="../../../../com/google/javascript/jscomp/Compiler.IntermediateState.html" title="class in com.google.javascript.jscomp">Compiler.IntermediateState</A>&nbsp;state)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the internal state to the capture given.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#toSource()">toSource</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Converts the main parse tree back to js code.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#toSource(com.google.javascript.jscomp.Compiler.CodeBuilder, int, com.google.javascript.rhino.Node)">toSource</A></B>(<A HREF="../../../../com/google/javascript/jscomp/Compiler.CodeBuilder.html" title="class in com.google.javascript.jscomp">Compiler.CodeBuilder</A>&nbsp;cb,
<          int&nbsp;inputSeqNum,
<          <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;root)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Writes out js code from a root node.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#toSource(com.google.javascript.jscomp.JSModule)">toSource</A></B>(<A HREF="../../../../com/google/javascript/jscomp/JSModule.html" title="class in com.google.javascript.jscomp">JSModule</A>&nbsp;module)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Converts the parse tree for a module back to js code.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#toSourceArray()">toSourceArray</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Converts the parse tree for each input back to js code.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Compiler.html#toSourceArray(com.google.javascript.jscomp.JSModule)">toSourceArray</A></B>(<A HREF="../../../../com/google/javascript/jscomp/JSModule.html" title="class in com.google.javascript.jscomp">JSModule</A>&nbsp;module)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Converts the parse tree for each input in a module back to js code.</TD>
< </TR>
< </TABLE>
< &nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
< <TH ALIGN="left"><B>Methods inherited from class java.lang.<A HREF="http:
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD><CODE><A HREF="http:
< </TR>
< </TABLE>
< &nbsp;
< <P>
< 
< <!-- ============ FIELD DETAIL =========== -->
< 
< <A NAME="field_detail"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
< <B>Field Detail</B></FONT></TH>
< </TR>
< </TABLE>
< 
< <A NAME="tracker"><!-- --></A><H3>
< tracker</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/jscomp/PerformanceTracker.html" title="class in com.google.javascript.jscomp">PerformanceTracker</A> <B>tracker</B></PRE>
< <DL>
< <DL>
< </DL>
< </DL>
< <HR>
< 
< <A NAME="READ_ERROR"><!-- --></A><H3>
< READ_ERROR</H3>
< <PRE>
< public static final <A HREF="../../../../com/google/javascript/jscomp/DiagnosticType.html" title="class in com.google.javascript.jscomp">DiagnosticType</A> <B>READ_ERROR</B></PRE>
< <DL>
< <DD>Error strings used for reporting JSErrors
< <P>
< <DL>
< </DL>
< </DL>
< <HR>
< 
< <A NAME="OPTIMIZE_LOOP_ERROR"><!-- --></A><H3>
< OPTIMIZE_LOOP_ERROR</H3>
< <PRE>
< public static final <A HREF="../../../../com/google/javascript/jscomp/DiagnosticType.html" title="class in com.google.javascript.jscomp">DiagnosticType</A> <B>OPTIMIZE_LOOP_ERROR</B></PRE>
< <DL>
< <DL>
< </DL>
< </DL>
< <HR>
< 
< <A NAME="MOTION_ITERATIONS_ERROR"><!-- --></A><H3>
< MOTION_ITERATIONS_ERROR</H3>
< <PRE>
< public static final <A HREF="../../../../com/google/javascript/jscomp/DiagnosticType.html" title="class in com.google.javascript.jscomp">DiagnosticType</A> <B>MOTION_ITERATIONS_ERROR</B></PRE>
< <DL>
< <DL>
< </DL>
< </DL>
< <HR>
< 
< <A NAME="recentChange"><!-- --></A><H3>
< recentChange</H3>
< <PRE>
< protected final <A HREF="../../../../com/google/javascript/jscomp/CodeChangeHandler.RecentChange.html" title="class in com.google.javascript.jscomp">CodeChangeHandler.RecentChange</A> <B>recentChange</B></PRE>
< <DL>
< <DL>
< </DL>
< </DL>
< 
< <!-- ========= CONSTRUCTOR DETAIL ======== -->
< 
< <A NAME="constructor_detail"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
< <B>Constructor Detail</B></FONT></TH>
< </TR>
< </TABLE>
< 
< <A NAME="Compiler()"><!-- --></A><H3>
< Compiler</H3>
< <PRE>
< public <B>Compiler</B>()</PRE>
< <DL>
< <DD>Creates a Compiler that reports errors and warnings to its logger.
< <P>
< </DL>
< <HR>
< 
< <A NAME="Compiler(java.io.PrintStream)"><!-- --></A><H3>
< Compiler</H3>
< <PRE>
< public <B>Compiler</B>(<A HREF="http:
< <DL>
< <DD>Creates n Compiler that reports errors and warnings to an output
<  stream.
< <P>
< </DL>
< <HR>
< 
< <A NAME="Compiler(com.google.javascript.jscomp.ErrorManager)"><!-- --></A><H3>
< Compiler</H3>
< <PRE>
< public <B>Compiler</B>(<A HREF="../../../../com/google/javascript/jscomp/ErrorManager.html" title="interface in com.google.javascript.jscomp">ErrorManager</A>&nbsp;errorManager)</PRE>
< <DL>
< <DD>Creates a Compiler that uses a custom error manager.
< <P>
< </DL>
< 
< <!-- ============ METHOD DETAIL ========== -->
< 
< <A NAME="method_detail"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
< <B>Method Detail</B></FONT></TH>
< </TR>
< </TABLE>
< 
< <A NAME="setErrorManager(com.google.javascript.jscomp.ErrorManager)"><!-- --></A><H3>
< setErrorManager</H3>
< <PRE>
< public void <B>setErrorManager</B>(<A HREF="../../../../com/google/javascript/jscomp/ErrorManager.html" title="interface in com.google.javascript.jscomp">ErrorManager</A>&nbsp;errorManager)</PRE>
< <DL>
< <DD>Sets the error manager.
< <P>
< <DD><DL>
< <DT><B>Parameters:</B><DD><CODE>errorManager</CODE> - the error manager, it cannot be <code>null</code></DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="init(com.google.javascript.jscomp.JSSourceFile[], com.google.javascript.jscomp.JSSourceFile[], com.google.javascript.jscomp.CompilerOptions)"><!-- --></A><H3>
< init</H3>
< <PRE>
< public void <B>init</B>(<A HREF="../../../../com/google/javascript/jscomp/JSSourceFile.html" title="class in com.google.javascript.jscomp">JSSourceFile</A>[]&nbsp;externs,
<                  <A HREF="../../../../com/google/javascript/jscomp/JSSourceFile.html" title="class in com.google.javascript.jscomp">JSSourceFile</A>[]&nbsp;inputs,
<                  <A HREF="../../../../com/google/javascript/jscomp/CompilerOptions.html" title="class in com.google.javascript.jscomp">CompilerOptions</A>&nbsp;options)</PRE>
< <DL>
< <DD>Initializes the instance state needed for a compile job.
< <P>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="init(com.google.javascript.jscomp.JSSourceFile[], com.google.javascript.jscomp.JSModule[], com.google.javascript.jscomp.CompilerOptions)"><!-- --></A><H3>
< init</H3>
< <PRE>
< public void <B>init</B>(<A HREF="../../../../com/google/javascript/jscomp/JSSourceFile.html" title="class in com.google.javascript.jscomp">JSSourceFile</A>[]&nbsp;externs,
<                  <A HREF="../../../../com/google/javascript/jscomp/JSModule.html" title="class in com.google.javascript.jscomp">JSModule</A>[]&nbsp;modules,
<                  <A HREF="../../../../com/google/javascript/jscomp/CompilerOptions.html" title="class in com.google.javascript.jscomp">CompilerOptions</A>&nbsp;options)</PRE>
< <DL>
< <DD>Initializes the instance state needed for a compile job.
< <P>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="rebuildInputsFromModules()"><!-- --></A><H3>
< rebuildInputsFromModules</H3>
< <PRE>
< public void <B>rebuildInputsFromModules</B>()</PRE>
< <DL>
< <DD>Rebuilds the internal list of inputs by iterating over all modules.
<  This is necessary if inputs have been added to or removed from a module
<  after the <A HREF="../../../../com/google/javascript/jscomp/Compiler.html#init(com.google.javascript.jscomp.JSSourceFile[], com.google.javascript.jscomp.JSModule[], com.google.javascript.jscomp.CompilerOptions)"><CODE>init(JSSourceFile[], JSModule[], CompilerOptions)</CODE></A> call.
< <P>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="compile(com.google.javascript.jscomp.JSSourceFile, com.google.javascript.jscomp.JSSourceFile, com.google.javascript.jscomp.CompilerOptions)"><!-- --></A><H3>
< compile</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/jscomp/Result.html" title="class in com.google.javascript.jscomp">Result</A> <B>compile</B>(<A HREF="../../../../com/google/javascript/jscomp/JSSourceFile.html" title="class in com.google.javascript.jscomp">JSSourceFile</A>&nbsp;extern,
<                       <A HREF="../../../../com/google/javascript/jscomp/JSSourceFile.html" title="class in com.google.javascript.jscomp">JSSourceFile</A>&nbsp;input,
<                       <A HREF="../../../../com/google/javascript/jscomp/CompilerOptions.html" title="class in com.google.javascript.jscomp">CompilerOptions</A>&nbsp;options)</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="compile(com.google.javascript.jscomp.JSSourceFile, com.google.javascript.jscomp.JSSourceFile[], com.google.javascript.jscomp.CompilerOptions)"><!-- --></A><H3>
< compile</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/jscomp/Result.html" title="class in com.google.javascript.jscomp">Result</A> <B>compile</B>(<A HREF="../../../../com/google/javascript/jscomp/JSSourceFile.html" title="class in com.google.javascript.jscomp">JSSourceFile</A>&nbsp;extern,
<                       <A HREF="../../../../com/google/javascript/jscomp/JSSourceFile.html" title="class in com.google.javascript.jscomp">JSSourceFile</A>[]&nbsp;input,
<                       <A HREF="../../../../com/google/javascript/jscomp/CompilerOptions.html" title="class in com.google.javascript.jscomp">CompilerOptions</A>&nbsp;options)</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="compile(com.google.javascript.jscomp.JSSourceFile, com.google.javascript.jscomp.JSModule[], com.google.javascript.jscomp.CompilerOptions)"><!-- --></A><H3>
< compile</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/jscomp/Result.html" title="class in com.google.javascript.jscomp">Result</A> <B>compile</B>(<A HREF="../../../../com/google/javascript/jscomp/JSSourceFile.html" title="class in com.google.javascript.jscomp">JSSourceFile</A>&nbsp;extern,
<                       <A HREF="../../../../com/google/javascript/jscomp/JSModule.html" title="class in com.google.javascript.jscomp">JSModule</A>[]&nbsp;modules,
<                       <A HREF="../../../../com/google/javascript/jscomp/CompilerOptions.html" title="class in com.google.javascript.jscomp">CompilerOptions</A>&nbsp;options)</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="compile(com.google.javascript.jscomp.JSSourceFile[], com.google.javascript.jscomp.JSSourceFile[], com.google.javascript.jscomp.CompilerOptions)"><!-- --></A><H3>
< compile</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/jscomp/Result.html" title="class in com.google.javascript.jscomp">Result</A> <B>compile</B>(<A HREF="../../../../com/google/javascript/jscomp/JSSourceFile.html" title="class in com.google.javascript.jscomp">JSSourceFile</A>[]&nbsp;externs,
<                       <A HREF="../../../../com/google/javascript/jscomp/JSSourceFile.html" title="class in com.google.javascript.jscomp">JSSourceFile</A>[]&nbsp;inputs,
<                       <A HREF="../../../../com/google/javascript/jscomp/CompilerOptions.html" title="class in com.google.javascript.jscomp">CompilerOptions</A>&nbsp;options)</PRE>
< <DL>
< <DD>Compiles a list of inputs.
< <P>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="compile(com.google.javascript.jscomp.JSSourceFile[], com.google.javascript.jscomp.JSModule[], com.google.javascript.jscomp.CompilerOptions)"><!-- --></A><H3>
< compile</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/jscomp/Result.html" title="class in com.google.javascript.jscomp">Result</A> <B>compile</B>(<A HREF="../../../../com/google/javascript/jscomp/JSSourceFile.html" title="class in com.google.javascript.jscomp">JSSourceFile</A>[]&nbsp;externs,
<                       <A HREF="../../../../com/google/javascript/jscomp/JSModule.html" title="class in com.google.javascript.jscomp">JSModule</A>[]&nbsp;modules,
<                       <A HREF="../../../../com/google/javascript/jscomp/CompilerOptions.html" title="class in com.google.javascript.jscomp">CompilerOptions</A>&nbsp;options)</PRE>
< <DL>
< <DD>Compiles a list of modules.
< <P>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="disableThreads()"><!-- --></A><H3>
< disableThreads</H3>
< <PRE>
< public void <B>disableThreads</B>()</PRE>
< <DL>
< <DD>Disable threads. This is for clients that run on AppEngine and
<  don't have threads.
< <P>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="parse()"><!-- --></A><H3>
< parse</H3>
< <PRE>
< public void <B>parse</B>()</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="setPassConfig(com.google.javascript.jscomp.PassConfig)"><!-- --></A><H3>
< setPassConfig</H3>
< <PRE>
< public void <B>setPassConfig</B>(<A HREF="../../../../com/google/javascript/jscomp/PassConfig.html" title="class in com.google.javascript.jscomp">PassConfig</A>&nbsp;passes)</PRE>
< <DL>
< <DD><DL>
< <DT><B>Parameters:</B><DD><CODE>passes</CODE> - The PassConfig to use with this Compiler.
< <DT><B>Throws:</B>
< <DD><CODE><A HREF="http:
< <DD><CODE><A HREF="http:
< </DD>
< </DL>
< <HR>
< 
< <A NAME="check()"><!-- --></A><H3>
< check</H3>
< <PRE>
< public void <B>check</B>()</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getResult()"><!-- --></A><H3>
< getResult</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/jscomp/Result.html" title="class in com.google.javascript.jscomp">Result</A> <B>getResult</B>()</PRE>
< <DL>
< <DD>Returns the result of the compilation.
< <P>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getMessages()"><!-- --></A><H3>
< getMessages</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/jscomp/JSError.html" title="class in com.google.javascript.jscomp">JSError</A>[] <B>getMessages</B>()</PRE>
< <DL>
< <DD>Returns an array constructed from errors + temporary warnings.
< <P>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getErrors()"><!-- --></A><H3>
< getErrors</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/jscomp/JSError.html" title="class in com.google.javascript.jscomp">JSError</A>[] <B>getErrors</B>()</PRE>
< <DL>
< <DD>Returns the array of errors (never null).
< <P>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getWarnings()"><!-- --></A><H3>
< getWarnings</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/jscomp/JSError.html" title="class in com.google.javascript.jscomp">JSError</A>[] <B>getWarnings</B>()</PRE>
< <DL>
< <DD>Returns the array of warnings (never null).
< <P>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getRoot()"><!-- --></A><H3>
< getRoot</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A> <B>getRoot</B>()</PRE>
< <DL>
< <DD>Returns the root node of the AST, which includes both externs and source.
< <P>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getInput(java.lang.String)"><!-- --></A><H3>
< getInput</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/jscomp/CompilerInput.html" title="class in com.google.javascript.jscomp">CompilerInput</A> <B>getInput</B>(<A HREF="http:
< <DL>
< <DD><B>Description copied from class: <CODE><A HREF="../../../../com/google/javascript/jscomp/AbstractCompiler.html#getInput(java.lang.String)">AbstractCompiler</A></CODE></B></DD>
< <DD>Looks up an input (possibly an externs input) by name. May return null.
< <P>
< <DD><DL>
< <DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/google/javascript/jscomp/AbstractCompiler.html#getInput(java.lang.String)">getInput</A></CODE> in class <CODE><A HREF="../../../../com/google/javascript/jscomp/AbstractCompiler.html" title="class in com.google.javascript.jscomp">AbstractCompiler</A></CODE></DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="newExternInput(java.lang.String)"><!-- --></A><H3>
< newExternInput</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/jscomp/CompilerInput.html" title="class in com.google.javascript.jscomp">CompilerInput</A> <B>newExternInput</B>(<A HREF="http:
< <DL>
< <DD><B>Description copied from class: <CODE><A HREF="../../../../com/google/javascript/jscomp/AbstractCompiler.html#newExternInput(java.lang.String)">AbstractCompiler</A></CODE></B></DD>
< <DD>Creates a new externs file.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< <DT><B>Parameters:</B><DD><CODE>name</CODE> - A name for the new externs file.</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getTypeRegistry()"><!-- --></A><H3>
< getTypeRegistry</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/rhino/jstype/JSTypeRegistry.html" title="class in com.google.javascript.rhino.jstype">JSTypeRegistry</A> <B>getTypeRegistry</B>()</PRE>
< <DL>
< <DD><B>Description copied from class: <CODE><A HREF="../../../../com/google/javascript/jscomp/AbstractCompiler.html#getTypeRegistry()">AbstractCompiler</A></CODE></B></DD>
< <DD>Gets a central registry of type information from the compiled JS.
< <P>
< <DD><DL>
< <DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/google/javascript/jscomp/AbstractCompiler.html#getTypeRegistry()">getTypeRegistry</A></CODE> in class <CODE><A HREF="../../../../com/google/javascript/jscomp/AbstractCompiler.html" title="class in com.google.javascript.jscomp">AbstractCompiler</A></CODE></DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getTopScope()"><!-- --></A><H3>
< getTopScope</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/jscomp/Scope.html" title="class in com.google.javascript.jscomp">Scope</A> <B>getTopScope</B>()</PRE>
< <DL>
< <DD><B>Description copied from class: <CODE><A HREF="../../../../com/google/javascript/jscomp/AbstractCompiler.html#getTopScope()">AbstractCompiler</A></CODE></B></DD>
< <DD>Gets the top scope.
< <P>
< <DD><DL>
< <DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/google/javascript/jscomp/AbstractCompiler.html#getTopScope()">getTopScope</A></CODE> in class <CODE><A HREF="../../../../com/google/javascript/jscomp/AbstractCompiler.html" title="class in com.google.javascript.jscomp">AbstractCompiler</A></CODE></DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getReverseAbstractInterpreter()"><!-- --></A><H3>
< getReverseAbstractInterpreter</H3>
< <PRE>
< public com.google.javascript.jscomp.ReverseAbstractInterpreter <B>getReverseAbstractInterpreter</B>()</PRE>
< <DL>
< <DD><B>Description copied from class: <CODE><A HREF="../../../../com/google/javascript/jscomp/AbstractCompiler.html#getReverseAbstractInterpreter()">AbstractCompiler</A></CODE></B></DD>
< <DD>Get an interpreter for type analysis.
< <P>
< <DD><DL>
< <DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/google/javascript/jscomp/AbstractCompiler.html#getReverseAbstractInterpreter()">getReverseAbstractInterpreter</A></CODE> in class <CODE><A HREF="../../../../com/google/javascript/jscomp/AbstractCompiler.html" title="class in com.google.javascript.jscomp">AbstractCompiler</A></CODE></DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="parse(com.google.javascript.jscomp.JSSourceFile)"><!-- --></A><H3>
< parse</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A> <B>parse</B>(<A HREF="../../../../com/google/javascript/jscomp/JSSourceFile.html" title="class in com.google.javascript.jscomp">JSSourceFile</A>&nbsp;file)</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="toSource()"><!-- --></A><H3>
< toSource</H3>
< <PRE>
< public <A HREF="http:
< <DL>
< <DD>Converts the main parse tree back to js code.
< <P>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="toSourceArray()"><!-- --></A><H3>
< toSourceArray</H3>
< <PRE>
< public <A HREF="http:
< <DL>
< <DD>Converts the parse tree for each input back to js code.
< <P>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="toSource(com.google.javascript.jscomp.JSModule)"><!-- --></A><H3>
< toSource</H3>
< <PRE>
< public <A HREF="http:
< <DL>
< <DD>Converts the parse tree for a module back to js code.
< <P>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="toSourceArray(com.google.javascript.jscomp.JSModule)"><!-- --></A><H3>
< toSourceArray</H3>
< <PRE>
< public <A HREF="http:
< <DL>
< <DD>Converts the parse tree for each input in a module back to js code.
< <P>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="toSource(com.google.javascript.jscomp.Compiler.CodeBuilder, int, com.google.javascript.rhino.Node)"><!-- --></A><H3>
< toSource</H3>
< <PRE>
< public void <B>toSource</B>(<A HREF="../../../../com/google/javascript/jscomp/Compiler.CodeBuilder.html" title="class in com.google.javascript.jscomp">Compiler.CodeBuilder</A>&nbsp;cb,
<                      int&nbsp;inputSeqNum,
<                      <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;root)</PRE>
< <DL>
< <DD>Writes out js code from a root node. If printing input delimiters, this
<  method will attach a comment to the start of the text indicating which
<  input the output derived from. If there were any preserve annotations
<  within the root's source, they will also be printed in a block comment
<  at the beginning of the output.
< <P>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="optimize()"><!-- --></A><H3>
< optimize</H3>
< <PRE>
< public void <B>optimize</B>()</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="processDefines()"><!-- --></A><H3>
< processDefines</H3>
< <PRE>
< public void <B>processDefines</B>()</PRE>
< <DL>
< <DD>Reprocesses the current defines over the AST.  This is used by GwtCompiler
<  to generate N outputs for different targets from the same (checked) AST.
<  For each target, we apply the target-specific defines by calling
<  <code>processDefines</code> and then <code>optimize</code> to optimize the AST
<  specifically for that target.
< <P>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="normalize()"><!-- --></A><H3>
< normalize</H3>
< <PRE>
< public void <B>normalize</B>()</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="reportCodeChange()"><!-- --></A><H3>
< reportCodeChange</H3>
< <PRE>
< public void <B>reportCodeChange</B>()</PRE>
< <DL>
< <DD>All passes should call reportCodeChange() when they alter
<  the JS tree structure. This is verified by CompilerTestCase.
<  This allows us to optimize to a fixed point.
< <P>
< <DD><DL>
< <DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/google/javascript/jscomp/AbstractCompiler.html#reportCodeChange()">reportCodeChange</A></CODE> in class <CODE><A HREF="../../../../com/google/javascript/jscomp/AbstractCompiler.html" title="class in com.google.javascript.jscomp">AbstractCompiler</A></CODE></DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getCodingConvention()"><!-- --></A><H3>
< getCodingConvention</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html" title="interface in com.google.javascript.jscomp">CodingConvention</A> <B>getCodingConvention</B>()</PRE>
< <DL>
< <DD><B>Description copied from class: <CODE><A HREF="../../../../com/google/javascript/jscomp/AbstractCompiler.html#getCodingConvention()">AbstractCompiler</A></CODE></B></DD>
< <DD>Gets the current coding convention.
< <P>
< <DD><DL>
< <DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/google/javascript/jscomp/AbstractCompiler.html#getCodingConvention()">getCodingConvention</A></CODE> in class <CODE><A HREF="../../../../com/google/javascript/jscomp/AbstractCompiler.html" title="class in com.google.javascript.jscomp">AbstractCompiler</A></CODE></DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="setCodingConvention(com.google.javascript.jscomp.CodingConvention)"><!-- --></A><H3>
< setCodingConvention</H3>
< <PRE>
< public void <B>setCodingConvention</B>(<A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html" title="interface in com.google.javascript.jscomp">CodingConvention</A>&nbsp;convention)</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="isIdeMode()"><!-- --></A><H3>
< isIdeMode</H3>
< <PRE>
< public boolean <B>isIdeMode</B>()</PRE>
< <DL>
< <DD><B>Description copied from class: <CODE><A HREF="../../../../com/google/javascript/jscomp/AbstractCompiler.html#isIdeMode()">AbstractCompiler</A></CODE></B></DD>
< <DD>Returns true if compiling in IDE mode.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="isTypeCheckingEnabled()"><!-- --></A><H3>
< isTypeCheckingEnabled</H3>
< <PRE>
< public boolean <B>isTypeCheckingEnabled</B>()</PRE>
< <DL>
< <DD><B>Description copied from class: <CODE><A HREF="../../../../com/google/javascript/jscomp/AbstractCompiler.html#isTypeCheckingEnabled()">AbstractCompiler</A></CODE></B></DD>
< <DD>Returns true if type checking is enabled.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getErrorCount()"><!-- --></A><H3>
< getErrorCount</H3>
< <PRE>
< public int <B>getErrorCount</B>()</PRE>
< <DL>
< <DD>Gets the number of errors.
< <P>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getWarningCount()"><!-- --></A><H3>
< getWarningCount</H3>
< <PRE>
< public int <B>getWarningCount</B>()</PRE>
< <DL>
< <DD>Gets the number of warnings.
< <P>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="hasErrors()"><!-- --></A><H3>
< hasErrors</H3>
< <PRE>
< public boolean <B>hasErrors</B>()</PRE>
< <DL>
< <DD>Consults the <A HREF="../../../../com/google/javascript/jscomp/ErrorManager.html" title="interface in com.google.javascript.jscomp"><CODE>ErrorManager</CODE></A> to see if we've encountered errors
<  that should halt compilation. <p>
< 
<  If <A HREF="../../../../com/google/javascript/jscomp/CompilerOptions.html#ideMode"><CODE>CompilerOptions.ideMode</CODE></A> is <code>true</code>, this function
<  always returns <code>false</code> without consulting the error manager. The
<  error manager will continue to be told about new errors and warnings, but
<  the compiler will complete compilation of all inputs.<p>
< <P>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getSourceLine(java.lang.String, int)"><!-- --></A><H3>
< getSourceLine</H3>
< <PRE>
< public <A HREF="http:
<                             int&nbsp;lineNumber)</PRE>
< <DL>
< <DD><B>Description copied from interface: <CODE><A HREF="../../../../com/google/javascript/jscomp/SourceExcerptProvider.html#getSourceLine(java.lang.String, int)">SourceExcerptProvider</A></CODE></B></DD>
< <DD>Get the line indicated by the line number. This call will return only the
<  specific line.
< <P>
< <DD><DL>
< <DD><CODE>lineNumber</CODE> - the line number, 1 being the first line of the file
< <DT><B>Returns:</B><DD>the line indicated, or <code>null</code> if it does not exist</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getSourceRegion(java.lang.String, int)"><!-- --></A><H3>
< getSourceRegion</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/jscomp/Region.html" title="interface in com.google.javascript.jscomp">Region</A> <B>getSourceRegion</B>(<A HREF="http:
<                               int&nbsp;lineNumber)</PRE>
< <DL>
< <DD><B>Description copied from interface: <CODE><A HREF="../../../../com/google/javascript/jscomp/SourceExcerptProvider.html#getSourceRegion(java.lang.String, int)">SourceExcerptProvider</A></CODE></B></DD>
< <DD>Get a region around the indicated line number. The exact definition of a
<  region is implementation specific, but it must contain the line indicated
<  by the line number. A region must not start or end by a carriage return.
< <P>
< <DD><DL>
< <DD><CODE>lineNumber</CODE> - the line number, 1 being the first line of the file
< <DT><B>Returns:</B><DD>the region around the line number indicated, or <code>null</null>
<  if it does not exist</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getSourceMap()"><!-- --></A><H3>
< getSourceMap</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/jscomp/SourceMap.html" title="class in com.google.javascript.jscomp">SourceMap</A> <B>getSourceMap</B>()</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="setLoggingLevel(java.util.logging.Level)"><!-- --></A><H3>
< setLoggingLevel</H3>
< <PRE>
< public static void <B>setLoggingLevel</B>(<A HREF="http:
< <DL>
< <DD>Sets the logging level for the com.google.javascript.jscomp package.
< <P>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getAstDotGraph()"><!-- --></A><H3>
< getAstDotGraph</H3>
< <PRE>
< public <A HREF="http:
<                       throws <A HREF="http:
< <DL>
< <DD>Gets the DOT graph of the AST generated at the end of compilation.
< <P>
< <DD><DL>
< 
< <DT><B>Throws:</B>
< <DD><CODE><A HREF="http:
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getErrorManager()"><!-- --></A><H3>
< getErrorManager</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/jscomp/ErrorManager.html" title="interface in com.google.javascript.jscomp">ErrorManager</A> <B>getErrorManager</B>()</PRE>
< <DL>
< <DD><B>Description copied from class: <CODE><A HREF="../../../../com/google/javascript/jscomp/AbstractCompiler.html#getErrorManager()">AbstractCompiler</A></CODE></B></DD>
< <DD>Gets the error manager.
< <P>
< <DD><DL>
< <DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/google/javascript/jscomp/AbstractCompiler.html#getErrorManager()">getErrorManager</A></CODE> in class <CODE><A HREF="../../../../com/google/javascript/jscomp/AbstractCompiler.html" title="class in com.google.javascript.jscomp">AbstractCompiler</A></CODE></DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getState()"><!-- --></A><H3>
< getState</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/jscomp/Compiler.IntermediateState.html" title="class in com.google.javascript.jscomp">Compiler.IntermediateState</A> <B>getState</B>()</PRE>
< <DL>
< <DD>Returns the current internal state, excluding the input files and modules.
< <P>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="setState(com.google.javascript.jscomp.Compiler.IntermediateState)"><!-- --></A><H3>
< setState</H3>
< <PRE>
< public void <B>setState</B>(<A HREF="../../../../com/google/javascript/jscomp/Compiler.IntermediateState.html" title="class in com.google.javascript.jscomp">Compiler.IntermediateState</A>&nbsp;state)</PRE>
< <DL>
< <DD>Sets the internal state to the capture given.  Note that this assumes that
<  the input files are already set up.
< <P>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <!-- ========= END OF CLASS DATA ========= -->
< <HR>
< 
< 
< <!-- ======= START OF BOTTOM NAVBAR ====== -->
< <A NAME="navbar_bottom"><!-- --></A>
< <A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
< <TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
< <TR>
< <TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
< <A NAME="navbar_bottom_firstrow"><!-- --></A>
< <TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
<   <TR ALIGN="center" VALIGN="top">
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
<   </TR>
< </TABLE>
< </TD>
< <TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
< </EM>
< </TD>
< </TR>
< 
< <TR>
< <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
< &nbsp;<A HREF="../../../../com/google/javascript/jscomp/CompilationLevel.html" title="enum in com.google.javascript.jscomp"><B>PREV CLASS</B></A>&nbsp;
< &nbsp;<A HREF="../../../../com/google/javascript/jscomp/Compiler.CodeBuilder.html" title="class in com.google.javascript.jscomp"><B>NEXT CLASS</B></A></FONT></TD>
< <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
<   <A HREF="../../../../index.html?com/google/javascript/jscomp/Compiler.html" target="_top"><B>FRAMES</B></A>  &nbsp;
< &nbsp;<A HREF="Compiler.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
< &nbsp;<SCRIPT type="text/javascript">
<   <!--
<   if(window==top) {
<     document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
<   }
<   
< </SCRIPT>
< <NOSCRIPT>
<   <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
< </NOSCRIPT>
< 
< 
< </FONT></TD>
< </TR>
< <TR>
< <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
<   SUMMARY:&nbsp;<A HREF="#nested_class_summary">NESTED</A>&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
< <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
< DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
< </TR>
< </TABLE>
< <A NAME="skip-navbar_bottom"></A>
< <!-- ======== END OF BOTTOM NAVBAR ======= -->
< 
< <HR>
< 
<         <div id="footer">
<           <div id="footerlogo">
<             <img src="http:
<                  alt="Google colored balls">
<           </div>
< 
<           <div id="copyright">
<           <p>&copy; 2009 Google -
<             <a href="http:
<             <a href="http:
<             <a href="http:
<           </p>
<           </div>
<         </div>
---
>     phaseOptimizer.consume(getPassConfig().getOptimizations());
>     phaseOptimizer.process(externsRoot, jsRoot);
>     if (hasErrors()) {
>       return;
>     }
> 
>     if (options_.flowSensitiveInlineVariables) {
>       flowSensitiveInlineVariables();
>     }
> 
>     if (options_.collapseAnonymousFunctions) {
>       collapseAnonymousFunctions();
>     }
> 
>     
>     if (options_.moveFunctionDeclarations) {
>       moveFunctionDeclarations();
>     }
> 
>     if (options_.anonymousFunctionNaming ==
>         AnonymousFunctionNamingPolicy.MAPPED) {
>       nameAnonymousFunctions(AnonymousFunctionNamingPolicy.MAPPED);
>     }
> 
>     
>     
>     
>     
>     
>     
>     if (options_.extractPrototypeMemberDeclarations &&
>         (options_.propertyRenaming != PropertyRenamingPolicy.HEURISTIC &&
>          options_.propertyRenaming !=
>             PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC)) {
>       extractPrototypeMemberDeclarations();
>     }
> 
>     if (options_.coalesceVariableNames) {
>       coalesceVariableNames();
>     }
> 
>     VariableMap prevPropertyMap = null;
>     if (options_.inputPropertyMapSerialized != null) {
>       try {
>         prevPropertyMap =
>             VariableMap.fromBytes(options_.inputPropertyMapSerialized);
>       } catch (ParseException e) {
>         report(JSError.make(INPUT_MAP_PROP_PARSE, e.getMessage()));
>       }
>     }
> 
>     if (options_.ambiguateProperties && (options_.propertyRenaming
>         == PropertyRenamingPolicy.ALL_UNQUOTED)) {
>       ambiguateProperties(options_.anonymousFunctionNaming
>           .getReservedCharacters());
>     }
> 
>     switch (options_.propertyRenaming) {
>       case HEURISTIC:
>         renamePrototypes(false,
>             options_.anonymousFunctionNaming,
>             prevPropertyMap);
>         break;
>       case AGGRESSIVE_HEURISTIC:
>         renamePrototypes(true,
>             options_.anonymousFunctionNaming,
>             prevPropertyMap);
>         break;
>       case ALL_UNQUOTED:
>         renameProperties(options_.generatePseudoNames,
>             options_.anonymousFunctionNaming,
>             prevPropertyMap);
>         break;
>     }
> 
>     
>     
>     if (options_.convertToDottedProperties) {
>       convertToDottedProperties();
>     }
> 
>     
>     
>     
>     
>     if (options_.rewriteFunctionExpressions) {
>       rewriteFunctionExpressions();
>     }
> 
>     
>     
>     if (!options_.aliasableStrings.isEmpty() || options_.aliasAllStrings) {
>       aliasStrings(options_.aliasableStrings,
>                    options_.aliasAllStrings,
>                    options_.aliasStringsBlacklist,
>                    options_.outputJsStringUsage);
>     }
> 
>     if (options_.aliasExternals) {
>       aliasExternals();
>     }
> 
>     if (options_.aliasKeywords) {
>       aliasKeywords();
>     }
> 
>     if (options_.collapseVariableDeclarations) {
>       collapseVariableDeclarations();
>     }
> 
>     denormalize();
> 
>     if (options_.instrumentationTemplate != null) {
>       instrumentFunctions();
>     }
> 
>     if (options_.variableRenaming != VariableRenamingPolicy.ALL) {
1541,1542c1424,2025
< </BODY>
< </HTML>
---
>       
>       invertContextualRenaming();
>     }
> 
>     if (options_.variableRenaming != VariableRenamingPolicy.OFF) {
>       VariableMap prevVariableMap = null;
>       if (options_.inputVariableMapSerialized != null) {
>         try {
>           prevVariableMap =
>               VariableMap.fromBytes(options_.inputVariableMapSerialized);
>         } catch (ParseException e) {
>           report(JSError.make(INPUT_VAR_PROP_PARSE, e.getMessage()));
>         }
>       }
> 
>       renameVars(options_.renamePrefix,
>           options_.variableRenaming == VariableRenamingPolicy.LOCAL,
>           options_.anonymousFunctionNaming,
>           prevVariableMap);
>     }
> 
>     
>     if (options_.processObjectPropertyString) {
>       objectPropertyStringPostprocess();
>     }
> 
>     if (options_.labelRenaming) {
>       renameLabels();
>     }
> 
>     if (options_.anonymousFunctionNaming ==
>         AnonymousFunctionNamingPolicy.UNMAPPED) {
>       nameAnonymousFunctions(AnonymousFunctionNamingPolicy.UNMAPPED);
>     }
> 
>     
>     if (options_.checkSymbols) {
>       sanityCheckVars();
>     }
>   }
> 
>   @Override
>   void setCssRenamingMap(CssRenamingMap map) {
>     options_.cssRenamingMap = map;
>   }
> 
>   @Override
>   CssRenamingMap getCssRenamingMap() {
>     return options_.cssRenamingMap;
>   }
> 
> 
>   
>   void sanityCheckVars() {
>     logger_.info("Checking for undefined vars");
>     startPass("sanityCheckVars");
>     VarCheck v = new VarCheck(this, true);
>     process(v);
>     endPass();
>   }
> 
>   
> 
> 
> 
> 
> 
> 
>   public void processDefines() {
>     (new DefaultPassConfig(options_)).processDefines.create(this)
>         .process(externsRoot, jsRoot);
>   }
> 
>   void computeFunctionNames() {
>     logger_.info("Computing fully-qualified function names and ids");
>     startPass("computeFunctionNames");
>     functionNames_ = new FunctionNames(this);
>     process(functionNames_);
>     endPass();
>   }
> 
>   void flowSensitiveInlineVariables() {
>     logger_.info("Flow Sensitive Inline Variables");
>     startPass("flowSensitiveInlineVariables");
>     process(new FlowSensitiveInlineVariables(this));
>     endPass();
>   }
> 
>   void coalesceVariableNames() {
>     logger_.info("Coalesce Variable Names");
>     startPass("coalesceVariableNames");
>     process(new CoalesceVariableNames(this));
>     endPass();
>   }
> 
>   void collapseVariableDeclarations() {
>     logger_.info("Collapsing variable declarations");
>     startPass("collapseVariableDeclarations");
>     process(new CollapseVariableDeclarations(this));
>     setUnnormalized();
>     endPass();
>   }
> 
>   void extractPrototypeMemberDeclarations() {
>     logger_.info("Extracting Common Prototype Member Declarations");
>     startPass("extractPrototypeMemberDeclarations");
>     process(new ExtractPrototypeMemberDeclarations(this));
>     endPass();
>   }
> 
>   void rewriteFunctionExpressions() {
>     logger_.info("Rewrite function expressions");
>     startPass("rewriteFunctionExpressions");
>     process(new FunctionRewriter(this));
>     endPass();
>   }
> 
>   void collapseAnonymousFunctions() {
>     logger_.info("Collapsing anonymous functions");
>     startPass("collapseAnonymousFunctions");
>     process(new CollapseAnonymousFunctions(this));
>     endPass();
>   }
> 
> 
> 
>   void moveFunctionDeclarations() {
>     logger_.info("Move function declarations");
>     startPass("moveFunctionDeclarations");
>     process(new MoveFunctionDeclarations(this));
>     endPass();
>   }
> 
>   boolean isInliningForbidden() {
>     return options_.propertyRenaming == PropertyRenamingPolicy.HEURISTIC ||
>         options_.propertyRenaming ==
>             PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC;
>   }
> 
>   
>   ControlFlowGraph<Node> computeCFG() {
>     logger_.info("Computing Control Flow Graph");
>     Tracer tracer = newTracer("computeCFG");
>     ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true);
>     process(cfa);
>     stopTracer(tracer, "computeCFG");
>     return cfa.getCfg();
>   }
> 
>   void nameAnonymousFunctions(AnonymousFunctionNamingPolicy policy) {
>     logger_.info("Naming anonymous functions");
>     startPass("nameAnonymousFunctions");
>     if (policy == AnonymousFunctionNamingPolicy.UNMAPPED) {
>       process(new NameAnonymousFunctions(this));
>     } else if (policy == AnonymousFunctionNamingPolicy.MAPPED) {
>       NameAnonymousFunctionsMapped naf = new NameAnonymousFunctionsMapped(this);
>       process(naf);
>       anonFunctionNameMap_ = naf.getFunctionMap();
>     }
>     endPass();
>   }
> 
>   void aliasExternals() {
>     logger_.info("Creating alias functions for externals");
>     startPass("aliasExternals");
>     AliasExternals ae = new AliasExternals(this,
>                                            getModuleGraph(),
>                                            options_.unaliasableGlobals,
>                                            options_.aliasableGlobals);
>     process(ae);
>     endPass();
>   }
> 
>   void objectPropertyStringPostprocess() {
>     logger_.info("goog.testing.ObjectPropertyString postprocess");
>     startPass("ObjectPropertyStringPostprocess");
>     process(new ObjectPropertyStringPostprocess(this));
>     endPass();
>   }
> 
>   void ambiguateProperties(char[] reservedCharacters) {
>     logger_.info("Ambiguating properties");
>     startPass("ambiguateProperties");
>     process(new AmbiguateProperties(this, reservedCharacters));
>     endPass();
>   }
> 
>   public void normalize() {
>     logger_.info("Normalizing");
>     startPass("normalize");
>     process(new Normalize(this, false));
>     setNormalized();
>     endPass();
>   }
> 
>   private void denormalize() {
>     logger_.info("Denormalizing");
>     startPass("denormalize");
>     process(new Denormalize(this));
>     setUnnormalized();
>     endPass();
>   }
> 
>   @Override
>   void normalizeNodeTypes(Node root) {
>     Tracer tracer = newTracer("normalizeNodeTypes");
> 
>     
>     
>     
>     
>     CompilerPass pass = new NodeTypeNormalizer();
>     pass.process(null, root);
> 
>     stopTracer(tracer, "normalizeNodeTypes");
>   }
> 
>   @Override
>   void annotateCodingConvention(Node root) {
>     Tracer tracer = newTracer("annotateCodingConvention");
>     CompilerPass pass = new CodingConventionAnnotator(this);
>     pass.process(null, root);
>     stopTracer(tracer, "annotateCodingConvention");
>   }
> 
>   void renameVars(String renamePrefix, boolean renameLocalVarsOnly,
>       AnonymousFunctionNamingPolicy anonFunctionNamePolicy,
>       VariableMap prevVariableMap) {
>     logger_.info("Renaming vars");
>     startPass("renameVars");
>     boolean preserveAnonymousFunctionNames =
>       anonFunctionNamePolicy != AnonymousFunctionNamingPolicy.OFF;
>     RenameVars rn = new RenameVars(
>         this, renamePrefix,
>         renameLocalVarsOnly, preserveAnonymousFunctionNames,
>         prevVariableMap,
>         anonFunctionNamePolicy.getReservedCharacters(),
>         getPassConfig().getExportedNames());
>     process(rn);
>     variableMap_ = rn.getVariableMap();
>     endPass();
>   }
> 
>   void renameProperties(boolean generatePseudoNames,
>       AnonymousFunctionNamingPolicy anonFunctionNamePolicy,
>       VariableMap prevPropertyMap) {
>     logger_.info("Renaming properties");
>     startPass("renameProperties");
>     RenameProperties rp = new RenameProperties(
>         this, generatePseudoNames, prevPropertyMap,
>         anonFunctionNamePolicy.getReservedCharacters());
>     process(rp);
>     propertyMap_ = rp.getPropertyMap();
>     endPass();
>   }
> 
>   void invertContextualRenaming() {
>     logger_.info("Denormalizing local names");
>     startPass("invertNames");
>     process(MakeDeclaredNamesUnique.getContextualRenameInverter(this));
>     endPass();
>   }
> 
>   void renamePrototypes(boolean aggressive,
>       AnonymousFunctionNamingPolicy anonFunctionNamePolicy,
>       VariableMap prevPropertyMap) {
>     logger_.info("Renaming prototypes");
>     startPass("renamePrototypes");
>     RenamePrototypes rp = new RenamePrototypes(this, aggressive,
>         anonFunctionNamePolicy.getReservedCharacters(),
>         prevPropertyMap);
>     process(rp);
>     propertyMap_ = rp.getPropertyMap();
>     endPass();
>   }
> 
>   void renameLabels() {
>     logger_.info("Renaming labels");
>     startPass("renameLabels");
>     RenameLabels rn = new RenameLabels(this);
>     process(rn);
>     endPass();
>   }
> 
>   void convertToDottedProperties() {
>     logger_.info("Converting quoted property accesses to dot syntax");
>     startPass("convertToDottedProperties");
>     process(new ConvertToDottedProperties(this));
>     endPass();
>   }
> 
>   void instrumentFunctions() {
>     logger_.info("Instrumenting functions");
>     startPass("instrumentFunctions");
>     try {
>       FileReader templateFile =
>           new FileReader(options_.instrumentationTemplate);
> 
>       process(new InstrumentFunctions(this,
>                                       functionNames_,
>                                       options_.instrumentationTemplate,
>                                       options_.appNameStr,
>                                       templateFile));
>     } catch (IOException e) {
>       report(JSError.make(READ_ERROR, options_.instrumentationTemplate));
>     }
>     endPass();
>   }
> 
>   void recordFunctionInformation() {
>     logger_.info("Recording function information");
>     startPass("recordFunctionInformation");
>     RecordFunctionInformation recordFunctionInfoPass =
>         new RecordFunctionInformation(this, functionNames_);
>     process(recordFunctionInfoPass);
>     functionInformationMap_ = recordFunctionInfoPass.getMap();
>     endPass();
>   }
> 
>   protected final CodeChangeHandler.RecentChange recentChange =
>       new CodeChangeHandler.RecentChange();
>   private final List<CodeChangeHandler> codeChangeHandlers =
>       Lists.<CodeChangeHandler>newArrayList();
> 
>   @Override
>   void addChangeHandler(CodeChangeHandler handler) {
>     codeChangeHandlers.add(handler);
>   }
> 
>   @Override
>   void removeChangeHandler(CodeChangeHandler handler) {
>     codeChangeHandlers.remove(handler);
>   }
> 
>   
> 
> 
> 
> 
>   @Override
>   public void reportCodeChange() {
>     for (CodeChangeHandler handler : codeChangeHandlers) {
>       handler.reportChange();
>     }
>   }
> 
>   @Override
>   public CodingConvention getCodingConvention() {
>     CodingConvention convention = options_.getCodingConvention();
>     convention = convention != null ? convention : defaultCodingConvention;
>     return convention;
>   }
> 
>   @Override
>   public boolean isIdeMode() {
>     return options_.ideMode;
>   }
> 
>   @Override
>   public boolean isTypeCheckingEnabled() {
>     return options_.checkTypes;
>   }
> 
> 
>   
>   
>   
> 
>   @Override
>   void report(JSError error) {
>     CheckLevel level = error.level;
>     WarningsGuard guard = options_.getWarningsGuard();
>     if (guard != null) {
>       CheckLevel newLevel = guard.level(error);
>       if (newLevel != null) {
>         level = newLevel;
>       }
>     }
> 
>     if (level.isOn()) {
>       errorManager.report(level, error);
>     }
>   }
> 
>   
> 
> 
>   @Override
>   void throwInternalError(String message, Exception cause) {
>     String finalMessage =
>       "INTERNAL COMPILER ERROR.\n" +
>       "Please report this problem.\n" + message;
> 
>     RuntimeException e = new RuntimeException(finalMessage, cause);
>     if (cause != null) {
>       e.setStackTrace(cause.getStackTrace());
>     }
>     throw e;
>   }
> 
> 
>   
> 
> 
>   public int getErrorCount() {
>     return errorManager.getErrorCount();
>   }
> 
>   
> 
> 
>   public int getWarningCount() {
>     return errorManager.getWarningCount();
>   }
> 
>   @Override
>   boolean hasHaltingErrors() {
>     return !isIdeMode() && getErrorCount() > 0;
>   }
> 
>   
> 
> 
> 
> 
> 
> 
> 
> 
>   public boolean hasErrors() {
>     return hasHaltingErrors();
>   }
> 
>   
>   @Override
>   void addToDebugLog(String str) {
>     debugLog_.append(str);
>     debugLog_.append('\n');
>     logger_.fine(str);
>   }
> 
>   private SourceFile getSourceFileByName(String sourceName) {
>     if (inputsByName_.containsKey(sourceName)) {
>       return inputsByName_.get(sourceName).getSourceFile();
>     }
>     return null;
>   }
> 
>   public String getSourceLine(String sourceName, int lineNumber) {
>     if (lineNumber < 1) {
>       return null;
>     }
>     SourceFile input = getSourceFileByName(sourceName);
>     if (input != null) {
>       return input.getLine(lineNumber);
>     }
>     return null;
>   }
> 
>   public Region getSourceRegion(String sourceName, int lineNumber) {
>     if (lineNumber < 1) {
>       return null;
>     }
>     SourceFile input = getSourceFileByName(sourceName);
>     if (input != null) {
>       return input.getRegion(lineNumber);
>     }
>     return null;
>   }
> 
>   
>   
>   
> 
>   @Override
>   Node getNodeForCodeInsertion(JSModule module) {
>     if (module == null) {
>       if (inputs_.length == 0) {
>         throw new IllegalStateException("No inputs");
>       }
> 
>       return inputs_[0].getAstRoot(this);
>     }
> 
>     List<CompilerInput> inputs = module.getInputs();
>     if (inputs.size() > 0) {
>       return inputs.get(0).getAstRoot(this);
>     }
>     for (JSModule m : getModuleGraph().getTransitiveDepsDeepestFirst(module)) {
>       inputs = m.getInputs();
>       if (inputs.size() > 0) {
>         return inputs.get(0).getAstRoot(this);
>       }
>     }
>     throw new IllegalStateException("Root module has no inputs");
>   }
> 
>   public SourceMap getSourceMap() {
>     return sourceMap_;
>   }
> 
>   VariableMap getVariableMap() {
>     return variableMap_;
>   }
> 
>   VariableMap getPropertyMap() {
>     return propertyMap_;
>   }
> 
>   CompilerOptions getOptions() {
>     return options_;
>   }
> 
>   FunctionInformationMap getFunctionalInformationMap() {
>     return functionInformationMap_;
>   }
> 
>   
> 
> 
>   public static void setLoggingLevel(Level level) {
>     logger_.setLevel(level);
>   }
> 
>   
>   public String getAstDotGraph() throws IOException {
>     if (jsRoot != null) {
>       ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true);
>       cfa.process(null, jsRoot);
>       return DotFormatter.toDot(jsRoot, cfa.getCfg());
>     } else {
>       return "";
>     }
>   }
> 
>   @Override
>   public ErrorManager getErrorManager() {
>     return errorManager;
>   }
> 
>   
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>   public static class IntermediateState implements Serializable {
>     private static final long serialVersionUID = 1L;
> 
>     Node externsRoot;
>     private Node jsRoot;
>     private CompilerInput[] externs;
>     private CompilerInput[] inputs;
>     private JSModule[] modules;
>     private FunctionNames functionNames;
>     private PassConfig.State passConfigState;
>     private JSTypeRegistry typeRegistry;
>     private boolean normalized;
> 
>     private IntermediateState() {}
>   }
> 
>   
> 
> 
>   public IntermediateState getState() {
>     IntermediateState state = new IntermediateState();
>     state.externsRoot = externsRoot;
>     state.jsRoot = jsRoot;
>     state.externs = externs_;
>     state.inputs = inputs_;
>     state.modules = modules_;
>     state.functionNames = functionNames_;
>     state.passConfigState = getPassConfig().getIntermediateState();
>     state.typeRegistry = typeRegistry;
>     state.normalized = normalized;
> 
>     return state;
>   }
> 
>   
> 
> 
> 
>   public void setState(IntermediateState state) {
>     externsRoot = state.externsRoot;
>     jsRoot = state.jsRoot;
>     externs_ = state.externs;
>     inputs_ = state.inputs;
>     modules_ = state.modules;
>     functionNames_ = state.functionNames;
>     passes = createPassConfigInternal();
>     getPassConfig().setIntermediateState(state.passConfigState);
>     typeRegistry = state.typeRegistry;
>     normalized = state.normalized;
>   }
> }
