















package com.google.javascript.jscomp;

import com.google.common.collect.ImmutableSet;
import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;
import com.google.javascript.rhino.Node;







class PeepholeOptimizationsPass extends AbstractPostOrderCallback
    implements CompilerPass {
  private AbstractCompiler compiler;

  private ImmutableSet<AbstractPeepholeOptimization> peepholeOptimizations;

  PeepholeOptimizationsPass(AbstractCompiler compiler,
      ImmutableSet<AbstractPeepholeOptimization> optimizations) {
    this.compiler = compiler;
    this.peepholeOptimizations = optimizations;
  }

  



  PeepholeOptimizationsPass(AbstractCompiler compiler,
      AbstractPeepholeOptimization... optimizations) {
    this(compiler, ImmutableSet.copyOf(optimizations));
  }

  public AbstractCompiler getCompiler() {
    return compiler;
  }

  @Override
  public void process(Node externs, Node root) {
    NodeTraversal t = new NodeTraversal(compiler, this);

    beginTraversal(t);
    t.traverse(root);
    endTraversal(t);
  }

  @Override
  public void visit(NodeTraversal t, Node n, Node parent) {
    Node currentVersionOfNode = n;
    boolean somethingChanged = false;

    do {
      somethingChanged = false;
      for (AbstractPeepholeOptimization optimization : peepholeOptimizations) {
        Node newVersionOfNode =
            optimization.optimizeSubtree(currentVersionOfNode);

        if (newVersionOfNode != currentVersionOfNode) {
          somethingChanged = true;

          currentVersionOfNode = newVersionOfNode;
        }

        if (currentVersionOfNode == null) {
          return;
        }
      }
    } while(somethingChanged);
  }

  



  private void beginTraversal(NodeTraversal t) {
    for (AbstractPeepholeOptimization optimization : peepholeOptimizations) {
      optimization.beginTraversal(t);
    }
  }

  private void endTraversal(NodeTraversal t) {
    for (AbstractPeepholeOptimization optimization : peepholeOptimizations) {
      optimization.endTraversal(t);
    }
  }
}
