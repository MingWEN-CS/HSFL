50a51
> import com.google.common.collect.ImmutableList;
63d63
< import java.util.LinkedHashSet;
116c116
<   private final Map<String, Set<ObjectType>> typesIndexedByProperty =
---
>   private final Map<String, UnionTypeBuilder> typesIndexedByProperty =
121a122,127
>   private final Map<String, Map<String, ObjectType>>
>       eachRefTypeIndexedByProperty = Maps.newHashMap();
> 
>   
>   
>   
221a228
>     eachRefTypeIndexedByProperty.clear();
528a536,539
> 
>     
>     
>     registerPropertyOnType("prototype", OBJECT_FUNCTION_TYPE);
588c599,606
<     ObjectType owner = null;
---
>     UnionTypeBuilder typeSet = typesIndexedByProperty.get(propertyName);
>     if (typeSet == null) {
>       typeSet = new UnionTypeBuilder(this);
>       typesIndexedByProperty.put(propertyName, typeSet);
>     }
> 
>     typeSet.addAlternate(type);
>     addReferenceTypeIndexedByProperty(propertyName, type);
591,595c609,625
<     
<     if (type instanceof ObjectType) {
<       owner = (ObjectType) type;
<     } else if (getNativeType(ALL_TYPE).isSubtype(type)) {
<       owner = getNativeObjectType(JSTypeNative.OBJECT_TYPE);
---
>     greatestSubtypeByProperty.remove(propertyName);
>   }
> 
>   private void addReferenceTypeIndexedByProperty(
>       String propertyName, JSType type) {
>     if (type instanceof ObjectType && ((ObjectType) type).hasReferenceName()) {
>       Map<String, ObjectType> typeSet =
>           eachRefTypeIndexedByProperty.get(propertyName);
>       if (typeSet == null) {
>         typeSet = Maps.newHashMap();
>         eachRefTypeIndexedByProperty.put(propertyName, typeSet);
>       }
>       ObjectType objType = (ObjectType) type;
>       typeSet.put(objType.getReferenceName(), objType);
>     } else if (type instanceof NamedType) {
>       addReferenceTypeIndexedByProperty(
>           propertyName, ((NamedType) type).getReferencedType());
598c628
<         registerPropertyOnType(propertyName, alternate);
---
>         addReferenceTypeIndexedByProperty(propertyName, alternate);
601,612d630
< 
<     if (owner == null) {
<       return;
<     }
< 
<     Set<ObjectType> typeSet = typesIndexedByProperty.get(propertyName);
<     if (typeSet == null) {
<       typesIndexedByProperty.put(
<           propertyName, typeSet = new LinkedHashSet<ObjectType>());
<     }
<     greatestSubtypeByProperty.remove(propertyName);
<     typeSet.add(owner);
626,630c644
<       UnionTypeBuilder builder = new UnionTypeBuilder(this);
<       for (JSType alt : typesIndexedByProperty.get(propertyName)) {
<         builder.addAlternate(alt);
<       }
<       JSType built = builder.build();
---
>       JSType built = typesIndexedByProperty.get(propertyName).build();
642c656,657
<       for (JSType alt : typesIndexedByProperty.get(propertyName)) {
---
>       for (JSType alt :
>                typesIndexedByProperty.get(propertyName).getAlternates()) {
648d662
< 
655,660c669,697
<   public Set<ObjectType> getTypesWithProperty(String propertyName) {
<     Set<ObjectType> typeSet = typesIndexedByProperty.get(propertyName);
<     if (typeSet == null) {
<       Set<ObjectType> set = new LinkedHashSet<ObjectType>();
<       set.add(getNativeObjectType(NO_TYPE));
<       return set;
---
> 
> 
> 
> 
> 
>   public Iterable<JSType> getTypesWithProperty(String propertyName) {
>     if (typesIndexedByProperty.containsKey(propertyName)) {
>       return typesIndexedByProperty.get(propertyName).getAlternates();
>     } else {
>       return ImmutableList.of();
>     }
>   }
> 
>   
> 
> 
> 
> 
> 
> 
> 
> 
> 
>   public Iterable<ObjectType> getEachReferenceTypeWithProperty(
>       String propertyName) {
>     if (eachRefTypeIndexedByProperty.containsKey(propertyName)) {
>       return eachRefTypeIndexedByProperty.get(propertyName).values();
>     } else {
>       return ImmutableList.of();
662d698
<     return typeSet;
