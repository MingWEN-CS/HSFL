26a27
> import com.google.common.collect.ImmutableList;
73a75,76
>   private FunctionContents contents = UnknownFunctionContents.get();
> 
83d85
<   private Node sourceNode = null;
224,225c226,229
<   FunctionTypeBuilder setSourceNode(@Nullable Node sourceNode) {
<     this.sourceNode = sourceNode;
---
>   FunctionTypeBuilder setContents(@Nullable FunctionContents contents) {
>     if (contents != null) {
>       this.contents = contents;
>     }
312,347d315
<   FunctionTypeBuilder inferReturnStatementsAsLastResort(
<       @Nullable Node functionBlock) {
<     if (functionBlock == null || functionBlock.isFromExterns()) {
<       return this;
<     }
<     Preconditions.checkArgument(functionBlock.getType() == Token.BLOCK);
<     if (returnType == null) {
<       boolean hasNonEmptyReturns = false;
<       List<Node> worklist = Lists.newArrayList(functionBlock);
<       while (!worklist.isEmpty()) {
<         Node current = worklist.remove(worklist.size() - 1);
<         int cType = current.getType();
<         if (cType == Token.RETURN && current.getFirstChild() != null) {
<           hasNonEmptyReturns = true;
<           break;
<         } else if (NodeUtil.isStatementBlock(current) ||
<             NodeUtil.isControlStructure(current)) {
<           for (Node child = current.getFirstChild();
<                child != null; child = child.getNext()) {
<             worklist.add(child);
<           }
<         }
<       }
< 
<       if (!hasNonEmptyReturns) {
<         returnType = typeRegistry.getNativeType(VOID_TYPE);
<         returnTypeInferred = true;
<       }
<     }
<     return this;
<   }
< 
<   
< 
< 
< 
606a575,580
>     if (returnType == null &&
>         !contents.mayHaveNonEmptyReturns() && !contents.mayBeFromExterns()) {
>       returnType = typeRegistry.getNativeType(VOID_TYPE);
>       returnTypeInferred = true;
>     }
> 
620c594,595
<       fnType = typeRegistry.createInterfaceType(fnName, sourceNode);
---
>       fnType = typeRegistry.createInterfaceType(
>           fnName, contents.getSourceNode());
628c603
<           .withSourceNode(sourceNode)
---
>           .withSourceNode(contents.getSourceNode())
671c646
<         fnName, sourceNode, parametersNode, returnType);
---
>         fnName, contents.getSourceNode(), parametersNode, returnType);
683c658
<           existingFn.setSource(sourceNode);
---
>           existingFn.setSource(contents.getSourceNode());
769a745,830
>     }
>   }
> 
>   
>   static interface FunctionContents {
>     
>     Node getSourceNode();
> 
>     
>     boolean mayBeFromExterns();
> 
>     
>     boolean mayHaveNonEmptyReturns();
> 
>     
>     Iterable<String> getEscapedVarNames();
>   }
> 
>   static class UnknownFunctionContents implements FunctionContents {
>     private static UnknownFunctionContents singleton =
>         new UnknownFunctionContents();
> 
>     static FunctionContents get() {
>       return singleton;
>     }
> 
>     @Override
>     public Node getSourceNode() {
>       return null;
>     }
> 
>     @Override
>     public boolean mayBeFromExterns() {
>       return true;
>     }
> 
>     @Override
>     public boolean mayHaveNonEmptyReturns() {
>       return true;
>     }
> 
>     @Override
>     public Iterable<String> getEscapedVarNames() {
>       return ImmutableList.of();
>     }
>   }
> 
>   static class AstFunctionContents implements FunctionContents {
>     private final Node n;
>     private boolean hasNonEmptyReturns = false;
>     private Set<String> escapedVarNames;
> 
>     AstFunctionContents(Node n) {
>       this.n = n;
>     }
> 
>     @Override
>     public Node getSourceNode() {
>       return n;
>     }
> 
>     @Override
>     public boolean mayBeFromExterns() {
>       return n.isFromExterns();
>     }
> 
>     @Override
>     public boolean mayHaveNonEmptyReturns() {
>       return hasNonEmptyReturns;
>     }
> 
>     void recordNonEmptyReturn() {
>       hasNonEmptyReturns = true;
>     }
> 
>     @Override
>     public Iterable<String> getEscapedVarNames() {
>       return escapedVarNames == null
>           ? ImmutableList.<String>of() : escapedVarNames;
>     }
> 
>     void recordEscapedVarName(String name) {
>       if (escapedVarNames == null) {
>         escapedVarNames = Sets.newHashSet();
>       }
>       escapedVarNames.add(name);
