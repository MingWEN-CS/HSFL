82a83,90
>   Iterable<JSType> getAlternates() {
>     JSType specialCaseType = reduceAlternatesWithoutUnion();
>     if (specialCaseType != null) {
>       return ImmutableList.of(specialCaseType);
>     }
>     return alternates;
>   }
> 
148a157,184
>   private JSType reduceAlternatesWithoutUnion() {
>     if (isAllType) {
>       return registry.getNativeType(ALL_TYPE);
>     } else if (isNativeUnknownType) {
>       if (areAllUnknownsChecked) {
>         return registry.getNativeType(CHECKED_UNKNOWN_TYPE);
>       } else {
>         return registry.getNativeType(UNKNOWN_TYPE);
>       }
>     } else {
>       int size = alternates.size();
>       if (size > MAX_UNION_SIZE) {
>         return registry.getNativeType(UNKNOWN_TYPE);
>       } else if (size > 1) {
>         return null;
>       } else if (size == 1) {
>         return alternates.iterator().next();
>       } else {
>         return registry.getNativeType(NO_TYPE);
>       }
>     }
>   }
> 
>   
> 
> 
> 
> 
151,171c187,189
<       if (isAllType) {
<         result = registry.getNativeType(ALL_TYPE);
<       } else if (isNativeUnknownType) {
<         if (areAllUnknownsChecked) {
<           result = registry.getNativeType(CHECKED_UNKNOWN_TYPE);
<         } else {
<           result = registry.getNativeType(UNKNOWN_TYPE);
<         }
<       } else {
<         int size = alternates.size();
<         if (size > MAX_UNION_SIZE) {
<           result = registry.getNativeType(UNKNOWN_TYPE);
<         } else {
<           if (size > 1) {
<             result = new UnionType(registry, getAlternateListCopy());
<           } else if (size == 1) {
<             result = alternates.iterator().next();
<           } else {
<             result = registry.getNativeType(NO_TYPE);
<           }
<         }
---
>       result = reduceAlternatesWithoutUnion();
>       if (result == null) {
>         result = new UnionType(registry, getAlternateListCopy());
