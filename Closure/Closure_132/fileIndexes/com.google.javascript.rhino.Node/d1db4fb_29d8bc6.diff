43c43
< import com.google.common.base.Pair;
---
> import com.google.common.base.Objects;
1325c1325
<         Pair<Node, Node> diff = checkTreeEqualsImpl(node2);
---
>         NodeMismatch diff = checkTreeEqualsImpl(node2);
1347c1347
<     Pair<Node, Node> checkTreeEqualsImpl(Node node2) {
---
>     NodeMismatch checkTreeEqualsImpl(Node node2) {
1358c1358
<             return Pair.of(this, node2);
---
>             return new NodeMismatch(this, node2);
1361c1361
<         Pair<Node, Node> res = null;
---
>         NodeMismatch res = null;
1979a1980,2001
>     }
> 
>     static class NodeMismatch {
>       final Node nodeA;
>       final Node nodeB;
> 
>       NodeMismatch(Node nodeA, Node nodeB) {
>         this.nodeA = nodeA;
>         this.nodeB = nodeB;
>       }
> 
>       @Override public boolean equals(Object object) {
>         if (object instanceof NodeMismatch) {
>           NodeMismatch that = (NodeMismatch) object;
>           return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
>         }
>         return false;
>       }
> 
>       @Override public int hashCode() {
>         return Objects.hashCode(nodeA, nodeB);
>       }
