1a2,149
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> package com.google.javascript.jscomp;
> 
> import com.google.common.base.Predicate;
> import com.google.javascript.jscomp.graph.Annotation;
> import com.google.javascript.jscomp.graph.DiGraph;
> import com.google.javascript.jscomp.graph.DiGraph.DiGraphEdge;
> import com.google.javascript.jscomp.graph.DiGraph.DiGraphNode;
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> class CheckPathsBetweenNodes<N, E> {
> 
>   private Predicate<N> nodePredicate;
>   private Predicate<DiGraphEdge<N, E>> edgePredicate;
>   private boolean result;
> 
>   
>   
>   
>   
>   
>   
>   
>   
>   
>   
>   
>   
>   
> 
>   
>   private static final Annotation BACK_EDGE = new Annotation() {};
>   
>   private static final Annotation WHITE = null;
>   
>   private static final Annotation GRAY = new Annotation() {};
>   
>   private static final Annotation BLACK = new Annotation() {};
> 
>   
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>   CheckPathsBetweenNodes(DiGraph<N, E> graph, DiGraphNode<N, E> a,
>       DiGraphNode<N, E> b, Predicate<N> nodePredicate,
>       Predicate<DiGraphEdge<N, E>> edgePredicate) {
>     this.nodePredicate = nodePredicate;
>     this.edgePredicate = edgePredicate;
> 
>     graph.pushNodeAnnotations();
>     graph.pushEdgeAnnotations();
> 
>     discoverBackEdges(a);
>     result = checkAllPathsWithoutBackEdges(a, b);
> 
>     graph.popNodeAnnotations();
>     graph.popEdgeAnnotations();
>   }
> 
>   
> 
> 
> 
>   public boolean allPathsSatisfyPredicate() {
>     return result;
>   }
> 
>   private void discoverBackEdges(DiGraphNode<N, E> u) {
>     u.setAnnotation(GRAY);
>     for (DiGraphEdge<N, E> e : u.getOutEdges()) {
>       if (ignoreEdge(e)) {
>         continue;
>       }
>       DiGraphNode<N, E> v = e.getDestination();
>       if (v.getAnnotation() == WHITE) {
>         discoverBackEdges(v);
>       } else if (v.getAnnotation() == GRAY) {
>         e.setAnnotation(BACK_EDGE);
>       }
>     }
>     u.setAnnotation(BLACK);
>   }
> 
>   private boolean ignoreEdge(DiGraphEdge<N, E> e) {
>     return !edgePredicate.apply(e);
>   }
> 
>   
> 
> 
> 
>   private boolean checkAllPathsWithoutBackEdges(DiGraphNode<N, E> a,
>       DiGraphNode<N, E> b) {
>     if (nodePredicate.apply(a.getValue())) {
>       return true;
>     }
>     if (a == b) {
>       return false;
>     }
>     for (DiGraphEdge<N, E> e : a.getOutEdges()) {
>       if (ignoreEdge(e)) {
>         continue;
>       }
>       if (e.getAnnotation() == BACK_EDGE) {
>         continue;
>       }
>       DiGraphNode<N, E> next = e.getDestination();
>       if (!checkAllPathsWithoutBackEdges(next, b)) {
>         return false;
>       }
>     }
>     return true;
>   }
> }
