















package com.google.javascript.jscomp;

import com.google.common.base.Preconditions;
import com.google.common.collect.Lists;
import com.google.javascript.rhino.Node;

import java.io.IOException;
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.List;












public class SourceMap {

  



  static class Mapping {
    


    int id;

    


    String sourceFile;

    




    Position originalPosition;

    



    Position startPosition;

    



    Position endPosition;

    



    String originalName;

    


    void appendTo(Appendable out) throws IOException {
      out.append("[");

      out.append(sourceFile);

      out.append(",");
      out.append(String.valueOf(originalPosition.getLineNumber()));

      out.append(",");
      out.append(String.valueOf(originalPosition.getCharacterIndex()));

      if (originalName != null) {
        out.append(",");
        out.append(originalName);
      }

      out.append("]");
    }
  }

  


  private List<Mapping> mappings = Lists.newArrayList();

  



  private Position offsetPosition = new Position(0, 0);

  




  private Position prefixPosition = new Position(0, 0);

  


  private static String escapeString(String value) {
    return CodeGenerator.escapeToDoubleQuotedJsString(value);
  }

  


  private String lastSourceFile = null;
  private String lastSourceFileEscaped = null;

  






  void addMapping(Node node, Position startPosition, Position endPosition) {
    String sourceFile = (String)node.getProp(Node.SOURCEFILE_PROP);

    
    
    
    if (sourceFile == null || node.getLineno() < 0) {
      return;
    }

    
    String escapedSourceFile;
    if (lastSourceFile != sourceFile) {  
      lastSourceFile = sourceFile;
      lastSourceFileEscaped = escapeString(sourceFile);
    }
    escapedSourceFile = lastSourceFileEscaped;

    
    Mapping mapping = new Mapping();
    mapping.id = mappings.size();
    mapping.sourceFile = escapedSourceFile;
    mapping.originalPosition = new Position(node.getLineno(), node.getCharno());

    String originalName = (String)node.getProp(Node.ORIGINALNAME_PROP);
    if (originalName != null) {
      mapping.originalName = escapeString(originalName);
    }

    
    
    
    
    int offsetLine = offsetPosition.getLineNumber();
    int startOffsetPosition = offsetPosition.getCharacterIndex();
    int endOffsetPosition = offsetPosition.getCharacterIndex();

    if (startPosition.getLineNumber() > 0) {
      startOffsetPosition = 0;
    }

    if (endPosition.getLineNumber() > 0) {
      endOffsetPosition = 0;
    }

    mapping.startPosition =
        new Position(startPosition.getLineNumber() + offsetLine,
                     startPosition.getCharacterIndex() + startOffsetPosition);

    mapping.endPosition =
        new Position(endPosition.getLineNumber() + offsetLine,
                     endPosition.getCharacterIndex() + endOffsetPosition);

    mappings.add(mapping);
  }

  






  void setWrapperPrefix(String prefix) {
    
    int prefixLine = 0;
    int prefixIndex = 0;

    for (int i = 0; i < prefix.length(); ++i) {
      if (prefix.charAt(i) == '\n') {
        prefixLine++;
        prefixIndex = 0;
      } else {
        prefixIndex++;
      }
    }

    prefixPosition = new Position(prefixLine, prefixIndex);
  }

  









  void setStartingPosition(int offsetLine, int offsetIndex) {
    
    
    
    offsetPosition = new Position(offsetLine, offsetIndex);
  }

  


  void reset() {
    mappings = Lists.newArrayList();
    offsetPosition = new Position(0, 0);
    prefixPosition = new Position(0, 0);
  }

  


  private int findLastLine() {
    int maxLine = 0;
    for (Mapping mapping : mappings) {
      int endPositionLine = mapping.endPosition.getLineNumber();
      maxLine = Math.max(maxLine, endPositionLine);
    }
    
    return maxLine + prefixPosition.getLineNumber();
  }

  






  public void appendTo(Appendable out, String name) throws IOException {
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    int maxLine = findLastLine();

    
    out.append("{ \"file\" : ");
    out.append(escapeString(name));
    out.append(", \"count\": ");
    out.append(String.valueOf(maxLine + 1));
    out.append(" }\n");
    (new LineMapper(out)).appendLineMappings();

    
    out.append("\n");

    
    
    for (int i = 0; i <= maxLine; ++i) {
      out.append("[]\n");
    }

    
    out.append("\n");

    for (Mapping mapping : mappings) {
      mapping.appendTo(out);
      out.append("\n");
    }
  }

  



  private class LineMapper {
    
    private final Appendable out;
    
    private int line;
    private int col;
    
    private boolean firstChar = true;

    private final static int UNMAPPED = -1;
    private final static String UNMAPPED_STRING = "-1";

    LineMapper(Appendable out) {
      this.out = out;
    }

    
    void appendLineMappings() throws IOException {
      Preconditions.checkState(!mappings.isEmpty());

      
      openLine();

      
      
      
      Deque<Mapping> stack = new ArrayDeque<Mapping>();
      for (Mapping m : mappings) {
        
        
        
        
        while (!stack.isEmpty() && !isOverlapped(stack.peek(), m)) {
          Mapping previous = stack.pop();
          writeClosedMapping(previous);
        }

        
        
        Mapping parent = stack.peek();
        writeCharsBetween(parent, m);

        stack.push(m);
      }

      
      
      while (!stack.isEmpty()) {
        Mapping m = stack.pop();
        writeClosedMapping(m);
      }

      
      closeLine();
    }

    


    private void openLine() throws IOException {
      out.append("[");
      this.firstChar = true;
    }

    


    private void closeLine() throws IOException {
      out.append("]\n");
    }

    



    private void addCharEntry(String id) throws IOException {
      if (firstChar) {
        firstChar = false;
      } else {
        out.append(",");
      }
      out.append(id);
    }

    


    private int getAdjustedLine(Position p) {
      return p.getLineNumber() + prefixPosition.getLineNumber();
    }

    


    private int getAdjustedCol(Position p) {
      int rawLine = p.getLineNumber();
      int rawCol = p.getCharacterIndex();
      
      return (rawLine != 0)
          ? rawCol : rawCol + prefixPosition.getCharacterIndex();
    }

    


    private boolean isOverlapped(Mapping m1, Mapping m2) {
      
      int l1 = m1.endPosition.getLineNumber();
      int l2 = m2.startPosition.getLineNumber();
      int c1 = m1.endPosition.getCharacterIndex();
      int c2 = m2.startPosition.getCharacterIndex();

      return (l1 == l2 && c1 >= c2) || l1 > l2;
    }

    



    private void writeClosedMapping(Mapping m) throws IOException {
      int nextLine = getAdjustedLine(m.endPosition);
      int nextCol = getAdjustedCol(m.endPosition);
      
      
      if (line < nextLine || (line == nextLine && col < nextCol)) {
        writeCharsUpTo(nextLine, nextCol, m.id);
      }
    }

    


    private void writeCharsBetween(Mapping prev, Mapping next)
        throws IOException {
      int nextLine = getAdjustedLine(next.startPosition);
      int nextCol = getAdjustedCol(next.startPosition);
      
      
      int id = (prev != null) ? prev.id : UNMAPPED;
      writeCharsUpTo(nextLine, nextCol, id);
    }

    



    private void writeCharsUpTo(
        int nextLine, int nextCol, int id)
        throws IOException {
      Preconditions.checkState(line <= nextLine, "");
      Preconditions.checkState(line < nextLine || col <= nextCol);

      if (line == nextLine && col == nextCol) {
        
        return;
      }

      String idString = (id == UNMAPPED) ? UNMAPPED_STRING : String.valueOf(id);
      for (int i = line; i <= nextLine; i++) {
        if (i == nextLine) {
          for (int j = col; j < nextCol; j++) {
            addCharEntry(idString);
          }
          break;
        }

        closeLine();
        openLine();
      }

      line = nextLine;
      col = nextCol;
    }
  }
}
