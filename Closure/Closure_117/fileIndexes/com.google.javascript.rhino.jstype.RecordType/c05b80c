





































 
package com.google.javascript.rhino.jstype;

import java.util.HashMap;
import java.util.Map;















public class RecordType extends PrototypeObjectType {
  private static final long serialVersionUID = 1L;

  private final Map<String, JSType> properties = new HashMap<String, JSType>();
  private boolean isFrozen = false;

  





  RecordType(JSTypeRegistry registry, Map<String, JSType> properties) {
    super(registry, null, null);

    for (String property : properties.keySet()) {
      defineDeclaredProperty(property, properties.get(property), false);
    }

    
    isFrozen = true;
  }

  @Override
  public boolean equals(Object other) {
    if (!(other instanceof RecordType)) {
      return false;
    }

    
    RecordType otherRecord = (RecordType) other;
    return otherRecord.properties.equals(properties);
  }

  @Override
  public ObjectType getImplicitPrototype() {
    return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
  }

  @Override
  boolean defineProperty(String propertyName, JSType type,
      boolean inferred, boolean inExterns) {
    if (isFrozen) {
      return false;
    }

    if (!inferred) {
      properties.put(propertyName, type);
    }

    return super.defineProperty(propertyName, type, inferred, inExterns);
  }

  @Override
  public JSType getLeastSupertype(JSType that) {
    if (!that.isRecordType()) {
      return super.getLeastSupertype(that);
    }

    RecordType thatRecord = (RecordType) that;
    RecordTypeBuilder builder = new RecordTypeBuilder(registry);

    
    
    
    for (String property : properties.keySet()) {
      if (thatRecord.hasProperty(property) &&
          thatRecord.getPropertyType(property).equals(
              getPropertyType(property))) {
        builder.addProperty(property, getPropertyType(property));
      }
    }

    return builder.build();
  }

  @Override
  public JSType getGreatestSubtype(JSType that) {
    if (that.isRecordType()) {
      RecordType thatRecord = (RecordType) that;
      RecordTypeBuilder builder = new RecordTypeBuilder(registry);

      
      
      
      for (String property : properties.keySet()) {
        if (thatRecord.hasProperty(property) &&
            !thatRecord.getPropertyType(property).equals(
                getPropertyType(property))) {
          return registry.getNativeObjectType(JSTypeNative.NO_TYPE);
        }

        builder.addProperty(property, getPropertyType(property));
      }

      for (String property : thatRecord.properties.keySet()) {
        if (!hasProperty(property)) {
          builder.addProperty(property, thatRecord.getPropertyType(property));
        }
      }

      return builder.build();
    }

    JSType greatestSubtype = super.getGreatestSubtype(that);
    if (greatestSubtype.isNoObjectType() && !that.isNoObjectType()) {
      
      
      
      
      
      
      for (Map.Entry<String, JSType> entry : properties.entrySet()) {
        String propName = entry.getKey();
        JSType propType = entry.getValue();
        UnionTypeBuilder builder = new UnionTypeBuilder(registry);
        for (ObjectType alt : registry.getTypesWithProperty(propName)) {
          JSType altPropType = alt.getPropertyType(propName);
          if (altPropType != null && !alt.equals(this) &&
              alt.isSubtype(that) &&
              (propType.isUnknownType() || altPropType.isUnknownType() ||
               altPropType.equals(propType))) {
            builder.addAlternate(alt);
          }
        }
        greatestSubtype = greatestSubtype.getLeastSupertype(builder.build());
      }
    }
    return greatestSubtype;
  }

  @Override
  public boolean isRecordType() {
    return true;
  }

  @Override
  public boolean isSubtype(JSType that) {
    if (JSType.isSubtype(this, that)) {
      return true;
    }

    
    if (registry.getNativeObjectType(
            JSTypeNative.OBJECT_TYPE).isSubtype(that)) {
      return true;
    }

    
    
    
    if (!that.isRecordType()) {
      return false;
    }

    return RecordType.isSubtype(this, (RecordType) that);
  }

  
  static boolean isSubtype(ObjectType typeA, RecordType typeB) {
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    for (String property : typeB.properties.keySet()) {
      if (!typeA.hasProperty(property)) {
        return false;
      }

      JSType propA = typeA.getPropertyType(property);
      JSType propB = typeB.getPropertyType(property);
      if (!propA.isUnknownType() && !propB.isUnknownType()) {
        if (typeA.isPropertyTypeDeclared(property)) {
          if (!propA.equals(propB)) {
            return false;
          }
        } else {
          if (!propA.isSubtype(propB)) {
            return false;
          }
        }
      }
    }

    return true;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("{ ");

    int i = 0;

    for (String property : properties.keySet()) {
      if (i > 0) {
        sb.append(", ");
      }

      sb.append(property);
      sb.append(" : ");
      sb.append(properties.get(property).toString());

      ++i;
    }

    sb.append(" }");
    return sb.toString();
  }
}
