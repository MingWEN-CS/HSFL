1,16c1,1144
< <!DOCTYPE HTML PUBLIC "-
< <!--NewPage-->
< <HTML>
< <HEAD>
< <TITLE>
< JSDocInfo (Compiler)
< </TITLE>
< 
< 
< <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../dev_javadoc.css" TITLE="Style">
< 
< <SCRIPT type="text/javascript">
< function windowTitle()
< {
<     if (location.href.indexOf('is-external=true') == -1) {
<         parent.document.title="JSDocInfo (Compiler)";
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> package com.google.javascript.rhino;
> 
> import com.google.common.collect.ImmutableList;
> import com.google.common.collect.ImmutableSet;
> import com.google.common.collect.Lists;
> import com.google.javascript.rhino.jstype.JSType;
> import com.google.javascript.rhino.jstype.StaticScope;
> 
> import java.io.Serializable;
> import java.util.Collection;
> import java.util.Collections;
> import java.util.LinkedHashMap;
> import java.util.List;
> import java.util.Map;
> import java.util.Set;
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> public final class JSDocInfo implements Serializable {
>   private static final long serialVersionUID = 1L;
> 
>   
> 
> 
> 
> 
> 
>   public enum Visibility {
>     PRIVATE,
>     PROTECTED,
>     PUBLIC,
> 
>     
>     
>     INHERITED
>   }
> 
>   private static final class LazilyInitializedInfo implements Serializable {
>     private static final long serialVersionUID = 1L;
> 
>     
>     JSTypeExpression baseType = null;
>     List<JSTypeExpression> implementedInterfaces = null;
>     Map<String, JSTypeExpression> parameters = null;
>     List<JSTypeExpression> thrownTypes = null;
>     String templateTypeName = null;
> 
>     
>     String description = null;
>     String deprecated = null;
>     String license = null;
>     Set<String> suppressions = null;
>   }
> 
>   private static final class LazilyInitializedDocumentation {
>     
>     
>     List<Marker> markers = null;
> 
>     Map<String, String> parameters = null;
>     Map<JSTypeExpression, String> throwsDescriptions = null;
>     String blockDescription = null;
>     String fileOverview = null;
>     String returnDescription = null;
>     String version = null;
> 
>     List<String> authors = null;
>     List<String> sees = null;
>   }
> 
>   
> 
> 
>   public static class StringPosition extends SourcePosition<String> {
>   }
> 
>   
> 
> 
>   public static class TypePosition extends SourcePosition<Node> {
>     public boolean hasBrackets = false;
>   }
> 
>   
> 
> 
> 
> 
> 
> 
> 
> 
> 
>   public static final class Marker {
>     public StringPosition annotation = null;
>     public StringPosition name = null;
>     public StringPosition description = null;
>     public TypePosition type = null;
>   }
> 
>   private LazilyInitializedInfo info = null;
> 
>   private LazilyInitializedDocumentation documentation = null;
> 
>   
>   private String sourceName = null;
> 
>   private Visibility visibility = null;
> 
>   
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>   private int bitset = 0x00;
> 
>   
> 
> 
> 
> 
> 
> 
> 
>   private JSTypeExpression type = null;
> 
>   
> 
> 
>   private JSTypeExpression thisType = null;
> 
>   
> 
> 
> 
> 
>   private boolean includeDocumentation = false;
> 
>   
>   
>   
> 
>   
>   private static final int MASK_FLAGS       = 0x3FFFFFFF;
> 
>   private static final int MASK_CONSTANT      = 0x00000001; 
>   private static final int MASK_CONSTRUCTOR   = 0x00000002; 
>   private static final int MASK_DEFINE        = 0x00000004; 
>   private static final int MASK_HIDDEN        = 0x00000008; 
>   private static final int MASK_PRESERVETRY   = 0x00000010; 
>   private static final int MASK_NOCHECK       = 0x00000020; 
>   private static final int MASK_OVERRIDE      = 0x00000040; 
>   private static final int MASK_NOALIAS       = 0x00000080; 
>   private static final int MASK_DEPRECATED    = 0x00000100; 
>   private static final int MASK_INTERFACE     = 0x00000200; 
>   private static final int MASK_EXPORT        = 0x00000400; 
>   private static final int MASK_NOSHADOW      = 0x00000800; 
>   private static final int MASK_FILEOVERVIEW  = 0x00001000; 
>   private static final int MASK_IMPLICITCAST  = 0x00002000; 
>   private static final int MASK_NOSIDEEFFECTS = 0x00004000; 
>   private static final int MASK_EXTERNS       = 0x00008000; 
>   private static final int MASK_JAVADISPATCH  = 0x00010000; 
> 
>   
>   
>   private static final int MASK_TYPEFIELD    = 0xE0000000; 
>   private static final int TYPEFIELD_TYPE    = 0x20000000; 
>   private static final int TYPEFIELD_RETURN  = 0x40000000; 
>   private static final int TYPEFIELD_ENUM    = 0x60000000; 
>   private static final int TYPEFIELD_TYPEDEF = 0x80000000; 
> 
>   
> 
> 
> 
>   JSDocInfo(boolean includeDocumentation) {
>     this.includeDocumentation = includeDocumentation;
>   }
> 
>   
>   public JSDocInfo() {}
> 
>   void setConstant(boolean value) {
>     setFlag(value, MASK_CONSTANT);
>   }
> 
>   void setConstructor(boolean value) {
>     setFlag(value, MASK_CONSTRUCTOR);
>   }
> 
>   void setDefine(boolean value) {
>     setFlag(value, MASK_DEFINE);
>   }
> 
>   void setHidden(boolean value) {
>     setFlag(value, MASK_HIDDEN);
>   }
> 
>   void setNoCheck(boolean value) {
>     setFlag(value, MASK_NOCHECK);
>   }
> 
>   void setShouldPreserveTry(boolean value) {
>     setFlag(value, MASK_PRESERVETRY);
>   }
> 
>   void setOverride(boolean value) {
>     setFlag(value, MASK_OVERRIDE);
>   }
> 
>   void setNoAlias(boolean value) {
>     setFlag(value, MASK_NOALIAS);
>   }
> 
>   
>   public void setDeprecated(boolean value) {
>     setFlag(value, MASK_DEPRECATED);
>   }
> 
>   void setInterface(boolean value) {
>     setFlag(value, MASK_INTERFACE);
>   }
> 
>   void setExport(boolean value) {
>     setFlag(value, MASK_EXPORT);
>   }
> 
>   void setNoShadow(boolean value) {
>     setFlag(value, MASK_NOSHADOW);
>   }
> 
>   void setImplicitCast(boolean value) {
>     setFlag(value, MASK_IMPLICITCAST);
>   }
> 
>   void setNoSideEffects(boolean value) {
>     setFlag(value, MASK_NOSIDEEFFECTS);
>   }
> 
>   void setExterns(boolean value) {
>     setFlag(value, MASK_EXTERNS);
>   }
> 
>   void setJavaDispatch(boolean value) {
>     setFlag(value, MASK_JAVADISPATCH);
>   }
> 
>   private void setFlag(boolean value, int mask) {
>     if (value) {
>       bitset |= mask;
>     } else {
>       bitset &= ~mask;
>     }
>   }
> 
>   
> 
> 
> 
>   public boolean isConstant() {
>     return getFlag(MASK_CONSTANT) || isDefine();
>   }
> 
>   
> 
> 
> 
>   public boolean isConstructor() {
>     return getFlag(MASK_CONSTRUCTOR);
>   }
> 
>   
> 
> 
> 
> 
>   public boolean isDefine() {
>     return getFlag(MASK_DEFINE);
>   }
> 
>   
> 
> 
> 
>   public boolean isHidden() {
>     return getFlag(MASK_HIDDEN);
>   }
> 
>   
> 
> 
> 
>   public boolean isNoTypeCheck() {
>     return getFlag(MASK_NOCHECK);
>   }
> 
>   
> 
> 
> 
>   public boolean shouldPreserveTry() {
>     return getFlag(MASK_PRESERVETRY);
>   }
> 
>   
> 
> 
> 
>   public boolean isOverride() {
>     return getFlag(MASK_OVERRIDE);
>   }
> 
>   
> 
> 
> 
>   public boolean isNoAlias() {
>     return getFlag(MASK_NOALIAS);
>   }
> 
>   
> 
> 
> 
>   public boolean isDeprecated() {
>     return getFlag(MASK_DEPRECATED);
>   }
> 
>   
> 
> 
> 
>   public boolean isInterface() {
>     return getFlag(MASK_INTERFACE);
>   }
> 
>   
> 
> 
> 
>   public boolean isExport() {
>     return getFlag(MASK_EXPORT);
>   }
> 
>   
> 
> 
> 
>   public boolean isNoShadow() {
>     return getFlag(MASK_NOSHADOW);
>   }
> 
>   
> 
> 
> 
>   public boolean isImplicitCast() {
>     return getFlag(MASK_IMPLICITCAST);
>   }
> 
>   
> 
> 
> 
>   public boolean isNoSideEffects() {
>     return getFlag(MASK_NOSIDEEFFECTS);
>   }
> 
>   
> 
> 
> 
>   public boolean isExterns() {
>     return getFlag(MASK_EXTERNS);
>   }
> 
>   
> 
> 
> 
>   public boolean isJavaDispatch() {
>     return getFlag(MASK_JAVADISPATCH);
>   }
> 
>   private boolean getFlag(int mask) {
>     return (bitset & mask) != 0x00;
>   }
> 
>   
>   public void setVisibility(Visibility visibility) {
>     this.visibility = visibility;
>   }
> 
>   private void lazyInitInfo() {
>     if (info == null) {
>       info = new LazilyInitializedInfo();
>     }
>   }
> 
>   
> 
> 
> 
>   private boolean lazyInitDocumentation() {
>     if (!includeDocumentation) {
>       return false;
>     }
> 
>     if (documentation == null) {
>       documentation = new LazilyInitializedDocumentation();
>     }
> 
>     return true;
>   }
> 
>   
> 
> 
> 
>   Marker addMarker() {
>     if (!lazyInitDocumentation()) {
>       return null;
>     }
> 
>     if (documentation.markers == null) {
>       documentation.markers = Lists.newArrayList();
>     }
> 
>     Marker marker = new Marker();
>     documentation.markers.add(marker);
>     return marker;
>   }
> 
>   
> 
> 
> 
> 
>   boolean setDeprecationReason(String reason) {
>     lazyInitInfo();
> 
>     if (info.deprecated != null) {
>       return false;
>     }
> 
>     info.deprecated = reason;
>     return true;
>   }
> 
>   
> 
> 
> 
>   boolean setSuppressions(Set<String> suppressions) {
>     lazyInitInfo();
> 
>     if (info.suppressions != null) {
>       return false;
>     }
> 
>     info.suppressions = suppressions;
>     return true;
>   }
> 
>   
> 
> 
>   boolean documentVersion(String version) {
>     if (!lazyInitDocumentation()) {
>       return true;
>     }
> 
>     if (documentation.version != null) {
>       return false;
>     }
> 
>     documentation.version = version;
>     return true;
>   }
> 
>   
> 
> 
>   boolean documentReference(String reference) {
>     if (!lazyInitDocumentation()) {
>       return true;
>     }
> 
>     if (documentation.sees == null) {
>       documentation.sees = Lists.newArrayList();
>     }
> 
>     documentation.sees.add(reference);
>     return true;
>   }
> 
>   
> 
> 
>   boolean documentAuthor(String author) {
>     if (!lazyInitDocumentation()) {
>       return true;
>     }
> 
>     if (documentation.authors == null) {
>       documentation.authors = Lists.newArrayList();
>     }
> 
>     documentation.authors.add(author);
>     return true;
>   }
> 
>   
> 
> 
>   boolean documentThrows(JSTypeExpression type, String throwsDescription) {
>     if (!lazyInitDocumentation()) {
>       return true;
>     }
> 
>     if (documentation.throwsDescriptions == null) {
>       documentation.throwsDescriptions =
>           new LinkedHashMap<JSTypeExpression, String>();
>     }
> 
>     if (!documentation.throwsDescriptions.containsKey(type)) {
>       documentation.throwsDescriptions.put(type, throwsDescription);
>       return true;
>     }
> 
>     return false;
>   }
> 
> 
>   
> 
> 
> 
> 
> 
> 
>   boolean documentParam(String parameter, String description) {
>     if (!lazyInitDocumentation()) {
>       return true;
>     }
> 
>     if (documentation.parameters == null) {
>       documentation.parameters = new LinkedHashMap<String, String>();
>     }
> 
>     if (!documentation.parameters.containsKey(parameter)) {
>       documentation.parameters.put(parameter, description);
>       return true;
>     } else {
>       return false;
>     }
>   }
> 
>   
> 
> 
> 
> 
>   boolean documentBlock(String description) {
>     if (!lazyInitDocumentation()) {
>       return true;
>     }
> 
>     if (documentation.blockDescription != null) {
>       return false;
>     }
> 
>     documentation.blockDescription = description;
>     return true;
>   }
> 
>   
> 
> 
> 
> 
>   boolean documentFileOverview(String description) {
>     setFlag(true, MASK_FILEOVERVIEW);
>     if (!lazyInitDocumentation()) {
>       return true;
>     }
> 
>     if (documentation.fileOverview != null) {
>       return false;
>     }
> 
>     documentation.fileOverview = description;
>     return true;
>   }
> 
>   
> 
> 
> 
> 
> 
>   boolean documentReturn(String description) {
>     if (!lazyInitDocumentation()) {
>       return true;
>     }
> 
>     if (documentation.returnDescription != null) {
>       return false;
>     }
> 
>     documentation.returnDescription = description;
>     return true;
>   }
> 
>   
> 
> 
> 
> 
> 
> 
> 
>   boolean declareParam(JSTypeExpression jsType, String parameter) {
>     lazyInitInfo();
>     if (info.parameters == null) {
>       info.parameters = new LinkedHashMap<String, JSTypeExpression>();
>     }
>     if (!info.parameters.containsKey(parameter)) {
>       info.parameters.put(parameter, jsType);
>       return true;
>     } else {
>       return false;
>     }
>   }
> 
>   
> 
> 
> 
> 
> 
>   boolean declareTemplateTypeName(String templateTypeName) {
>     lazyInitInfo();
> 
>     if (info.templateTypeName != null) {
>       return false;
>     }
> 
>     info.templateTypeName = templateTypeName;
>     return true;
>   }
> 
>   
> 
> 
> 
> 
>   boolean declareThrows(JSTypeExpression jsType) {
>     lazyInitInfo();
> 
>     if (info.thrownTypes == null) {
>       info.thrownTypes = Lists.newArrayList();
>     }
> 
>     info.thrownTypes.add(jsType);
>     return true;
>   }
> 
>   
> 
> 
> 
> 
>   public Visibility getVisibility() {
>     return visibility;
>   }
> 
>   
> 
> 
> 
> 
> 
>   public JSTypeExpression getParameterType(String parameter) {
>     if (info == null || info.parameters == null) {
>       return null;
>     }
>     return info.parameters.get(parameter);
>   }
> 
>   
> 
> 
>   public boolean hasParameter(String parameter) {
>     if (info == null || info.parameters == null) {
>       return false;
>     }
>     return info.parameters.containsKey(parameter);
>   }
> 
>   
> 
> 
> 
> 
> 
>   public boolean hasParameterType(String parameter) {
>     return getParameterType(parameter) != null;
>   }
> 
>   
> 
> 
> 
> 
> 
> 
>   public Set<String> getParameterNames() {
>     if (info == null || info.parameters == null) {
>       return ImmutableSet.of();
>     }
>     return ImmutableSet.copyOf(info.parameters.keySet());
>   }
> 
>   
> 
> 
>   public int getParameterCount() {
>     if (info == null || info.parameters == null) {
>       return 0;
>     }
>     return info.parameters.size();
>   }
> 
>   void setType(JSTypeExpression type) {
>     setType(type, TYPEFIELD_TYPE);
>   }
> 
>   void setReturnType(JSTypeExpression type) {
>     setType(type, TYPEFIELD_RETURN);
>   }
> 
>   void setEnumParameterType(JSTypeExpression type) {
>     setType(type, TYPEFIELD_ENUM);
>   }
> 
>   void setTypedefType(JSTypeExpression type) {
>     setType(type, TYPEFIELD_TYPEDEF);
>   }
> 
>   private void setType(JSTypeExpression type, int mask) {
>     if ((bitset & MASK_TYPEFIELD) != 0) {
>       throw new IllegalStateException(
>           "API tried to add two incompatible type tags. " +
>           "This should have been blocked and emitted a warning.");
>     }
>     this.bitset = (bitset & MASK_FLAGS) | mask;
>     this.type = type;
>   }
> 
>   
> 
> 
>   public List<JSTypeExpression> getThrownTypes() {
>     if (info == null || info.thrownTypes == null) {
>       return ImmutableList.of();
>     }
>     return Collections.unmodifiableList(info.thrownTypes);
>   }
> 
>   
> 
> 
> 
>   public boolean hasType() {
>     return hasType(TYPEFIELD_TYPE);
>   }
> 
>   
> 
> 
> 
>   public boolean hasEnumParameterType() {
>     return hasType(TYPEFIELD_ENUM);
>   }
> 
>   
> 
> 
> 
>   public boolean hasTypedefType() {
>     return hasType(TYPEFIELD_TYPEDEF);
>   }
> 
>   
> 
> 
> 
>   public boolean hasReturnType() {
>     return hasType(TYPEFIELD_RETURN);
>   }
> 
>   private boolean hasType(int mask) {
>     return (bitset & MASK_TYPEFIELD) == mask;
>   }
> 
>   
> 
> 
>   public JSTypeExpression getType() {
>     return getType(TYPEFIELD_TYPE);
>   }
> 
>   
> 
> 
>   public JSTypeExpression getReturnType() {
>     return getType(TYPEFIELD_RETURN);
>   }
> 
>   
> 
> 
>   public JSTypeExpression getEnumParameterType() {
>     return getType(TYPEFIELD_ENUM);
>   }
> 
>   
> 
> 
>   public JSTypeExpression getTypedefType() {
>     return getType(TYPEFIELD_TYPEDEF);
>   }
> 
>   private JSTypeExpression getType(int typefield) {
>     if ((MASK_TYPEFIELD & bitset) == typefield) {
>       return type;
>     } else {
>       return null;
>     }
>   }
> 
>   
> 
> 
>   public JSTypeExpression getThisType() {
>     return thisType;
>   }
> 
>   
> 
> 
>   void setThisType(JSTypeExpression type) {
>     this.thisType = type;
>   }
> 
>   
> 
> 
> 
>   public boolean hasThisType() {
>     return thisType != null;
>   }
> 
>   void setBaseType(JSTypeExpression type) {
>     lazyInitInfo();
>     info.baseType = type;
>   }
> 
>   
> 
> 
>   public JSTypeExpression getBaseType() {
>     return (info == null) ? null : info.baseType;
>   }
> 
>   
> 
> 
>   public String getDescription() {
>     return (info == null) ? null : info.description;
>   }
> 
>   void setDescription(String desc) {
>     lazyInitInfo();
>     info.description = desc;
>   }
> 
>   
> 
> 
>   public String getLicense() {
>     return (info == null) ? null : info.license;
>   }
> 
>   
> 
> 
> 
> 
> 
> 
>   public void setLicense(String license) {
>     lazyInitInfo();
>     info.license = license;
>   }
> 
>   @Override
>   public String toString() {
>     return "JSDocInfo";
>   }
> 
>   
> 
> 
> 
>   public boolean hasBaseType() {
>     return getBaseType() != null;
>   }
> 
>   
> 
> 
> 
>   boolean addImplementedInterface(JSTypeExpression interfaceName) {
>     lazyInitInfo();
>     if (info.implementedInterfaces == null) {
>       info.implementedInterfaces = Lists.newArrayListWithCapacity(2);
>     }
>     if (info.implementedInterfaces.contains(interfaceName)) {
>       return false;
>     }
>     info.implementedInterfaces.add(interfaceName);
>     return true;
>   }
> 
>   
> 
> 
> 
> 
> 
>   public List<JSTypeExpression> getImplementedInterfaces() {
>     if (info == null || info.implementedInterfaces == null) {
>       return ImmutableList.of();
>     }
>     return Collections.unmodifiableList(info.implementedInterfaces);
>   }
> 
>   
> 
> 
> 
>   public int getImplementedInterfaceCount() {
>     if (info == null || info.implementedInterfaces == null) {
>       return 0;
>     }
>     return info.implementedInterfaces.size();
>   }
> 
>   
> 
> 
>   public String getDeprecationReason() {
>     return info == null ? null : info.deprecated;
>   }
> 
>   
> 
> 
>   public Set<String> getSuppressions() {
>     Set<String> suppressions = info == null ? null : info.suppressions;
>     return suppressions == null ? Collections.<String>emptySet() : suppressions;
>   }
> 
>   
> 
> 
> 
>   public boolean hasDescriptionForParameter(String name) {
>     if (documentation == null || documentation.parameters == null) {
>       return false;
>     }
> 
>     return documentation.parameters.containsKey(name);
>   }
> 
>   
> 
> 
> 
>   public String getDescriptionForParameter(String name) {
>     if (documentation == null || documentation.parameters == null) {
>       return null;
>     }
> 
>     return documentation.parameters.get(name);
>   }
> 
>   
> 
> 
> 
>   public String getDescriptionForThrownType(JSType type,
>       StaticScope<JSType> scope) {
>     if (documentation == null || documentation.throwsDescriptions == null) {
>       return null;
>     }
> 
>     for (JSTypeExpression typeExpr :
>              documentation.throwsDescriptions.keySet()) {
>       if (type.canAssignTo(typeExpr.evaluate(scope))) {
>         return documentation.throwsDescriptions.get(typeExpr);
>       }
>     }
> 
>     return null;
>   }
> 
>   
> 
> 
>   public Collection<String> getAuthors() {
>     return documentation == null ? null : documentation.authors;
>   }
> 
>   
> 
> 
>   public Collection<String> getReferences() {
>     return documentation == null ? null : documentation.sees;
>   }
> 
>   
> 
> 
>   public String getVersion() {
>     return documentation == null ? null : documentation.version;
>   }
> 
>   
> 
> 
>   public String getReturnDescription() {
>     return documentation == null ? null : documentation.returnDescription;
>   }
> 
>   
> 
> 
>   public String getBlockDescription() {
>     return documentation == null ? null : documentation.blockDescription;
>   }
> 
>   
> 
> 
>   public boolean hasFileOverview() {
>     return getFlag(MASK_FILEOVERVIEW);
>   }
> 
>   
> 
> 
>   public String getFileOverview() {
>     return documentation == null ? null : documentation.fileOverview;
>   }
> 
>   
>   public String getSourceName() {
>     return sourceName;
>   }
> 
>   
>   public Collection<Marker> getMarkers() {
>     return documentation == null ? null : documentation.markers;
>   }
> 
>   
>   void setSourceName(String sourceName) {
>     this.sourceName = sourceName;
>   }
> 
>   
>   public String getTemplateTypeName() {
>     if (info == null) {
>       return null;
17a1146,1147
>     return info.templateTypeName;
>   }
19,1735d1148
< </SCRIPT>
< <NOSCRIPT>
< </NOSCRIPT>
< 
< </HEAD>
< 
< <BODY BGCOLOR="white" onload="windowTitle();">
< <HR>
< 
< 
< <!-- ========= START OF TOP NAVBAR ======= -->
< <A NAME="navbar_top"><!-- --></A>
< <A HREF="#skip-navbar_top" title="Skip navigation links"></A>
< <TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
< <TR>
< <TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
< <A NAME="navbar_top_firstrow"><!-- --></A>
< <TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
<   <TR ALIGN="center" VALIGN="top">
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
<   </TR>
< </TABLE>
< </TD>
< <TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
< </EM>
< </TD>
< </TR>
< 
< <TR>
< <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
< &nbsp;<A HREF="../../../../com/google/javascript/rhino/FunctionNode.html" title="class in com.google.javascript.rhino"><B>PREV CLASS</B></A>&nbsp;
< &nbsp;<A HREF="../../../../com/google/javascript/rhino/JSDocInfo.Marker.html" title="class in com.google.javascript.rhino"><B>NEXT CLASS</B></A></FONT></TD>
< <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
<   <A HREF="../../../../index.html?com/google/javascript/rhino/JSDocInfo.html" target="_top"><B>FRAMES</B></A>  &nbsp;
< &nbsp;<A HREF="JSDocInfo.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
< &nbsp;<SCRIPT type="text/javascript">
<   <!--
<   if(window==top) {
<     document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
<   }
<   
< </SCRIPT>
< <NOSCRIPT>
<   <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
< </NOSCRIPT>
< 
< 
< </FONT></TD>
< </TR>
< <TR>
< <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
<   SUMMARY:&nbsp;<A HREF="#nested_class_summary">NESTED</A>&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
< <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
< DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
< </TR>
< </TABLE>
< <A NAME="skip-navbar_top"></A>
< <!-- ========= END OF TOP NAVBAR ========= -->
< 
< <HR>
< <!-- ======== START OF CLASS DATA ======== -->
< <H2>
< <FONT SIZE="-1">
< com.google.javascript.rhino</FONT>
< <BR>
< Class JSDocInfo</H2>
< <PRE>
< <A HREF="http:
<   <IMG SRC="../../../../resources/inherit.gif" ALT="extended by "><B>com.google.javascript.rhino.JSDocInfo</B>
< </PRE>
< <DL>
< <DT><B>All Implemented Interfaces:</B> <DD><A HREF="http:
< </DL>
< <HR>
< <DL>
< <DT><PRE>public final class <B>JSDocInfo</B><DT>extends <A HREF="http:
< </PRE>
< 
< <P>
< <p>JSDoc information describing JavaScript code. JSDoc is represented as a
<  unified object with fields for each JSDoc annotation, even though some
<  combinations are incorrect. For instance, if a JSDoc describes an enum,
<  it cannot have information about a return type. This implementation
<  takes advantage of such incompatibilities to reuse fields for multiple
<  purposes, reducing memory consumption.</p>
< 
<  <p>Constructing <A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html" title="class in com.google.javascript.rhino"><CODE>JSDocInfo</CODE></A> objects is simplified by
<  <A HREF="../../../../com/google/javascript/rhino/JSDocInfoBuilder.html" title="class in com.google.javascript.rhino"><CODE>JSDocInfoBuilder</CODE></A> which provides early incompatibility detection.</p>
< <P>
< 
< <P>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../serialized-form.html#com.google.javascript.rhino.JSDocInfo">Serialized Form</A></DL>
< <HR>
< 
< <P>
< <!-- ======== NESTED CLASS SUMMARY ======== -->
< 
< <A NAME="nested_class_summary"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
< <B>Nested Class Summary</B></FONT></TH>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;class</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.Marker.html" title="class in com.google.javascript.rhino">JSDocInfo.Marker</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Defines a class for containing the parsing information
<  for this JSDocInfo.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;class</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.StringPosition.html" title="class in com.google.javascript.rhino">JSDocInfo.StringPosition</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A piece of information in a marker containing a position with a string.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;class</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.TypePosition.html" title="class in com.google.javascript.rhino">JSDocInfo.TypePosition</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A piece of information in a marker containing a position with a type.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;class</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.Visibility.html" title="enum in com.google.javascript.rhino">JSDocInfo.Visibility</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Visibility categories.</TD>
< </TR>
< </TABLE>
< &nbsp;
< <!-- ======== CONSTRUCTOR SUMMARY ======== -->
< 
< <A NAME="constructor_summary"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
< <B>Constructor Summary</B></FONT></TH>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#JSDocInfo()">JSDocInfo</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< </TABLE>
< &nbsp;
< <!-- ========== METHOD SUMMARY =========== -->
< 
< <A NAME="method_summary"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
< <B>Method Summary</B></FONT></TH>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#getAuthors()">getAuthors</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the list of authors or null if none.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/rhino/JSTypeExpression.html" title="class in com.google.javascript.rhino">JSTypeExpression</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#getBaseType()">getBaseType</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the base type specified by the <code>@extends</code> annotation.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#getBlockDescription()">getBlockDescription</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the block-level description or null if none specified.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#getDeprecationReason()">getDeprecationReason</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the deprecation reason or null if none specified.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#getDescription()">getDescription</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the description specified by the <code>@desc</code> annotation.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#getDescriptionForParameter(java.lang.String)">getDescriptionForParameter</A></B>(<A HREF="http:
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the description for the parameter with the given name, if its
<  exists.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#getDescriptionForThrownType(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.StaticScope)">getDescriptionForThrownType</A></B>(<A HREF="../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;type,
<                             <A HREF="../../../../com/google/javascript/rhino/jstype/StaticScope.html" title="interface in com.google.javascript.rhino.jstype">StaticScope</A>&lt;<A HREF="../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&gt;&nbsp;scope)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the description for the given thrown type, if it
<  exists.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/rhino/JSTypeExpression.html" title="class in com.google.javascript.rhino">JSTypeExpression</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#getEnumParameterType()">getEnumParameterType</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the enum parameter type specified by the <code>@enum</code> annotation.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#getFileOverview()">getFileOverview</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the file overview or null if none specified.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#getImplementedInterfaceCount()">getImplementedInterfaceCount</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the number of interfaces specified by the <code>@implements</code>
<  annotation.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#getImplementedInterfaces()">getImplementedInterfaces</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the types specified by the <code>@implements</code> annotation.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#getLicense()">getLicense</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the description specified by the <code>@license</code> annotation.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#getMarkers()">getMarkers</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the list of all markers for the documentation in this JSDoc.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#getParameterCount()">getParameterCount</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the number of parameters defined.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#getParameterNames()">getParameterNames</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the set of names of the defined parameters.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/rhino/JSTypeExpression.html" title="class in com.google.javascript.rhino">JSTypeExpression</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#getParameterType(java.lang.String)">getParameterType</A></B>(<A HREF="http:
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the parameter type.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#getReferences()">getReferences</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the list of references or null if none.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#getReturnDescription()">getReturnDescription</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the description of the returned object or null if none specified.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/rhino/JSTypeExpression.html" title="class in com.google.javascript.rhino">JSTypeExpression</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#getReturnType()">getReturnType</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the return type specified by the <code>@return</code> annotation.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#getSourceName()">getSourceName</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the name of the source file that contains this JSDoc.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#getSuppressions()">getSuppressions</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the set of suppressed warnings.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#getTemplateTypeName()">getTemplateTypeName</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the template type name.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/rhino/JSTypeExpression.html" title="class in com.google.javascript.rhino">JSTypeExpression</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#getThisType()">getThisType</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the type specified by the <code>@this</code> annotation.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#getThrownTypes()">getThrownTypes</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the list of thrown types.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/rhino/JSTypeExpression.html" title="class in com.google.javascript.rhino">JSTypeExpression</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#getType()">getType</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the type specified by the <code>@type</code> annotation.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/rhino/JSTypeExpression.html" title="class in com.google.javascript.rhino">JSTypeExpression</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#getTypedefType()">getTypedefType</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the typedef type specified by the <code>@type</code> annotation.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#getVersion()">getVersion</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the version or null if none.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/rhino/JSDocInfo.Visibility.html" title="enum in com.google.javascript.rhino">JSDocInfo.Visibility</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#getVisibility()">getVisibility</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the visibility specified by <code>@private</code>, <code>@protected</code> or
<  <code>@public</code> annotation.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#hasBaseType()">hasBaseType</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns whether this <A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html" title="class in com.google.javascript.rhino"><CODE>JSDocInfo</CODE></A> contains a type for <code>@extends</code>
<  annotation.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#hasDescriptionForParameter(java.lang.String)">hasDescriptionForParameter</A></B>(<A HREF="http:
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns whether a description exists for the parameter with the specified
<  name.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#hasEnumParameterType()">hasEnumParameterType</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns whether an enum parameter type, specified using the <code>@enum</code>
<  annotation, is present on this JSDoc.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#hasFileOverview()">hasFileOverview</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns whether this has a fileoverview flag.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#hasParameter(java.lang.String)">hasParameter</A></B>(<A HREF="http:
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns whether the parameter is defined.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#hasParameterType(java.lang.String)">hasParameterType</A></B>(<A HREF="http:
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns whether the parameter has an attached type.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#hasReturnType()">hasReturnType</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns whether this <A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html" title="class in com.google.javascript.rhino"><CODE>JSDocInfo</CODE></A> contains a type for <code>@return</code>
<  annotation.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#hasThisType()">hasThisType</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns whether this <A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html" title="class in com.google.javascript.rhino"><CODE>JSDocInfo</CODE></A> contains a type for <code>@this</code>
<  annotation.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#hasType()">hasType</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns whether a type, specified using the <code>@type</code> annotation, is
<  present on this JSDoc.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#hasTypedefType()">hasTypedefType</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns whether a typedef parameter type, specified using the
<  <code>@typedef</code> annotation, is present on this JSDoc.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#isConstant()">isConstant</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns whether the <code>@const</code> annotation is present on this
<  <A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html" title="class in com.google.javascript.rhino"><CODE>JSDocInfo</CODE></A>.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#isConstructor()">isConstructor</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns whether the <code>@constructor</code> annotation is present on this
<  <A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html" title="class in com.google.javascript.rhino"><CODE>JSDocInfo</CODE></A>.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#isDefine()">isDefine</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns whether the <code>@define</code> annotation is present on this
<  <A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html" title="class in com.google.javascript.rhino"><CODE>JSDocInfo</CODE></A>.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#isDeprecated()">isDeprecated</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns whether the <code>@deprecated</code> annotation is present on this
<  <A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html" title="class in com.google.javascript.rhino"><CODE>JSDocInfo</CODE></A>.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#isExport()">isExport</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns whether the <code>@export</code> annotation is present on this
<  <A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html" title="class in com.google.javascript.rhino"><CODE>JSDocInfo</CODE></A>.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#isExterns()">isExterns</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns whether the <code>@externs</code> annotation is present on this
<  <A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html" title="class in com.google.javascript.rhino"><CODE>JSDocInfo</CODE></A>.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#isHidden()">isHidden</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns whether the <code>@hidden</code> annotation is present on this
<  <A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html" title="class in com.google.javascript.rhino"><CODE>JSDocInfo</CODE></A>.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#isImplicitCast()">isImplicitCast</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns whether the <code>@implicitCast</code> annotation is present on this
<  <A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html" title="class in com.google.javascript.rhino"><CODE>JSDocInfo</CODE></A>.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#isInterface()">isInterface</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns whether the <code>@interface</code> annotation is present on this
<  <A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html" title="class in com.google.javascript.rhino"><CODE>JSDocInfo</CODE></A>.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#isNoAlias()">isNoAlias</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns whether the <code>@noalias</code> annotation is present on this
<  <A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html" title="class in com.google.javascript.rhino"><CODE>JSDocInfo</CODE></A>.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#isNoShadow()">isNoShadow</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns whether the <code>@noshadow</code> annotation is present on this
<  <A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html" title="class in com.google.javascript.rhino"><CODE>JSDocInfo</CODE></A>.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#isNoSideEffects()">isNoSideEffects</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns whether the <code>@nosideeffects</code> annotation is present on this
<  <A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html" title="class in com.google.javascript.rhino"><CODE>JSDocInfo</CODE></A>.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#isNoTypeCheck()">isNoTypeCheck</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns whether the <code>@nocheck</code> annotation is present on this
<  <A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html" title="class in com.google.javascript.rhino"><CODE>JSDocInfo</CODE></A>.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#isOverride()">isOverride</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns whether the <code>@override</code> annotation is present on this
<  <A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html" title="class in com.google.javascript.rhino"><CODE>JSDocInfo</CODE></A>.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#setDeprecated(boolean)">setDeprecated</A></B>(boolean&nbsp;value)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#setLicense(java.lang.String)">setLicense</A></B>(<A HREF="http:
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;License directives can appear in multiple comments, and always
<  apply to the entire file.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#setVisibility(com.google.javascript.rhino.JSDocInfo.Visibility)">setVisibility</A></B>(<A HREF="../../../../com/google/javascript/rhino/JSDocInfo.Visibility.html" title="enum in com.google.javascript.rhino">JSDocInfo.Visibility</A>&nbsp;visibility)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#shouldPreserveTry()">shouldPreserveTry</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns whether the <code>@preserveTry</code> annotation is present on this
<  <A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html" title="class in com.google.javascript.rhino"><CODE>JSDocInfo</CODE></A>.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#toString()">toString</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< </TABLE>
< &nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
< <TH ALIGN="left"><B>Methods inherited from class java.lang.<A HREF="http:
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD><CODE><A HREF="http:
< </TR>
< </TABLE>
< &nbsp;
< <P>
< 
< <!-- ========= CONSTRUCTOR DETAIL ======== -->
< 
< <A NAME="constructor_detail"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
< <B>Constructor Detail</B></FONT></TH>
< </TR>
< </TABLE>
< 
< <A NAME="JSDocInfo()"><!-- --></A><H3>
< JSDocInfo</H3>
< <PRE>
< public <B>JSDocInfo</B>()</PRE>
< <DL>
< </DL>
< 
< <!-- ============ METHOD DETAIL ========== -->
< 
< <A NAME="method_detail"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
< <B>Method Detail</B></FONT></TH>
< </TR>
< </TABLE>
< 
< <A NAME="setDeprecated(boolean)"><!-- --></A><H3>
< setDeprecated</H3>
< <PRE>
< public void <B>setDeprecated</B>(boolean&nbsp;value)</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="isConstant()"><!-- --></A><H3>
< isConstant</H3>
< <PRE>
< public boolean <B>isConstant</B>()</PRE>
< <DL>
< <DD>Returns whether the <code>@const</code> annotation is present on this
<  <A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html" title="class in com.google.javascript.rhino"><CODE>JSDocInfo</CODE></A>.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="isConstructor()"><!-- --></A><H3>
< isConstructor</H3>
< <PRE>
< public boolean <B>isConstructor</B>()</PRE>
< <DL>
< <DD>Returns whether the <code>@constructor</code> annotation is present on this
<  <A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html" title="class in com.google.javascript.rhino"><CODE>JSDocInfo</CODE></A>.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="isDefine()"><!-- --></A><H3>
< isDefine</H3>
< <PRE>
< public boolean <B>isDefine</B>()</PRE>
< <DL>
< <DD>Returns whether the <code>@define</code> annotation is present on this
<  <A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html" title="class in com.google.javascript.rhino"><CODE>JSDocInfo</CODE></A>. If this annotation is present, then the
<  <A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html#getType()"><CODE>getType()</CODE></A> method will retrieve the define type.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="isHidden()"><!-- --></A><H3>
< isHidden</H3>
< <PRE>
< public boolean <B>isHidden</B>()</PRE>
< <DL>
< <DD>Returns whether the <code>@hidden</code> annotation is present on this
<  <A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html" title="class in com.google.javascript.rhino"><CODE>JSDocInfo</CODE></A>.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="isNoTypeCheck()"><!-- --></A><H3>
< isNoTypeCheck</H3>
< <PRE>
< public boolean <B>isNoTypeCheck</B>()</PRE>
< <DL>
< <DD>Returns whether the <code>@nocheck</code> annotation is present on this
<  <A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html" title="class in com.google.javascript.rhino"><CODE>JSDocInfo</CODE></A>.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="shouldPreserveTry()"><!-- --></A><H3>
< shouldPreserveTry</H3>
< <PRE>
< public boolean <B>shouldPreserveTry</B>()</PRE>
< <DL>
< <DD>Returns whether the <code>@preserveTry</code> annotation is present on this
<  <A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html" title="class in com.google.javascript.rhino"><CODE>JSDocInfo</CODE></A>.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="isOverride()"><!-- --></A><H3>
< isOverride</H3>
< <PRE>
< public boolean <B>isOverride</B>()</PRE>
< <DL>
< <DD>Returns whether the <code>@override</code> annotation is present on this
<  <A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html" title="class in com.google.javascript.rhino"><CODE>JSDocInfo</CODE></A>.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="isNoAlias()"><!-- --></A><H3>
< isNoAlias</H3>
< <PRE>
< public boolean <B>isNoAlias</B>()</PRE>
< <DL>
< <DD>Returns whether the <code>@noalias</code> annotation is present on this
<  <A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html" title="class in com.google.javascript.rhino"><CODE>JSDocInfo</CODE></A>.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="isDeprecated()"><!-- --></A><H3>
< isDeprecated</H3>
< <PRE>
< public boolean <B>isDeprecated</B>()</PRE>
< <DL>
< <DD>Returns whether the <code>@deprecated</code> annotation is present on this
<  <A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html" title="class in com.google.javascript.rhino"><CODE>JSDocInfo</CODE></A>.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="isInterface()"><!-- --></A><H3>
< isInterface</H3>
< <PRE>
< public boolean <B>isInterface</B>()</PRE>
< <DL>
< <DD>Returns whether the <code>@interface</code> annotation is present on this
<  <A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html" title="class in com.google.javascript.rhino"><CODE>JSDocInfo</CODE></A>.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="isExport()"><!-- --></A><H3>
< isExport</H3>
< <PRE>
< public boolean <B>isExport</B>()</PRE>
< <DL>
< <DD>Returns whether the <code>@export</code> annotation is present on this
<  <A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html" title="class in com.google.javascript.rhino"><CODE>JSDocInfo</CODE></A>.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="isNoShadow()"><!-- --></A><H3>
< isNoShadow</H3>
< <PRE>
< public boolean <B>isNoShadow</B>()</PRE>
< <DL>
< <DD>Returns whether the <code>@noshadow</code> annotation is present on this
<  <A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html" title="class in com.google.javascript.rhino"><CODE>JSDocInfo</CODE></A>.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="isImplicitCast()"><!-- --></A><H3>
< isImplicitCast</H3>
< <PRE>
< public boolean <B>isImplicitCast</B>()</PRE>
< <DL>
< <DD>Returns whether the <code>@implicitCast</code> annotation is present on this
<  <A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html" title="class in com.google.javascript.rhino"><CODE>JSDocInfo</CODE></A>.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="isNoSideEffects()"><!-- --></A><H3>
< isNoSideEffects</H3>
< <PRE>
< public boolean <B>isNoSideEffects</B>()</PRE>
< <DL>
< <DD>Returns whether the <code>@nosideeffects</code> annotation is present on this
<  <A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html" title="class in com.google.javascript.rhino"><CODE>JSDocInfo</CODE></A>.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="isExterns()"><!-- --></A><H3>
< isExterns</H3>
< <PRE>
< public boolean <B>isExterns</B>()</PRE>
< <DL>
< <DD>Returns whether the <code>@externs</code> annotation is present on this
<  <A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html" title="class in com.google.javascript.rhino"><CODE>JSDocInfo</CODE></A>.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="setVisibility(com.google.javascript.rhino.JSDocInfo.Visibility)"><!-- --></A><H3>
< setVisibility</H3>
< <PRE>
< public void <B>setVisibility</B>(<A HREF="../../../../com/google/javascript/rhino/JSDocInfo.Visibility.html" title="enum in com.google.javascript.rhino">JSDocInfo.Visibility</A>&nbsp;visibility)</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getVisibility()"><!-- --></A><H3>
< getVisibility</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/rhino/JSDocInfo.Visibility.html" title="enum in com.google.javascript.rhino">JSDocInfo.Visibility</A> <B>getVisibility</B>()</PRE>
< <DL>
< <DD>Gets the visibility specified by <code>@private</code>, <code>@protected</code> or
<  <code>@public</code> annotation. If no visibility is specified, visibility
<  is inherited from the base class.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getParameterType(java.lang.String)"><!-- --></A><H3>
< getParameterType</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/rhino/JSTypeExpression.html" title="class in com.google.javascript.rhino">JSTypeExpression</A> <B>getParameterType</B>(<A HREF="http:
< <DL>
< <DD>Gets the parameter type.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< <DT><B>Parameters:</B><DD><CODE>parameter</CODE> - the parameter's name
< <DT><B>Returns:</B><DD>the parameter's type or <code>null</code> if this parameter is not
<      defined or has a <code>null</code> type</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="hasParameter(java.lang.String)"><!-- --></A><H3>
< hasParameter</H3>
< <PRE>
< public boolean <B>hasParameter</B>(<A HREF="http:
< <DL>
< <DD>Returns whether the parameter is defined.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="hasParameterType(java.lang.String)"><!-- --></A><H3>
< hasParameterType</H3>
< <PRE>
< public boolean <B>hasParameterType</B>(<A HREF="http:
< <DL>
< <DD>Returns whether the parameter has an attached type.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< 
< <DT><B>Returns:</B><DD><code>true</code> if the parameter has an attached type, <code>false</code>
<      if the parameter has no attached type or does not exist.</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getParameterNames()"><!-- --></A><H3>
< getParameterNames</H3>
< <PRE>
< public <A HREF="http:
< <DL>
< <DD>Returns the set of names of the defined parameters. The iteration order
<  of the returned set is not the order in which parameters are defined.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< 
< <DT><B>Returns:</B><DD>the set of names of the defined parameters. The returned set is
<      immutable.</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getParameterCount()"><!-- --></A><H3>
< getParameterCount</H3>
< <PRE>
< public int <B>getParameterCount</B>()</PRE>
< <DL>
< <DD>Gets the number of parameters defined.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getThrownTypes()"><!-- --></A><H3>
< getThrownTypes</H3>
< <PRE>
< public <A HREF="http:
< <DL>
< <DD>Returns the list of thrown types.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="hasType()"><!-- --></A><H3>
< hasType</H3>
< <PRE>
< public boolean <B>hasType</B>()</PRE>
< <DL>
< <DD>Returns whether a type, specified using the <code>@type</code> annotation, is
<  present on this JSDoc.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="hasEnumParameterType()"><!-- --></A><H3>
< hasEnumParameterType</H3>
< <PRE>
< public boolean <B>hasEnumParameterType</B>()</PRE>
< <DL>
< <DD>Returns whether an enum parameter type, specified using the <code>@enum</code>
<  annotation, is present on this JSDoc.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="hasTypedefType()"><!-- --></A><H3>
< hasTypedefType</H3>
< <PRE>
< public boolean <B>hasTypedefType</B>()</PRE>
< <DL>
< <DD>Returns whether a typedef parameter type, specified using the
<  <code>@typedef</code> annotation, is present on this JSDoc.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="hasReturnType()"><!-- --></A><H3>
< hasReturnType</H3>
< <PRE>
< public boolean <B>hasReturnType</B>()</PRE>
< <DL>
< <DD>Returns whether this <A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html" title="class in com.google.javascript.rhino"><CODE>JSDocInfo</CODE></A> contains a type for <code>@return</code>
<  annotation.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getType()"><!-- --></A><H3>
< getType</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/rhino/JSTypeExpression.html" title="class in com.google.javascript.rhino">JSTypeExpression</A> <B>getType</B>()</PRE>
< <DL>
< <DD>Gets the type specified by the <code>@type</code> annotation.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getReturnType()"><!-- --></A><H3>
< getReturnType</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/rhino/JSTypeExpression.html" title="class in com.google.javascript.rhino">JSTypeExpression</A> <B>getReturnType</B>()</PRE>
< <DL>
< <DD>Gets the return type specified by the <code>@return</code> annotation.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getEnumParameterType()"><!-- --></A><H3>
< getEnumParameterType</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/rhino/JSTypeExpression.html" title="class in com.google.javascript.rhino">JSTypeExpression</A> <B>getEnumParameterType</B>()</PRE>
< <DL>
< <DD>Gets the enum parameter type specified by the <code>@enum</code> annotation.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getTypedefType()"><!-- --></A><H3>
< getTypedefType</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/rhino/JSTypeExpression.html" title="class in com.google.javascript.rhino">JSTypeExpression</A> <B>getTypedefType</B>()</PRE>
< <DL>
< <DD>Gets the typedef type specified by the <code>@type</code> annotation.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getThisType()"><!-- --></A><H3>
< getThisType</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/rhino/JSTypeExpression.html" title="class in com.google.javascript.rhino">JSTypeExpression</A> <B>getThisType</B>()</PRE>
< <DL>
< <DD>Gets the type specified by the <code>@this</code> annotation.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="hasThisType()"><!-- --></A><H3>
< hasThisType</H3>
< <PRE>
< public boolean <B>hasThisType</B>()</PRE>
< <DL>
< <DD>Returns whether this <A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html" title="class in com.google.javascript.rhino"><CODE>JSDocInfo</CODE></A> contains a type for <code>@this</code>
<  annotation.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getBaseType()"><!-- --></A><H3>
< getBaseType</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/rhino/JSTypeExpression.html" title="class in com.google.javascript.rhino">JSTypeExpression</A> <B>getBaseType</B>()</PRE>
< <DL>
< <DD>Gets the base type specified by the <code>@extends</code> annotation.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getDescription()"><!-- --></A><H3>
< getDescription</H3>
< <PRE>
< public <A HREF="http:
< <DL>
< <DD>Gets the description specified by the <code>@desc</code> annotation.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getLicense()"><!-- --></A><H3>
< getLicense</H3>
< <PRE>
< public <A HREF="http:
< <DL>
< <DD>Gets the description specified by the <code>@license</code> annotation.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="setLicense(java.lang.String)"><!-- --></A><H3>
< setLicense</H3>
< <PRE>
< public void <B>setLicense</B>(<A HREF="http:
< <DL>
< <DD>License directives can appear in multiple comments, and always
<  apply to the entire file.  Break protection and allow outsiders to
<  update the license string so that we can attach the license text even
<  when the JSDocInfo has been created and tagged with other information.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< <DT><B>Parameters:</B><DD><CODE>license</CODE> - String containing new license text.</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="toString()"><!-- --></A><H3>
< toString</H3>
< <PRE>
< public <A HREF="http:
< <DL>
< <DD><DL>
< <DT><B>Overrides:</B><DD><CODE><A HREF="http:
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="hasBaseType()"><!-- --></A><H3>
< hasBaseType</H3>
< <PRE>
< public boolean <B>hasBaseType</B>()</PRE>
< <DL>
< <DD>Returns whether this <A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html" title="class in com.google.javascript.rhino"><CODE>JSDocInfo</CODE></A> contains a type for <code>@extends</code>
<  annotation.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getImplementedInterfaces()"><!-- --></A><H3>
< getImplementedInterfaces</H3>
< <PRE>
< public <A HREF="http:
< <DL>
< <DD>Returns the types specified by the <code>@implements</code> annotation.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< 
< <DT><B>Returns:</B><DD>An immutable list of JSTypeExpression objects that can
<     be resolved to types.</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getImplementedInterfaceCount()"><!-- --></A><H3>
< getImplementedInterfaceCount</H3>
< <PRE>
< public int <B>getImplementedInterfaceCount</B>()</PRE>
< <DL>
< <DD>Gets the number of interfaces specified by the <code>@implements</code>
<  annotation.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getDeprecationReason()"><!-- --></A><H3>
< getDeprecationReason</H3>
< <PRE>
< public <A HREF="http:
< <DL>
< <DD>Returns the deprecation reason or null if none specified.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getSuppressions()"><!-- --></A><H3>
< getSuppressions</H3>
< <PRE>
< public <A HREF="http:
< <DL>
< <DD>Returns the set of suppressed warnings.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="hasDescriptionForParameter(java.lang.String)"><!-- --></A><H3>
< hasDescriptionForParameter</H3>
< <PRE>
< public boolean <B>hasDescriptionForParameter</B>(<A HREF="http:
< <DL>
< <DD>Returns whether a description exists for the parameter with the specified
<  name.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getDescriptionForParameter(java.lang.String)"><!-- --></A><H3>
< getDescriptionForParameter</H3>
< <PRE>
< public <A HREF="http:
< <DL>
< <DD>Returns the description for the parameter with the given name, if its
<  exists.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getDescriptionForThrownType(com.google.javascript.rhino.jstype.JSType, com.google.javascript.rhino.jstype.StaticScope)"><!-- --></A><H3>
< getDescriptionForThrownType</H3>
< <PRE>
< public <A HREF="http:
<                                           <A HREF="../../../../com/google/javascript/rhino/jstype/StaticScope.html" title="interface in com.google.javascript.rhino.jstype">StaticScope</A>&lt;<A HREF="../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&gt;&nbsp;scope)</PRE>
< <DL>
< <DD>Returns the description for the given thrown type, if it
<  exists.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getAuthors()"><!-- --></A><H3>
< getAuthors</H3>
< <PRE>
< public <A HREF="http:
< <DL>
< <DD>Returns the list of authors or null if none.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getReferences()"><!-- --></A><H3>
< getReferences</H3>
< <PRE>
< public <A HREF="http:
< <DL>
< <DD>Returns the list of references or null if none.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getVersion()"><!-- --></A><H3>
< getVersion</H3>
< <PRE>
< public <A HREF="http:
< <DL>
< <DD>Returns the version or null if none.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getReturnDescription()"><!-- --></A><H3>
< getReturnDescription</H3>
< <PRE>
< public <A HREF="http:
< <DL>
< <DD>Returns the description of the returned object or null if none specified.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getBlockDescription()"><!-- --></A><H3>
< getBlockDescription</H3>
< <PRE>
< public <A HREF="http:
< <DL>
< <DD>Returns the block-level description or null if none specified.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="hasFileOverview()"><!-- --></A><H3>
< hasFileOverview</H3>
< <PRE>
< public boolean <B>hasFileOverview</B>()</PRE>
< <DL>
< <DD>Returns whether this has a fileoverview flag.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getFileOverview()"><!-- --></A><H3>
< getFileOverview</H3>
< <PRE>
< public <A HREF="http:
< <DL>
< <DD>Returns the file overview or null if none specified.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getSourceName()"><!-- --></A><H3>
< getSourceName</H3>
< <PRE>
< public <A HREF="http:
< <DL>
< <DD>Gets the name of the source file that contains this JSDoc.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getMarkers()"><!-- --></A><H3>
< getMarkers</H3>
< <PRE>
< public <A HREF="http:
< <DL>
< <DD>Gets the list of all markers for the documentation in this JSDoc.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getTemplateTypeName()"><!-- --></A><H3>
< getTemplateTypeName</H3>
< <PRE>
< public <A HREF="http:
< <DL>
< <DD>Gets the template type name.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <!-- ========= END OF CLASS DATA ========= -->
< <HR>
< 
< 
< <!-- ======= START OF BOTTOM NAVBAR ====== -->
< <A NAME="navbar_bottom"><!-- --></A>
< <A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
< <TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
< <TR>
< <TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
< <A NAME="navbar_bottom_firstrow"><!-- --></A>
< <TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
<   <TR ALIGN="center" VALIGN="top">
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
<   </TR>
< </TABLE>
< </TD>
< <TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
< </EM>
< </TD>
< </TR>
< 
< <TR>
< <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
< &nbsp;<A HREF="../../../../com/google/javascript/rhino/FunctionNode.html" title="class in com.google.javascript.rhino"><B>PREV CLASS</B></A>&nbsp;
< &nbsp;<A HREF="../../../../com/google/javascript/rhino/JSDocInfo.Marker.html" title="class in com.google.javascript.rhino"><B>NEXT CLASS</B></A></FONT></TD>
< <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
<   <A HREF="../../../../index.html?com/google/javascript/rhino/JSDocInfo.html" target="_top"><B>FRAMES</B></A>  &nbsp;
< &nbsp;<A HREF="JSDocInfo.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
< &nbsp;<SCRIPT type="text/javascript">
<   <!--
<   if(window==top) {
<     document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
<   }
<   
< </SCRIPT>
< <NOSCRIPT>
<   <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
< </NOSCRIPT>
< 
< 
< </FONT></TD>
< </TR>
< <TR>
< <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
<   SUMMARY:&nbsp;<A HREF="#nested_class_summary">NESTED</A>&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
< <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
< DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
< </TR>
< </TABLE>
< <A NAME="skip-navbar_bottom"></A>
< <!-- ======== END OF BOTTOM NAVBAR ======= -->
< 
< <HR>
< 
<         <div id="footer">
<           <div id="footerlogo">
<             <img src="http:
<                  alt="Google colored balls">
<           </div>
< 
<           <div id="copyright">
<           <p>&copy; 2009 Google -
<             <a href="http:
<             <a href="http:
<             <a href="http:
<           </p>
<           </div>
<         </div>
<       
<       
< </BODY>
< </HTML>
