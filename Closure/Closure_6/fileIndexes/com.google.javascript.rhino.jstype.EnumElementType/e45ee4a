





































 
package com.google.javascript.rhino.jstype;



import java.util.Set;







public class EnumElementType extends ObjectType {
  private static final long serialVersionUID = 1L;

  





  private final JSType primitiveType;

  
  private final ObjectType primitiveObjectType;

  private final String name;

  EnumElementType(JSTypeRegistry registry, JSType elementType,
      String name) {
    super(registry);
    this.primitiveType = elementType;
    this.primitiveObjectType = elementType instanceof ObjectType ?
        (ObjectType) elementType : null;
    this.name = name;
  }

  @Override
  public boolean isEnumElementType() {
    return true;
  }

  @Override
  public boolean matchesNumberContext() {
    return primitiveType.matchesNumberContext();
  }

  @Override
  public boolean matchesStringContext() {
    return primitiveType.matchesStringContext();
  }

  @Override
  public boolean matchesObjectContext() {
    return primitiveType.matchesObjectContext();
  }

  @Override
  public boolean canBeCalled() {
    return primitiveType.canBeCalled();
  }

  @Override
  public boolean isObject() {
    return primitiveType.isObject();
  }

  @Override
  public TernaryValue testForEquality(JSType that) {
    return primitiveType.testForEquality(that);
  }

  





  @Override public boolean isNullable() {
    return primitiveType.isNullable();
  }

  @Override
  boolean isNominalType() {
    return hasName();
  }

  @Override
  public boolean equals(Object that) {
    if (this == that) {
      return true;
    } else if (this.isNominalType() && that instanceof JSType &&
        ((JSType) that).isNominalType()) {
      return getName().equals(((ObjectType) that).getName());
    }
    return false;
  }

  



  @Override
  public int hashCode() {
    if (hasName()) {
      return getName().hashCode();
    } else {
      return super.hashCode();
    }
  }

  @Override
  public String toString() {
    return getName() + ".<" + primitiveType + ">";
  }

  @Override
  public String getName() {
    return name;
  }

  @Override
  public boolean hasName() {
    return true;
  }

  @Override
  public boolean isSubtype(JSType that) {
    if (JSType.isSubtype(this, that)) {
      return true;
    } else {
      return primitiveType.isSubtype(that);
    }
  }

  @Override
  public <T> T visit(Visitor<T> visitor) {
    return visitor.caseEnumElementType(this);
  }

  @Override
  boolean defineProperty(String propertyName, JSType type,
      boolean inferred, boolean inExterns) {
    
    return true;
  }

  @Override
  public boolean isPropertyTypeDeclared(String propertyName) {
    return primitiveObjectType == null ?
        false : primitiveObjectType.isPropertyTypeDeclared(propertyName);
  }

  @Override
  public boolean isPropertyTypeInferred(String propertyName) {
    return primitiveObjectType == null ?
        false : primitiveObjectType.isPropertyTypeInferred(propertyName);
  }

  @Override
  public ObjectType getImplicitPrototype() {
    return null;
  }

  @Override
  public int getPropertiesCount() {
    return primitiveObjectType == null ?
        0 : primitiveObjectType.getPropertiesCount();
  }

  @Override
  protected void collectPropertyNames(Set<String> props) {
    if (primitiveObjectType != null) {
      primitiveObjectType.collectPropertyNames(props);
    }
  }

  @Override
  public JSType findPropertyType(String propertyName) {
    return primitiveType.findPropertyType(propertyName);
  }

  @Override
  public JSType getPropertyType(String propertyName) {
    return primitiveObjectType == null ?
        getNativeType(JSTypeNative.UNKNOWN_TYPE) :
        primitiveObjectType.getPropertyType(propertyName);
  }

  @Override
  public boolean hasProperty(String propertyName) {
    return primitiveObjectType == null ?
        false :
        primitiveObjectType.hasProperty(propertyName);
  }

  @Override
  public FunctionType getConstructor() {
    return primitiveObjectType == null ?
        null : primitiveObjectType.getConstructor();
  }

  @Override
  public JSType autoboxesTo() {
    return primitiveType.autoboxesTo();
  }

  


  public JSType getPrimitiveType() {
    return primitiveType;
  }
}
