















package com.google.javascript.jscomp;

import com.google.common.base.Preconditions;











public abstract class PassFactory {

  private final String name;
  private final boolean isOneTimePass;
  private boolean isCreated = false;

  




  protected PassFactory(String name, boolean isOneTimePass) {
    this.name = name;
    this.isOneTimePass = isOneTimePass;
  }

  


  String getName() {
    return name;
  }

  


  boolean isOneTimePass() {
    return isOneTimePass;
  }

  


  PassFactory makeOneTimePass() {
    if (isOneTimePass()) {
      return this;
    }

    final PassFactory self = this;
    return new PassFactory(name, true ) {
      @Override
      protected CompilerPass createInternal(AbstractCompiler compiler) {
        return self.createInternal(compiler);
      }
    };
  }

  


  final CompilerPass create(AbstractCompiler compiler) {
    Preconditions.checkState(!isCreated || !isOneTimePass,
        "One-time passes cannot be run multiple times: " + name);
    isCreated = true;
    return createInternal(compiler);
  }

  


  abstract protected CompilerPass createInternal(AbstractCompiler compiler);
}
