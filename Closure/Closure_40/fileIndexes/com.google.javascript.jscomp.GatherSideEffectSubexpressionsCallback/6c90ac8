















package com.google.javascript.jscomp;

import com.google.common.base.Preconditions;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import com.google.javascript.jscomp.CodingConvention.SubclassRelationship;
import com.google.javascript.jscomp.NodeTraversal.Callback;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.Token;

import java.util.List;
import java.util.Set;








class GatherSideEffectSubexpressionsCallback implements Callback {

  



  interface SideEffectAccumulator {

    



    boolean classDefiningCallsHaveSideEffects();

    




    void keepSubTree(Node original);

    






    void keepSimplifiedShortCircuitExpression(Node original);

    








    void keepSimplifiedHookExpression(Node hook,
                                      boolean thenHasSideEffects,
                                      boolean elseHasSideEffects);
  }

  



  static final class CopySideEffectSubexpressions
      implements SideEffectAccumulator {
    private final AbstractCompiler compiler;
    private final List<Node> replacements;

    





    CopySideEffectSubexpressions(AbstractCompiler compiler,
                                 List<Node> replacements) {
      this.compiler = compiler;
      this.replacements = replacements;
    }

    @Override
    public boolean classDefiningCallsHaveSideEffects() {
      return true;
    }

    @Override
    public void keepSubTree(Node original) {
      replacements.add(original.cloneTree());
    }

    @Override
    public void keepSimplifiedShortCircuitExpression(Node original) {
      Preconditions.checkArgument(
          (original.isAnd()) || (original.isOr()),
          "Expected: AND or OR, Got: %s", Token.name(original.getType()));
      Node left = original.getFirstChild();
      Node right = left.getNext();
      Node simplifiedRight = simplifyShortCircuitBranch(right);

      Node simplified = original.cloneNode();
      simplified.addChildToBack(left.cloneTree());
      simplified.addChildToBack(simplifiedRight);
      replacements.add(simplified);
    }

    @Override
    public void keepSimplifiedHookExpression(Node hook,
                                             boolean thenHasSideEffects,
                                             boolean elseHasSideEffects) {
      Preconditions.checkArgument(hook.isHook(),
          "Expected: HOOK, Got: %s", Token.name(hook.getType()));
      Node condition = hook.getFirstChild();
      Node thenBranch = condition.getNext();
      Node elseBranch = thenBranch.getNext();
      if (thenHasSideEffects && elseHasSideEffects) {
        Node simplified = hook.cloneNode();
        simplified.addChildToBack(condition.cloneTree());
        simplified.addChildToBack(simplifyShortCircuitBranch(thenBranch));
        simplified.addChildToBack(simplifyShortCircuitBranch(elseBranch));
        replacements.add(simplified);
      } else if (thenHasSideEffects || elseHasSideEffects) {
        int type = thenHasSideEffects ? Token.AND : Token.OR;
        Node body = thenHasSideEffects ? thenBranch : elseBranch;
        Node simplified = new Node(
            type, condition.cloneTree(), simplifyShortCircuitBranch(body))
            .copyInformationFrom(hook);
        replacements.add(simplified);
      } else {
        throw new IllegalArgumentException(
            "keepSimplifiedHookExpression must keep at least 1 branch");
      }
    }

    private Node simplifyShortCircuitBranch(Node node) {
      List<Node> parts = Lists.newArrayList();
      NodeTraversal.traverse(
          compiler, node,
          new GatherSideEffectSubexpressionsCallback(
              compiler,
              new CopySideEffectSubexpressions(compiler, parts)));

      Node ret = null;
      for (Node part : parts) {
        if (ret != null) {
          ret = new Node(Token.COMMA, ret, part).copyInformationFrom(node);
        } else {
          ret = part;
        }
      }

      if (ret == null) {
        throw new IllegalArgumentException(
            "expected at least one side effect subexpression in short "
            + "circuit branch.");
      }

      return ret;
    }
  }

  private static final Set<Integer> FORBIDDEN_TYPES = ImmutableSet.of(
      Token.BLOCK, Token.SCRIPT, Token.VAR, Token.EXPR_RESULT, Token.RETURN);
  private final AbstractCompiler compiler;
  private final SideEffectAccumulator accumulator;

  




  GatherSideEffectSubexpressionsCallback(AbstractCompiler compiler,
                                         SideEffectAccumulator accumulator) {
    this.compiler = compiler;
    this.accumulator = accumulator;
  }

  



  private boolean isClassDefiningCall(Node callNode) {
    SubclassRelationship classes =
        compiler.getCodingConvention().getClassesDefinedByCall(callNode);
    return classes != null;
  }

  











  @Override
  public boolean shouldTraverse(
      NodeTraversal traversal, Node node, Node parent) {
    if (FORBIDDEN_TYPES.contains(node.getType()) ||
        NodeUtil.isControlStructure(node)) {
      throw new IllegalArgumentException(
          Token.name(node.getType()) + " nodes are not supported.");
    }

    
    if (node.isFunction()) {
      return false;
    }

    
    if (node.isHook()) {
      return processHook(node);
    }

    
    if ((node.isAnd()) || (node.isOr())) {
      return processShortCircuitExpression(node);
    }

    if (!NodeUtil.nodeTypeMayHaveSideEffects(node)) {
      return true;
    } else {

      

      if (node.isCall()) {
        return processFunctionCall(node);
      } else if (node.isNew()) {
        return processConstructorCall(node);
      } else {
        accumulator.keepSubTree(node);
        return false;
      }
    }
  }

  




  boolean processShortCircuitExpression(Node node) {
    Preconditions.checkArgument(
        (node.isAnd()) || (node.isOr()),
        "Expected: AND or OR, Got: %s", Token.name(node.getType()));

    
    
    Node left = node.getFirstChild();
    Node right = left.getNext();
    if (NodeUtil.mayHaveSideEffects(right)) {
      accumulator.keepSimplifiedShortCircuitExpression(node);
      return false;
    } else {
      return true;
    }
  }

  




  boolean processHook(Node node) {
    Preconditions.checkArgument(node.isHook(),
        "Expected: HOOK, Got: %s", Token.name(node.getType()));

    Node condition = node.getFirstChild();
    Node ifBranch = condition.getNext();
    Node elseBranch = ifBranch.getNext();
    boolean thenHasSideEffects = NodeUtil.mayHaveSideEffects(ifBranch);
    boolean elseHasSideEffects = NodeUtil.mayHaveSideEffects(elseBranch);
    if (thenHasSideEffects || elseHasSideEffects) {
      accumulator.keepSimplifiedHookExpression(
          node, thenHasSideEffects, elseHasSideEffects);
      return false;
    } else {
      return true;
    }
  }

  




  boolean processFunctionCall(Node node) {
    Preconditions.checkArgument(node.isCall(),
        "Expected: CALL, Got: %s", Token.name(node.getType()));

    
    
    Node functionName = node.getFirstChild();
    if (functionName.isName() || functionName.isGetProp()) {
      if (!accumulator.classDefiningCallsHaveSideEffects() &&
          isClassDefiningCall(node)) {
        return true;
      }
    }

    if (!NodeUtil.functionCallHasSideEffects(node)) {
      return true;
    }

    accumulator.keepSubTree(node);
    return false;
  }

  




  boolean processConstructorCall(Node node) {
    Preconditions.checkArgument(node.isNew(),
        "Expected: NEW, Got: %s", Token.name(node.getType()));

    
    
    if (!NodeUtil.constructorCallHasSideEffects(node)) {
      return true;
    }

    accumulator.keepSubTree(node);
    return false;
  }

  @Override
  public void visit(NodeTraversal traversal, Node node, Node parent) {}
}
