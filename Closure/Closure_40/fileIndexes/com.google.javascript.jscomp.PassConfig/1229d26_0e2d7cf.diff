18a19
> import com.google.common.base.Preconditions;
20d20
< import com.google.javascript.jscomp.Scope.Var;
26d25
< import java.util.Iterator;
48a48,52
> 
> 
>   private TypedScopeCreator internalScopeCreator;
> 
>   
57a62,64
> 
> 
> 
59,61c66,67
<     MemoizedScopeCreator oldScopeCreator = typedScopeCreator;
<     typedScopeCreator =
<         new MemoizedScopeCreator(new TypedScopeCreator(compiler));
---
>     internalScopeCreator = new TypedScopeCreator(compiler);
>     typedScopeCreator = new MemoizedScopeCreator(internalScopeCreator);
62a69,76
>   }
> 
>   
> 
> 
> 
> 
> 
64,83c78,80
<     if (oldScopeCreator != null) {
<       Scope oldTopScope = oldScopeCreator.getScopeIfMemoized(root);
<       if (oldTopScope != null) {
<         
<         
<         
<         
<         
<         
<         Iterator<Var> varIt =
<             topScope.getDeclarativelyUnboundVarsWithoutTypes();
<         while (varIt.hasNext()) {
<           Var newVar = varIt.next();
<           Var oldVar = oldTopScope.getVar(newVar.getName());
<           if (oldVar != null) {
<             newVar.setType(oldVar.getType());
<           }
<         }
<       }
<     }
---
>   void patchGlobalTypedScope(AbstractCompiler compiler, Node scriptRoot) {
>     Preconditions.checkNotNull(internalScopeCreator);
>     internalScopeCreator.patchGlobalScope(topScope, scriptRoot);
