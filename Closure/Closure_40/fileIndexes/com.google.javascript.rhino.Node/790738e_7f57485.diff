1,7d0
< <!DOCTYPE HTML PUBLIC "-
< <!--NewPage-->
< <HTML>
< <HEAD>
< <TITLE>
< Node (Compiler)
< </TITLE>
10d2
< <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../dev_javadoc.css" TITLE="Style">
12,13c4,62
< <SCRIPT type="text/javascript">
< function windowTitle()
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> package com.google.javascript.rhino;
> 
> import com.google.common.base.Pair;
> import com.google.common.base.Preconditions;
> import com.google.javascript.rhino.jstype.JSType;
> 
> import java.io.IOException;
> import java.io.Serializable;
> import java.util.Arrays;
> import java.util.Collections;
> import java.util.Iterator;
> import java.util.NoSuchElementException;
> import java.util.Set;
> 
> 
> 
> 
> 
> 
> 
> 
> public class Node implements Cloneable, Serializable
15,16c64,1123
<     if (location.href.indexOf('is-external=true') == -1) {
<         parent.document.title="Node (Compiler)";
---
> 
>     private static final long serialVersionUID = 1L;
> 
>     public static final int
>         
>         
>         LOCAL_BLOCK_PROP  = -3,
>         OBJECT_IDS_PROP   = -2,
>         CATCH_SCOPE_PROP  = -1,
>         LABEL_ID_PROP     =  0,
> 
>         TARGET_PROP       =  1,
>         BREAK_PROP        =  2,
>         CONTINUE_PROP     =  3,
>         ENUM_PROP         =  4,
>         FUNCTION_PROP     =  5,
>         TEMP_PROP         =  6,
>         LOCAL_PROP        =  7,
>         CODEOFFSET_PROP   =  8,
>         FIXUPS_PROP       =  9,
>         VARS_PROP         = 10,
>         USES_PROP         = 11,
>         REGEXP_PROP       = 12,
>         CASES_PROP        = 13,
>         DEFAULT_PROP      = 14,
>         CASEARRAY_PROP    = 15,
>         SOURCENAME_PROP   = 16,
>         TYPE_PROP         = 17,
>         SPECIAL_PROP_PROP = 18,
>         LABEL_PROP        = 19,
>         FINALLY_PROP      = 20,
>         LOCALCOUNT_PROP   = 21,
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>         TARGETBLOCK_PROP  = 22,
>         VARIABLE_PROP     = 23,
>         LASTUSE_PROP      = 24,
>         ISNUMBER_PROP     = 25,
>         DIRECTCALL_PROP   = 26,
> 
>         SPECIALCALL_PROP  = 27,
>         DEBUGSOURCE_PROP  = 28,
>         JSDOC_INFO_PROP   = 29,     
>         VAR_ARGS_NAME     = 29,     
>                                     
>                                     
>         SKIP_INDEXES_PROP  = 30,    
>         INCRDECR_PROP      = 31,    
>         MEMBER_TYPE_PROP   = 32,    
>         NAME_PROP          = 33,    
>         PARENTHESIZED_PROP = 34,    
>         QUOTED_PROP        = 35,    
>         OPT_ARG_NAME       = 36,    
>         SYNTHETIC_BLOCK_PROP = 37,  
>                                     
>                                     
>         SOURCEFILE_PROP    = 38,    
>                                     
>         EMPTY_BLOCK        = 39,    
>                                     
>         ORIGINALNAME_PROP  = 40,    
>                                     
>         BRACELESS_TYPE     = 41,    
>         NO_SIDE_EFFECTS_CALL = 42,  
>                                     
>         
>         IS_CONSTANT_NAME   = 43,    
>         IS_OPTIONAL_PARAM  = 44,    
>         IS_VAR_ARGS_PARAM  = 45,    
>         IS_NAMESPACE       = 46,    
>         IS_DISPATCHER      = 47,    
>                                     
>                                     
>                                     
>         DIRECTIVES         = 48,    
>         LAST_PROP          = 48;
> 
>     
>     
>     public static final int
>         BOTH = 0,
>         LEFT = 1,
>         RIGHT = 2;
> 
>     public static final int    
>         NON_SPECIALCALL  = 0,
>         SPECIALCALL_EVAL = 1,
>         SPECIALCALL_WITH = 2;
> 
>     public static final int   
>         DECR_FLAG = 0x1,
>         POST_FLAG = 0x2;
> 
>     public static final int   
>         PROPERTY_FLAG    = 0x1, 
>         ATTRIBUTE_FLAG   = 0x2, 
>         DESCENDANTS_FLAG = 0x4; 
> 
>     private static final String propToString(int propType) {
>         switch (propType) {
>             case LOCAL_BLOCK_PROP:   return "local_block";
>             case OBJECT_IDS_PROP:    return "object_ids_prop";
>             case CATCH_SCOPE_PROP:   return "catch_scope_prop";
>             case LABEL_ID_PROP:      return "label_id_prop";
>             case TARGET_PROP:        return "target";
>             case BREAK_PROP:         return "break";
>             case CONTINUE_PROP:      return "continue";
>             case ENUM_PROP:          return "enum";
>             case FUNCTION_PROP:      return "function";
>             case TEMP_PROP:          return "temp";
>             case LOCAL_PROP:         return "local";
>             case CODEOFFSET_PROP:    return "codeoffset";
>             case FIXUPS_PROP:        return "fixups";
>             case VARS_PROP:          return "vars";
>             case USES_PROP:          return "uses";
>             case REGEXP_PROP:        return "regexp";
>             case CASES_PROP:         return "cases";
>             case DEFAULT_PROP:       return "default";
>             case CASEARRAY_PROP:     return "casearray";
>             case SOURCENAME_PROP:    return "sourcename";
>             case TYPE_PROP:          return "type";
>             case SPECIAL_PROP_PROP:  return "special_prop";
>             case LABEL_PROP:         return "label";
>             case FINALLY_PROP:       return "finally";
>             case LOCALCOUNT_PROP:    return "localcount";
> 
>             case TARGETBLOCK_PROP:   return "targetblock";
>             case VARIABLE_PROP:      return "variable";
>             case LASTUSE_PROP:       return "lastuse";
>             case ISNUMBER_PROP:      return "isnumber";
>             case DIRECTCALL_PROP:    return "directcall";
> 
>             case SPECIALCALL_PROP:   return "specialcall";
>             case DEBUGSOURCE_PROP:   return "debugsource";
> 
>             case JSDOC_INFO_PROP:    return "jsdoc_info";
> 
>             case SKIP_INDEXES_PROP:  return "skip_indexes";
>             case INCRDECR_PROP:      return "incrdecr";
>             case MEMBER_TYPE_PROP:   return "member_type";
>             case NAME_PROP:          return "name";
>             case PARENTHESIZED_PROP: return "parenthesized";
>             case QUOTED_PROP:        return "quoted";
> 
>             case SYNTHETIC_BLOCK_PROP: return "synthetic";
>             case SOURCEFILE_PROP: return "sourcefile";
>             case EMPTY_BLOCK: return "empty_block";
>             case ORIGINALNAME_PROP: return "originalname";
>             case NO_SIDE_EFFECTS_CALL: return "no_side_effects_call";
> 
>             case IS_CONSTANT_NAME:   return "is_constant_name";
>             case IS_OPTIONAL_PARAM:  return "is_optional_param";
>             case IS_VAR_ARGS_PARAM:  return "is_var_args_param";
>             case IS_NAMESPACE:         return "is_namespace";
>             case IS_DISPATCHER:        return "is_dispatcher";
>             default: Kit.codeBug();
> 
> 
>         }
>         return null;
>     }
> 
>     private static class NumberNode extends Node {
> 
>         private static final long serialVersionUID = 1L;
> 
>         NumberNode(double number) {
>             super(Token.NUMBER);
>             this.number = number;
>         }
> 
>         public NumberNode(double number, int lineno, int charno) {
>             super(Token.NUMBER, lineno, charno);
>             this.number = number;
>         }
> 
>         @Override public double getDouble() {
>           return this.number;
>         }
> 
>         @Override public void setDouble(double d) {
>           this.number = d;
>         }
> 
>         @Override public boolean isEquivalentTo(Node node) {
>             return (node instanceof NumberNode
>                     && getDouble() == ((NumberNode) node).getDouble());
>         }
> 
>         private double number;
>     }
> 
>     private static class StringNode extends Node {
> 
>         private static final long serialVersionUID = 1L;
> 
>         StringNode(int type, String str) {
>             super(type);
>             if (null == str) {
>                 throw new IllegalArgumentException("StringNode: str is null");
>             }
>             this.str = str;
>         }
> 
>         StringNode(int type, String str, int lineno, int charno) {
>             super(type, lineno, charno);
>             if (null == str) {
>                 throw new IllegalArgumentException("StringNode: str is null");
>             }
>             this.str = str;
>         }
> 
>         
> 
> 
>         @Override public String getString() {
>             return this.str;
>         }
> 
>         
> 
> 
>         @Override public void setString(String str) {
>             if (null == str) {
>                 throw new IllegalArgumentException("StringNode: str is null");
>             }
>             this.str = str;
>         }
> 
>         @Override public boolean isEquivalentTo(Node node) {
>             return (node instanceof StringNode &&
>                     this.str.equals(((StringNode) node).str));
>         }
> 
>         
> 
> 
> 
> 
> 
>         @Override public boolean isQuotedString() {
>             return getBooleanProp(QUOTED_PROP);
>         }
> 
>         
> 
> 
>         @Override public void setQuotedString() {
>             putBooleanProp(QUOTED_PROP, true);
>         }
> 
>         private String str;
>     }
> 
>     private static class PropListItem implements Serializable
>     {
>         private static final long serialVersionUID = 1L;
> 
>         PropListItem next;
>         int type;
>         int intValue;
>         Object objectValue;
>     }
> 
> 
>     public Node(int nodeType) {
>         type = nodeType;
>         parent = null;
>         sourcePosition = -1;
>     }
> 
>     public Node(int nodeType, Node child) {
>         Preconditions.checkArgument(child.parent == null,
>             "new child has existing parent");
>         Preconditions.checkArgument(child.next == null,
>             "new child has existing sibling");
> 
>         type = nodeType;
>         parent = null;
>         first = last = child;
>         child.next = null;
>         child.parent = this;
>         sourcePosition = -1;
>     }
> 
>     public Node(int nodeType, Node left, Node right) {
>         Preconditions.checkArgument(left.parent == null,
>             "first new child has existing parent");
>         Preconditions.checkArgument(left.next == null,
>             "first new child has existing sibling");
>         Preconditions.checkArgument(right.parent == null,
>             "second new child has existing parent");
>         Preconditions.checkArgument(right.next == null,
>             "second new child has existing sibling");
>         type = nodeType;
>         parent = null;
>         first = left;
>         last = right;
>         left.next = right;
>         left.parent = this;
>         right.next = null;
>         right.parent = this;
>         sourcePosition = -1;
>     }
> 
>     public Node(int nodeType, Node left, Node mid, Node right) {
>         Preconditions.checkArgument(left.parent == null);
>         Preconditions.checkArgument(left.next == null);
>         Preconditions.checkArgument(mid.parent == null);
>         Preconditions.checkArgument(mid.next == null);
>         Preconditions.checkArgument(right.parent == null);
>         Preconditions.checkArgument(right.next == null);
>         type = nodeType;
>         parent = null;
>         first = left;
>         last = right;
>         left.next = mid;
>         left.parent = this;
>         mid.next = right;
>         mid.parent = this;
>         right.next = null;
>         right.parent = this;
>         sourcePosition = -1;
>     }
> 
>     public Node(int nodeType, Node left, Node mid, Node mid2, Node right) {
>       Preconditions.checkArgument(left.parent == null);
>       Preconditions.checkArgument(left.next == null);
>       Preconditions.checkArgument(mid.parent == null);
>       Preconditions.checkArgument(mid.next == null);
>       Preconditions.checkArgument(mid2.parent == null);
>       Preconditions.checkArgument(mid2.next == null);
>       Preconditions.checkArgument(right.parent == null);
>       Preconditions.checkArgument(right.next == null);
>       type = nodeType;
>       parent = null;
>       first = left;
>       last = right;
>       left.next = mid;
>       left.parent = this;
>       mid.next = mid2;
>       mid.parent = this;
>       mid2.next = right;
>       mid2.parent = this;
>       right.next = null;
>       right.parent = this;
>       sourcePosition = -1;
>     }
> 
>     public Node(int nodeType, int lineno, int charno) {
>         type = nodeType;
>         parent = null;
>         sourcePosition = mergeLineCharNo(lineno, charno);
>     }
> 
>     public Node(int nodeType, Node child, int lineno, int charno) {
>         this(nodeType, child);
>         sourcePosition = mergeLineCharNo(lineno, charno);
>     }
> 
>     public Node(int nodeType, Node left, Node right, int lineno, int charno) {
>         this(nodeType, left, right);
>         sourcePosition = mergeLineCharNo(lineno, charno);
>     }
> 
>     public Node(int nodeType, Node left, Node mid, Node right,
>             int lineno, int charno) {
>         this(nodeType, left, mid, right);
>         sourcePosition = mergeLineCharNo(lineno, charno);
>     }
> 
>     public Node(int nodeType, Node left, Node mid, Node mid2, Node right,
>             int lineno, int charno) {
>         this(nodeType, left, mid, mid2, right);
>         sourcePosition = mergeLineCharNo(lineno, charno);
>     }
> 
>     public Node(int nodeType, Node[] children, int lineno, int charno) {
>         this(nodeType, children);
>         sourcePosition = mergeLineCharNo(lineno, charno);
>     }
> 
>     public Node(int nodeType, Node[] children) {
>         this.type = nodeType;
>         parent = null;
>         if (children.length != 0) {
>             this.first = children[0];
>             this.last = children[children.length - 1];
> 
>             for (int i = 1; i < children.length; i++) {
>                 if (null != children[i - 1].next) {
>                     
>                     throw new IllegalArgumentException("duplicate child");
>                 }
>                 children[i - 1].next = children[i];
>                 Preconditions.checkArgument(children[i - 1].parent == null);
>                 children[i - 1].parent = this;
>             }
>             Preconditions.checkArgument(
>                 children[children.length - 1].parent == null);
>             children[children.length - 1].parent = this;
> 
>             if (null != this.last.next) {
>                 
>                 throw new IllegalArgumentException("duplicate child");
>             }
>         }
>     }
> 
>     public static Node newNumber(double number) {
>         return new NumberNode(number);
>     }
> 
>     public static Node newNumber(double number, int lineno, int charno) {
>         return new NumberNode(number, lineno, charno);
>     }
> 
>     public static Node newString(String str) {
>         return new StringNode(Token.STRING, str);
>     }
> 
>     public static Node newString(int type, String str) {
>         return new StringNode(type, str);
>     }
> 
>     public static Node newString(String str, int lineno, int charno) {
>         return new StringNode(Token.STRING, str, lineno, charno);
>     }
> 
>     public static Node newString(int type, String str, int lineno, int charno) {
>         return new StringNode(type, str, lineno, charno);
>     }
> 
>     public int getType() {
>         return type;
>     }
> 
>     public void setType(int type) {
>         this.type = type;
>     }
> 
>     public boolean hasChildren() {
>         return first != null;
>     }
> 
>     public Node getFirstChild() {
>         return first;
>     }
> 
>     public Node getLastChild() {
>         return last;
>     }
> 
>     public Node getNext() {
>         return next;
>     }
> 
>     public Node getChildBefore(Node child) {
>         if (child == first)
>             return null;
>         Node n = first;
>         while (n.next != child) {
>             n = n.next;
>             if (n == null)
>                 throw new RuntimeException("node is not a child");
>         }
>         return n;
>     }
> 
>     public Node getChildAtIndex(int i) {
>       Node n = first;
>       while (i > 0) {
>         n = n.next;
>         i--;
>       }
>       return n;
>     }
> 
>     public Node getLastSibling() {
>         Node n = this;
>         while (n.next != null) {
>             n = n.next;
>         }
>         return n;
>     }
> 
>     public void addChildToFront(Node child) {
>         Preconditions.checkArgument(child.parent == null);
>         Preconditions.checkArgument(child.next == null);
>         child.parent = this;
>         child.next = first;
>         first = child;
>         if (last == null) {
>             last = child;
>         }
>     }
> 
>     public void addChildToBack(Node child) {
>         Preconditions.checkArgument(child.parent == null);
>         Preconditions.checkArgument(child.next == null);
>         child.parent = this;
>         child.next = null;
>         if (last == null) {
>             first = last = child;
>             return;
>         }
>         last.next = child;
>         last = child;
>     }
> 
>     public void addChildrenToFront(Node children) {
>         for (Node child = children; child != null; child = child.next) {
>           Preconditions.checkArgument(child.parent == null);
>           child.parent = this;
>         }
>         Node lastSib = children.getLastSibling();
>         lastSib.next = first;
>         first = children;
>         if (last == null) {
>             last = lastSib;
>         }
>     }
> 
>     public void addChildrenToBack(Node children) {
>         for (Node child = children; child != null; child = child.next) {
>           
>           Preconditions.checkArgument(child.parent == null);
>           child.parent = this;
>         }
>         if (last != null) {
>             last.next = children;
>         }
>         last = children.getLastSibling();
>         if (first == null) {
>             first = children;
>         }
>     }
> 
>     
> 
> 
>     public void addChildBefore(Node newChild, Node node) {
>         Preconditions.checkArgument(node != null,
>             "The existing child node of the parent should not be null.");
>         Preconditions.checkArgument(newChild.next == null,
>             "The new child node has siblings.");
>         Preconditions.checkArgument(newChild.parent == null,
>             "The new child node already has a parent.");
>         if (first == node) {
>             newChild.parent = this;
>             newChild.next = first;
>             first = newChild;
>             return;
>         }
>         Node prev = getChildBefore(node);
>         addChildAfter(newChild, prev);
>     }
> 
>     
> 
> 
>     public void addChildAfter(Node newChild, Node node) {
>         Preconditions.checkArgument(newChild.next == null,
>             "The new child node has siblings.");
>         Preconditions.checkArgument(newChild.parent == null,
>             "The new child node already has a parent.");
>         newChild.parent = this;
>         newChild.next = node.next;
>         node.next = newChild;
>         if (last == node) {
>             last = newChild;
>         }
>     }
> 
>     
> 
> 
>     public void removeChild(Node child) {
>         Node prev = getChildBefore(child);
>         if (prev == null)
>             first = first.next;
>         else
>             prev.next = child.next;
>         if (child == last) last = prev;
>         child.next = null;
>         child.parent = null;
>     }
> 
>     
> 
> 
>     public void replaceChild(Node child, Node newChild) {
>         Preconditions.checkArgument(newChild.next == null,
>             "The new child node has siblings.");
>         Preconditions.checkArgument(newChild.parent == null,
>             "The new child node already has a parent.");
> 
>         
>         newChild.copyInformationFrom(child);
> 
>         newChild.next = child.next;
>         newChild.parent = this;
>         if (child == first) {
>             first = newChild;
>         } else {
>             Node prev = getChildBefore(child);
>             prev.next = newChild;
>         }
>         if (child == last)
>             last = newChild;
>         child.next = null;
>         child.parent = null;
>     }
> 
>     public void replaceChildAfter(Node prevChild, Node newChild) {
>         Preconditions.checkArgument(prevChild.parent == this,
>           "prev is not a child of this node.");
> 
>         Preconditions.checkArgument(newChild.next == null,
>             "The new child node has siblings.");
>         Preconditions.checkArgument(newChild.parent == null,
>             "The new child node already has a parent.");
> 
>         
>         newChild.copyInformationFrom(prevChild);
> 
>         Node child = prevChild.next;
>         newChild.next = child.next;
>         newChild.parent = this;
>         prevChild.next = newChild;
>         if (child == last)
>             last = newChild;
>         child.next = null;
>         child.parent = null;
>     }
> 
>     private PropListItem lookupProperty(int propType)
>     {
>         PropListItem x = propListHead;
>         while (x != null && propType != x.type) {
>             x = x.next;
>         }
>         return x;
>     }
> 
>     private PropListItem ensureProperty(int propType)
>     {
>         PropListItem item = lookupProperty(propType);
>         if (item == null) {
>             item = new PropListItem();
>             item.type = propType;
>             item.next = propListHead;
>             propListHead = item;
>         }
>         return item;
>     }
> 
>     public void removeProp(int propType)
>     {
>         PropListItem x = propListHead;
>         if (x != null) {
>             PropListItem prev = null;
>             while (x.type != propType) {
>                 prev = x;
>                 x = x.next;
>                 if (x == null) { return; }
>             }
>             if (prev == null) {
>                 propListHead = x.next;
>             } else {
>                 prev.next = x.next;
>             }
>         }
>     }
> 
>     public Object getProp(int propType)
>     {
>         PropListItem item = lookupProperty(propType);
>         if (item == null) { return null; }
>         return item.objectValue;
>     }
> 
>     public boolean getBooleanProp(int propType) {
>         return getIntProp(propType, 0) != 0;
>     }
> 
>     public int getIntProp(int propType, int defaultValue)
>     {
>         PropListItem item = lookupProperty(propType);
>         if (item == null) { return defaultValue; }
>         return item.intValue;
>     }
> 
>     public int getExistingIntProp(int propType)
>     {
>         PropListItem item = lookupProperty(propType);
>         if (item == null) { Kit.codeBug(); }
>         return item.intValue;
>     }
> 
>     public void putProp(int propType, Object prop)
>     {
>         if (prop == null) {
>             removeProp(propType);
>         } else {
>             PropListItem item = ensureProperty(propType);
>             item.objectValue = prop;
>         }
>     }
> 
>     public void putBooleanProp(int propType, boolean prop) {
>         putIntProp(propType, prop ? 1 : 0);
>     }
> 
>     public void putIntProp(int propType, int prop)
>     {
>         PropListItem item = ensureProperty(propType);
>         item.intValue = prop;
>     }
> 
>     
>     private int[] getSortedPropTypes() {
>         int count = 0;
>         for (PropListItem x = propListHead; x != null; x = x.next) {
>             count++;
>         }
> 
>         int[] keys = new int[count];
>         for (PropListItem x = propListHead; x != null; x = x.next) {
>             count--;
>             keys[count] = x.type;
>         }
> 
>         Arrays.sort(keys);
>         return keys;
>     }
> 
>     public int getLineno() {
>         return extractLineno(sourcePosition);
>     }
> 
>     public int getCharno() {
>         return extractCharno(sourcePosition);
>     }
> 
>     
>     public double getDouble() throws UnsupportedOperationException {
>         if (this.getType() == Token.NUMBER) {
>             throw new IllegalStateException(
>                     "Number node not created with Node.newNumber");
>         } else {
>             throw new UnsupportedOperationException(
>                     this + " is not a number node");
>         }
>     }
> 
>     
>     public void setDouble(double s) throws UnsupportedOperationException {
>         if (this.getType() == Token.NUMBER) {
>             throw new IllegalStateException(
>                     "Number node not created with Node.newNumber");
>         } else {
>             throw new UnsupportedOperationException(
>                     this + " is not a string node");
>         }
>     }
> 
>     
>     public String getString() throws UnsupportedOperationException {
>         if (this.getType() == Token.STRING) {
>             throw new IllegalStateException(
>                     "String node not created with Node.newString");
>         } else {
>             throw new UnsupportedOperationException(
>                     this + " is not a string node");
>         }
>     }
> 
>     
>     public void setString(String s) throws UnsupportedOperationException {
>         if (this.getType() == Token.STRING) {
>             throw new IllegalStateException(
>                     "String node not created with Node.newString");
>         } else {
>             throw new UnsupportedOperationException(
>                     this + " is not a string node");
>         }
>     }
> 
>     @Override public String toString()
>     {
>        return toString(true, true, true);
>     }
> 
>     public String toString(
>         boolean printSource,
>         boolean printAnnotations,
>         boolean printType)
>     {
>         if (Token.printTrees) {
>             StringBuilder sb = new StringBuilder();
>             toString(sb, printSource, printAnnotations, printType);
>             return sb.toString();
>         }
>         return String.valueOf(type);
>     }
> 
>     private void toString(
>         StringBuilder sb,
>         boolean printSource,
>         boolean printAnnotations,
>         boolean printType)
>     {
>         if (Token.printTrees) {
>             sb.append(Token.name(type));
>             if (this instanceof StringNode) {
>                 sb.append(' ');
>                 sb.append(getString());
>             } else if (type == Token.FUNCTION) {
>                 sb.append(' ');
>                 sb.append(first.getString());
>             } else if (this instanceof ScriptOrFnNode) {
>                 ScriptOrFnNode sof = (ScriptOrFnNode)this;
>                 if (this instanceof FunctionNode) {
>                     FunctionNode fn = (FunctionNode)this;
>                     sb.append(' ');
>                     sb.append(fn.getFunctionName());
>                 }
>                 if (printSource) {
>                   sb.append(" [source name: ");
>                   sb.append(sof.getSourceName());
>                   sb.append("] [encoded source length: ");
>                   sb.append(sof.getEncodedSourceEnd()
>                             - sof.getEncodedSourceStart());
>                   sb.append("] [base line: ");
>                   sb.append(sof.getBaseLineno());
>                   sb.append("] [end line: ");
>                   sb.append(sof.getEndLineno());
>                   sb.append(']');
>                 }
>             } else if (type == Token.NUMBER) {
>                 sb.append(' ');
>                 sb.append(getDouble());
>             }
>             if (printSource) {
>               int lineno = getLineno();
>               if (lineno != -1) {
>                   sb.append(' ');
>                   sb.append(lineno);
>               }
>             }
> 
>             if (printAnnotations) {
>               int[] keys = getSortedPropTypes();
>               for (int i = 0; i < keys.length; i++) {
>                   int type = keys[i];
>                   PropListItem x = lookupProperty(type);
>                   sb.append(" [");
>                   sb.append(propToString(type));
>                   sb.append(": ");
>                   String value;
>                   switch (type) {
>                     case TARGETBLOCK_PROP : 
>                       value = "target block property";
>                       break;
>                     case LOCAL_BLOCK_PROP :     
>                       value = "last local block";
>                       break;
>                     case ISNUMBER_PROP:
>                       switch (x.intValue) {
>                         case BOTH:
>                           value = "both";
>                           break;
>                         case RIGHT:
>                           value = "right";
>                           break;
>                         case LEFT:
>                           value = "left";
>                           break;
>                         default:
>                           throw Kit.codeBug();
>                       }
>                       break;
>                     case SPECIALCALL_PROP:
>                       switch (x.intValue) {
>                         case SPECIALCALL_EVAL:
>                           value = "eval";
>                           break;
>                         case SPECIALCALL_WITH:
>                           value = "with";
>                           break;
>                         default:
>                           
>                           throw Kit.codeBug();
>                       }
>                       break;
>                     default :
>                       Object obj = x.objectValue;
>                       if (obj != null) {
>                           value = obj.toString();
>                       } else {
>                           value = String.valueOf(x.intValue);
>                       }
>                       break;
>                   }
>                   sb.append(value);
>                   sb.append(']');
>               }
>             }
> 
>             if (printType) {
>               if (jsType != null) {
>                   String jsTypeString = jsType.toString();
>                   if (jsTypeString != null) {
>                       sb.append(" : ");
>                       sb.append(jsTypeString);
>                   }
>               }
>             }
>         }
>     }
> 
> 
>     public String toStringTree() {
>         return toStringTreeImpl();
>     }
> 
>     private String toStringTreeImpl() {
>         try {
>             StringBuffer s = new StringBuffer();
>             appendStringTree(s);
>             return s.toString();
>         } catch (IOException e) {
>             throw new RuntimeException("Should not happen\n" + e);
>         }
>     }
> 
>     public void appendStringTree(Appendable appendable) throws IOException {
>         toStringTreeHelper(this, 0, appendable);
>     }
> 
>     private static void toStringTreeHelper(Node n, int level, Appendable sb)
>             throws IOException
>     {
>         if (Token.printTrees) {
>             for (int i = 0; i != level; ++i) {
>                 sb.append("    ");
>             }
>             sb.append(n.toString());
>             sb.append('\n');
>             for (Node cursor = n.getFirstChild(); cursor != null;
>                  cursor = cursor.getNext())
>             {
>                 toStringTreeHelper(cursor, level + 1, sb);
>             }
>         }
>     }
> 
>     int type;              
>     Node next;             
>     private Node first;    
>     private Node last;     
> 
>     
> 
> 
> 
> 
> 
>     private PropListItem propListHead;
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     public static final int COLUMN_BITS = 12;
> 
>     
> 
> 
> 
> 
>     public static final int MAX_COLUMN_NUMBER = (1 << COLUMN_BITS) - 1;
> 
>     
> 
> 
> 
> 
>     public static final int COLUMN_MASK = MAX_COLUMN_NUMBER;
> 
>     
> 
> 
> 
> 
> 
>     private int sourcePosition;
> 
>     private JSType jsType;
> 
>     private Node parent;
> 
>     
>     
> 
>     public void setLineno(int lineno) {
>         int charno = getCharno();
>         if (charno == -1) {
>           charno = 0;
>         }
>         sourcePosition = mergeLineCharNo(lineno, charno);
>     }
> 
>     public void setCharno(int charno) {
>         sourcePosition = mergeLineCharNo(getLineno(), charno);
>     }
> 
>     
> 
> 
> 
> 
> 
>     protected static int mergeLineCharNo(int lineno, int charno) {
>       if (lineno < 0 || charno < 0) {
>         return -1;
>       } else if ((charno & ~COLUMN_MASK) != 0) {
>         return lineno << COLUMN_BITS | COLUMN_MASK;
>       } else {
>         return lineno << COLUMN_BITS | (charno & COLUMN_MASK);
>       }
>     }
> 
>     
> 
> 
> 
>     protected static int extractLineno(int lineCharNo) {
>       if (lineCharNo == -1) {
>         return -1;
>       } else {
>         return lineCharNo >>> COLUMN_BITS;
>       }
18,3910c1125,1254
< }
< </SCRIPT>
< <NOSCRIPT>
< </NOSCRIPT>
< 
< </HEAD>
< 
< <BODY BGCOLOR="white" onload="windowTitle();">
< <HR>
< 
< 
< <!-- ========= START OF TOP NAVBAR ======= -->
< <A NAME="navbar_top"><!-- --></A>
< <A HREF="#skip-navbar_top" title="Skip navigation links"></A>
< <TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
< <TR>
< <TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
< <A NAME="navbar_top_firstrow"><!-- --></A>
< <TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
<   <TR ALIGN="center" VALIGN="top">
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
<   </TR>
< </TABLE>
< </TD>
< <TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
< </EM>
< </TD>
< </TR>
< 
< <TR>
< <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
< &nbsp;<A HREF="../../../../com/google/javascript/rhino/Kit.html" title="class in com.google.javascript.rhino"><B>PREV CLASS</B></A>&nbsp;
< &nbsp;<A HREF="../../../../com/google/javascript/rhino/Node.AncestorIterable.html" title="class in com.google.javascript.rhino"><B>NEXT CLASS</B></A></FONT></TD>
< <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
<   <A HREF="../../../../index.html?com/google/javascript/rhino/Node.html" target="_top"><B>FRAMES</B></A>  &nbsp;
< &nbsp;<A HREF="Node.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
< &nbsp;<SCRIPT type="text/javascript">
<   <!--
<   if(window==top) {
<     document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
<   }
<   
< </SCRIPT>
< <NOSCRIPT>
<   <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
< </NOSCRIPT>
< 
< 
< </FONT></TD>
< </TR>
< <TR>
< <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
<   SUMMARY:&nbsp;<A HREF="#nested_class_summary">NESTED</A>&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
< <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
< DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
< </TR>
< </TABLE>
< <A NAME="skip-navbar_top"></A>
< <!-- ========= END OF TOP NAVBAR ========= -->
< 
< <HR>
< <!-- ======== START OF CLASS DATA ======== -->
< <H2>
< <FONT SIZE="-1">
< com.google.javascript.rhino</FONT>
< <BR>
< Class Node</H2>
< <PRE>
< <A HREF="http:
<   <IMG SRC="../../../../resources/inherit.gif" ALT="extended by "><B>com.google.javascript.rhino.Node</B>
< </PRE>
< <DL>
< <DT><B>All Implemented Interfaces:</B> <DD><A HREF="http:
< </DL>
< <DL>
< <DT><B>Direct Known Subclasses:</B> <DD><A HREF="../../../../com/google/javascript/rhino/ScriptOrFnNode.html" title="class in com.google.javascript.rhino">ScriptOrFnNode</A></DD>
< </DL>
< <HR>
< <DL>
< <DT><PRE>public class <B>Node</B><DT>extends <A HREF="http:
< </PRE>
< 
< <P>
< This class implements the root of the intermediate representation.
< <P>
< 
< <P>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../serialized-form.html#com.google.javascript.rhino.Node">Serialized Form</A></DL>
< <HR>
< 
< <P>
< <!-- ======== NESTED CLASS SUMMARY ======== -->
< 
< <A NAME="nested_class_summary"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
< <B>Nested Class Summary</B></FONT></TH>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;class</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.AncestorIterable.html" title="class in com.google.javascript.rhino">Node.AncestorIterable</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Iterator to go up the ancestor tree.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;class</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.FileLevelJsDocBuilder.html" title="class in com.google.javascript.rhino">Node.FileLevelJsDocBuilder</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;An inner class that provides back-door access to the license
<  property of the JSDocInfo property for this node.</TD>
< </TR>
< </TABLE>
< &nbsp;<!-- =========== FIELD SUMMARY =========== -->
< 
< <A NAME="field_summary"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
< <B>Field Summary</B></FONT></TH>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#ATTRIBUTE_FLAG">ATTRIBUTE_FLAG</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#BOTH">BOTH</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#BRACELESS_TYPE">BRACELESS_TYPE</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#BREAK_PROP">BREAK_PROP</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#CASEARRAY_PROP">CASEARRAY_PROP</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#CASES_PROP">CASES_PROP</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#CATCH_SCOPE_PROP">CATCH_SCOPE_PROP</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#CODEOFFSET_PROP">CODEOFFSET_PROP</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#COLUMN_BITS">COLUMN_BITS</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;COLUMN_BITS represents how many of the lower-order bits of
<  sourcePosition are reserved for storing the column number.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#COLUMN_MASK">COLUMN_MASK</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;COLUMN_MASK stores a value where bits storing the column number
<  are set, and bits storing the line are not set.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#CONTINUE_PROP">CONTINUE_PROP</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#DEBUGSOURCE_PROP">DEBUGSOURCE_PROP</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#DECR_FLAG">DECR_FLAG</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#DEFAULT_PROP">DEFAULT_PROP</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#DESCENDANTS_FLAG">DESCENDANTS_FLAG</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#DIRECTCALL_PROP">DIRECTCALL_PROP</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#EMPTY_BLOCK">EMPTY_BLOCK</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#ENUM_PROP">ENUM_PROP</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#FINALLY_PROP">FINALLY_PROP</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#FIXUPS_PROP">FIXUPS_PROP</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#FUNCTION_PROP">FUNCTION_PROP</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#INCRDECR_PROP">INCRDECR_PROP</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#IS_CONSTANT_NAME">IS_CONSTANT_NAME</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#IS_DISPATCHER">IS_DISPATCHER</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#IS_NAMESPACE">IS_NAMESPACE</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#IS_OPTIONAL_PARAM">IS_OPTIONAL_PARAM</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#IS_VAR_ARGS_PARAM">IS_VAR_ARGS_PARAM</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#ISNUMBER_PROP">ISNUMBER_PROP</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#JSDOC_INFO_PROP">JSDOC_INFO_PROP</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#LABEL_ID_PROP">LABEL_ID_PROP</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#LABEL_PROP">LABEL_PROP</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#LAST_PROP">LAST_PROP</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#LASTUSE_PROP">LASTUSE_PROP</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#LEFT">LEFT</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#LOCAL_BLOCK_PROP">LOCAL_BLOCK_PROP</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#LOCAL_PROP">LOCAL_PROP</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#LOCALCOUNT_PROP">LOCALCOUNT_PROP</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#MAX_COLUMN_NUMBER">MAX_COLUMN_NUMBER</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MAX_COLUMN_NUMBER represents the maximum column number that can
<  be represented.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#MEMBER_TYPE_PROP">MEMBER_TYPE_PROP</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#NAME_PROP">NAME_PROP</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#NO_SIDE_EFFECTS_CALL">NO_SIDE_EFFECTS_CALL</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#NON_SPECIALCALL">NON_SPECIALCALL</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#OBJECT_IDS_PROP">OBJECT_IDS_PROP</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#OPT_ARG_NAME">OPT_ARG_NAME</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#ORIGINALNAME_PROP">ORIGINALNAME_PROP</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#PARENTHESIZED_PROP">PARENTHESIZED_PROP</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#POST_FLAG">POST_FLAG</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#PROPERTY_FLAG">PROPERTY_FLAG</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#QUOTED_PROP">QUOTED_PROP</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#REGEXP_PROP">REGEXP_PROP</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#RIGHT">RIGHT</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#SKIP_INDEXES_PROP">SKIP_INDEXES_PROP</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#SOURCEFILE_PROP">SOURCEFILE_PROP</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#SOURCENAME_PROP">SOURCENAME_PROP</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#SPECIAL_PROP_PROP">SPECIAL_PROP_PROP</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#SPECIALCALL_EVAL">SPECIALCALL_EVAL</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#SPECIALCALL_PROP">SPECIALCALL_PROP</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#SPECIALCALL_WITH">SPECIALCALL_WITH</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#SYNTHETIC_BLOCK_PROP">SYNTHETIC_BLOCK_PROP</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#TARGET_PROP">TARGET_PROP</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#TARGETBLOCK_PROP">TARGETBLOCK_PROP</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#TEMP_PROP">TEMP_PROP</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#TYPE_PROP">TYPE_PROP</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#USES_PROP">USES_PROP</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#VAR_ARGS_NAME">VAR_ARGS_NAME</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#VARIABLE_PROP">VARIABLE_PROP</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#VARS_PROP">VARS_PROP</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< </TABLE>
< &nbsp;
< <!-- ======== CONSTRUCTOR SUMMARY ======== -->
< 
< <A NAME="constructor_summary"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
< <B>Constructor Summary</B></FONT></TH>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#Node(int)">Node</A></B>(int&nbsp;nodeType)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#Node(int, int, int)">Node</A></B>(int&nbsp;nodeType,
<      int&nbsp;lineno,
<      int&nbsp;charno)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#Node(int, com.google.javascript.rhino.Node)">Node</A></B>(int&nbsp;nodeType,
<      <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;child)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#Node(int, com.google.javascript.rhino.Node[])">Node</A></B>(int&nbsp;nodeType,
<      <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>[]&nbsp;children)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#Node(int, com.google.javascript.rhino.Node[], int, int)">Node</A></B>(int&nbsp;nodeType,
<      <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>[]&nbsp;children,
<      int&nbsp;lineno,
<      int&nbsp;charno)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#Node(int, com.google.javascript.rhino.Node, int, int)">Node</A></B>(int&nbsp;nodeType,
<      <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;child,
<      int&nbsp;lineno,
<      int&nbsp;charno)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#Node(int, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)">Node</A></B>(int&nbsp;nodeType,
<      <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;left,
<      <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;right)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#Node(int, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, int, int)">Node</A></B>(int&nbsp;nodeType,
<      <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;left,
<      <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;right,
<      int&nbsp;lineno,
<      int&nbsp;charno)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#Node(int, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)">Node</A></B>(int&nbsp;nodeType,
<      <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;left,
<      <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;mid,
<      <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;right)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#Node(int, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, int, int)">Node</A></B>(int&nbsp;nodeType,
<      <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;left,
<      <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;mid,
<      <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;right,
<      int&nbsp;lineno,
<      int&nbsp;charno)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#Node(int, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)">Node</A></B>(int&nbsp;nodeType,
<      <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;left,
<      <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;mid,
<      <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;mid2,
<      <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;right)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#Node(int, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, int, int)">Node</A></B>(int&nbsp;nodeType,
<      <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;left,
<      <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;mid,
<      <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;mid2,
<      <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;right,
<      int&nbsp;lineno,
<      int&nbsp;charno)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< </TABLE>
< &nbsp;
< <!-- ========== METHOD SUMMARY =========== -->
< 
< <A NAME="method_summary"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
< <B>Method Summary</B></FONT></TH>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#addChildAfter(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)">addChildAfter</A></B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;newChild,
<               <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;node)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Add 'child' after 'node'.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#addChildBefore(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)">addChildBefore</A></B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;newChild,
<                <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;node)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Add 'child' before 'node'.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#addChildrenToBack(com.google.javascript.rhino.Node)">addChildrenToBack</A></B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;children)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#addChildrenToFront(com.google.javascript.rhino.Node)">addChildrenToFront</A></B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;children)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#addChildToBack(com.google.javascript.rhino.Node)">addChildToBack</A></B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;child)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#addChildToFront(com.google.javascript.rhino.Node)">addChildToFront</A></B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;child)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#appendStringTree(java.lang.Appendable)">appendStringTree</A></B>(<A HREF="http:
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#checkTreeEquals(com.google.javascript.rhino.Node)">checkTreeEquals</A></B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;node2)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checks if the subtree under this node is the same as another subtree.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#checkTreeEqualsSilent(com.google.javascript.rhino.Node)">checkTreeEqualsSilent</A></B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;node2)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If this is a compilation pass and not a test, do not construct error
<  strings.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#children()">children</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return an iterable object that iterates over this nodes's children.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#cloneNode()">cloneNode</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#cloneTree()">cloneTree</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#copyInformationFrom(com.google.javascript.rhino.Node)">copyInformationFrom</A></B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;other)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Copies source file and name information from the other
<  node given to the current node.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#detachChildren()">detachChildren</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Removes all children from this node and isolates the children from each
<  other.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#detachFromParent()">detachFromParent</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Removes this node from its parent.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>protected static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#extractCharno(int)">extractCharno</A></B>(int&nbsp;lineCharNo)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Extracts the character number and character number from a merged line
<  char number (see <A HREF="../../../../com/google/javascript/rhino/Node.html#mergeLineCharNo(int, int)"><CODE>mergeLineCharNo(int, int)</CODE></A>).</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>protected static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#extractLineno(int)">extractLineno</A></B>(int&nbsp;lineCharNo)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Extracts the line number and character number from a merged line char
<  number (see <A HREF="../../../../com/google/javascript/rhino/Node.html#mergeLineCharNo(int, int)"><CODE>mergeLineCharNo(int, int)</CODE></A>).</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#getAncestor(int)">getAncestor</A></B>(int&nbsp;level)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the ancestor node relative to this.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/rhino/Node.AncestorIterable.html" title="class in com.google.javascript.rhino">Node.AncestorIterable</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#getAncestors()">getAncestors</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Iterates all of the node's ancestors excluding itself.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#getBooleanProp(int)">getBooleanProp</A></B>(int&nbsp;propType)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#getCharno()">getCharno</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#getChildAtIndex(int)">getChildAtIndex</A></B>(int&nbsp;i)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#getChildBefore(com.google.javascript.rhino.Node)">getChildBefore</A></B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;child)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#getChildCount()">getChildCount</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;double</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#getDouble()">getDouble</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Can only be called when <tt>getType() == TokenStream.NUMBER</tt></TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#getExistingIntProp(int)">getExistingIntProp</A></B>(int&nbsp;propType)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#getFirstChild()">getFirstChild</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#getIntProp(int, int)">getIntProp</A></B>(int&nbsp;propType,
<            int&nbsp;defaultValue)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/rhino/Node.FileLevelJsDocBuilder.html" title="class in com.google.javascript.rhino">Node.FileLevelJsDocBuilder</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#getJsDocBuilderForNode()">getJsDocBuilderForNode</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html" title="class in com.google.javascript.rhino">JSDocInfo</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#getJSDocInfo()">getJSDocInfo</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Get the <A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html" title="class in com.google.javascript.rhino"><CODE>JSDocInfo</CODE></A> attached to this node.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#getJSType()">getJSType</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#getLastChild()">getLastChild</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#getLastSibling()">getLastSibling</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#getLineno()">getLineno</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#getNext()">getNext</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#getParent()">getParent</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#getProp(int)">getProp</A></B>(int&nbsp;propType)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#getQualifiedName()">getQualifiedName</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This function takes a set of GETPROP nodes and produces a string that is
<  each property separated by dots.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#getString()">getString</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Can only be called when node has String context.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#getType()">getType</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#hasChild(com.google.javascript.rhino.Node)">hasChild</A></B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;child)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#hasChildren()">hasChildren</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#hasMoreThanOneChild()">hasMoreThanOneChild</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Check for more than one child more efficiently than by iterating over all
<  the children as is done with Node.getChildCount().</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#hasOneChild()">hasOneChild</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Check for one child more efficiently than by iterating over all the
<  children as is done with Node.getChildCount().</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#hasSideEffects()">hasSideEffects</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#isEquivalentTo(com.google.javascript.rhino.Node)">isEquivalentTo</A></B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;node)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns true if this node is equivalent semantically to another</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#isNoSideEffectsCall()">isNoSideEffectsCall</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns true if this node is a function or constructor call that
<  has no side effects.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#isOptionalArg()">isOptionalArg</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns whether this node is an optional argument node.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#isQualifiedName()">isQualifiedName</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns whether a node corresponds to a simple or a qualified name, such
<  as <code>x</code> or <code>a.b.c</code> or <code>this.a</code>.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#isQuotedString()">isQuotedString</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This should only be called for STRING nodes created in object lits.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#isSyntheticBlock()">isSyntheticBlock</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns whether this is a synthetic block that should not be considered
<  a real source block.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#isUnscopedQualifiedName()">isUnscopedQualifiedName</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns whether a node corresponds to a simple or a qualified name
<  without a "this" reference, such as <code>a.b.c</code>, but not
<  <code>this.a</code>.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#isVarArgs()">isVarArgs</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns whether this node is a variable length argument node.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>protected static&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#mergeLineCharNo(int, int)">mergeLineCharNo</A></B>(int&nbsp;lineno,
<                 int&nbsp;charno)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Merges the line number and character number in one integer.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#newNumber(double)">newNumber</A></B>(double&nbsp;number)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#newNumber(double, int, int)">newNumber</A></B>(double&nbsp;number,
<           int&nbsp;lineno,
<           int&nbsp;charno)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#newString(int, java.lang.String)">newString</A></B>(int&nbsp;type,
<           <A HREF="http:
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#newString(int, java.lang.String, int, int)">newString</A></B>(int&nbsp;type,
<           <A HREF="http:
<           int&nbsp;lineno,
<           int&nbsp;charno)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#newString(java.lang.String)">newString</A></B>(<A HREF="http:
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#newString(java.lang.String, int, int)">newString</A></B>(<A HREF="http:
<           int&nbsp;lineno,
<           int&nbsp;charno)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#putBooleanProp(int, boolean)">putBooleanProp</A></B>(int&nbsp;propType,
<                boolean&nbsp;prop)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#putIntProp(int, int)">putIntProp</A></B>(int&nbsp;propType,
<            int&nbsp;prop)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#putProp(int, java.lang.Object)">putProp</A></B>(int&nbsp;propType,
<         <A HREF="http:
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#removeChild(com.google.javascript.rhino.Node)">removeChild</A></B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;child)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Detach a child from its parent and siblings.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#removeChildAfter(com.google.javascript.rhino.Node)">removeChildAfter</A></B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;prev)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#removeChildren()">removeChildren</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#removeFirstChild()">removeFirstChild</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Removes the first child of Node.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#removeProp(int)">removeProp</A></B>(int&nbsp;propType)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#replaceChild(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)">replaceChild</A></B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;child,
<              <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;newChild)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Detaches child from Node and replaces it with newChild.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#replaceChildAfter(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)">replaceChildAfter</A></B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;prevChild,
<                   <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;newChild)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#setCharno(int)">setCharno</A></B>(int&nbsp;charno)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#setDouble(double)">setDouble</A></B>(double&nbsp;s)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Can only be called when <tt>getType() == TokenStream.NUMBER</tt></TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#setIsNoSideEffectsCall()">setIsNoSideEffectsCall</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Marks this function or constructor call node as having no side effects.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#setIsSyntheticBlock(boolean)">setIsSyntheticBlock</A></B>(boolean&nbsp;val)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets whether this is a synthetic block that should not be considered
<  a real source block.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#setJSDocInfo(com.google.javascript.rhino.JSDocInfo)">setJSDocInfo</A></B>(<A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html" title="class in com.google.javascript.rhino">JSDocInfo</A>&nbsp;info)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the <A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html" title="class in com.google.javascript.rhino"><CODE>JSDocInfo</CODE></A> attached to this node.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#setJSType(com.google.javascript.rhino.jstype.JSType)">setJSType</A></B>(<A HREF="../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;jsType)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#setLineno(int)">setLineno</A></B>(int&nbsp;lineno)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#setOptionalArg(boolean)">setOptionalArg</A></B>(boolean&nbsp;optionalArg)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets whether this node is an optional argument node.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#setQuotedString()">setQuotedString</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This should only be called for STRING nodes created in object lits.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#setString(java.lang.String)">setString</A></B>(<A HREF="http:
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Can only be called when node has String context.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#setType(int)">setType</A></B>(int&nbsp;type)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#setVarArgs(boolean)">setVarArgs</A></B>(boolean&nbsp;varArgs)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets whether this node is a variable length argument node.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#setWasEmptyNode(boolean)">setWasEmptyNode</A></B>(boolean&nbsp;val)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets whether this is a synthetic block that should not be considered
<  a real source block.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#siblings()">siblings</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return an iterable object that iterates over this nodes's siblings.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#tokenToName(int)">tokenToName</A></B>(int&nbsp;token)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#toString()">toString</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#toString(boolean, boolean, boolean)">toString</A></B>(boolean&nbsp;printSource,
<          boolean&nbsp;printAnnotations,
<          boolean&nbsp;printType)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#toStringTree()">toStringTree</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/rhino/Node.html#wasEmptyNode()">wasEmptyNode</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns whether this is a synthetic block that should not be considered
<  a real source block.</TD>
< </TR>
< </TABLE>
< &nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
< <TH ALIGN="left"><B>Methods inherited from class java.lang.<A HREF="http:
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD><CODE><A HREF="http:
< </TR>
< </TABLE>
< &nbsp;
< <P>
< 
< <!-- ============ FIELD DETAIL =========== -->
< 
< <A NAME="field_detail"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
< <B>Field Detail</B></FONT></TH>
< </TR>
< </TABLE>
< 
< <A NAME="LOCAL_BLOCK_PROP"><!-- --></A><H3>
< LOCAL_BLOCK_PROP</H3>
< <PRE>
< public static final int <B>LOCAL_BLOCK_PROP</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.LOCAL_BLOCK_PROP">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="OBJECT_IDS_PROP"><!-- --></A><H3>
< OBJECT_IDS_PROP</H3>
< <PRE>
< public static final int <B>OBJECT_IDS_PROP</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.OBJECT_IDS_PROP">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="CATCH_SCOPE_PROP"><!-- --></A><H3>
< CATCH_SCOPE_PROP</H3>
< <PRE>
< public static final int <B>CATCH_SCOPE_PROP</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.CATCH_SCOPE_PROP">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="LABEL_ID_PROP"><!-- --></A><H3>
< LABEL_ID_PROP</H3>
< <PRE>
< public static final int <B>LABEL_ID_PROP</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.LABEL_ID_PROP">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="TARGET_PROP"><!-- --></A><H3>
< TARGET_PROP</H3>
< <PRE>
< public static final int <B>TARGET_PROP</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.TARGET_PROP">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="BREAK_PROP"><!-- --></A><H3>
< BREAK_PROP</H3>
< <PRE>
< public static final int <B>BREAK_PROP</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.BREAK_PROP">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="CONTINUE_PROP"><!-- --></A><H3>
< CONTINUE_PROP</H3>
< <PRE>
< public static final int <B>CONTINUE_PROP</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.CONTINUE_PROP">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="ENUM_PROP"><!-- --></A><H3>
< ENUM_PROP</H3>
< <PRE>
< public static final int <B>ENUM_PROP</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.ENUM_PROP">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="FUNCTION_PROP"><!-- --></A><H3>
< FUNCTION_PROP</H3>
< <PRE>
< public static final int <B>FUNCTION_PROP</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.FUNCTION_PROP">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="TEMP_PROP"><!-- --></A><H3>
< TEMP_PROP</H3>
< <PRE>
< public static final int <B>TEMP_PROP</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.TEMP_PROP">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="LOCAL_PROP"><!-- --></A><H3>
< LOCAL_PROP</H3>
< <PRE>
< public static final int <B>LOCAL_PROP</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.LOCAL_PROP">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="CODEOFFSET_PROP"><!-- --></A><H3>
< CODEOFFSET_PROP</H3>
< <PRE>
< public static final int <B>CODEOFFSET_PROP</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.CODEOFFSET_PROP">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="FIXUPS_PROP"><!-- --></A><H3>
< FIXUPS_PROP</H3>
< <PRE>
< public static final int <B>FIXUPS_PROP</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.FIXUPS_PROP">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="VARS_PROP"><!-- --></A><H3>
< VARS_PROP</H3>
< <PRE>
< public static final int <B>VARS_PROP</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.VARS_PROP">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="USES_PROP"><!-- --></A><H3>
< USES_PROP</H3>
< <PRE>
< public static final int <B>USES_PROP</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.USES_PROP">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="REGEXP_PROP"><!-- --></A><H3>
< REGEXP_PROP</H3>
< <PRE>
< public static final int <B>REGEXP_PROP</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.REGEXP_PROP">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="CASES_PROP"><!-- --></A><H3>
< CASES_PROP</H3>
< <PRE>
< public static final int <B>CASES_PROP</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.CASES_PROP">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="DEFAULT_PROP"><!-- --></A><H3>
< DEFAULT_PROP</H3>
< <PRE>
< public static final int <B>DEFAULT_PROP</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.DEFAULT_PROP">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="CASEARRAY_PROP"><!-- --></A><H3>
< CASEARRAY_PROP</H3>
< <PRE>
< public static final int <B>CASEARRAY_PROP</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.CASEARRAY_PROP">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="SOURCENAME_PROP"><!-- --></A><H3>
< SOURCENAME_PROP</H3>
< <PRE>
< public static final int <B>SOURCENAME_PROP</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.SOURCENAME_PROP">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="TYPE_PROP"><!-- --></A><H3>
< TYPE_PROP</H3>
< <PRE>
< public static final int <B>TYPE_PROP</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.TYPE_PROP">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="SPECIAL_PROP_PROP"><!-- --></A><H3>
< SPECIAL_PROP_PROP</H3>
< <PRE>
< public static final int <B>SPECIAL_PROP_PROP</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.SPECIAL_PROP_PROP">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="LABEL_PROP"><!-- --></A><H3>
< LABEL_PROP</H3>
< <PRE>
< public static final int <B>LABEL_PROP</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.LABEL_PROP">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="FINALLY_PROP"><!-- --></A><H3>
< FINALLY_PROP</H3>
< <PRE>
< public static final int <B>FINALLY_PROP</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.FINALLY_PROP">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="LOCALCOUNT_PROP"><!-- --></A><H3>
< LOCALCOUNT_PROP</H3>
< <PRE>
< public static final int <B>LOCALCOUNT_PROP</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.LOCALCOUNT_PROP">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="TARGETBLOCK_PROP"><!-- --></A><H3>
< TARGETBLOCK_PROP</H3>
< <PRE>
< public static final int <B>TARGETBLOCK_PROP</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.TARGETBLOCK_PROP">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="VARIABLE_PROP"><!-- --></A><H3>
< VARIABLE_PROP</H3>
< <PRE>
< public static final int <B>VARIABLE_PROP</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.VARIABLE_PROP">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="LASTUSE_PROP"><!-- --></A><H3>
< LASTUSE_PROP</H3>
< <PRE>
< public static final int <B>LASTUSE_PROP</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.LASTUSE_PROP">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="ISNUMBER_PROP"><!-- --></A><H3>
< ISNUMBER_PROP</H3>
< <PRE>
< public static final int <B>ISNUMBER_PROP</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.ISNUMBER_PROP">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="DIRECTCALL_PROP"><!-- --></A><H3>
< DIRECTCALL_PROP</H3>
< <PRE>
< public static final int <B>DIRECTCALL_PROP</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.DIRECTCALL_PROP">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="SPECIALCALL_PROP"><!-- --></A><H3>
< SPECIALCALL_PROP</H3>
< <PRE>
< public static final int <B>SPECIALCALL_PROP</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.SPECIALCALL_PROP">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="DEBUGSOURCE_PROP"><!-- --></A><H3>
< DEBUGSOURCE_PROP</H3>
< <PRE>
< public static final int <B>DEBUGSOURCE_PROP</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.DEBUGSOURCE_PROP">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="JSDOC_INFO_PROP"><!-- --></A><H3>
< JSDOC_INFO_PROP</H3>
< <PRE>
< public static final int <B>JSDOC_INFO_PROP</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.JSDOC_INFO_PROP">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="VAR_ARGS_NAME"><!-- --></A><H3>
< VAR_ARGS_NAME</H3>
< <PRE>
< public static final int <B>VAR_ARGS_NAME</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.VAR_ARGS_NAME">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="SKIP_INDEXES_PROP"><!-- --></A><H3>
< SKIP_INDEXES_PROP</H3>
< <PRE>
< public static final int <B>SKIP_INDEXES_PROP</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.SKIP_INDEXES_PROP">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="INCRDECR_PROP"><!-- --></A><H3>
< INCRDECR_PROP</H3>
< <PRE>
< public static final int <B>INCRDECR_PROP</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.INCRDECR_PROP">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="MEMBER_TYPE_PROP"><!-- --></A><H3>
< MEMBER_TYPE_PROP</H3>
< <PRE>
< public static final int <B>MEMBER_TYPE_PROP</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.MEMBER_TYPE_PROP">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="NAME_PROP"><!-- --></A><H3>
< NAME_PROP</H3>
< <PRE>
< public static final int <B>NAME_PROP</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.NAME_PROP">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="PARENTHESIZED_PROP"><!-- --></A><H3>
< PARENTHESIZED_PROP</H3>
< <PRE>
< public static final int <B>PARENTHESIZED_PROP</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.PARENTHESIZED_PROP">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="QUOTED_PROP"><!-- --></A><H3>
< QUOTED_PROP</H3>
< <PRE>
< public static final int <B>QUOTED_PROP</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.QUOTED_PROP">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="OPT_ARG_NAME"><!-- --></A><H3>
< OPT_ARG_NAME</H3>
< <PRE>
< public static final int <B>OPT_ARG_NAME</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.OPT_ARG_NAME">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="SYNTHETIC_BLOCK_PROP"><!-- --></A><H3>
< SYNTHETIC_BLOCK_PROP</H3>
< <PRE>
< public static final int <B>SYNTHETIC_BLOCK_PROP</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="SOURCEFILE_PROP"><!-- --></A><H3>
< SOURCEFILE_PROP</H3>
< <PRE>
< public static final int <B>SOURCEFILE_PROP</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.SOURCEFILE_PROP">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="EMPTY_BLOCK"><!-- --></A><H3>
< EMPTY_BLOCK</H3>
< <PRE>
< public static final int <B>EMPTY_BLOCK</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.EMPTY_BLOCK">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="ORIGINALNAME_PROP"><!-- --></A><H3>
< ORIGINALNAME_PROP</H3>
< <PRE>
< public static final int <B>ORIGINALNAME_PROP</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.ORIGINALNAME_PROP">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="BRACELESS_TYPE"><!-- --></A><H3>
< BRACELESS_TYPE</H3>
< <PRE>
< public static final int <B>BRACELESS_TYPE</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.BRACELESS_TYPE">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="NO_SIDE_EFFECTS_CALL"><!-- --></A><H3>
< NO_SIDE_EFFECTS_CALL</H3>
< <PRE>
< public static final int <B>NO_SIDE_EFFECTS_CALL</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.NO_SIDE_EFFECTS_CALL">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="IS_CONSTANT_NAME"><!-- --></A><H3>
< IS_CONSTANT_NAME</H3>
< <PRE>
< public static final int <B>IS_CONSTANT_NAME</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.IS_CONSTANT_NAME">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="IS_OPTIONAL_PARAM"><!-- --></A><H3>
< IS_OPTIONAL_PARAM</H3>
< <PRE>
< public static final int <B>IS_OPTIONAL_PARAM</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="IS_VAR_ARGS_PARAM"><!-- --></A><H3>
< IS_VAR_ARGS_PARAM</H3>
< <PRE>
< public static final int <B>IS_VAR_ARGS_PARAM</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="IS_NAMESPACE"><!-- --></A><H3>
< IS_NAMESPACE</H3>
< <PRE>
< public static final int <B>IS_NAMESPACE</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.IS_NAMESPACE">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="IS_DISPATCHER"><!-- --></A><H3>
< IS_DISPATCHER</H3>
< <PRE>
< public static final int <B>IS_DISPATCHER</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.IS_DISPATCHER">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="LAST_PROP"><!-- --></A><H3>
< LAST_PROP</H3>
< <PRE>
< public static final int <B>LAST_PROP</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.LAST_PROP">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="BOTH"><!-- --></A><H3>
< BOTH</H3>
< <PRE>
< public static final int <B>BOTH</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.BOTH">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="LEFT"><!-- --></A><H3>
< LEFT</H3>
< <PRE>
< public static final int <B>LEFT</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.LEFT">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="RIGHT"><!-- --></A><H3>
< RIGHT</H3>
< <PRE>
< public static final int <B>RIGHT</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.RIGHT">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="NON_SPECIALCALL"><!-- --></A><H3>
< NON_SPECIALCALL</H3>
< <PRE>
< public static final int <B>NON_SPECIALCALL</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.NON_SPECIALCALL">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="SPECIALCALL_EVAL"><!-- --></A><H3>
< SPECIALCALL_EVAL</H3>
< <PRE>
< public static final int <B>SPECIALCALL_EVAL</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.SPECIALCALL_EVAL">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="SPECIALCALL_WITH"><!-- --></A><H3>
< SPECIALCALL_WITH</H3>
< <PRE>
< public static final int <B>SPECIALCALL_WITH</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.SPECIALCALL_WITH">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="DECR_FLAG"><!-- --></A><H3>
< DECR_FLAG</H3>
< <PRE>
< public static final int <B>DECR_FLAG</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.DECR_FLAG">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="POST_FLAG"><!-- --></A><H3>
< POST_FLAG</H3>
< <PRE>
< public static final int <B>POST_FLAG</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.POST_FLAG">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="PROPERTY_FLAG"><!-- --></A><H3>
< PROPERTY_FLAG</H3>
< <PRE>
< public static final int <B>PROPERTY_FLAG</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.PROPERTY_FLAG">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="ATTRIBUTE_FLAG"><!-- --></A><H3>
< ATTRIBUTE_FLAG</H3>
< <PRE>
< public static final int <B>ATTRIBUTE_FLAG</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.ATTRIBUTE_FLAG">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="DESCENDANTS_FLAG"><!-- --></A><H3>
< DESCENDANTS_FLAG</H3>
< <PRE>
< public static final int <B>DESCENDANTS_FLAG</B></PRE>
< <DL>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.DESCENDANTS_FLAG">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="COLUMN_BITS"><!-- --></A><H3>
< COLUMN_BITS</H3>
< <PRE>
< public static final int <B>COLUMN_BITS</B></PRE>
< <DL>
< <DD>COLUMN_BITS represents how many of the lower-order bits of
<  sourcePosition are reserved for storing the column number.
<  Bits above these store the line number.
<  This gives us decent position information for everything except
<  files already passed through a minimizer, where lines might
<  be longer than 4096 characters.
< <P>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.COLUMN_BITS">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="MAX_COLUMN_NUMBER"><!-- --></A><H3>
< MAX_COLUMN_NUMBER</H3>
< <PRE>
< public static final int <B>MAX_COLUMN_NUMBER</B></PRE>
< <DL>
< <DD>MAX_COLUMN_NUMBER represents the maximum column number that can
<  be represented.  JSCompiler's modifications to Rhino cause all
<  tokens located beyond the maximum column to MAX_COLUMN_NUMBER.
< <P>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER">Constant Field Values</A></DL>
< </DL>
< <HR>
< 
< <A NAME="COLUMN_MASK"><!-- --></A><H3>
< COLUMN_MASK</H3>
< <PRE>
< public static final int <B>COLUMN_MASK</B></PRE>
< <DL>
< <DD>COLUMN_MASK stores a value where bits storing the column number
<  are set, and bits storing the line are not set.  It's handy for
<  separating column number from line number.
< <P>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../constant-values.html#com.google.javascript.rhino.Node.COLUMN_MASK">Constant Field Values</A></DL>
< </DL>
< 
< <!-- ========= CONSTRUCTOR DETAIL ======== -->
< 
< <A NAME="constructor_detail"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
< <B>Constructor Detail</B></FONT></TH>
< </TR>
< </TABLE>
< 
< <A NAME="Node(int)"><!-- --></A><H3>
< Node</H3>
< <PRE>
< public <B>Node</B>(int&nbsp;nodeType)</PRE>
< <DL>
< </DL>
< <HR>
< 
< <A NAME="Node(int, com.google.javascript.rhino.Node)"><!-- --></A><H3>
< Node</H3>
< <PRE>
< public <B>Node</B>(int&nbsp;nodeType,
<             <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;child)</PRE>
< <DL>
< </DL>
< <HR>
< 
< <A NAME="Node(int, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)"><!-- --></A><H3>
< Node</H3>
< <PRE>
< public <B>Node</B>(int&nbsp;nodeType,
<             <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;left,
<             <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;right)</PRE>
< <DL>
< </DL>
< <HR>
< 
< <A NAME="Node(int, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)"><!-- --></A><H3>
< Node</H3>
< <PRE>
< public <B>Node</B>(int&nbsp;nodeType,
<             <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;left,
<             <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;mid,
<             <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;right)</PRE>
< <DL>
< </DL>
< <HR>
< 
< <A NAME="Node(int, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)"><!-- --></A><H3>
< Node</H3>
< <PRE>
< public <B>Node</B>(int&nbsp;nodeType,
<             <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;left,
<             <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;mid,
<             <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;mid2,
<             <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;right)</PRE>
< <DL>
< </DL>
< <HR>
< 
< <A NAME="Node(int, int, int)"><!-- --></A><H3>
< Node</H3>
< <PRE>
< public <B>Node</B>(int&nbsp;nodeType,
<             int&nbsp;lineno,
<             int&nbsp;charno)</PRE>
< <DL>
< </DL>
< <HR>
< 
< <A NAME="Node(int, com.google.javascript.rhino.Node, int, int)"><!-- --></A><H3>
< Node</H3>
< <PRE>
< public <B>Node</B>(int&nbsp;nodeType,
<             <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;child,
<             int&nbsp;lineno,
<             int&nbsp;charno)</PRE>
< <DL>
< </DL>
< <HR>
< 
< <A NAME="Node(int, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, int, int)"><!-- --></A><H3>
< Node</H3>
< <PRE>
< public <B>Node</B>(int&nbsp;nodeType,
<             <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;left,
<             <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;right,
<             int&nbsp;lineno,
<             int&nbsp;charno)</PRE>
< <DL>
< </DL>
< <HR>
< 
< <A NAME="Node(int, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, int, int)"><!-- --></A><H3>
< Node</H3>
< <PRE>
< public <B>Node</B>(int&nbsp;nodeType,
<             <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;left,
<             <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;mid,
<             <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;right,
<             int&nbsp;lineno,
<             int&nbsp;charno)</PRE>
< <DL>
< </DL>
< <HR>
< 
< <A NAME="Node(int, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, int, int)"><!-- --></A><H3>
< Node</H3>
< <PRE>
< public <B>Node</B>(int&nbsp;nodeType,
<             <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;left,
<             <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;mid,
<             <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;mid2,
<             <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;right,
<             int&nbsp;lineno,
<             int&nbsp;charno)</PRE>
< <DL>
< </DL>
< <HR>
< 
< <A NAME="Node(int, com.google.javascript.rhino.Node[], int, int)"><!-- --></A><H3>
< Node</H3>
< <PRE>
< public <B>Node</B>(int&nbsp;nodeType,
<             <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>[]&nbsp;children,
<             int&nbsp;lineno,
<             int&nbsp;charno)</PRE>
< <DL>
< </DL>
< <HR>
< 
< <A NAME="Node(int, com.google.javascript.rhino.Node[])"><!-- --></A><H3>
< Node</H3>
< <PRE>
< public <B>Node</B>(int&nbsp;nodeType,
<             <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>[]&nbsp;children)</PRE>
< <DL>
< </DL>
< 
< <!-- ============ METHOD DETAIL ========== -->
< 
< <A NAME="method_detail"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
< <B>Method Detail</B></FONT></TH>
< </TR>
< </TABLE>
< 
< <A NAME="newNumber(double)"><!-- --></A><H3>
< newNumber</H3>
< <PRE>
< public static <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A> <B>newNumber</B>(double&nbsp;number)</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="newNumber(double, int, int)"><!-- --></A><H3>
< newNumber</H3>
< <PRE>
< public static <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A> <B>newNumber</B>(double&nbsp;number,
<                              int&nbsp;lineno,
<                              int&nbsp;charno)</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="newString(java.lang.String)"><!-- --></A><H3>
< newString</H3>
< <PRE>
< public static <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A> <B>newString</B>(<A HREF="http:
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="newString(int, java.lang.String)"><!-- --></A><H3>
< newString</H3>
< <PRE>
< public static <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A> <B>newString</B>(int&nbsp;type,
<                              <A HREF="http:
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="newString(java.lang.String, int, int)"><!-- --></A><H3>
< newString</H3>
< <PRE>
< public static <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A> <B>newString</B>(<A HREF="http:
<                              int&nbsp;lineno,
<                              int&nbsp;charno)</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="newString(int, java.lang.String, int, int)"><!-- --></A><H3>
< newString</H3>
< <PRE>
< public static <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A> <B>newString</B>(int&nbsp;type,
<                              <A HREF="http:
<                              int&nbsp;lineno,
<                              int&nbsp;charno)</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getType()"><!-- --></A><H3>
< getType</H3>
< <PRE>
< public int <B>getType</B>()</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="setType(int)"><!-- --></A><H3>
< setType</H3>
< <PRE>
< public void <B>setType</B>(int&nbsp;type)</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="hasChildren()"><!-- --></A><H3>
< hasChildren</H3>
< <PRE>
< public boolean <B>hasChildren</B>()</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getFirstChild()"><!-- --></A><H3>
< getFirstChild</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A> <B>getFirstChild</B>()</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getLastChild()"><!-- --></A><H3>
< getLastChild</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A> <B>getLastChild</B>()</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getNext()"><!-- --></A><H3>
< getNext</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A> <B>getNext</B>()</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getChildBefore(com.google.javascript.rhino.Node)"><!-- --></A><H3>
< getChildBefore</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A> <B>getChildBefore</B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;child)</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getChildAtIndex(int)"><!-- --></A><H3>
< getChildAtIndex</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A> <B>getChildAtIndex</B>(int&nbsp;i)</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getLastSibling()"><!-- --></A><H3>
< getLastSibling</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A> <B>getLastSibling</B>()</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="addChildToFront(com.google.javascript.rhino.Node)"><!-- --></A><H3>
< addChildToFront</H3>
< <PRE>
< public void <B>addChildToFront</B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;child)</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="addChildToBack(com.google.javascript.rhino.Node)"><!-- --></A><H3>
< addChildToBack</H3>
< <PRE>
< public void <B>addChildToBack</B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;child)</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="addChildrenToFront(com.google.javascript.rhino.Node)"><!-- --></A><H3>
< addChildrenToFront</H3>
< <PRE>
< public void <B>addChildrenToFront</B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;children)</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="addChildrenToBack(com.google.javascript.rhino.Node)"><!-- --></A><H3>
< addChildrenToBack</H3>
< <PRE>
< public void <B>addChildrenToBack</B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;children)</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="addChildBefore(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)"><!-- --></A><H3>
< addChildBefore</H3>
< <PRE>
< public void <B>addChildBefore</B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;newChild,
<                            <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;node)</PRE>
< <DL>
< <DD>Add 'child' before 'node'.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="addChildAfter(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)"><!-- --></A><H3>
< addChildAfter</H3>
< <PRE>
< public void <B>addChildAfter</B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;newChild,
<                           <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;node)</PRE>
< <DL>
< <DD>Add 'child' after 'node'.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="removeChild(com.google.javascript.rhino.Node)"><!-- --></A><H3>
< removeChild</H3>
< <PRE>
< public void <B>removeChild</B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;child)</PRE>
< <DL>
< <DD>Detach a child from its parent and siblings.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="replaceChild(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)"><!-- --></A><H3>
< replaceChild</H3>
< <PRE>
< public void <B>replaceChild</B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;child,
<                          <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;newChild)</PRE>
< <DL>
< <DD>Detaches child from Node and replaces it with newChild.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="replaceChildAfter(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)"><!-- --></A><H3>
< replaceChildAfter</H3>
< <PRE>
< public void <B>replaceChildAfter</B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;prevChild,
<                               <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;newChild)</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="removeProp(int)"><!-- --></A><H3>
< removeProp</H3>
< <PRE>
< public void <B>removeProp</B>(int&nbsp;propType)</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getProp(int)"><!-- --></A><H3>
< getProp</H3>
< <PRE>
< public <A HREF="http:
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getBooleanProp(int)"><!-- --></A><H3>
< getBooleanProp</H3>
< <PRE>
< public boolean <B>getBooleanProp</B>(int&nbsp;propType)</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getIntProp(int, int)"><!-- --></A><H3>
< getIntProp</H3>
< <PRE>
< public int <B>getIntProp</B>(int&nbsp;propType,
<                       int&nbsp;defaultValue)</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getExistingIntProp(int)"><!-- --></A><H3>
< getExistingIntProp</H3>
< <PRE>
< public int <B>getExistingIntProp</B>(int&nbsp;propType)</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="putProp(int, java.lang.Object)"><!-- --></A><H3>
< putProp</H3>
< <PRE>
< public void <B>putProp</B>(int&nbsp;propType,
<                     <A HREF="http:
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="putBooleanProp(int, boolean)"><!-- --></A><H3>
< putBooleanProp</H3>
< <PRE>
< public void <B>putBooleanProp</B>(int&nbsp;propType,
<                            boolean&nbsp;prop)</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="putIntProp(int, int)"><!-- --></A><H3>
< putIntProp</H3>
< <PRE>
< public void <B>putIntProp</B>(int&nbsp;propType,
<                        int&nbsp;prop)</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getLineno()"><!-- --></A><H3>
< getLineno</H3>
< <PRE>
< public int <B>getLineno</B>()</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getCharno()"><!-- --></A><H3>
< getCharno</H3>
< <PRE>
< public int <B>getCharno</B>()</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getDouble()"><!-- --></A><H3>
< getDouble</H3>
< <PRE>
< public double <B>getDouble</B>()
<                  throws <A HREF="http:
< <DL>
< <DD>Can only be called when <tt>getType() == TokenStream.NUMBER</tt>
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< 
< <DT><B>Throws:</B>
< <DD><CODE><A HREF="http:
< </DD>
< </DL>
< <HR>
< 
< <A NAME="setDouble(double)"><!-- --></A><H3>
< setDouble</H3>
< <PRE>
< public void <B>setDouble</B>(double&nbsp;s)
<                throws <A HREF="http:
< <DL>
< <DD>Can only be called when <tt>getType() == TokenStream.NUMBER</tt>
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< 
< <DT><B>Throws:</B>
< <DD><CODE><A HREF="http:
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getString()"><!-- --></A><H3>
< getString</H3>
< <PRE>
< public <A HREF="http:
<                  throws <A HREF="http:
< <DL>
< <DD>Can only be called when node has String context.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< 
< <DT><B>Throws:</B>
< <DD><CODE><A HREF="http:
< </DD>
< </DL>
< <HR>
< 
< <A NAME="setString(java.lang.String)"><!-- --></A><H3>
< setString</H3>
< <PRE>
< public void <B>setString</B>(<A HREF="http:
<                throws <A HREF="http:
< <DL>
< <DD>Can only be called when node has String context.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< 
< <DT><B>Throws:</B>
< <DD><CODE><A HREF="http:
< </DD>
< </DL>
< <HR>
< 
< <A NAME="toString()"><!-- --></A><H3>
< toString</H3>
< <PRE>
< public <A HREF="http:
< <DL>
< <DD><DL>
< <DT><B>Overrides:</B><DD><CODE><A HREF="http:
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="toString(boolean, boolean, boolean)"><!-- --></A><H3>
< toString</H3>
< <PRE>
< public <A HREF="http:
<                        boolean&nbsp;printAnnotations,
<                        boolean&nbsp;printType)</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="toStringTree()"><!-- --></A><H3>
< toStringTree</H3>
< <PRE>
< public <A HREF="http:
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="appendStringTree(java.lang.Appendable)"><!-- --></A><H3>
< appendStringTree</H3>
< <PRE>
< public void <B>appendStringTree</B>(<A HREF="http:
<                       throws <A HREF="http:
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< 
< <DT><B>Throws:</B>
< <DD><CODE><A HREF="http:
< </DD>
< </DL>
< <HR>
< 
< <A NAME="setLineno(int)"><!-- --></A><H3>
< setLineno</H3>
< <PRE>
< public void <B>setLineno</B>(int&nbsp;lineno)</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="setCharno(int)"><!-- --></A><H3>
< setCharno</H3>
< <PRE>
< public void <B>setCharno</B>(int&nbsp;charno)</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="mergeLineCharNo(int, int)"><!-- --></A><H3>
< mergeLineCharNo</H3>
< <PRE>
< protected static int <B>mergeLineCharNo</B>(int&nbsp;lineno,
<                                      int&nbsp;charno)</PRE>
< <DL>
< <DD>Merges the line number and character number in one integer. The Character
<  number takes the first 12 bits and the line number takes the rest. If
<  the character number is greater than <code>2<sup>12</sup>-1</code> it is
<  adjusted to <code>2<sup>12</sup>-1</code>.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="extractLineno(int)"><!-- --></A><H3>
< extractLineno</H3>
< <PRE>
< protected static int <B>extractLineno</B>(int&nbsp;lineCharNo)</PRE>
< <DL>
< <DD>Extracts the line number and character number from a merged line char
<  number (see <A HREF="../../../../com/google/javascript/rhino/Node.html#mergeLineCharNo(int, int)"><CODE>mergeLineCharNo(int, int)</CODE></A>).
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="extractCharno(int)"><!-- --></A><H3>
< extractCharno</H3>
< <PRE>
< protected static int <B>extractCharno</B>(int&nbsp;lineCharNo)</PRE>
< <DL>
< <DD>Extracts the character number and character number from a merged line
<  char number (see <A HREF="../../../../com/google/javascript/rhino/Node.html#mergeLineCharNo(int, int)"><CODE>mergeLineCharNo(int, int)</CODE></A>).
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="children()"><!-- --></A><H3>
< children</H3>
< <PRE>
< public <A HREF="http:
< <DL>
< <DD><p>Return an iterable object that iterates over this nodes's children.
<  The iterator does not support the optional operation
<  <A HREF="http:
< 
<  <p>To iterate over a node's siblings, one can write</p>
<  <pre>Node n = ...;
<  for (Node child : n.children()) { ...</pre>
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="siblings()"><!-- --></A><H3>
< siblings</H3>
< <PRE>
< public <A HREF="http:
< <DL>
< <DD><p>Return an iterable object that iterates over this nodes's siblings.
<  The iterator does not support the optional operation
<  <A HREF="http:
< 
<  <p>To iterate over a node's siblings, one can write</p>
<  <pre>Node n = ...;
<  for (Node sibling : n.siblings()) { ...</pre>
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getParent()"><!-- --></A><H3>
< getParent</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A> <B>getParent</B>()</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getAncestor(int)"><!-- --></A><H3>
< getAncestor</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A> <B>getAncestor</B>(int&nbsp;level)</PRE>
< <DL>
< <DD>Gets the ancestor node relative to this.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< <DT><B>Parameters:</B><DD><CODE>level</CODE> - 0 = this, 1 = the parent, etc.</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getAncestors()"><!-- --></A><H3>
< getAncestors</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/rhino/Node.AncestorIterable.html" title="class in com.google.javascript.rhino">Node.AncestorIterable</A> <B>getAncestors</B>()</PRE>
< <DL>
< <DD>Iterates all of the node's ancestors excluding itself.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="hasOneChild()"><!-- --></A><H3>
< hasOneChild</H3>
< <PRE>
< public boolean <B>hasOneChild</B>()</PRE>
< <DL>
< <DD>Check for one child more efficiently than by iterating over all the
<  children as is done with Node.getChildCount().
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< 
< <DT><B>Returns:</B><DD>Whether the node has exactly one child.</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="hasMoreThanOneChild()"><!-- --></A><H3>
< hasMoreThanOneChild</H3>
< <PRE>
< public boolean <B>hasMoreThanOneChild</B>()</PRE>
< <DL>
< <DD>Check for more than one child more efficiently than by iterating over all
<  the children as is done with Node.getChildCount().
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< 
< <DT><B>Returns:</B><DD>Whether the node more than one child.</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getChildCount()"><!-- --></A><H3>
< getChildCount</H3>
< <PRE>
< public int <B>getChildCount</B>()</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="hasChild(com.google.javascript.rhino.Node)"><!-- --></A><H3>
< hasChild</H3>
< <PRE>
< public boolean <B>hasChild</B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;child)</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="checkTreeEquals(com.google.javascript.rhino.Node)"><!-- --></A><H3>
< checkTreeEquals</H3>
< <PRE>
< public <A HREF="http:
< <DL>
< <DD>Checks if the subtree under this node is the same as another subtree.
<  Returns null if it's equal, or a message describing the differences.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="checkTreeEqualsSilent(com.google.javascript.rhino.Node)"><!-- --></A><H3>
< checkTreeEqualsSilent</H3>
< <PRE>
< public boolean <B>checkTreeEqualsSilent</B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;node2)</PRE>
< <DL>
< <DD>If this is a compilation pass and not a test, do not construct error
<  strings. Instead return true if the trees are equal.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="tokenToName(int)"><!-- --></A><H3>
< tokenToName</H3>
< <PRE>
< public static <A HREF="http:
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="isEquivalentTo(com.google.javascript.rhino.Node)"><!-- --></A><H3>
< isEquivalentTo</H3>
< <PRE>
< public boolean <B>isEquivalentTo</B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;node)</PRE>
< <DL>
< <DD>Returns true if this node is equivalent semantically to another
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="hasSideEffects()"><!-- --></A><H3>
< hasSideEffects</H3>
< <PRE>
< public boolean <B>hasSideEffects</B>()</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getQualifiedName()"><!-- --></A><H3>
< getQualifiedName</H3>
< <PRE>
< public <A HREF="http:
< <DL>
< <DD>This function takes a set of GETPROP nodes and produces a string that is
<  each property separated by dots.  If the node ultimately under the left
<  sub-tree is not a simple name, this is not a valid qualified name.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< 
< <DT><B>Returns:</B><DD>a null if this is not a qualified name, or a dot-separated string
<  of the name and properties.</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="isQualifiedName()"><!-- --></A><H3>
< isQualifiedName</H3>
< <PRE>
< public boolean <B>isQualifiedName</B>()</PRE>
< <DL>
< <DD>Returns whether a node corresponds to a simple or a qualified name, such
<  as <code>x</code> or <code>a.b.c</code> or <code>this.a</code>.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="isUnscopedQualifiedName()"><!-- --></A><H3>
< isUnscopedQualifiedName</H3>
< <PRE>
< public boolean <B>isUnscopedQualifiedName</B>()</PRE>
< <DL>
< <DD>Returns whether a node corresponds to a simple or a qualified name
<  without a "this" reference, such as <code>a.b.c</code>, but not
<  <code>this.a</code>.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="detachFromParent()"><!-- --></A><H3>
< detachFromParent</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A> <B>detachFromParent</B>()</PRE>
< <DL>
< <DD>Removes this node from its parent.  Equivalent to:
<      node.getParent().removeChild();
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="removeFirstChild()"><!-- --></A><H3>
< removeFirstChild</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A> <B>removeFirstChild</B>()</PRE>
< <DL>
< <DD>Removes the first child of Node.  Equivalent to:
<      node.removeChild(node.getFirstChild());
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< 
< <DT><B>Returns:</B><DD>The removed Node.</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="removeChildren()"><!-- --></A><H3>
< removeChildren</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A> <B>removeChildren</B>()</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< 
< <DT><B>Returns:</B><DD>A Node that is the head of the list of children.</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="detachChildren()"><!-- --></A><H3>
< detachChildren</H3>
< <PRE>
< public void <B>detachChildren</B>()</PRE>
< <DL>
< <DD>Removes all children from this node and isolates the children from each
<  other.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="removeChildAfter(com.google.javascript.rhino.Node)"><!-- --></A><H3>
< removeChildAfter</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A> <B>removeChildAfter</B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;prev)</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="cloneNode()"><!-- --></A><H3>
< cloneNode</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A> <B>cloneNode</B>()</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< 
< <DT><B>Returns:</B><DD>A detached clone of the Node, specifically excluding its
<  children.</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="cloneTree()"><!-- --></A><H3>
< cloneTree</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A> <B>cloneTree</B>()</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< 
< <DT><B>Returns:</B><DD>A detached clone of the Node and all its children.</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="copyInformationFrom(com.google.javascript.rhino.Node)"><!-- --></A><H3>
< copyInformationFrom</H3>
< <PRE>
< public void <B>copyInformationFrom</B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;other)</PRE>
< <DL>
< <DD>Copies source file and name information from the other
<  node given to the current node. Used for maintaining
<  debug information across node append and remove operations.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getJSType()"><!-- --></A><H3>
< getJSType</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A> <B>getJSType</B>()</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="setJSType(com.google.javascript.rhino.jstype.JSType)"><!-- --></A><H3>
< setJSType</H3>
< <PRE>
< public void <B>setJSType</B>(<A HREF="../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&nbsp;jsType)</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getJsDocBuilderForNode()"><!-- --></A><H3>
< getJsDocBuilderForNode</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/rhino/Node.FileLevelJsDocBuilder.html" title="class in com.google.javascript.rhino">Node.FileLevelJsDocBuilder</A> <B>getJsDocBuilderForNode</B>()</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getJSDocInfo()"><!-- --></A><H3>
< getJSDocInfo</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html" title="class in com.google.javascript.rhino">JSDocInfo</A> <B>getJSDocInfo</B>()</PRE>
< <DL>
< <DD>Get the <A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html" title="class in com.google.javascript.rhino"><CODE>JSDocInfo</CODE></A> attached to this node.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< 
< <DT><B>Returns:</B><DD>the information or <code>null</code> if no JSDoc is attached to this
<  node</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="setJSDocInfo(com.google.javascript.rhino.JSDocInfo)"><!-- --></A><H3>
< setJSDocInfo</H3>
< <PRE>
< public void <B>setJSDocInfo</B>(<A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html" title="class in com.google.javascript.rhino">JSDocInfo</A>&nbsp;info)</PRE>
< <DL>
< <DD>Sets the <A HREF="../../../../com/google/javascript/rhino/JSDocInfo.html" title="class in com.google.javascript.rhino"><CODE>JSDocInfo</CODE></A> attached to this node.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="setVarArgs(boolean)"><!-- --></A><H3>
< setVarArgs</H3>
< <PRE>
< public void <B>setVarArgs</B>(boolean&nbsp;varArgs)</PRE>
< <DL>
< <DD>Sets whether this node is a variable length argument node. This
<  method is meaningful only on <A HREF="../../../../com/google/javascript/rhino/Token.html#NAME"><CODE>Token.NAME</CODE></A> nodes
<  used to define a <A HREF="../../../../com/google/javascript/rhino/Token.html#FUNCTION"><CODE>Token.FUNCTION</CODE></A>'s argument list.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="isVarArgs()"><!-- --></A><H3>
< isVarArgs</H3>
< <PRE>
< public boolean <B>isVarArgs</B>()</PRE>
< <DL>
< <DD>Returns whether this node is a variable length argument node. This
<  method's return value is meaningful only on <A HREF="../../../../com/google/javascript/rhino/Token.html#NAME"><CODE>Token.NAME</CODE></A> nodes
<  used to define a <A HREF="../../../../com/google/javascript/rhino/Token.html#FUNCTION"><CODE>Token.FUNCTION</CODE></A>'s argument list.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="setOptionalArg(boolean)"><!-- --></A><H3>
< setOptionalArg</H3>
< <PRE>
< public void <B>setOptionalArg</B>(boolean&nbsp;optionalArg)</PRE>
< <DL>
< <DD>Sets whether this node is an optional argument node. This
<  method is meaningful only on <A HREF="../../../../com/google/javascript/rhino/Token.html#NAME"><CODE>Token.NAME</CODE></A> nodes
<  used to define a <A HREF="../../../../com/google/javascript/rhino/Token.html#FUNCTION"><CODE>Token.FUNCTION</CODE></A>'s argument list.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="isOptionalArg()"><!-- --></A><H3>
< isOptionalArg</H3>
< <PRE>
< public boolean <B>isOptionalArg</B>()</PRE>
< <DL>
< <DD>Returns whether this node is an optional argument node. This
<  method's return value is meaningful only on <A HREF="../../../../com/google/javascript/rhino/Token.html#NAME"><CODE>Token.NAME</CODE></A> nodes
<  used to define a <A HREF="../../../../com/google/javascript/rhino/Token.html#FUNCTION"><CODE>Token.FUNCTION</CODE></A>'s argument list.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="setIsSyntheticBlock(boolean)"><!-- --></A><H3>
< setIsSyntheticBlock</H3>
< <PRE>
< public void <B>setIsSyntheticBlock</B>(boolean&nbsp;val)</PRE>
< <DL>
< <DD>Sets whether this is a synthetic block that should not be considered
<  a real source block.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="isSyntheticBlock()"><!-- --></A><H3>
< isSyntheticBlock</H3>
< <PRE>
< public boolean <B>isSyntheticBlock</B>()</PRE>
< <DL>
< <DD>Returns whether this is a synthetic block that should not be considered
<  a real source block.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="setWasEmptyNode(boolean)"><!-- --></A><H3>
< setWasEmptyNode</H3>
< <PRE>
< public void <B>setWasEmptyNode</B>(boolean&nbsp;val)</PRE>
< <DL>
< <DD>Sets whether this is a synthetic block that should not be considered
<  a real source block.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="wasEmptyNode()"><!-- --></A><H3>
< wasEmptyNode</H3>
< <PRE>
< public boolean <B>wasEmptyNode</B>()</PRE>
< <DL>
< <DD>Returns whether this is a synthetic block that should not be considered
<  a real source block.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="setIsNoSideEffectsCall()"><!-- --></A><H3>
< setIsNoSideEffectsCall</H3>
< <PRE>
< public void <B>setIsNoSideEffectsCall</B>()</PRE>
< <DL>
< <DD>Marks this function or constructor call node as having no side effects.
<  This property is only meaningful for <A HREF="../../../../com/google/javascript/rhino/Token.html#CALL"><CODE>Token.CALL</CODE></A> and
<  <A HREF="../../../../com/google/javascript/rhino/Token.html#NEW"><CODE>Token.NEW</CODE></A> nodes.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="isNoSideEffectsCall()"><!-- --></A><H3>
< isNoSideEffectsCall</H3>
< <PRE>
< public boolean <B>isNoSideEffectsCall</B>()</PRE>
< <DL>
< <DD>Returns true if this node is a function or constructor call that
<  has no side effects.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="isQuotedString()"><!-- --></A><H3>
< isQuotedString</H3>
< <PRE>
< public boolean <B>isQuotedString</B>()</PRE>
< <DL>
< <DD>This should only be called for STRING nodes created in object lits.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="setQuotedString()"><!-- --></A><H3>
< setQuotedString</H3>
< <PRE>
< public void <B>setQuotedString</B>()</PRE>
< <DL>
< <DD>This should only be called for STRING nodes created in object lits.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <!-- ========= END OF CLASS DATA ========= -->
< <HR>
< 
< 
< <!-- ======= START OF BOTTOM NAVBAR ====== -->
< <A NAME="navbar_bottom"><!-- --></A>
< <A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
< <TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
< <TR>
< <TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
< <A NAME="navbar_bottom_firstrow"><!-- --></A>
< <TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
<   <TR ALIGN="center" VALIGN="top">
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
<   </TR>
< </TABLE>
< </TD>
< <TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
< </EM>
< </TD>
< </TR>
< 
< <TR>
< <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
< &nbsp;<A HREF="../../../../com/google/javascript/rhino/Kit.html" title="class in com.google.javascript.rhino"><B>PREV CLASS</B></A>&nbsp;
< &nbsp;<A HREF="../../../../com/google/javascript/rhino/Node.AncestorIterable.html" title="class in com.google.javascript.rhino"><B>NEXT CLASS</B></A></FONT></TD>
< <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
<   <A HREF="../../../../index.html?com/google/javascript/rhino/Node.html" target="_top"><B>FRAMES</B></A>  &nbsp;
< &nbsp;<A HREF="Node.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
< &nbsp;<SCRIPT type="text/javascript">
<   <!--
<   if(window==top) {
<     document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
<   }
<   
< </SCRIPT>
< <NOSCRIPT>
<   <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
< </NOSCRIPT>
< 
< 
< </FONT></TD>
< </TR>
< <TR>
< <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
<   SUMMARY:&nbsp;<A HREF="#nested_class_summary">NESTED</A>&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
< <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
< DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
< </TR>
< </TABLE>
< <A NAME="skip-navbar_bottom"></A>
< <!-- ======== END OF BOTTOM NAVBAR ======= -->
< 
< <HR>
< 
<         <div id="footer">
<           <div id="footerlogo">
<             <img src="http:
<                  alt="Google colored balls">
<           </div>
< 
<           <div id="copyright">
<           <p>&copy; 2009 Google -
<             <a href="http:
<             <a href="http:
<             <a href="http:
<           </p>
<           </div>
<         </div>
<       
---
> 
>     
> 
> 
> 
>     protected static int extractCharno(int lineCharNo) {
>       if (lineCharNo == -1) {
>         return -1;
>       } else {
>         return lineCharNo & COLUMN_MASK;
>       }
>     }
> 
>     
>     
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public Iterable<Node> children() {
>       if (first == null) {
>         return Collections.emptySet();
>       } else {
>         return new SiblingNodeIterable(first);
>       }
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public Iterable<Node> siblings() {
>       return new SiblingNodeIterable(this);
>     }
> 
>     
> 
> 
>     private static final class SiblingNodeIterable
>        implements Iterable<Node>, Iterator<Node>
>     {
>         private final Node start;
>         private Node current;
>         private boolean used;
> 
>         SiblingNodeIterable(Node start) {
>           this.start = start;
>           this.current = start;
>           this.used = false;
>         }
> 
>         public Iterator<Node> iterator() {
>           if (!used) {
>             used = true;
>             return this;
>           } else {
>             
>             
>             
>             
>             
>             
>             return (new SiblingNodeIterable(start)).iterator();
>           }
>         }
> 
>         public boolean hasNext() {
>             return current != null;
>         }
> 
>         public Node next() {
>             if (current == null) {
>               throw new NoSuchElementException();
>             }
>             try {
>                 return current;
>             } finally {
>                 current = current.getNext();
>             }
>         }
> 
>         public void remove() {
>             throw new UnsupportedOperationException();
>         }
>     }
> 
>     
>     
> 
>     public Node getParent() {
>         return parent;
>     }
> 
>     
> 
> 
> 
>     public Node getAncestor(int level) {
>       Preconditions.checkArgument(level >= 0);
>       Node node = this;
>       while(node != null && level-- > 0) {
>         node = node.getParent();
>       }
>       return node;
>     }
> 
>     
> 
> 
>     public AncestorIterable getAncestors() {
>       return new AncestorIterable(this.getParent());
>     }
> 
>     
> 
> 
>     public static class AncestorIterable implements Iterable<Node> {
>       private Node cur;
> 
3912,3913c1256,1978
< </BODY>
< </HTML>
---
> 
> 
>       AncestorIterable(Node cur) {
>         this.cur = cur;
>       }
> 
>       public Iterator<Node> iterator() {
>         return new Iterator<Node>() {
>             public boolean hasNext() {
>               return cur != null;
>             }
> 
>             public Node next() {
>               if (!hasNext()) throw new NoSuchElementException();
>               Node n = cur;
>               cur = cur.getParent();
>               return n;
>             }
> 
>             public void remove() {
>               throw new UnsupportedOperationException();
>             }
>           };
>       }
>     }
> 
>     
> 
> 
> 
> 
>     public boolean hasOneChild() {
>       return first != null && first == last;
>     }
> 
>     
> 
> 
> 
> 
>     public boolean hasMoreThanOneChild() {
>       return first != null && first != last;
>     }
> 
>     public int getChildCount() {
>         int c = 0;
>         for (Node n = first; n != null; n = n.next)
>             c++;
> 
>         return c;
>     }
> 
>     
>     public boolean hasChild(Node child) {
>       for (Node n = first; n != null; n = n.getNext()) {
>         if (child == n) {
>           return true;
>         }
>       }
>       return false;
>     }
> 
>     
> 
> 
> 
>     public String checkTreeEquals(Node node2) {
>         Pair<Node, Node> diff = checkTreeEqualsImpl(node2);
>         if (diff != null) {
>           return "Node tree inequality:" +
>               "\nTree1:\n" + toStringTree() +
>               "\n\nTree2:\n" + node2.toStringTree();
>         }
>         return null;
>     }
> 
>     
> 
> 
> 
>     public boolean checkTreeEqualsSilent(Node node2) {
>         return checkTreeEqualsImpl(node2) == null;
>     }
> 
>     
> 
> 
> 
> 
>     Pair<Node, Node> checkTreeEqualsImpl(Node node2) {
>         boolean eq = false;
> 
>         if (type == node2.getType() &&
>             getChildCount() == node2.getChildCount() &&
>             getClass() == node2.getClass()) {
> 
>             eq = this.isEquivalentTo(node2);
>         }
> 
>         if (!eq) {
>             return Pair.of(this, node2);
>         }
> 
>         Pair<Node, Node> res = null;
>         Node n, n2;
>         for (n = first, n2 = node2.first;
>              res == null && n != null;
>              n = n.next, n2 = n2.next) {
>             res = n.checkTreeEqualsImpl(n2);
>             if (res != null) {
>               return res;
>             }
>         }
>         return res;
>     }
> 
>     public static String tokenToName(int token) {
>         switch (token) {
>             case Token.ERROR:           return "error";
>             case Token.EOF:             return "eof";
>             case Token.EOL:             return "eol";
>             case Token.ENTERWITH:       return "enterwith";
>             case Token.LEAVEWITH:       return "leavewith";
>             case Token.RETURN:          return "return";
>             case Token.GOTO:            return "goto";
>             case Token.IFEQ:            return "ifeq";
>             case Token.IFNE:            return "ifne";
>             case Token.SETNAME:         return "setname";
>             case Token.BITOR:           return "bitor";
>             case Token.BITXOR:          return "bitxor";
>             case Token.BITAND:          return "bitand";
>             case Token.EQ:              return "eq";
>             case Token.NE:              return "ne";
>             case Token.LT:              return "lt";
>             case Token.LE:              return "le";
>             case Token.GT:              return "gt";
>             case Token.GE:              return "ge";
>             case Token.LSH:             return "lsh";
>             case Token.RSH:             return "rsh";
>             case Token.URSH:            return "ursh";
>             case Token.ADD:             return "add";
>             case Token.SUB:             return "sub";
>             case Token.MUL:             return "mul";
>             case Token.DIV:             return "div";
>             case Token.MOD:             return "mod";
>             case Token.BITNOT:          return "bitnot";
>             case Token.NEG:             return "neg";
>             case Token.NEW:             return "new";
>             case Token.DELPROP:         return "delprop";
>             case Token.TYPEOF:          return "typeof";
>             case Token.GETPROP:         return "getprop";
>             case Token.SETPROP:         return "setprop";
>             case Token.GETELEM:         return "getelem";
>             case Token.SETELEM:         return "setelem";
>             case Token.CALL:            return "call";
>             case Token.NAME:            return "name";
>             case Token.NUMBER:          return "number";
>             case Token.STRING:          return "string";
>             case Token.NULL:            return "null";
>             case Token.THIS:            return "this";
>             case Token.FALSE:           return "false";
>             case Token.TRUE:            return "true";
>             case Token.SHEQ:            return "sheq";
>             case Token.SHNE:            return "shne";
>             case Token.REGEXP:          return "regexp";
>             case Token.POS:             return "pos";
>             case Token.BINDNAME:        return "bindname";
>             case Token.THROW:           return "throw";
>             case Token.IN:              return "in";
>             case Token.INSTANCEOF:      return "instanceof";
>             case Token.GETVAR:          return "getvar";
>             case Token.SETVAR:          return "setvar";
>             case Token.TRY:             return "try";
>             case Token.TYPEOFNAME:      return "typeofname";
>             case Token.THISFN:          return "thisfn";
>             case Token.SEMI:            return "semi";
>             case Token.LB:              return "lb";
>             case Token.RB:              return "rb";
>             case Token.LC:              return "lc";
>             case Token.RC:              return "rc";
>             case Token.LP:              return "lp";
>             case Token.RP:              return "rp";
>             case Token.COMMA:           return "comma";
>             case Token.ASSIGN:          return "assign";
>             case Token.ASSIGN_BITOR:    return "assign_bitor";
>             case Token.ASSIGN_BITXOR:   return "assign_bitxor";
>             case Token.ASSIGN_BITAND:   return "assign_bitand";
>             case Token.ASSIGN_LSH:      return "assign_lsh";
>             case Token.ASSIGN_RSH:      return "assign_rsh";
>             case Token.ASSIGN_URSH:     return "assign_ursh";
>             case Token.ASSIGN_ADD:      return "assign_add";
>             case Token.ASSIGN_SUB:      return "assign_sub";
>             case Token.ASSIGN_MUL:      return "assign_mul";
>             case Token.ASSIGN_DIV:      return "assign_div";
>             case Token.ASSIGN_MOD:      return "assign_mod";
>             case Token.HOOK:            return "hook";
>             case Token.COLON:           return "colon";
>             case Token.OR:              return "or";
>             case Token.AND:             return "and";
>             case Token.INC:             return "inc";
>             case Token.DEC:             return "dec";
>             case Token.DOT:             return "dot";
>             case Token.FUNCTION:        return "function";
>             case Token.EXPORT:          return "export";
>             case Token.IMPORT:          return "import";
>             case Token.IF:              return "if";
>             case Token.ELSE:            return "else";
>             case Token.SWITCH:          return "switch";
>             case Token.CASE:            return "case";
>             case Token.DEFAULT:         return "default";
>             case Token.WHILE:           return "while";
>             case Token.DO:              return "do";
>             case Token.FOR:             return "for";
>             case Token.BREAK:           return "break";
>             case Token.CONTINUE:        return "continue";
>             case Token.VAR:             return "var";
>             case Token.WITH:            return "with";
>             case Token.CATCH:           return "catch";
>             case Token.FINALLY:         return "finally";
>             case Token.RESERVED:        return "reserved";
>             case Token.NOT:             return "not";
>             case Token.VOID:            return "void";
>             case Token.BLOCK:           return "block";
>             case Token.ARRAYLIT:        return "arraylit";
>             case Token.OBJECTLIT:       return "objectlit";
>             case Token.LABEL:           return "label";
>             case Token.TARGET:          return "target";
>             case Token.LOOP:            return "loop";
>             case Token.EXPR_VOID:       return "expr_void";
>             case Token.EXPR_RESULT:     return "expr_result";
>             case Token.JSR:             return "jsr";
>             case Token.SCRIPT:          return "script";
>             case Token.EMPTY:           return "empty";
>             case Token.GET_REF:         return "get_ref";
>             case Token.REF_SPECIAL:     return "ref_special";
>         }
>         return "<unknown="+token+">";
>     }
> 
>     
>     public boolean isEquivalentTo(Node node) {
>         if (type == Token.ARRAYLIT) {
>             try {
>                 int[] indices1 = (int[])getProp(Node.SKIP_INDEXES_PROP);
>                 int[] indices2 = (int[])node.getProp(Node.SKIP_INDEXES_PROP);
>                 if (indices1 == null) {
>                     if (indices2 != null)
>                         return false;
>                 } else if (indices2 == null) {
>                     return false;
>                 } else if (indices1.length != indices2.length) {
>                     return false;
>                 } else {
>                     for (int i = 0; i < indices1.length; i++) {
>                         if (indices1[i] != indices2[i])
>                             return false;
>                     }
>                 }
>             } catch (Exception e) {
>                 return false;
>             }
>         } else if (type == Token.INC ||
>                    type == Token.DEC) {
>             int post1 = this.getIntProp(INCRDECR_PROP, 0);
>             int post2 = node.getIntProp(INCRDECR_PROP, 0);
>             if (post1 != post2)
>                 return false;
>         } else if (type == Token.STRING) {
>             int quoted1 = this.getIntProp(QUOTED_PROP, 0);
>             int quoted2 = node.getIntProp(QUOTED_PROP, 0);
>             if (quoted1 != quoted2)
>                 return false;
>         }
>         return true;
>     }
> 
>     public boolean hasSideEffects()
>     {
>         switch (type) {
>           case Token.EXPR_VOID:
>           case Token.COMMA:
>             if (last != null)
>                 return last.hasSideEffects();
>             else
>                 return true;
> 
>           case Token.HOOK:
>             if (first == null ||
>                 first.next == null ||
>                 first.next.next == null)
>                 Kit.codeBug();
>             return first.next.hasSideEffects() &&
>                    first.next.next.hasSideEffects();
> 
>           case Token.ERROR:         
>           case Token.EXPR_RESULT:
>           case Token.ASSIGN:
>           case Token.ASSIGN_ADD:
>           case Token.ASSIGN_SUB:
>           case Token.ASSIGN_MUL:
>           case Token.ASSIGN_DIV:
>           case Token.ASSIGN_MOD:
>           case Token.ASSIGN_BITOR:
>           case Token.ASSIGN_BITXOR:
>           case Token.ASSIGN_BITAND:
>           case Token.ASSIGN_LSH:
>           case Token.ASSIGN_RSH:
>           case Token.ASSIGN_URSH:
>           case Token.ENTERWITH:
>           case Token.LEAVEWITH:
>           case Token.RETURN:
>           case Token.GOTO:
>           case Token.IFEQ:
>           case Token.IFNE:
>           case Token.NEW:
>           case Token.DELPROP:
>           case Token.SETNAME:
>           case Token.SETPROP:
>           case Token.SETELEM:
>           case Token.CALL:
>           case Token.THROW:
>           case Token.RETHROW:
>           case Token.SETVAR:
>           case Token.CATCH_SCOPE:
>           case Token.RETURN_RESULT:
>           case Token.SET_REF:
>           case Token.DEL_REF:
>           case Token.REF_CALL:
>           case Token.TRY:
>           case Token.SEMI:
>           case Token.INC:
>           case Token.DEC:
>           case Token.EXPORT:
>           case Token.IMPORT:
>           case Token.IF:
>           case Token.ELSE:
>           case Token.SWITCH:
>           case Token.WHILE:
>           case Token.DO:
>           case Token.FOR:
>           case Token.BREAK:
>           case Token.CONTINUE:
>           case Token.VAR:
>           case Token.CONST:
>           case Token.WITH:
>           case Token.CATCH:
>           case Token.FINALLY:
>           case Token.BLOCK:
>           case Token.LABEL:
>           case Token.TARGET:
>           case Token.LOOP:
>           case Token.JSR:
>           case Token.SETPROP_OP:
>           case Token.SETELEM_OP:
>           case Token.LOCAL_BLOCK:
>           case Token.SET_REF_OP:
>             return true;
> 
>           default:
>             return false;
>         }
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     public String getQualifiedName() {
>         if (type == Token.NAME) {
>             return getString();
>         } else if (type == Token.GETPROP) {
>             String left = getFirstChild().getQualifiedName();
>             if (left == null) {
>               return null;
>             }
>             return left + "." + getLastChild().getString();
>         } else if (type == Token.THIS) {
>              return "this";
>         } else {
>             return null;
> 
>         }
> 
>     }
> 
>     
> 
> 
> 
>     public boolean isQualifiedName() {
>         switch (getType()) {
>             case Token.NAME:
>             case Token.THIS:
>                 return true;
>             case Token.GETPROP:
>                 return getFirstChild().isQualifiedName();
>             default:
>                 return false;
>         }
>     }
> 
>     
> 
> 
> 
> 
>     public boolean isUnscopedQualifiedName() {
>         switch (getType()) {
>             case Token.NAME:
>                 return true;
>             case Token.GETPROP:
>                 return getFirstChild().isUnscopedQualifiedName();
>             default:
>                 return false;
>         }
>     }
> 
>     
>     
> 
>     
> 
> 
> 
>     public Node detachFromParent() {
>       Preconditions.checkState(parent != null);
>       parent.removeChild(this);
>       return this;
>     }
> 
>     
> 
> 
> 
> 
>     public Node removeFirstChild() {
>       Node child = first;
>       if (child != null) {
>         removeChild(child);
>       }
>       return child;
>     }
> 
>     
> 
> 
>     public Node removeChildren() {
>       Node children = first;
>       for (Node child = first; child != null; child = child.getNext()) {
>         child.parent = null;
>       }
>       first = null;
>       last = null;
>       return children;
>     }
> 
>     
> 
> 
> 
>     public void detachChildren() {
>       for (Node child = first; child != null; ) {
>         Node nextChild = child.getNext();
>         child.parent = null;
>         child.next = null;
>         child = nextChild;
>       }
>       first = null;
>       last = null;
>     }
> 
>     public Node removeChildAfter(Node prev) {
>         Preconditions.checkArgument(prev.parent == this,
>             "prev is not a child of this node.");
>         Preconditions.checkArgument(prev.next != null,
>             "no next sibling.");
> 
>         Node child = prev.next;
>         prev.next = child.next;
>         if (child == last) last = prev;
>         child.next = null;
>         child.parent = null;
>         return child;
>     }
> 
>     
> 
> 
> 
>     public Node cloneNode() {
>         Node result;
>         try {
>             result = (Node) super.clone();
>             result.next = null;
>             result.first = null;
>             result.last = null;
>             result.parent = null;
>         }
>         catch (CloneNotSupportedException e) {
>             throw new RuntimeException(e.getMessage());
>         }
>         return result;
>     }
> 
>     
> 
> 
>     public Node cloneTree() {
>         Node result = cloneNode();
>         for (Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
>             Node n2clone = n2.cloneTree();
>             n2clone.parent = result;
>             if (result.last != null) {
>                 result.last.next = n2clone;
>             }
>             if (result.first == null) {
>                 result.first = n2clone;
>             }
>             result.last = n2clone;
>         }
>         return result;
>     }
> 
>     
> 
> 
> 
> 
>     public void copyInformationFrom(Node other) {
>         if (getProp(ORIGINALNAME_PROP) == null) {
>             putProp(ORIGINALNAME_PROP, other.getProp(ORIGINALNAME_PROP));
>         }
> 
>         if (getProp(SOURCEFILE_PROP) == null) {
>             putProp(SOURCEFILE_PROP, other.getProp(SOURCEFILE_PROP));
>             sourcePosition = other.sourcePosition;
>         }
>     }
> 
>     
>     
> 
>     public JSType getJSType() {
>         return jsType;
>     }
> 
>     public void setJSType(JSType jsType) {
>         this.jsType = jsType;
>     }
> 
>     public FileLevelJsDocBuilder getJsDocBuilderForNode() {
>       return new FileLevelJsDocBuilder();
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     public class FileLevelJsDocBuilder {
>       public void append(String fileLevelComment) {
>         JSDocInfo jsDocInfo = getJSDocInfo();
>         if (jsDocInfo == null) {
>           
>           
>           jsDocInfo = new JSDocInfo(false);
>         }
>         String license = jsDocInfo.getLicense();
>         if (license == null) {
>           license = "";
>         }
>         jsDocInfo.setLicense(license + fileLevelComment);
>         setJSDocInfo(jsDocInfo);
>       }
>     }
> 
>     
> 
> 
> 
> 
>     public JSDocInfo getJSDocInfo()
>     {
>         return (JSDocInfo) getProp(JSDOC_INFO_PROP);
>     }
> 
>     
> 
> 
>     public void setJSDocInfo(JSDocInfo info)
>     {
>         putProp(JSDOC_INFO_PROP, info);
>     }
> 
>     
> 
> 
> 
> 
>     public void setVarArgs(boolean varArgs)
>     {
>         putBooleanProp(VAR_ARGS_NAME, varArgs);
>     }
> 
>     
> 
> 
> 
> 
>     public boolean isVarArgs()
>     {
>         return getBooleanProp(VAR_ARGS_NAME);
>     }
> 
>     
> 
> 
> 
> 
>     public void setOptionalArg(boolean optionalArg)
>     {
>         putBooleanProp(OPT_ARG_NAME, optionalArg);
>     }
> 
>     
> 
> 
> 
> 
>     public boolean isOptionalArg()
>     {
>         return getBooleanProp(OPT_ARG_NAME);
>     }
> 
>     
> 
> 
> 
>     public void setIsSyntheticBlock(boolean val) {
>         putBooleanProp(SYNTHETIC_BLOCK_PROP, val);
>     }
> 
>     
> 
> 
> 
>     public boolean isSyntheticBlock() {
>         return getBooleanProp(SYNTHETIC_BLOCK_PROP);
>     }
> 
>     
> 
> 
>     public void setDirectives(Set<String> val) {
>         putProp(DIRECTIVES, val);
>     }
> 
>     
> 
> 
>     public Set<String> getDirectives() {
>         return (Set<String>) getProp(DIRECTIVES);
>     }
> 
>     
> 
> 
> 
>     public void setWasEmptyNode(boolean val) {
>         putBooleanProp(EMPTY_BLOCK, val);
>     }
> 
>     
> 
> 
> 
>     public boolean wasEmptyNode() {
>         return getBooleanProp(EMPTY_BLOCK);
>     }
> 
>     
> 
> 
> 
> 
>     public void setIsNoSideEffectsCall() {
>         Preconditions.checkArgument(
>            getType() == Token.CALL || getType() == Token.NEW,
>            "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " +
>            Token.name(getType()));
> 
>         putBooleanProp(NO_SIDE_EFFECTS_CALL, true);
>     }
> 
>     
> 
> 
> 
>     public boolean isNoSideEffectsCall() {
>         return getBooleanProp(NO_SIDE_EFFECTS_CALL);
>     }
> 
>     
> 
> 
>     public boolean isQuotedString() {
>         return false;
>     }
> 
>     
> 
> 
>     public void setQuotedString() {
>         Kit.codeBug();
>     }
> }
