1,18c1,104
< <!DOCTYPE HTML PUBLIC "-
< <!--NewPage-->
< <HTML>
< <HEAD>
< <!-- Generated by javadoc (build 1.6.0_0) on Fri Nov 06 21:19:45 EST 2009 -->
< <TITLE>
< SourceMap (Compiler)
< </TITLE>
< 
< <META NAME="date" CONTENT="2009-11-06">
< 
< <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../dev_javadoc.css" TITLE="Style">
< 
< <SCRIPT type="text/javascript">
< function windowTitle()
< {
<     if (location.href.indexOf('is-external=true') == -1) {
<         parent.document.title="SourceMap (Compiler)";
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> package com.google.javascript.jscomp;
> 
> import com.google.common.collect.Lists;
> import com.google.common.collect.Maps;
> import com.google.javascript.rhino.Node;
> 
> import java.io.IOException;
> 
> import java.util.Collection;
> import java.util.List;
> import java.util.Map;
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> public class SourceMap {
> 
>   
> 
> 
> 
>   static class Mapping {
>     
> 
> 
>     int id;
> 
>     
> 
> 
>     String sourceFile;
> 
>     
> 
> 
> 
> 
>     Position originalPosition;
> 
>     
> 
> 
> 
>     Position startPosition;
> 
>     
> 
> 
> 
>     Position endPosition;
> 
>     
> 
> 
> 
>     String originalName;
> 
>     
> 
> 
>     void appendTo(Appendable out) throws IOException {
>       out.append("[");
> 
>       out.append("\"");
>       out.append(sourceFile);
>       out.append("\"");
> 
>       out.append(",");
>       out.append(originalPosition.getLineNumber() + "");
> 
>       out.append(",");
>       out.append(originalPosition.getCharacterIndex() + "");
> 
>       if (originalName != null) {
>         out.append(",");
>         out.append("\"");
>         out.append(originalName);
>         out.append("\"");
>       }
> 
>       out.append("]");
20,279c106,368
< }
< </SCRIPT>
< <NOSCRIPT>
< </NOSCRIPT>
< 
< </HEAD>
< 
< <BODY BGCOLOR="white" onload="windowTitle();">
< <HR>
< 
< 
< <!-- ========= START OF TOP NAVBAR ======= -->
< <A NAME="navbar_top"><!-- --></A>
< <A HREF="#skip-navbar_top" title="Skip navigation links"></A>
< <TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
< <TR>
< <TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
< <A NAME="navbar_top_firstrow"><!-- --></A>
< <TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
<   <TR ALIGN="center" VALIGN="top">
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
<   </TR>
< </TABLE>
< </TD>
< <TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
< </EM>
< </TD>
< </TR>
< 
< <TR>
< <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
< &nbsp;<A HREF="../../../../com/google/javascript/jscomp/SourceFile.Generator.html" title="interface in com.google.javascript.jscomp"><B>PREV CLASS</B></A>&nbsp;
< &nbsp;<A HREF="../../../../com/google/javascript/jscomp/StrictWarningsGuard.html" title="class in com.google.javascript.jscomp"><B>NEXT CLASS</B></A></FONT></TD>
< <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
<   <A HREF="../../../../index.html?com/google/javascript/jscomp/SourceMap.html" target="_top"><B>FRAMES</B></A>  &nbsp;
< &nbsp;<A HREF="SourceMap.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
< &nbsp;<SCRIPT type="text/javascript">
<   <!--
<   if(window==top) {
<     document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
<   }
<   
< </SCRIPT>
< <NOSCRIPT>
<   <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
< </NOSCRIPT>
< 
< 
< </FONT></TD>
< </TR>
< <TR>
< <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
<   SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
< <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
< DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
< </TR>
< </TABLE>
< <A NAME="skip-navbar_top"></A>
< <!-- ========= END OF TOP NAVBAR ========= -->
< 
< <HR>
< <!-- ======== START OF CLASS DATA ======== -->
< <H2>
< <FONT SIZE="-1">
< com.google.javascript.jscomp</FONT>
< <BR>
< Class SourceMap</H2>
< <PRE>
< <A HREF="http:
<   <IMG SRC="../../../../resources/inherit.gif" ALT="extended by "><B>com.google.javascript.jscomp.SourceMap</B>
< </PRE>
< <HR>
< <DL>
< <DT><PRE>public class <B>SourceMap</B><DT>extends <A HREF="http:
< </PRE>
< 
< <P>
< Collects information mapping the generated (compiled) source back to
<  its original source for debugging purposes.
< <P>
< 
< <P>
< <DL>
< <DT><B>See Also:</B><DD><CODE>CodeConsumer</CODE>, 
< <CODE>CodeGenerator</CODE>, 
< <CODE>CodePrinter</CODE></DL>
< <HR>
< 
< <P>
< 
< <!-- ======== CONSTRUCTOR SUMMARY ======== -->
< 
< <A NAME="constructor_summary"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
< <B>Constructor Summary</B></FONT></TH>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/SourceMap.html#SourceMap()">SourceMap</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< </TABLE>
< &nbsp;
< <!-- ========== METHOD SUMMARY =========== -->
< 
< <A NAME="method_summary"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
< <B>Method Summary</B></FONT></TH>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/SourceMap.html#appendTo(java.lang.Appendable, java.lang.String)">appendTo</A></B>(<A HREF="http:
<          <A HREF="http:
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Appends the source map in LavaBug format to the given buffer.</TD>
< </TR>
< </TABLE>
< &nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
< <TH ALIGN="left"><B>Methods inherited from class java.lang.<A HREF="http:
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD><CODE><A HREF="http:
< </TR>
< </TABLE>
< &nbsp;
< <P>
< 
< <!-- ========= CONSTRUCTOR DETAIL ======== -->
< 
< <A NAME="constructor_detail"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
< <B>Constructor Detail</B></FONT></TH>
< </TR>
< </TABLE>
< 
< <A NAME="SourceMap()"><!-- --></A><H3>
< SourceMap</H3>
< <PRE>
< public <B>SourceMap</B>()</PRE>
< <DL>
< </DL>
< 
< <!-- ============ METHOD DETAIL ========== -->
< 
< <A NAME="method_detail"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
< <B>Method Detail</B></FONT></TH>
< </TR>
< </TABLE>
< 
< <A NAME="appendTo(java.lang.Appendable, java.lang.String)"><!-- --></A><H3>
< appendTo</H3>
< <PRE>
< public void <B>appendTo</B>(<A HREF="http:
<                      <A HREF="http:
<               throws <A HREF="http:
< <DL>
< <DD>Appends the source map in LavaBug format to the given buffer.
< <P>
< <DD><DL>
< <DT><B>Parameters:</B><DD><CODE>out</CODE> - The stream to which the map will be appended.<DD><CODE>name</CODE> - The name of the generated source file that this source map
<    represents.
< <DT><B>Throws:</B>
< <DD><CODE><A HREF="http:
< </DD>
< </DL>
< <!-- ========= END OF CLASS DATA ========= -->
< <HR>
< 
< 
< <!-- ======= START OF BOTTOM NAVBAR ====== -->
< <A NAME="navbar_bottom"><!-- --></A>
< <A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
< <TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
< <TR>
< <TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
< <A NAME="navbar_bottom_firstrow"><!-- --></A>
< <TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
<   <TR ALIGN="center" VALIGN="top">
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
<   </TR>
< </TABLE>
< </TD>
< <TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
< </EM>
< </TD>
< </TR>
< 
< <TR>
< <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
< &nbsp;<A HREF="../../../../com/google/javascript/jscomp/SourceFile.Generator.html" title="interface in com.google.javascript.jscomp"><B>PREV CLASS</B></A>&nbsp;
< &nbsp;<A HREF="../../../../com/google/javascript/jscomp/StrictWarningsGuard.html" title="class in com.google.javascript.jscomp"><B>NEXT CLASS</B></A></FONT></TD>
< <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
<   <A HREF="../../../../index.html?com/google/javascript/jscomp/SourceMap.html" target="_top"><B>FRAMES</B></A>  &nbsp;
< &nbsp;<A HREF="SourceMap.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
< &nbsp;<SCRIPT type="text/javascript">
<   <!--
<   if(window==top) {
<     document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
<   }
<   
< </SCRIPT>
< <NOSCRIPT>
<   <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
< </NOSCRIPT>
< 
< 
< </FONT></TD>
< </TR>
< <TR>
< <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
<   SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
< <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
< DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
< </TR>
< </TABLE>
< <A NAME="skip-navbar_bottom"></A>
< <!-- ======== END OF BOTTOM NAVBAR ======= -->
< 
< <HR>
< 
<         <div id="footer">
<           <div id="footerlogo">
<             <img src="http:
<                  alt="Google colored balls">
<           </div>
< 
<           <div id="copyright">
<           <p>&copy; 2009 Google -
<             <a href="http:
<             <a href="http:
<             <a href="http:
<           </p>
<           </div>
<         </div>
---
>   }
> 
> 
>   
> 
> 
>   private static class LineMapping {
>     
> 
> 
>     List<String> files = Lists.newArrayList();
> 
>     
> 
> 
>     int lineNumber;
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     int length;
> 
>     
> 
> 
> 
>     List<LineCharMapping> characterMappings = Lists.newArrayList();
> 
>     
> 
> 
> 
> 
>     Map<Integer, LineCharMapping> charToMap = Maps.newHashMap();
> 
>     
> 
> 
> 
>     void appendCharMapTo(Appendable out) throws IOException {
>       out.append("[");
> 
>       for (int j = 0; j <= length; ++j) {
>         if (j > 0) {
>           out.append(",");
>         }
> 
>         LineCharMapping current = charToMap.get(j);
> 
>         if (current == null) {
>           out.append("-1");
>         } else {
>           out.append(current.basisMapping.id + "");
>         }
>       }
> 
>       out.append("]");
>     }
> 
>     
> 
> 
> 
>     void appendFileMapTo(Appendable out) throws IOException {
>       out.append("[");
> 
>       for (int j = 0; j < files.size(); ++j) {
>         if (j > 0) {
>           out.append(",");
>         }
> 
>         out.append("\"");
>         out.append(files.get(j));
>         out.append("\"");
>       }
> 
>       out.append("]");
>     }
>   }
> 
>   
> 
> 
> 
>   private static class LineCharMapping {
>     
> 
> 
>     int startCharacter;
> 
>     
> 
> 
>     int endCharacter;
> 
>     
> 
> 
> 
>     Mapping basisMapping;
>   }
> 
>   
> 
> 
>   private List<Mapping> mappings = Lists.newArrayList();
> 
>   
> 
> 
> 
>   private Position offsetPosition = new Position(0, 0);
> 
>   
> 
> 
> 
> 
>   private Position prefixPosition = new Position(0, 0);
> 
>   
> 
> 
> 
> 
> 
> 
>   void addMapping(Node node, Position startPosition, Position endPosition) {
>     Object sourceFile = node.getProp(Node.SOURCEFILE_PROP);
> 
>     
>     
>     
>     if (sourceFile == null || node.getLineno() < 0) {
>       return;
>     }
> 
>     
>     Mapping mapping = new Mapping();
>     mapping.id = mappings.size();
>     mapping.sourceFile = sourceFile.toString();
>     mapping.originalPosition = new Position(node.getLineno(), node.getCharno());
> 
>     Object originalName = node.getProp(Node.ORIGINALNAME_PROP);
> 
>     if (originalName != null) {
>       mapping.originalName = originalName.toString();
>     }
> 
>     
>     
>     
>     
>     int offsetLine = offsetPosition.getLineNumber();
>     int startOffsetPosition = offsetPosition.getCharacterIndex();
>     int endOffsetPosition = offsetPosition.getCharacterIndex();
> 
>     if (startPosition.getLineNumber() > 0) {
>       startOffsetPosition = 0;
>     }
> 
>     if (endPosition.getLineNumber() > 0) {
>       endOffsetPosition = 0;
>     }
> 
>     mapping.startPosition =
>         new Position(startPosition.getLineNumber() + offsetLine,
>                      startPosition.getCharacterIndex() + startOffsetPosition);
> 
>     mapping.endPosition =
>         new Position(endPosition.getLineNumber() + offsetLine,
>                      endPosition.getCharacterIndex() + endOffsetPosition);
> 
>     mappings.add(mapping);
>   }
> 
>   
> 
> 
> 
> 
> 
> 
>   void setWrapperPrefix(String prefix) {
>     
>     int prefixLine = 0;
>     int prefixIndex = 0;
> 
>     for (int i = 0; i < prefix.length(); ++i) {
>       if (prefix.charAt(i) == '\n') {
>         prefixLine++;
>         prefixIndex = 0;
>       } else {
>         prefixIndex++;
>       }
>     }
> 
>     prefixPosition = new Position(prefixLine, prefixIndex);
>   }
> 
>   
> 
> 
> 
> 
> 
> 
> 
> 
> 
>   void setStartingPosition(int offsetLine, int offsetIndex) {
>     offsetPosition = new Position(offsetLine, offsetIndex);
>   }
> 
>   
> 
> 
>   void reset() {
>     mappings = Lists.newArrayList();
>     offsetPosition = new Position(0, 0);
>     prefixPosition = new Position(0, 0);
>   }
> 
>   
> 
> 
>   private static class LineMappingInformation {
>     Map<Integer, LineMapping> mappings;
>     int maxLine;
> 
>     public LineMappingInformation(Map<Integer, LineMapping> mappings,
>                                   int maxLine) {
>       this.maxLine = maxLine;
>       this.mappings = mappings;
>     }
>   }
> 
>   
> 
> 
> 
> 
> 
>   private LineMappingInformation determineLineMappings() {
>     int maxLine = 0;
>     Map<Integer, LineMapping> lineMappings = Maps.newHashMap();
> 
>     for (Mapping mapping : mappings) {
>       int prefixLine = prefixPosition.getLineNumber();
> 
>       int startPositionLine =
>           prefixLine + mapping.startPosition.getLineNumber();
> 
>       int endPositionLine = prefixLine + mapping.endPosition.getLineNumber();
> 
>       
>       maxLine = Math.max(maxLine, endPositionLine);
> 
282,283c371,585
< </BODY>
< </HTML>
---
>       for (int i = startPositionLine; i <= endPositionLine; ++i) {
>         LineMapping lineMapping = lineMappings.get(i);
> 
>         
>         if (lineMapping == null) {
>           lineMapping = new LineMapping();
>           lineMapping.lineNumber = i;
>           lineMappings.put(i, lineMapping);
>         }
> 
>         int startCharacter = mapping.startPosition.getCharacterIndex();
> 
>         
>         
>         
>         if (mapping.startPosition.getLineNumber() == 0) {
>           startCharacter += prefixPosition.getCharacterIndex();
>         }
> 
>         int endCharacter = mapping.endPosition.getCharacterIndex();
> 
>         if (mapping.endPosition.getLineNumber() == 0) {
>           endCharacter += prefixPosition.getCharacterIndex();
>         }
> 
>         
>         lineMapping.length = Math.max(lineMapping.length, endCharacter);
> 
>         
>         
>         if (i > startPositionLine) {
>           startCharacter = 0;
>         }
> 
>         
>         
>         if (i < endPositionLine) {
>           endCharacter = Integer.MAX_VALUE;
>         }
> 
>         
>         LineCharMapping lcm = new LineCharMapping();
>         lcm.startCharacter = startCharacter;
>         lcm.endCharacter = endCharacter;
>         lcm.basisMapping = mapping;
> 
>         if (!lineMapping.files.contains(mapping.sourceFile)) {
>           lineMapping.files.add(mapping.sourceFile);
>         }
> 
>         lineMapping.characterMappings.add(lcm);
>       }
>     }
> 
>     return new LineMappingInformation(lineMappings, maxLine);
>   }
> 
> 
>   
> 
> 
> 
> 
> 
> 
> 
> 
>   private void buildCharacterMappings(Collection<LineMapping> lineMappings) {
>     for (LineMapping lineMapping : lineMappings) {
>       for (int i = 0; i <= lineMapping.length; ++i) {
>         int minLength = Integer.MAX_VALUE;
>         LineCharMapping current = null;
> 
>         for (LineCharMapping lcm : lineMapping.characterMappings) {
>           
>           if (i < lcm.startCharacter || i > lcm.endCharacter) {
>             continue;
>           }
> 
>           int lcmLength = lcm.endCharacter - lcm.startCharacter;
> 
>           if (lcmLength < minLength) {
>             minLength = lcmLength;
>             current = lcm;
>           }
>         }
> 
>         lineMapping.charToMap.put(i, current);
>       }
>     }
>   }
> 
>   
> 
> 
>   Mapping getMappingFor(Position position) {
>     
>     LineMappingInformation info = determineLineMappings();
>     Map<Integer, LineMapping> lineMappings = info.mappings;
> 
>     
>     buildCharacterMappings(lineMappings.values());
> 
>     LineMapping lineMapping = lineMappings.get(position.getLineNumber());
> 
>     if (lineMapping == null) {
>       return null;
>     }
> 
>     LineCharMapping lcm =
>         lineMapping.charToMap.get(position.getCharacterIndex());
> 
> 
>     if (lcm == null) {
>       return null;
>     }
> 
>     return lcm.basisMapping;
>   }
> 
>   
> 
> 
> 
> 
> 
> 
>   public void appendTo(Appendable out, String name) throws IOException {
>     
>     LineMappingInformation info = determineLineMappings();
> 
>     Map<Integer, LineMapping> lineMappings = info.mappings;
>     int maxLine = info.maxLine;
> 
>     
>     buildCharacterMappings(lineMappings.values());
> 
>     
>     
>     
>     
>     
>     
>     
>     
>     
>     
>     
>     
>     
>     
>     
>     
>     
>     
>     
>     
>     
>     
>     
>     
>     
>     
>     
>     
>     
>     
>     
>     
>     
> 
>     
>     out.append("{ \"file\" : \"");
>     out.append(name);
>     out.append("\", \"count\": ");
>     out.append((maxLine + 1) + "");
>     out.append(" }\n");
> 
>     for (int i = 0; i <= maxLine; ++i) {
>       LineMapping lineMapping = lineMappings.get(i);
> 
>       if (lineMapping == null) {
>         out.append("[]");
>       } else {
>         lineMapping.appendCharMapTo(out);
>       }
> 
>       out.append("\n");
>     }
> 
>     
>     out.append("\n");
> 
>     for (int i = 0; i <= maxLine; ++i) {
>       LineMapping lineMapping = lineMappings.get(i);
> 
>       if (lineMapping == null) {
>         out.append("[]");
>       } else {
>         lineMapping.appendFileMapTo(out);
>       }
> 
>       out.append("\n");
>     }
> 
>     
>     out.append("\n");
> 
>     for (int i = 0; i < mappings.size(); ++i) {
>       Mapping mapping = mappings.get(i);
>       mapping.appendTo(out);
>       out.append("\n");
>     }
>   }
> }
