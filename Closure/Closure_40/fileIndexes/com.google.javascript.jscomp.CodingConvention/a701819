














package com.google.javascript.jscomp;

import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ObjectType;

import java.util.List;
import java.util.Map;










public interface CodingConvention {

  






  public boolean isConstant(String variableName);

  






  public boolean isValidEnumKey(String key);

  










  public boolean isOptionalParameter(Node parameter);

  








  public boolean isVarArgsParameter(Node parameter);

  






  public boolean isExported(String name);

  









  public boolean isPrivate(String name);

  






  public SubclassRelationship getClassesDefinedByCall(Node callNode);

  




  public boolean isSuperClassReference(String propertyName);

  



  public String extractClassNameIfProvide(Node node, Node parent);

  



  public String extractClassNameIfRequire(Node node, Node parent);

  




  public String getExportPropertyFunction();

  




  public String getExportSymbolFunction();

  



  public List<String> identifyTypeDeclarationCall(Node n);

  



  public String identifyTypeDefAssign(Node n);

  



  public void applySubclassRelationship(FunctionType parentCtor,
      FunctionType childCtor, SubclassType type);

  






  public String getAbstractMethodName();

  






  public String getSingletonGetterClassName(Node callNode);

  



  public void applySingletonGetter(FunctionType functionType,
      FunctionType getterType, ObjectType objectType);

  public DelegateRelationship getDelegateRelationship(Node callNode);

  



  public void applyDelegateRelationship(
      ObjectType delegateSuperclass, ObjectType delegateBase,
      ObjectType delegator, FunctionType delegateProxy,
      FunctionType findDelegate);

  


  public String getDelegateSuperclassName();

  



  public void defineDelegateProxyProperties(
      JSTypeRegistry registry, Scope scope,
      Map<ObjectType, ObjectType> delegateProxyMap);

  


  public String getGlobalObject();

  public boolean allowsVariableRedeclaration(Scope scope, String name,
      Node parent);

  


  public boolean isPropertyTestFunction(Node call);

  







  public ObjectLiteralCast getObjectLiteralCast(NodeTraversal t,
      Node callNode);

  static enum SubclassType {
    INHERITS,
    MIXIN
  }

  static class SubclassRelationship {
    final SubclassType type;
    final Node subclassNode;
    final Node superclassNode;
    final String subclassName;
    final String superclassName;

    SubclassRelationship(SubclassType type,
        Node subclassNode, Node superclassNode) {
      this.type = type;
      this.subclassNode = subclassNode;
      this.superclassNode = superclassNode;
      this.subclassName = subclassNode.getQualifiedName();
      this.superclassName = superclassNode.getQualifiedName();
    }
  }

  





  static class DelegateRelationship {
    
    final String delegateBase;

    
    final String delegator;

    DelegateRelationship(String delegateBase, String delegator) {
      this.delegateBase = delegateBase;
      this.delegator = delegator;
    }
  }

  



  static class ObjectLiteralCast {
    
    final String typeName;

    
    final Node objectNode;

    ObjectLiteralCast(String typeName, Node objectNode) {
      this.typeName = typeName;
      this.objectNode = objectNode;
    }
  }
}
