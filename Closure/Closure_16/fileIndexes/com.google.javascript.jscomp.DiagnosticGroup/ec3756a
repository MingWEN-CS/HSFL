















package com.google.javascript.jscomp;

import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Maps;
import com.google.common.collect.Sets;

import java.util.Arrays;
import java.util.Collection;
import java.util.Map;
import java.util.Set;






public class DiagnosticGroup {

  
  private final Set<DiagnosticType> types;

  


  public DiagnosticGroup(DiagnosticType ...types) {
    this.types = ImmutableSet.copyOf(Arrays.asList(types));
  }

  


  private DiagnosticGroup(DiagnosticType type) {
    this.types = ImmutableSet.of(type);
  }

  
  private static final Map<DiagnosticType, DiagnosticGroup> singletons =
      Maps.newHashMap();

  
  static DiagnosticGroup forType(DiagnosticType type) {
    if (!singletons.containsKey(type)) {
      singletons.put(type, new DiagnosticGroup(type));
    }
    return singletons.get(type);
  }

  


  public DiagnosticGroup(DiagnosticGroup ...groups) {
    Set<DiagnosticType> set = Sets.newHashSet();

    for (DiagnosticGroup group : groups) {
      set.addAll(group.types);
    }

    this.types = ImmutableSet.copyOf(set);
  }

  



  public boolean matches(JSError error) {
    return matches(error.getType());
  }

  


  public boolean matches(DiagnosticType type) {
    return types.contains(type);
  }

  


  boolean isSubGroup(DiagnosticGroup group) {
    for (DiagnosticType type : group.types) {
      if (!matches(type)) {
        return false;
      }
    }
    return true;
  }

  


  Collection<DiagnosticType> getTypes() {
    return types;
  }
}
