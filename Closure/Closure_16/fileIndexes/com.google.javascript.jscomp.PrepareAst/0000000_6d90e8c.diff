1a2,228
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> package com.google.javascript.jscomp;
> 
> import com.google.common.base.Preconditions;
> import com.google.javascript.rhino.JSDocInfo;
> import com.google.javascript.rhino.JSTypeExpression;
> import com.google.javascript.rhino.Node;
> import com.google.javascript.rhino.Token;
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> class PrepareAst implements CompilerPass {
> 
>   private final AbstractCompiler compiler;
>   private final boolean assertOnChange;
> 
>   PrepareAst(AbstractCompiler compiler) {
>     this(compiler, false);
>   }
> 
>   PrepareAst(AbstractCompiler compiler, boolean forbidChanges) {
>     this.compiler = compiler;
>     this.assertOnChange = forbidChanges;
>   }
> 
>   private void reportChange() {
>     if (assertOnChange) {
>       Preconditions.checkState(false, "normalizeNodeType constraints violated");
>     }
>   }
> 
>   @Override
>   public void process(Node externs, Node root) {
>     normalizeNodeTypes(root);
>     if (externs != null) {
>       NodeTraversal.traverse(
>           compiler, externs, new PrepareAnnotations(compiler));
>     }
>     if (root != null) {
>       NodeTraversal.traverse(
>           compiler, root, new PrepareAnnotations(compiler));
>     }
>   }
> 
>   
> 
> 
>   private void normalizeNodeTypes(Node n) {
>     if (n.getType() == Token.EXPR_VOID) {
>       n.setType(Token.EXPR_RESULT);
>       reportChange();
>     }
> 
>     
>     
>     if (n.getType() == Token.FUNCTION) {
>       Preconditions.checkState(n.getProp(Node.FUNCTION_PROP) == null);
>     }
> 
>     normalizeBlocks(n);
> 
>     for (Node child = n.getFirstChild();
>          child != null; child = child.getNext()) {
>       
>       
>       Preconditions.checkState(child.getParent() == n);
> 
>       normalizeNodeTypes(child);
>     }
>   }
> 
>   
> 
> 
>   private void normalizeBlocks(Node n) {
>     if (NodeUtil.isControlStructure(n)
>         && n.getType() != Token.LABEL
>         && n.getType() != Token.SWITCH) {
>       for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
>         if (NodeUtil.isControlStructureCodeBlock(n,c) &&
>             c.getType() != Token.BLOCK) {
>           Node newBlock = new Node(Token.BLOCK);
>           n.replaceChild(c, newBlock);
>           if (c.getType() != Token.EMPTY) {
>             newBlock.addChildrenToFront(c);
>           } else {
>             newBlock.setWasEmptyNode(true);
>           }
>           c = newBlock;
>           reportChange();
>         }
>       }
>     }
>   }
> 
>   
> 
> 
> 
>   static class PrepareAnnotations
>       extends NodeTraversal.AbstractPostOrderCallback {
> 
>     private final AbstractCompiler compiler;
>     private final CodingConvention convention;
> 
>     PrepareAnnotations(AbstractCompiler compiler) {
>       this.compiler = compiler;
>       this.convention = compiler.getCodingConvention();
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public void visit(NodeTraversal t, Node n, Node parent) {
>       int nType = n.getType();
>       switch (nType) {
>         case Token.NAME:
>         case Token.STRING:
>           String nString = n.getString();
>           if (nType == Token.NAME &&
>               n.getParent().getType() == Token.CALL &&
>               "eval".equals(nString)) {
>             n.putBooleanProp(Node.DIRECT_EVAL, true);
>           }
>           if (convention.isConstant(nString)) {
>             n.putBooleanProp(Node.IS_CONSTANT_NAME, true);
>           }
>           break;
> 
>         case Token.FUNCTION:
>           JSDocInfo fnInfo = n.getJSDocInfo();
>           if (fnInfo == null) {
>             
>             if (parent.getType() == Token.ASSIGN) {
>               
>               fnInfo = parent.getJSDocInfo();
>             } else if (parent.getType() == Token.NAME) {
>               
>               fnInfo = parent.getParent().getJSDocInfo();
>             }
>           }
> 
>           
>           
>           Node args = n.getFirstChild().getNext();
>           for (Node arg = args.getFirstChild();
>                arg != null;
>                arg = arg.getNext()) {
>             String argName = arg.getString();
>             JSTypeExpression typeExpr = fnInfo == null ?
>                 null : fnInfo.getParameterType(argName);
> 
>             if (convention.isOptionalParameter(arg) ||
>                 typeExpr != null && typeExpr.isOptionalArg()) {
>               arg.putBooleanProp(Node.IS_OPTIONAL_PARAM, true);
>             }
>             if (convention.isVarArgsParameter(arg) ||
>                 typeExpr != null && typeExpr.isVarArgs()) {
>               arg.putBooleanProp(Node.IS_VAR_ARGS_PARAM, true);
>             }
>           }
>           break;
> 
>         case Token.OBJECTLIT:
>           if (n.getType() == Token.OBJECTLIT) {
>             for (Node key = n.getFirstChild();
>                  key != null; key = key.getNext().getNext()) {
>               Node value = key.getNext();
>               if (key.getJSDocInfo() != null &&
>                   key.getNext().getType() == Token.FUNCTION) {
>                 value.setJSDocInfo(key.getJSDocInfo());
>               }
>             }
>           }
>           break;
>       }
> 
>       
>       
>       
> 
> 
>       if (n.getJSDocInfo() != null && n.getJSDocInfo().isJavaDispatch()) {
>         if (n.getType() == Token.ASSIGN) {
>           Node fnNode = n.getLastChild();
>           Preconditions.checkState(fnNode.getType() == Token.FUNCTION);
>           fnNode.putBooleanProp(Node.IS_DISPATCHER, true);
>         }
>       }
>     }
>   }
> }
