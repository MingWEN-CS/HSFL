















package com.google.javascript.jscomp;

import com.google.common.collect.Lists;
import com.google.common.collect.Sets;
import com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec;
import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;
import com.google.javascript.jscomp.NodeTraversal.Callback;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.Token;

import java.util.List;
import java.util.Set;




















final class ClosureCodeRemoval implements CompilerPass {

  
  private final AbstractCompiler compiler;

  
  static final String ABSTRACT_METHOD_NAME = "goog.abstractMethod";

  private final boolean removeAbstractMethods;
  private final boolean removeAssertionCalls;

  



  private final List<RemovableAssignment> abstractMethodAssignmentNodes =
      Lists.newArrayList();

  


  private final List<Node> assertionCalls = Lists.newArrayList();


  


  private class RemovableAssignment {
    


    final Node node;

    


    final Node parent;

    


    final List<Node> assignAncestors = Lists.newArrayList();

    


    final Node lastAncestor;

    






    public RemovableAssignment(Node nameNode, Node assignNode,
        NodeTraversal traversal) {
      this.node = nameNode;
      this.parent = assignNode;

      Node ancestor = assignNode;
      do {
        ancestor = ancestor.getParent();
        assignAncestors.add(ancestor);
      } while (ancestor.getType() == Token.ASSIGN &&
               ancestor.getFirstChild().isQualifiedName());
      lastAncestor = ancestor.getParent();
    }

    


    public void remove() {
      Node rhs = node.getNext();
      Node last = parent;
      for (Node ancestor : assignAncestors) {
        if (NodeUtil.isExpressionNode(ancestor)) {
          lastAncestor.removeChild(ancestor);
        } else {
          rhs.detachFromParent();
          ancestor.replaceChild(last, rhs);
        }
        last = ancestor;
      }
      compiler.reportCodeChange();
    }
  }

  


  private class FindAbstractMethods extends AbstractPostOrderCallback {
    @Override
    public void visit(NodeTraversal t, Node n, Node parent) {
      if (n.getType() == Token.ASSIGN) {
        Node nameNode = n.getFirstChild();
        Node valueNode = n.getLastChild();

        if (nameNode.isQualifiedName() &&
            valueNode.isQualifiedName() &&
            ABSTRACT_METHOD_NAME.equals(valueNode.getQualifiedName())) {
          abstractMethodAssignmentNodes.add(new RemovableAssignment(
              n.getFirstChild(), n, t));
        }
      }
    }
  }


  


  private class FindAssertionCalls extends AbstractPostOrderCallback {
    Set<String> assertionNames = Sets.newHashSet();

    FindAssertionCalls() {
      for (AssertionFunctionSpec spec :
               compiler.getCodingConvention().getAssertionFunctions()) {
        assertionNames.add(spec.getFunctionName());
      }
    }


    @Override
    public void visit(NodeTraversal t, Node n, Node parent) {
      if (n.getType() == Token.CALL) {
        String fnName = n.getFirstChild().getQualifiedName();
        if (assertionNames.contains(fnName)) {
          assertionCalls.add(n);
        }
      }
    }
  }


  






  ClosureCodeRemoval(AbstractCompiler compiler, boolean removeAbstractMethods,
                     boolean removeAssertionCalls) {
    this.compiler = compiler;
    this.removeAbstractMethods = removeAbstractMethods;
    this.removeAssertionCalls = removeAssertionCalls;
  }

  @Override
  public void process(Node externs, Node root) {
    List<Callback> passes = Lists.newArrayList();
    if (removeAbstractMethods) {
      passes.add(new FindAbstractMethods());
    }
    if (removeAssertionCalls) {
      passes.add(new FindAssertionCalls());
    }
    CombinedCompilerPass.traverse(compiler, root, passes);

    for (RemovableAssignment assignment : abstractMethodAssignmentNodes) {
      assignment.remove();
    }

    for (Node call : assertionCalls) {
      
      Node parent = call.getParent();
      if (NodeUtil.isExpressionNode(parent)) {
        parent.getParent().removeChild(parent);
      } else {
        
        
        Node firstArg = call.getFirstChild().getNext();
        if (firstArg == null) {
          parent.replaceChild(call, NodeUtil.newUndefinedNode(call));
        } else {
          parent.replaceChild(call, firstArg.detachFromParent());
        }
      }
      compiler.reportCodeChange();
    }
  }
}
