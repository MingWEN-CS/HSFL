597c597,599
<       case Token.NE: {
---
>       case Token.NE:
>       case Token.SHEQ:
>       case Token.SHNE: {
600a603,611
>         
>         
>         
>         
>         
>         
>         
>         
>         
603,605c614,618
<         TernaryValue result =
<             leftTypeRestricted.testForEquality(rightTypeRestricted);
<         if (result != TernaryValue.UNKNOWN) {
---
> 
>         TernaryValue result = TernaryValue.UNKNOWN;
>         if (n.getType() == Token.EQ || n.getType() == Token.NE) {
>           result = leftTypeRestricted.testForEquality(
>               rightTypeRestricted);
609,610c622,628
<           report(t, n, DETERMINISTIC_TEST, leftType.toString(),
<               rightType.toString(), result.toString());
---
>         } else {
>           
>           if (!leftTypeRestricted.canTestForShallowEqualityWith(
>                   rightTypeRestricted)) {
>             result = n.getType() == Token.SHEQ ?
>                 TernaryValue.FALSE : TernaryValue.TRUE;
>           }
612,614d629
<         ensureTyped(t, n, BOOLEAN_TYPE);
<         break;
<       }
616,626c631,633
<       case Token.SHEQ:
<       case Token.SHNE: {
<         leftType = getJSType(n.getFirstChild());
<         rightType = getJSType(n.getLastChild());
< 
<         JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
<         JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
<         if (!leftTypeRestricted.canTestForShallowEqualityWith(
<                 rightTypeRestricted)) {
<           report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(),
<               rightType.toString());
---
>         if (result != TernaryValue.UNKNOWN) {
>           report(t, n, DETERMINISTIC_TEST, leftType.toString(),
>               rightType.toString(), result.toString());
