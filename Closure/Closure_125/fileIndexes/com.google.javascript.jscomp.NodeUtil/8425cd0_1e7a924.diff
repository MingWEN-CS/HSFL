194a195
> 
216a218,250
> 
>       case Token.NEG:
>         if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.NAME
>             && n.getFirstChild().getString().equals("Infinity")) {
>           return Double.NEGATIVE_INFINITY;
>         }
>         return null;
> 
>       case Token.STRING:
>         
>         
>         String s = n.getString();
> 
>         if (s.length() == 0) {
>           return 0.0;
>         }
> 
>         if (s.length() > 2
>             && s.charAt(0) == '0'
>             && (s.charAt(1) == 'x' || s.charAt(1) == 'X')) {
>             
>           try {
>             return Double.valueOf(Integer.parseInt(s.substring(2), 16));
>           } catch (NumberFormatException e) {
>             return null;
>           }
>         }
> 
>         try {
>           return Double.parseDouble(s);
>         } catch (NumberFormatException e) {
>           return null;
>         }
217a252
> 
981a1017,1106
>   }
> 
>   
> 
> 
>   static boolean isNumericResult(Node n) {
>     switch (n.getType()) {
>       
>       
>       case Token.BITNOT:
>       case Token.BITOR:
>       case Token.BITXOR:
>       case Token.BITAND:
>       case Token.LSH:
>       case Token.RSH:
>       case Token.URSH:
>       case Token.SUB:
>       case Token.MUL:
>       case Token.MOD:
>       case Token.DIV:
>       case Token.INC:
>       case Token.DEC:
>       case Token.POS:
>       case Token.NEG:
>       case Token.NUMBER:
>         return true;
>       case Token.NAME:
>         String name = n.getString();
>         if (name.equals("NaN")) {
>           return true;
>         }
>         if (name.equals("Infinity")) {
>           return true;
>         }
>         return false;
>       default:
>         return false;
>     }
>   }
> 
>   
> 
> 
>   static boolean isBooleanResult(Node n) {
>     
>     
>     switch (n.getType()) {
>       
>       case Token.TRUE:
>       case Token.FALSE:
>       
>       case Token.EQ:
>       case Token.NE:
>       case Token.SHEQ:
>       case Token.SHNE:
>       case Token.LT:
>       case Token.GT:
>       case Token.LE:
>       case Token.GE:
>       
>       case Token.IN:
>       case Token.INSTANCEOF:
>       
>       case Token.NOT:
>         return true;
>       default:
>         return false;
>     }
>   }
> 
>   static boolean isUndefined(Node n) {
>     switch (n.getType()) {
>       case Token.VOID:
>         return true;
>       case Token.NAME:
>         return n.getString().equals("undefined");
>     }
>     return false;
>   }
> 
>   static boolean isNull(Node n) {
>     return n.getType() == Token.NULL;
>   }
> 
>   
> 
> 
>   static boolean mayBeString(Node n) {
>     return !isNumericResult(n) && !isBooleanResult(n)
>         && !isUndefined(n) && !isNull(n);
