23a24
> import com.google.common.collect.Lists;
83,232c84
<   @FlagSpec(help = "Prints out the parse tree and exits",
<       docLevel = DocLevel.SECRET)
<   static final Flag<Boolean> FLAG_print_tree = Flag.value(false);
< 
<   @FlagSpec(help = "Runs the compile job many times, then prints out the " +
<       "best phase ordering from this run",
<       docLevel = DocLevel.SECRET)
<   static final Flag<Boolean> FLAG_compute_phase_ordering =
<       Flag.value(false);
< 
<   @FlagSpec(help = "Prints a dot file describing the internal abstract syntax"
<       + " tree and exits",
<       docLevel = DocLevel.SECRET)
<   static final Flag<Boolean> FLAG_print_ast = Flag.value(false);
< 
<   @FlagSpec(help = "Prints a dot file describing the passes that will get run"
<       + " and exits",
<       docLevel = DocLevel.SECRET)
<   static final Flag<Boolean> FLAG_print_pass_graph = Flag.value(false);
< 
<   @FlagSpec(help = "Turns on extra sanity checks", altName = "dev_mode",
<       docLevel = DocLevel.SECRET)
<   static final Flag<CompilerOptions.DevMode> FLAG_jscomp_dev_mode =
<       Flag.value(CompilerOptions.DevMode.OFF);
< 
<   
<   @FlagSpec(help = "The logging level (standard java.util.logging.Level"
<       + " values) for Compiler progress. Does not control errors or"
<       + " warnings for the JavaScript code under compilation",
<       docLevel = DocLevel.SECRET)
<   public static final Flag<String> FLAG_logging_level =
<       Flag.value(Level.WARNING.getName());
< 
<   @FlagSpec(help = "The file containing javascript externs. You may specify"
<       + " multiple")
<   public static final Flag<List<String>> FLAG_externs = Flag.stringCollector();
< 
<   @FlagSpec(help = "The javascript filename. You may specify multiple")
<   static final Flag<List<String>> FLAG_js = Flag.stringCollector();
< 
<   @FlagSpec(help = "Primary output filename. If not specified, output is " +
<             "written to stdout")
<   static final Flag<String> FLAG_js_output_file = Flag.value("");
< 
<   @FlagSpec(help = "A javascript module specification. The format is "
<       + "<name>:<num-js-files>[:[<dep>,...][:]]]. Module names must be "
<       + "unique. Each dep is the name of a module that this module "
<       + "depends on. Modules must be listed in dependency order, and js "
<       + "source files must be listed in the corresponding order. Where "
<       + "--module flags occur in relation to --js flags is unimportant")
<   static final Flag<List<String>> FLAG_module = Flag.stringCollector();
< 
<   @FlagSpec(help = "File containing the serialized version of the variable "
<       + "renaming map produced by a previous compilation")
<   static final Flag<String> FLAG_variable_map_input_file =
<       Flag.value("");
< 
<   @FlagSpec(help = "File containing the serialized version of the property "
<       + "renaming map produced by a previous compilation",
<       docLevel = DocLevel.SECRET)
<   static final Flag<String> FLAG_property_map_input_file =
<       Flag.value("");
< 
<   @FlagSpec(help = "File where the serialized version of the variable "
<       + "renaming map produced should be saved",
<       docLevel = DocLevel.SECRET)
<   static final Flag<String> FLAG_variable_map_output_file =
<       Flag.value("");
< 
<   @FlagSpec(help = "If true, variable renaming and property renaming map "
<       + "files will be produced as {binary name}_vars_map.out and "
<       + "{binary name}_props_map.out. Note that this flag cannot be used "
<       + "in conjunction with either variable_map_output_file or "
<       + "property_map_output_file",
<       docLevel = DocLevel.SECRET)
<   static final Flag<Boolean> FLAG_create_name_map_files =
<       Flag.value(false);
< 
<   @FlagSpec(help = "File where the serialized version of the property "
<       + "renaming map produced should be saved")
<   static final Flag<String> FLAG_property_map_output_file =
<       Flag.value("");
< 
<   @FlagSpec(help = "Check source validity but do not enforce Closure style "
<       + "rules and conventions")
<   static final Flag<Boolean> FLAG_third_party = Flag.value(false);
< 
< 
<   @FlagSpec(help = "Controls how detailed the compilation summary is. Values:"
<       + " 0 (never print summary), 1 (print summary only if there are "
<       + "errors or warnings), 2 (print summary if type checking is on, "
<       + "see --check_types), 3 (always print summary). The default level "
<       + "is 1")
<   static final Flag<Integer> FLAG_summary_detail_level = Flag.value(1);
< 
<   @FlagSpec(help = "Interpolate output into this string at the place denoted"
<       + " by the marker token %output%. See --output_wrapper_marker")
<   static final Flag<String> FLAG_output_wrapper = Flag.value("");
< 
<   @FlagSpec(help = "Use this token as output marker in the value of"
<       + " --output_wrapper")
<   static final Flag<String> FLAG_output_wrapper_marker =
<       Flag.value("%output%");
< 
<   @FlagSpec(help = "An output wrapper for a javascript module (optional). "
<       + "The format is <name>:<wrapper>. The module name must correspond "
<       + "with a module specified using --module. The wrapper must "
<       + "contain %s as the code placeholder")
<   static final Flag<List<String>> FLAG_module_wrapper =
<       Flag.stringCollector();
< 
<   @FlagSpec(help = "Prefix for filenames of compiled js modules. "
<       + "<module-name>.js will be appended to this prefix. Directories "
<       + "will be created as needed. Use with --module")
<   static final Flag<String> FLAG_module_output_path_prefix =
<       Flag.value("./");
< 
<   @FlagSpec(help = "If specified, a source map file mapping the generated " +
<             "source files back to the original source file will be " +
<             "output to the specified path. The %outname% placeholder will " +
<             "expand to the name of the output file that the source map " +
<             "corresponds to.")
<   static final Flag<String> FLAG_create_source_map =
<       Flag.value("");
< 
<   @FlagSpec(help = "Make the named class of warnings an error. Options:" +
<       DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)
<   static final Flag<List<String>> FLAG_jscomp_error =
<       Flag.stringCollector();
< 
<   @FlagSpec(help = "Make the named class of warnings a normal warning. " +
<                 "Options:" + DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)
<   static final Flag<List<String>> FLAG_jscomp_warning =
<       Flag.stringCollector();
< 
<   @FlagSpec(help = "Turn off the named class of warnings. Options:" +
<       DiagnosticGroups.DIAGNOSTIC_GROUP_NAMES)
<   static final Flag<List<String>> FLAG_jscomp_off =
<       Flag.stringCollector();
< 
<   @FlagSpec(altName = "D",
<       help = "Override the value of a variable annotated @define. " +
<       "The format is <name>[=<val>], where <name> is the name of a @define " +
<       "variable and <val> is a boolean, number, or a single-quoted string " +
<       "that contains no single quotes. If [=<val>] is omitted, " +
<       "the variable is marked true")
<   static final Flag<List<String>> FLAG_define = Flag.stringCollector();
< 
<   @FlagSpec(help = "Input charset for all files.")
<   static final Flag<String> FLAG_charset = Flag.value("");
---
>   private final CommandLineConfig config;
245,246c97,98
<   AbstractCommandLineRunner(String[] args) {
<     this(args, System.out, System.err);
---
>   AbstractCommandLineRunner(CommandLineConfig config) {
>     this(config, System.out, System.err);
249,253c101,103
<   AbstractCommandLineRunner(String[] args, PrintStream out,
<       PrintStream err) {
<     
<     Flags.parse(args);
< 
---
>   AbstractCommandLineRunner(
>       CommandLineConfig config, PrintStream out, PrintStream err) {
>     this.config = config;
280,281c130
<         options, AbstractCommandLineRunner.FLAG_jscomp_error.get(),
<         CheckLevel.ERROR);
---
>         options, config.jscompError, CheckLevel.ERROR);
283,284c132
<         options, AbstractCommandLineRunner.FLAG_jscomp_warning.get(),
<         CheckLevel.WARNING);
---
>         options, config.jscompWarning, CheckLevel.WARNING);
286,287c134
<         options, AbstractCommandLineRunner.FLAG_jscomp_off.get(),
<         CheckLevel.OFF);
---
>         options, config.jscompOff, CheckLevel.OFF);
289c136
<     createDefineReplacements(FLAG_define.get(), options);
---
>     createDefineReplacements(config.define, options);
298,299c145,146
<     if (FLAG_js_output_file.get().length() > 0) {
<       options.jsOutputFile = FLAG_js_output_file.get();
---
>     if (config.jsOutputFile.length() > 0) {
>       options.jsOutputFile = config.jsOutputFile;
302,303c149,150
<     if (FLAG_create_source_map.get().length() > 0) {
<       options.sourceMapOutputPath = FLAG_create_source_map.get();
---
>     if (config.createSourceMap.length() > 0) {
>       options.sourceMapOutputPath = config.createSourceMap;
306c153
<     if (!FLAG_variable_map_input_file.get().equals("")) {
---
>     if (!config.variableMapInputFile.equals("")) {
308c155
<           VariableMap.load(FLAG_variable_map_input_file.get()).toBytes();
---
>           VariableMap.load(config.variableMapInputFile).toBytes();
311c158
<     if (!FLAG_property_map_input_file.get().equals("")) {
---
>     if (!config.propertyMapInputFile.equals("")) {
313c160
<           VariableMap.load(FLAG_property_map_input_file.get()).toBytes();
---
>           VariableMap.load(config.propertyMapInputFile).toBytes();
316c163
<     if (FLAG_third_party.get()) {
---
>     if (config.thirdParty) {
330c177
<     if (FLAG_compute_phase_ordering.get()) {
---
>     if (config.computePhaseOrdering) {
347c194
<     if (FLAG_compute_phase_ordering.get()) {
---
>     if (config.computePhaseOrdering) {
626c473
<     Compiler.setLoggingLevel(Level.parse(FLAG_logging_level.get()));
---
>     Compiler.setLoggingLevel(Level.parse(config.loggingLevel));
655c502
<         .setSummaryDetailLevel(FLAG_summary_detail_level.get());
---
>         .setSummaryDetailLevel(config.summaryDetailLevel);
657,658c504,505
<     List<String> jsFiles = FLAG_js.get();
<     List<String> moduleSpecs = FLAG_module.get();
---
>     List<String> jsFiles = config.js;
>     List<String> moduleSpecs = config.module;
677c524
<     if (FLAG_compute_phase_ordering.get()) {
---
>     if (config.computePhaseOrdering) {
681c528
<     if (FLAG_print_pass_graph.get()) {
---
>     if (config.printPassGraph) {
691c538
<     if (FLAG_print_ast.get()) {
---
>     if (config.printAst) {
702c549
<     if (FLAG_print_tree.get()) {
---
>     if (config.printTree) {
715,716c562,563
<         writeOutput(out, compiler, compiler.toSource(), FLAG_output_wrapper
<             .get(), FLAG_output_wrapper_marker.get());
---
>         writeOutput(out, compiler, compiler.toSource(), config.outputWrapper,
>             config.outputWrapperMarker);
721c568
<         String moduleFilePrefix = FLAG_module_output_path_prefix.get();
---
>         String moduleFilePrefix = config.moduleOutputPathPrefix;
724c571
<             parseModuleWrappers(FLAG_module_wrapper.get(), modules);
---
>             parseModuleWrappers(config.moduleWrapper, modules);
792,796c639,642
< 
<   private static Charset getInputCharset() throws FlagUsageException {
<     if (!FLAG_charset.get().isEmpty()) {
<       if (!Charset.isSupported(FLAG_charset.get())) {
<         throw new FlagUsageException(FLAG_charset.get() +
---
>   private Charset getInputCharset() throws FlagUsageException {
>     if (!config.charset.isEmpty()) {
>       if (!Charset.isSupported(config.charset)) {
>         throw new FlagUsageException(config.charset +
799c645
<       return Charset.forName(FLAG_charset.get());
---
>       return Charset.forName(config.charset);
806c652
<     return createExternInputs(FLAG_externs.get());
---
>     return createExternInputs(config.externs);
899c745
<   private static String getMapPath(String outputFile) {
---
>   private String getMapPath(String outputFile) {
905,906c751,752
<       if (!FLAG_module_output_path_prefix.get().equals("")) {
<         basePath = FLAG_module_output_path_prefix.get();
---
>       if (!config.moduleOutputPathPrefix.equals("")) {
>         basePath = config.moduleOutputPathPrefix;
940c786
<     if (FLAG_create_name_map_files.get()) {
---
>     if (config.createNameMapFiles) {
949c795
<     if (!FLAG_variable_map_output_file.get().equals("")) {
---
>     if (!config.variableMapOutputFile.equals("")) {
955c801
<       variableMapOutputPath = FLAG_variable_map_output_file.get();
---
>       variableMapOutputPath = config.variableMapOutputFile;
958c804
<     if (!FLAG_property_map_output_file.get().equals("")) {
---
>     if (!config.propertyMapOutputFile.equals("")) {
964c810
<       propertyMapOutputPath = FLAG_property_map_output_file.get();
---
>       propertyMapOutputPath = config.propertyMapOutputFile;
1088a935,1253
>     }
>   }
> 
>   
> 
> 
> 
> 
> 
> 
> 
>   static class CommandLineConfig {
>     private boolean printTree = false;
> 
>     
>     CommandLineConfig setPrintTree(boolean printTree) {
>       this.printTree = printTree;
>       return this;
>     }
> 
>     private boolean computePhaseOrdering = false;
> 
>     
> 
> 
> 
>     CommandLineConfig setComputePhaseOrdering(boolean computePhaseOrdering) {
>       this.computePhaseOrdering = computePhaseOrdering;
>       return this;
>     }
> 
>     private boolean printAst = false;
> 
>     
> 
> 
> 
>     CommandLineConfig setPrintAst(boolean printAst) {
>       this.printAst = printAst;
>       return this;
>     }
> 
>     private boolean printPassGraph = false;
> 
>     
>     CommandLineConfig setPrintPassGraph(boolean printPassGraph) {
>       this.printPassGraph = printPassGraph;
>       return this;
>     }
> 
>     private CompilerOptions.DevMode jscompDevMode = CompilerOptions.DevMode.OFF;
> 
>     
>     CommandLineConfig setJscompDevMode(CompilerOptions.DevMode jscompDevMode) {
>       this.jscompDevMode = jscompDevMode;
>       return this;
>     }
> 
>     private String loggingLevel = Level.WARNING.getName();
> 
>     
> 
> 
> 
> 
>     CommandLineConfig setLoggingLevel(String loggingLevel) {
>       this.loggingLevel = loggingLevel;
>       return this;
>     }
> 
>     private final List<String> externs = Lists.newArrayList();
> 
>     
> 
> 
>     CommandLineConfig setExterns(List<String> externs) {
>       this.externs.clear();
>       this.externs.addAll(externs);
>       return this;
>     }
> 
>     private final List<String> js = Lists.newArrayList();
> 
>     
> 
> 
>     CommandLineConfig setJs(List<String> js) {
>       this.js.clear();
>       this.js.addAll(js);
>       return this;
>     }
> 
>     private String jsOutputFile = "";
> 
>     
> 
> 
>     CommandLineConfig setJsOutputFile(String jsOutputFile) {
>       this.jsOutputFile = jsOutputFile;
>       return this;
>     }
> 
>     private final List<String> module = Lists.newArrayList();
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     CommandLineConfig setModule(List<String> module) {
>       this.module.clear();
>       this.module.addAll(module);
>       return this;
>     }
> 
>     private String variableMapInputFile = "";
> 
>     
> 
> 
> 
>     CommandLineConfig setVariableMapInputFile(String variableMapInputFile) {
>       this.variableMapInputFile = variableMapInputFile;
>       return this;
>     }
> 
>     private String propertyMapInputFile = "";
> 
>     
> 
> 
> 
>     CommandLineConfig setPropertyMapInputFile(String propertyMapInputFile) {
>       this.propertyMapInputFile = propertyMapInputFile;
>       return this;
>     }
> 
>     private String variableMapOutputFile = "";
> 
>     
> 
> 
> 
>     CommandLineConfig setVariableMapOutputFile(String variableMapOutputFile) {
>       this.variableMapOutputFile = variableMapOutputFile;
>       return this;
>     }
> 
>     private boolean createNameMapFiles = false;
> 
>     
> 
> 
> 
> 
> 
> 
>     CommandLineConfig setCreateNameMapFiles(boolean createNameMapFiles) {
>       this.createNameMapFiles = createNameMapFiles;
>       return this;
>     }
> 
>     private String propertyMapOutputFile = "";
> 
>     
> 
> 
> 
>     CommandLineConfig setPropertyMapOutputFile(String propertyMapOutputFile) {
>       this.propertyMapOutputFile = propertyMapOutputFile;
>       return this;
>     }
> 
>     private boolean thirdParty = false;
> 
>     
> 
> 
> 
>     CommandLineConfig setThirdParty(boolean thirdParty) {
>       this.thirdParty = thirdParty;
>       return this;
>     }
> 
>     private int summaryDetailLevel = 1;
> 
>     
> 
> 
> 
> 
> 
> 
>     CommandLineConfig setSummaryDetailLevel(int summaryDetailLevel) {
>       this.summaryDetailLevel = summaryDetailLevel;
>       return this;
>     }
> 
>     private String outputWrapper = "";
> 
>     
> 
> 
> 
>     CommandLineConfig setOutputWrapper(String outputWrapper) {
>       this.outputWrapper = outputWrapper;
>       return this;
>     }
> 
>     private String outputWrapperMarker = "";
> 
>     
> 
> 
> 
>     CommandLineConfig setOutputWrapperMarker(String outputWrapperMarker) {
>       this.outputWrapperMarker = outputWrapperMarker;
>       return this;
>     }
> 
>     private final List<String> moduleWrapper = Lists.newArrayList();
> 
>     
> 
> 
> 
> 
> 
>     CommandLineConfig setModuleWrapper(List<String> moduleWrapper) {
>       this.moduleWrapper.clear();
>       this.moduleWrapper.addAll(moduleWrapper);
>       return this;
>     }
> 
>     private String moduleOutputPathPrefix = "";
> 
>     
> 
> 
> 
> 
>     CommandLineConfig setModuleOutputPathPrefix(String moduleOutputPathPrefix) {
>       this.moduleOutputPathPrefix = moduleOutputPathPrefix;
>       return this;
>     }
> 
>     private String createSourceMap = "";
> 
>     
> 
> 
> 
> 
> 
> 
>     CommandLineConfig setCreateSourceMap(String createSourceMap) {
>       this.createSourceMap = createSourceMap;
>       return this;
>     }
> 
>     private final List<String> jscompError = Lists.newArrayList();
> 
>     
> 
> 
>     CommandLineConfig setJscompError(List<String> jscompError) {
>       this.jscompError.clear();
>       this.jscompError.addAll(jscompError);
>       return this;
>     }
> 
>     private final List<String> jscompWarning = Lists.newArrayList();
> 
>     
> 
> 
>     CommandLineConfig setJscompWarning(List<String> jscompWarning) {
>       this.jscompWarning.clear();
>       this.jscompWarning.addAll(jscompWarning);
>       return this;
>     }
> 
>     private final List<String> jscompOff = Lists.newArrayList();
> 
>     
> 
> 
>     CommandLineConfig setJscompOff(List<String> jscompOff) {
>       this.jscompOff.clear();
>       this.jscompOff.addAll(jscompOff);
>       return this;
>     }
> 
>     private final List<String> define = Lists.newArrayList();
> 
>     
> 
> 
> 
> 
> 
> 
>     CommandLineConfig setDefine(List<String> define) {
>       this.define.clear();
>       this.define.addAll(define);
>       return this;
>     }
> 
>     private String charset = "";
> 
>     
> 
> 
>     CommandLineConfig setCharset(String charset) {
>       this.charset = charset;
>       return this;
