20a21,22
> import com.google.common.collect.ImmutableSet;
> import com.google.common.collect.Lists;
23c25,26
< import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;
---
> import com.google.common.collect.Sets;
> import com.google.javascript.jscomp.NodeTraversal.ScopedCallback;
30a34,35
> import java.util.Iterator;
> import java.util.List;
31a37
> import java.util.Set;
41a48
>   public static final String ARGUMENTS = "arguments";
229,230c236,237
<   static class ContextualRenameInverter extends AbstractPostOrderCallback
<       implements CompilerPass {
---
>   static class ContextualRenameInverter
>       implements ScopedCallback, CompilerPass {
234c241,247
<     private Map<Var, String> nameMap = Maps.newHashMap();
---
>     private Set<String> referencedNames = ImmutableSet.of();
> 
>     
>     private Deque<Set<String>> referenceStack = new ArrayDeque<Set<String>>();
> 
>     
>     private Map<String, List<Node>> nameMap = Maps.newHashMap();
253,254c266,267
<     private static String getOrginalNameInternal(String name, int index) {
<       return name.substring(0, index);
---
>     private boolean containsSeparator(String name) {
>       return name.indexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR) != -1;
257,260c270,279
<     private static String getNameSuffix(String name, int index) {
<       return name.substring(
<           index + ContextualRenamer.UNIQUE_ID_SEPARATOR.length(),
<           name.length());
---
>     
> 
> 
>     public void enterScope(NodeTraversal t) {
>       if (t.inGlobalScope()) {
>         return;
>       }
> 
>       referenceStack.push(referencedNames);
>       referencedNames = Sets.newHashSet();
263,272c282
<     @Override
<     public void visit(NodeTraversal t, Node node, Node parent) {
<       if (node.getType() == Token.NAME) {
<         String oldName = node.getString();
<         if (oldName.indexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR) != -1) {
<           Scope scope = t.getScope();
<           Var var = t.getScope().getVar(oldName);
<           if (var == null || var.isGlobal()) {
<             return;
<           }
---
>     
274,279d283
<           if (nameMap.containsKey(var)) {
<             node.setString(nameMap.get(var));
<           } else {
<             int index = indexOfSeparator(oldName);
<             String newName = getOrginalNameInternal(oldName, index);
<             String suffix = getNameSuffix(oldName, index);
281,293d284
<             
<             
<             
<             
<             
<             
<             
<             
<             boolean recurseScopes = false;
<             if (!suffix.matches("\\d+")) {
<               
<               recurseScopes = true;
<             }
295,313c286,308
<             
<             
<             
<             
<             
<             
<             
<             if (var.scope.isDeclared(newName, recurseScopes) ||
<                 !TokenStream.isJSIdentifier(newName)) {
<               newName = oldName;
<             } else {
<               var.scope.declare(newName, var.nameNode, null, null);
< 
<               
<               Node parentNode = var.getParentNode();
<               if (parentNode.getType() == Token.FUNCTION &&
<                   parentNode == var.scope.getRootNode()) {
<                 var.getNameNode().setString(newName);
<               }
---
>     public void exitScope(NodeTraversal t) {
>       if (t.inGlobalScope()) {
>         return;
>       }
> 
>       for (Iterator<Var> it = t.getScope().getVars(); it.hasNext();) {
>         Var v = it.next();
>         handleScopeVar(v);
>       }
> 
>       
>       
>       Set<String> current = referencedNames;
>       referencedNames = referenceStack.pop();
>       
>       
>       
>       if (!referenceStack.isEmpty()) {
>         referencedNames.addAll(current);
>       }
>     }
> 
>     
315,317d309
<               node.setString(newName);
<               compiler.reportCodeChange();
<             }
319c311,329
<             nameMap.put(var, newName);
---
> 
> 
>     void handleScopeVar(Var v) {
>       String name  = v.getName();
>       if (containsSeparator(name)) {
>         String newName = getOrginalName(name);
>         
>         if (TokenStream.isJSIdentifier(newName) &&
>             !referencedNames.contains(newName) && 
>             !newName.equals(ARGUMENTS)) {
>           referencedNames.remove(name);
>           
>           
>           referencedNames.add(newName);
>           List<Node> references = nameMap.get(name);
>           Preconditions.checkState(references != null);
>           for (Node n : references) {
>             Preconditions.checkState(n.getType() == Token.NAME);
>             n.setString(newName);
320a331,355
>           compiler.reportCodeChange();
>         }
>         nameMap.remove(name);
>       }
>     }
> 
>     @Override
>     public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
>       return true;
>     }
> 
>     @Override
>     public void visit(NodeTraversal t, Node node, Node parent) {
>       if (t.inGlobalScope()) {
>         return;
>       }
> 
>       if (NodeUtil.isReferenceName(node)) {
>         String name = node.getString();
>         
>         
>         referencedNames.add(name);
>         
>         if (containsSeparator(name)) {
>           addCandidateNameReference(name, node);
323a359,367
> 
>     private void addCandidateNameReference(String name, Node n) {
>       List<Node> nodes = nameMap.get(name);
>       if (null == nodes) {
>         nodes = Lists.newLinkedList();
>         nameMap.put(name, nodes);
>       }
>       nodes.add(n);
>     }
370,378c414,425
<       if (global) {
<         reserveName(name);
<       } else {
<         
<         if (!declarations.containsKey(name)) {
<           int id = incrementNameCount(name);
<           String newName = null;
<           if (id != 0) {
<             newName = getUniqueName(name, id);
---
>       if (!name.equals(ARGUMENTS)) {
>         if (global) {
>           reserveName(name);
>         } else {
>           
>           if (!declarations.containsKey(name)) {
>             int id = incrementNameCount(name);
>             String newName = null;
>             if (id != 0) {
>               newName = getUniqueName(name, id);
>             }
>             declarations.put(name, newName);
380d426
<           declarations.put(name, newName);
439a486
>       Preconditions.checkState(!name.equals(ARGUMENTS));
