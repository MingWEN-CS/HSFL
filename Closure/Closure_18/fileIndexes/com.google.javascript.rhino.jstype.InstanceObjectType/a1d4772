





































 
package com.google.javascript.rhino.jstype;


import com.google.common.base.Preconditions;

import java.util.List;







public final class InstanceObjectType extends PrototypeObjectType {
  private static final long serialVersionUID = 1L;

  private final FunctionType constructor;

  InstanceObjectType(JSTypeRegistry registry, FunctionType constructor) {
    this(registry, constructor, false);
  }

  InstanceObjectType(JSTypeRegistry registry, FunctionType constructor,
                     boolean isNativeType) {
    super(registry, null, null, isNativeType);
    Preconditions.checkNotNull(constructor);
    this.constructor = constructor;
  }

  @Override
  public String getReferenceName() {
    return getConstructor().getReferenceName();
  }

  @Override
  public boolean hasReferenceName() {
    return getConstructor().hasReferenceName();
  }

  @Override
  public ObjectType getImplicitPrototype() {
    return getConstructor().getPrototype();
  }

  @Override
  public FunctionType getConstructor() {
    return constructor;
  }

  @Override
  boolean defineProperty(String name, JSType type, boolean inferred,
      boolean inExterns) {
    ObjectType proto = getImplicitPrototype();
    if (proto != null && proto.hasOwnDeclaredProperty(name)) {
      return false;
    }
    return super.defineProperty(name, type, inferred, inExterns);
  }

  @Override
  public String toString() {
    return constructor.getReferenceName();
  }

  @Override
  boolean isTheObjectType() {
    return getConstructor().isNative() && "Object".equals(getReferenceName());
  }

  @Override
  public boolean isInstanceType() {
    return true;
  }

  @Override
  public boolean isArrayType() {
    return getConstructor().isNative() && "Array".equals(getReferenceName());
  }

  @Override
  public boolean isStringObjectType() {
    return getConstructor().isNative() && "String".equals(getReferenceName());
  }

  @Override
  public boolean isBooleanObjectType() {
    return getConstructor().isNative() && "Boolean".equals(getReferenceName());
  }

  @Override
  public boolean isNumberObjectType() {
    return getConstructor().isNative() && "Number".equals(getReferenceName());
  }

  @Override
  public boolean isDateType() {
    return getConstructor().isNative() && "Date".equals(getReferenceName());
  }

  @Override
  public boolean isRegexpType() {
    return getConstructor().isNative() && "RegExp".equals(getReferenceName());
  }

  @Override
  public boolean isNominalType() {
    return hasReferenceName();
  }

  @Override
  public boolean isSubtype(JSType that) {
    if (super.isSubtype(that)) {
      return true;
    }
    List<ObjectType> thisInterfaces =
        getConstructor().getImplementedInterfaces();
    if (thisInterfaces != null) {
      List<ObjectType> thatInterfaces = that.keepAssignableInterfaces();
      for (ObjectType thatInterface : thatInterfaces) {
        for (ObjectType thisInterface : thisInterfaces) {
          if (thisInterface.isSubtype(thatInterface)) {
            return true;
          }
        }
      }
    }
    return false;
  }

  @Override
  public boolean equals(Object that) {
    if (this == that) {
      return true;
    } else if (this.isNominalType() && that instanceof JSType &&
        ((JSType) that).isNominalType()) {
      return getReferenceName().equals(((ObjectType) that).getReferenceName());
    }
    return false;
  }

  



  @Override
  public int hashCode() {
    if (hasReferenceName()) {
      return getReferenceName().hashCode();
    } else {
      return super.hashCode();
    }
  }
}
