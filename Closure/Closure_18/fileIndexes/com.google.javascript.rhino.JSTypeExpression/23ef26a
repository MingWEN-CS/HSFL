





































 
package com.google.javascript.rhino;

import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.StaticScope;

import java.io.Serializable;








public final class JSTypeExpression implements Serializable {
  private static final long serialVersionUID = 1L;

  
  private final Node root;

  
  private final String sourceName;

  
  private final JSTypeRegistry registry;

  public JSTypeExpression(Node root, String sourceName,
      JSTypeRegistry registry) {
    this.root = root;
    this.sourceName = sourceName;
    this.registry = registry;
  }

  


  public boolean isOptionalArg() {
    return root.getType() == Token.EQUALS;
  }

  


  public boolean isVarArgs() {
    return root.getType() == Token.ELLIPSIS;
  }

  


  public JSType evaluate(StaticScope<JSType> scope) {
    JSType type = registry.createFromTypeNodes(root, sourceName, scope);
    if (root.getBooleanProp(Node.BRACELESS_TYPE)) {
      type.forgiveUnknownNames();
    }
    return type;
  }

  @Override
  public boolean equals(Object other) {
    return other instanceof JSTypeExpression &&
        ((JSTypeExpression) other).root.checkTreeEqualsSilent(root);
  }

  @Override
  public int hashCode() {
    return root.toStringTree().hashCode();
  }
}
