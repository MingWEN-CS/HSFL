















package com.google.javascript.jscomp;

import com.google.common.base.Preconditions;
import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;
import com.google.javascript.jscomp.NodeTraversal.Callback;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.Token;














class Denormalize implements CompilerPass, Callback {

  private final AbstractCompiler compiler;

  Denormalize(AbstractCompiler compiler) {
    this.compiler = compiler;
  }

  @Override
  public void process(Node externs, Node root) {
    NodeTraversal.traverse(compiler, root, this);
  }

  @Override
  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
    return true;
  }

  @Override
  public void visit(NodeTraversal t, Node n, Node parent) {
    maybeCollapseIntoForStatements(n, parent);
  }

  



  private void maybeCollapseIntoForStatements(Node n, Node parent) {
    
    
    if (parent == null || !NodeUtil.isStatementBlock(parent)) {
      return;
    }

    
    if (!n.isExprResult() && !n.isVar()) {
      return;
    }

    
    Node nextSibling = n.getNext();
    if (nextSibling == null) {
      return;
    } else if (NodeUtil.isForIn(nextSibling)) {
      Node forNode = nextSibling;
      Node forVar = forNode.getFirstChild();
      if (forVar.isName()
          && n.isVar() && n.hasOneChild()) {
        Node name = n.getFirstChild();
        if (!name.hasChildren()
            && forVar.getString().equals(name.getString())) {
          
          
          parent.removeChild(n);
          forNode.replaceChild(forVar, n);
          compiler.reportCodeChange();
        }
      }
    } else if (nextSibling.isFor()
        && nextSibling.getFirstChild().isEmpty()) {

      
      
      
      
      
      if (NodeUtil.containsType(n, Token.IN)) {
        return;
      }

      
      Node forNode = nextSibling;
      Node oldInitializer = forNode.getFirstChild();
      parent.removeChild(n);

      Node newInitializer;
      if (n.isVar()) {
        newInitializer = n;
      } else {
        
        Preconditions.checkState(n.hasOneChild());
        newInitializer = n.getFirstChild();
        n.removeChild(newInitializer);
      }

      forNode.replaceChild(oldInitializer, newInitializer);

      compiler.reportCodeChange();
    }
  }

  static class StripConstantAnnotations
      extends AbstractPostOrderCallback
      implements CompilerPass {
    private AbstractCompiler compiler;

    StripConstantAnnotations(AbstractCompiler compiler) {
      this.compiler = compiler;
    }

    @Override
    public void process(Node externs, Node js) {
      NodeTraversal.traverse(compiler, externs, this);
      NodeTraversal.traverse(compiler, js, this);
    }

    @Override
    public void visit(NodeTraversal t, Node node, Node parent) {
      if (node.isName() || node.isString() || node.isStringKey()) {
        node.removeProp(Node.IS_CONSTANT_NAME);
      }
    }
  }
}
