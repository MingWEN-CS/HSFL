174c174
<       if (n.getType() == Token.NAME) {
---
>       if (n.isName()) {
233c233
<       if (n.getType() == Token.NAME) {
---
>       if (n.isName()) {
351,354c351,354
<           n.getType() == Token.NAME
<           || n.getType() == Token.STRING
<           || n.getType() == Token.GET
<           || n.getType() == Token.SET);
---
>           n.isName()
>           || n.isString()
>           || n.isGet()
>           || n.isSet());
361c361
<           (parent.getType() == Token.GETPROP &&
---
>           (parent.isGetProp() &&
363c363
<       if (n.getType() == Token.NAME || isProperty) {
---
>       if (n.isName() || isProperty) {
389c389
<       Preconditions.checkState(n.getType() == Token.FUNCTION);
---
>       Preconditions.checkState(n.isFunction());
435c435
<       if (n.getType() == Token.LABEL) {
---
>       if (n.isLabel()) {
441c441
<       if (NodeUtil.isStatementBlock(n) || n.getType() == Token.LABEL) {
---
>       if (NodeUtil.isStatementBlock(n) || n.isLabel()) {
451c451
<       if (n.getType() == Token.FUNCTION) {
---
>       if (n.isFunction()) {
464c464
<       Preconditions.checkArgument(n.getType() == Token.LABEL);
---
>       Preconditions.checkArgument(n.isLabel());
509c509
<               if (first.getType() == Token.VAR) {
---
>               if (first.isVar()) {
530c530
<               if (init.getType() == Token.VAR) {
---
>               if (init.isVar()) {
555c555
<         if (c.getType() == Token.VAR) {
---
>         if (c.isVar()) {
578c578
<           functionBody.getParent().getType() == Token.FUNCTION);
---
>           functionBody.getParent().isFunction());
651c651
<       Preconditions.checkState(n.getType() == Token.NAME);
---
>       Preconditions.checkState(n.isName());
668c668
<       if (v != null && v.getParentNode().getType() == Token.CATCH) {
---
>       if (v != null && v.getParentNode().isCatch()) {
690,691c690,691
<       } else if (v != null && parent.getType() == Token.FUNCTION) {
<         if (v.getParentNode().getType() == Token.VAR) {
---
>       } else if (v != null && parent.isFunction()) {
>         if (v.getParentNode().isVar()) {
697c697
<       } else if (parent.getType() == Token.VAR) {
---
>       } else if (parent.isVar()) {
734c734
<         } else if (gramps.getType() == Token.FOR) {
---
>         } else if (gramps.isFor()) {
741c741
<           Preconditions.checkState(gramps.getType() == Token.LABEL);
---
>           Preconditions.checkState(gramps.isLabel());
