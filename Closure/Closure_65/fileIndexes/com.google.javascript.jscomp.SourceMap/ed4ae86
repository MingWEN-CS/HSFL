















package com.google.javascript.jscomp;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.javascript.rhino.Node;

import java.io.IOException;

import java.util.Collection;
import java.util.List;
import java.util.Map;











public class SourceMap {

  



  static class Mapping {
    


    int id;

    


    String sourceFile;

    




    Position originalPosition;

    



    Position startPosition;

    



    Position endPosition;

    



    String originalName;

    


    void appendTo(Appendable out) throws IOException {
      out.append("[");

      out.append("\"");
      out.append(sourceFile);
      out.append("\"");

      out.append(",");
      out.append(originalPosition.getLineNumber() + "");

      out.append(",");
      out.append(originalPosition.getCharacterIndex() + "");

      if (originalName != null) {
        out.append(",");
        out.append("\"");
        out.append(originalName);
        out.append("\"");
      }

      out.append("]");
    }
  }


  


  private static class LineMapping {
    


    List<String> files = Lists.newArrayList();

    


    int lineNumber;

    







    int length;

    



    List<LineCharMapping> characterMappings = Lists.newArrayList();

    




    Map<Integer, LineCharMapping> charToMap = Maps.newHashMap();

    



    void appendCharMapTo(Appendable out) throws IOException {
      out.append("[");

      for (int j = 0; j <= length; ++j) {
        if (j > 0) {
          out.append(",");
        }

        LineCharMapping current = charToMap.get(j);

        if (current == null) {
          out.append("-1");
        } else {
          out.append(current.basisMapping.id + "");
        }
      }

      out.append("]");
    }

    



    void appendFileMapTo(Appendable out) throws IOException {
      out.append("[");

      for (int j = 0; j < files.size(); ++j) {
        if (j > 0) {
          out.append(",");
        }

        out.append("\"");
        out.append(files.get(j));
        out.append("\"");
      }

      out.append("]");
    }
  }

  



  private static class LineCharMapping {
    


    int startCharacter;

    


    int endCharacter;

    



    Mapping basisMapping;
  }

  


  private List<Mapping> mappings = Lists.newArrayList();

  



  private Position offsetPosition = new Position(0, 0);

  




  private Position prefixPosition = new Position(0, 0);

  






  void addMapping(Node node, Position startPosition, Position endPosition) {
    Object sourceFile = node.getProp(Node.SOURCEFILE_PROP);

    
    
    
    if (sourceFile == null || node.getLineno() < 0) {
      return;
    }

    
    Mapping mapping = new Mapping();
    mapping.id = mappings.size();
    mapping.sourceFile = sourceFile.toString();
    mapping.originalPosition = new Position(node.getLineno(), node.getCharno());

    Object originalName = node.getProp(Node.ORIGINALNAME_PROP);

    if (originalName != null) {
      mapping.originalName = originalName.toString();
    }

    
    
    
    
    int offsetLine = offsetPosition.getLineNumber();
    int startOffsetPosition = offsetPosition.getCharacterIndex();
    int endOffsetPosition = offsetPosition.getCharacterIndex();

    if (startPosition.getLineNumber() > 0) {
      startOffsetPosition = 0;
    }

    if (endPosition.getLineNumber() > 0) {
      endOffsetPosition = 0;
    }

    mapping.startPosition =
        new Position(startPosition.getLineNumber() + offsetLine,
                     startPosition.getCharacterIndex() + startOffsetPosition);

    mapping.endPosition =
        new Position(endPosition.getLineNumber() + offsetLine,
                     endPosition.getCharacterIndex() + endOffsetPosition);

    mappings.add(mapping);
  }

  






  void setWrapperPrefix(String prefix) {
    
    int prefixLine = 0;
    int prefixIndex = 0;

    for (int i = 0; i < prefix.length(); ++i) {
      if (prefix.charAt(i) == '\n') {
        prefixLine++;
        prefixIndex = 0;
      } else {
        prefixIndex++;
      }
    }

    prefixPosition = new Position(prefixLine, prefixIndex);
  }

  









  void setStartingPosition(int offsetLine, int offsetIndex) {
    offsetPosition = new Position(offsetLine, offsetIndex);
  }

  


  void reset() {
    mappings = Lists.newArrayList();
    offsetPosition = new Position(0, 0);
    prefixPosition = new Position(0, 0);
  }

  


  private static class LineMappingInformation {
    Map<Integer, LineMapping> mappings;
    int maxLine;

    public LineMappingInformation(Map<Integer, LineMapping> mappings,
                                  int maxLine) {
      this.maxLine = maxLine;
      this.mappings = mappings;
    }
  }

  





  private LineMappingInformation determineLineMappings() {
    int maxLine = 0;
    Map<Integer, LineMapping> lineMappings = Maps.newHashMap();

    for (Mapping mapping : mappings) {
      int prefixLine = prefixPosition.getLineNumber();

      int startPositionLine =
          prefixLine + mapping.startPosition.getLineNumber();

      int endPositionLine = prefixLine + mapping.endPosition.getLineNumber();

      
      maxLine = Math.max(maxLine, endPositionLine);

      
      
      for (int i = startPositionLine; i <= endPositionLine; ++i) {
        LineMapping lineMapping = lineMappings.get(i);

        
        if (lineMapping == null) {
          lineMapping = new LineMapping();
          lineMapping.lineNumber = i;
          lineMappings.put(i, lineMapping);
        }

        int startCharacter = mapping.startPosition.getCharacterIndex();

        
        
        
        if (mapping.startPosition.getLineNumber() == 0) {
          startCharacter += prefixPosition.getCharacterIndex();
        }

        int endCharacter = mapping.endPosition.getCharacterIndex();

        if (mapping.endPosition.getLineNumber() == 0) {
          endCharacter += prefixPosition.getCharacterIndex();
        }

        
        lineMapping.length = Math.max(lineMapping.length, endCharacter);

        
        
        if (i > startPositionLine) {
          startCharacter = 0;
        }

        
        
        if (i < endPositionLine) {
          endCharacter = Integer.MAX_VALUE;
        }

        
        LineCharMapping lcm = new LineCharMapping();
        lcm.startCharacter = startCharacter;
        lcm.endCharacter = endCharacter;
        lcm.basisMapping = mapping;

        if (!lineMapping.files.contains(mapping.sourceFile)) {
          lineMapping.files.add(mapping.sourceFile);
        }

        lineMapping.characterMappings.add(lcm);
      }
    }

    return new LineMappingInformation(lineMappings, maxLine);
  }


  








  private void buildCharacterMappings(Collection<LineMapping> lineMappings) {
    for (LineMapping lineMapping : lineMappings) {
      for (int i = 0; i <= lineMapping.length; ++i) {
        int minLength = Integer.MAX_VALUE;
        LineCharMapping current = null;

        for (LineCharMapping lcm : lineMapping.characterMappings) {
          
          if (i < lcm.startCharacter || i > lcm.endCharacter) {
            continue;
          }

          int lcmLength = lcm.endCharacter - lcm.startCharacter;

          if (lcmLength < minLength) {
            minLength = lcmLength;
            current = lcm;
          }
        }

        lineMapping.charToMap.put(i, current);
      }
    }
  }

  


  Mapping getMappingFor(Position position) {
    
    LineMappingInformation info = determineLineMappings();
    Map<Integer, LineMapping> lineMappings = info.mappings;

    
    buildCharacterMappings(lineMappings.values());

    LineMapping lineMapping = lineMappings.get(position.getLineNumber());

    if (lineMapping == null) {
      return null;
    }

    LineCharMapping lcm =
        lineMapping.charToMap.get(position.getCharacterIndex());


    if (lcm == null) {
      return null;
    }

    return lcm.basisMapping;
  }

  






  public void appendTo(Appendable out, String name) throws IOException {
    
    LineMappingInformation info = determineLineMappings();

    Map<Integer, LineMapping> lineMappings = info.mappings;
    int maxLine = info.maxLine;

    
    buildCharacterMappings(lineMappings.values());

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    out.append("{ \"file\" : \"");
    out.append(name);
    out.append("\", \"count\": ");
    out.append((maxLine + 1) + "");
    out.append(" }\n");

    for (int i = 0; i <= maxLine; ++i) {
      LineMapping lineMapping = lineMappings.get(i);

      if (lineMapping == null) {
        out.append("[]");
      } else {
        lineMapping.appendCharMapTo(out);
      }

      out.append("\n");
    }

    
    out.append("\n");

    for (int i = 0; i <= maxLine; ++i) {
      LineMapping lineMapping = lineMappings.get(i);

      if (lineMapping == null) {
        out.append("[]");
      } else {
        lineMapping.appendFileMapTo(out);
      }

      out.append("\n");
    }

    
    out.append("\n");

    for (int i = 0; i < mappings.size(); ++i) {
      Mapping mapping = mappings.get(i);
      mapping.appendTo(out);
      out.append("\n");
    }
  }
}
