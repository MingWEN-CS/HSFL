3133,3261d3132
< 
<   
< 
< 
< 
< 
<   static Node trySimplifyUnusedResult(Node n, CodeChangeHandler reporter) {
<     return trySimplifyUnusedResult(n, reporter, true);
<   }
< 
<   
< 
< 
< 
< 
< 
< 
<   static Node trySimplifyUnusedResult(
<       Node n, CodeChangeHandler reporter, boolean removeUnused) {
<     Node result = n;
< 
<     
<     switch (n.getType()) {
<       case Token.HOOK:
<         Node trueNode = trySimplifyUnusedResult(n.getFirstChild().getNext(), reporter);
<         Node falseNode = trySimplifyUnusedResult(n.getLastChild(), reporter);
<         
<         
<         
<         
<         
<         
<         if (trueNode == null && falseNode != null) {
<           n.setType(Token.OR);
<           Preconditions.checkState(n.getChildCount() == 2);
<         } else if (trueNode != null && falseNode == null) {
<           n.setType(Token.AND);
<           Preconditions.checkState(n.getChildCount() == 2);
<         } else if (trueNode == null && falseNode == null) {
<           result = trySimplifyUnusedResult(n.getFirstChild(), reporter);
<         } else {
<           
<           result = n;
<         }
<         break;
<       case Token.AND:
<       case Token.OR:
<         
<         
<         
<         Node conditionalResultNode = trySimplifyUnusedResult(
<             n.getLastChild(), reporter);
<         if (conditionalResultNode == null) {
<           Preconditions.checkState(n.hasOneChild());
<           
<           
<           result = trySimplifyUnusedResult(n.getFirstChild(), reporter);
<         }
<         break;
<       case Token.FUNCTION:
<         
<         
<         result = null;
<         break;
<       case Token.COMMA:
<         
<         
<         
<         
<         Node left = trySimplifyUnusedResult(n.getFirstChild(), reporter);
<         Node right = trySimplifyUnusedResult(n.getLastChild(), reporter);
<         if (left == null && right == null) {
<           result = null;
<         } else if (left == null) {
<           result = right;
<         } else if (right == null){
<           result = left;
<         } else {
<           
<           result = n;
<         }
<         break;
<       default:
<         if (!NodeUtil.nodeTypeMayHaveSideEffects(n)) {
<           
<           
<           Node resultList = null;
<           for (Node next, c = n.getFirstChild(); c != null; c = next) {
<             next = c.getNext();
<             c = trySimplifyUnusedResult(c, reporter);
<             if (c != null) {
<               c.detachFromParent();
<               if (resultList == null)  {
<                 
<                 resultList = c;
<               } else {
<                 
<                 
<                 resultList = IR.comma(resultList, c).srcref(c);
<               }
<             }
<           }
<           result = resultList;
<         }
<     }
< 
<     
<     if (n != result) {
<       Node parent = n.getParent();
<       if (result == null) {
<         if (removeUnused) {
<           parent.removeChild(n);
<         } else {
<           result = IR.empty().srcref(n);
<           parent.replaceChild(n, result);
<         }
<       } else {
<         
<         if (result.getParent() != null) {
<           result.detachFromParent();
<         }
<         n.getParent().replaceChild(n, result);
<       }
<       reporter.reportCodeChange();
<     }
< 
<     return result;
<   }
< 
