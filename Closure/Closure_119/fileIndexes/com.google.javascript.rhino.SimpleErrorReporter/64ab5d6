






































package com.google.javascript.rhino;

import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.ResourceBundle;






public class SimpleErrorReporter implements ErrorReporter {
    private List<String> warnings = null;
    private List<String> errors = null;

    @Override
    public void warning(String message, String sourceName, int line,
                        int lineOffset) {
        if (warnings == null) {
            warnings = new ArrayList<String>();
        }
        warnings.add(formatDetailedMessage(message, sourceName, line));
    }

    @Override
    public void error(String message, String sourceName, int line,
                      int lineOffset) {
        if (errors == null) {
            errors = new ArrayList<String>();
        }
        errors.add(formatDetailedMessage(message, sourceName, line));
    }

    


    public List<String> errors() {
        return errors;
    }

    


    public List<String> warnings() {
        return warnings;
    }

    private String formatDetailedMessage(
        String message, String sourceName, int lineNumber) {
      String details = message;
      if (sourceName == null || lineNumber <= 0) {
        return details;
      }
      StringBuilder buf = new StringBuilder(details);
      buf.append(" (");
      if (sourceName != null) {
        buf.append(sourceName);
      }
      if (lineNumber > 0) {
        buf.append('#');
        buf.append(lineNumber);
      }
      buf.append(')');
      return buf.toString();
    }

    public static String getMessage0(String messageId) {
      return getMessage(messageId, null);
    }

    public static String getMessage1(String messageId, Object arg1) {
      Object[] arguments = {arg1};
      return getMessage(messageId, arguments);
    }

    static String getMessage(String messageId, Object[] arguments) {
      final String defaultResource
          = "rhino_ast.java.com.google.javascript.rhino.Messages";

      Locale locale = Locale.getDefault();

      
      ResourceBundle rb = ResourceBundle.getBundle(defaultResource, locale);

      String formatString;
      try {
          formatString = rb.getString(messageId);
      } catch (java.util.MissingResourceException mre) {
          throw new RuntimeException
              ("no message resource found for message property " + messageId);
      }

      




      MessageFormat formatter = new MessageFormat(formatString);
      return formatter.format(arguments);
    }

}
