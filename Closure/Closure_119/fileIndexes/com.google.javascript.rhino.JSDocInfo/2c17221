






































package com.google.javascript.rhino;

import com.google.common.base.Preconditions;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import com.google.common.collect.Sets;

import java.io.Serializable;
import java.util.Collection;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;













public class JSDocInfo implements Serializable {
  private static final long serialVersionUID = 1L;

  





  public enum Visibility {
    PRIVATE,
    PROTECTED,
    PUBLIC,

    
    
    INHERITED
  }

  private static final class LazilyInitializedInfo implements Serializable {
    private static final long serialVersionUID = 1L;

    
    JSTypeExpression baseType = null;
    List<JSTypeExpression> extendedInterfaces = null;
    List<JSTypeExpression> implementedInterfaces = null;
    Map<String, JSTypeExpression> parameters = null;
    List<JSTypeExpression> thrownTypes = null;
    ImmutableList<String> templateTypeNames = null;
    ImmutableList<String> classTemplateTypeNames = null;

    
    String description = null;
    String meaning = null;
    String deprecated = null;
    String license = null;
    Set<String> suppressions = null;
    Set<String> modifies = null;
    String lendsName = null;
    boolean ngInject = false;
    boolean wizaction = false;
  }

  private static final class LazilyInitializedDocumentation {
    String sourceComment = null;
    List<Marker> markers = null;

    Map<String, String> parameters = null;
    Map<JSTypeExpression, String> throwsDescriptions = null;
    String blockDescription = null;
    String fileOverview = null;
    String returnDescription = null;
    String version = null;

    List<String> authors = null;
    List<String> sees = null;
  }

  



  public static class StringPosition extends SourcePosition<String> {
  }

  



  static class TrimmedStringPosition extends StringPosition {
    @Override public void setItem(String item) {
      Preconditions.checkArgument(
          item.charAt(0) != ' ' &&
          item.charAt(item.length() - 1) != ' ',
          "String has leading or trailing whitespace");
      super.setItem(item);
    }
  }

  



  public static class NamePosition extends SourcePosition<Node> {}

  



  public static class TypePosition extends SourcePosition<Node> {
    private boolean brackets = false;

    
    public boolean hasBrackets() {
      return brackets;
    }

    void setHasBrackets(boolean newVal) {
      brackets = newVal;
    }
  }

  









  public static final class Marker {
    private TrimmedStringPosition annotation = null;
    private TrimmedStringPosition name = null;
    private SourcePosition<Node> nameNode = null;
    private StringPosition description = null;
    private TypePosition type = null;

    


    public StringPosition getAnnotation() {
      return annotation;
    }

    void setAnnotation(TrimmedStringPosition p) {
      annotation = p;
    }

    




    @Deprecated
    public StringPosition getName() {
      return name;
    }

    void setName(TrimmedStringPosition p) {
      name = p;
    }

    



    public SourcePosition<Node> getNameNode() {
      return nameNode;
    }

    void setNameNode(SourcePosition<Node> p) {
      nameNode = p;
    }

    



    public StringPosition getDescription() {
      return description;
    }

    void setDescription(StringPosition p) {
      description = p;
    }

    



    public TypePosition getType() {
      return type;
    }

    void setType(TypePosition p) {
      type = p;
    }
  }

  private LazilyInitializedInfo info = null;

  private LazilyInitializedDocumentation documentation = null;

  
  private Node associatedNode = null;

  private Visibility visibility = null;

  










  private int bitset = 0x00;

  







  private JSTypeExpression type = null;

  


  private JSTypeExpression thisType = null;

  




  private boolean includeDocumentation = false;

  


  private int originalCommentPosition;

  
  
  

  
  private static final int MASK_FLAGS       = 0x3FFFFFFF;

  private static final int MASK_CONSTANT      = 0x00000001; 
  private static final int MASK_CONSTRUCTOR   = 0x00000002; 
  private static final int MASK_DEFINE        = 0x00000004; 
  private static final int MASK_HIDDEN        = 0x00000008; 
  private static final int MASK_PRESERVETRY   = 0x00000010; 
  private static final int MASK_NOCHECK       = 0x00000020; 
  private static final int MASK_OVERRIDE      = 0x00000040; 
  private static final int MASK_NOALIAS       = 0x00000080; 
  private static final int MASK_DEPRECATED    = 0x00000100; 
  private static final int MASK_INTERFACE     = 0x00000200; 
  private static final int MASK_EXPORT        = 0x00000400; 
  private static final int MASK_NOSHADOW      = 0x00000800; 
  private static final int MASK_FILEOVERVIEW  = 0x00001000; 
  private static final int MASK_IMPLICITCAST  = 0x00002000; 
  private static final int MASK_NOSIDEEFFECTS = 0x00004000; 
  private static final int MASK_EXTERNS       = 0x00008000; 
  private static final int MASK_JAVADISPATCH  = 0x00010000; 
  private static final int MASK_NOCOMPILE     = 0x00020000; 
  private static final int MASK_CONSISTIDGEN  = 0x00040000; 
  private static final int MASK_IDGEN         = 0x00080000; 
  private static final int MASK_EXPOSE        = 0x00100000; 
  private static final int MASK_STRUCT        = 0x00200000; 
  private static final int MASK_DICT          = 0x00400000; 
  private static final int MASK_STALBEIDGEN   = 0x00800000; 
  private static final int MASK_MAPPEDIDGEN   = 0x00800000; 

  
  
  private static final int MASK_TYPEFIELD    = 0xE0000000; 
  private static final int TYPEFIELD_TYPE    = 0x20000000; 
  private static final int TYPEFIELD_RETURN  = 0x40000000; 
  private static final int TYPEFIELD_ENUM    = 0x60000000; 
  private static final int TYPEFIELD_TYPEDEF = 0x80000000; 

  



  JSDocInfo(boolean includeDocumentation) {
    this.includeDocumentation = includeDocumentation;
  }

  
  public JSDocInfo() {}

  void setConsistentIdGenerator(boolean value) {
    setFlag(value, MASK_CONSISTIDGEN);
  }

  void setStableIdGenerator(boolean value) {
    setFlag(value, MASK_STALBEIDGEN);
  }

  void setMappedIdGenerator(boolean value) {
    setFlag(value, MASK_MAPPEDIDGEN);
  }

  void setConstant(boolean value) {
    setFlag(value, MASK_CONSTANT);
  }

  void setConstructor(boolean value) {
    setFlag(value, MASK_CONSTRUCTOR);
  }

  void setStruct() {
    setFlag(true, MASK_STRUCT);
  }

  void setDict() {
    setFlag(true, MASK_DICT);
  }

  void setDefine(boolean value) {
    setFlag(value, MASK_DEFINE);
  }

  void setHidden(boolean value) {
    setFlag(value, MASK_HIDDEN);
  }

  void setNoCheck(boolean value) {
    setFlag(value, MASK_NOCHECK);
  }

  void setShouldPreserveTry(boolean value) {
    setFlag(value, MASK_PRESERVETRY);
  }

  void setOverride(boolean value) {
    setFlag(value, MASK_OVERRIDE);
  }

  void setNoAlias(boolean value) {
    setFlag(value, MASK_NOALIAS);
  }

  
  public void setDeprecated(boolean value) {
    setFlag(value, MASK_DEPRECATED);
  }

  void setInterface(boolean value) {
    setFlag(value, MASK_INTERFACE);
  }

  void setExport(boolean value) {
    setFlag(value, MASK_EXPORT);
  }

  void setExpose(boolean value) {
    setFlag(value, MASK_EXPOSE);
  }

  void setNoShadow(boolean value) {
    setFlag(value, MASK_NOSHADOW);
  }

  void setIdGenerator(boolean value) {
    setFlag(value, MASK_IDGEN);
  }

  void setImplicitCast(boolean value) {
    setFlag(value, MASK_IMPLICITCAST);
  }

  void setNoSideEffects(boolean value) {
    setFlag(value, MASK_NOSIDEEFFECTS);
  }

  void setExterns(boolean value) {
    setFlag(value, MASK_EXTERNS);
  }

  void setJavaDispatch(boolean value) {
    setFlag(value, MASK_JAVADISPATCH);
  }

  void setNoCompile(boolean value) {
    setFlag(value, MASK_NOCOMPILE);
  }

  private void setFlag(boolean value, int mask) {
    if (value) {
      bitset |= mask;
    } else {
      bitset &= ~mask;
    }
  }

  



  public boolean isConsistentIdGenerator() {
    return getFlag(MASK_CONSISTIDGEN);
  }

  


  public boolean isStableIdGenerator() {
    return getFlag(MASK_STALBEIDGEN);
  }

  


  public boolean isMappedIdGenerator() {
    return getFlag(MASK_MAPPEDIDGEN);
  }

  



  public boolean isConstant() {
    return getFlag(MASK_CONSTANT) || isDefine();
  }

  



  public boolean isConstructor() {
    return getFlag(MASK_CONSTRUCTOR);
  }

  



  public boolean makesStructs() {
    return getFlag(MASK_STRUCT);
  }

  



  public boolean makesDicts() {
    return getFlag(MASK_DICT);
  }

  




  public boolean isDefine() {
    return getFlag(MASK_DEFINE);
  }

  



  public boolean isHidden() {
    return getFlag(MASK_HIDDEN);
  }

  



  public boolean isNoTypeCheck() {
    return getFlag(MASK_NOCHECK);
  }

  



  public boolean shouldPreserveTry() {
    return getFlag(MASK_PRESERVETRY);
  }

  



  public boolean isOverride() {
    return getFlag(MASK_OVERRIDE);
  }

  



  public boolean isNoAlias() {
    return getFlag(MASK_NOALIAS);
  }

  



  public boolean isDeprecated() {
    return getFlag(MASK_DEPRECATED);
  }

  



  public boolean isInterface() {
    return getFlag(MASK_INTERFACE);
  }

  



  public boolean isExport() {
    return getFlag(MASK_EXPORT);
  }

  



  public boolean isExpose() {
    return getFlag(MASK_EXPOSE);
  }

  



  public boolean isNoShadow() {
    return getFlag(MASK_NOSHADOW);
  }

  



  public boolean isIdGenerator() {
    return getFlag(MASK_IDGEN);
  }

  



  public boolean isImplicitCast() {
    return getFlag(MASK_IMPLICITCAST);
  }

  



  public boolean isNoSideEffects() {
    return getFlag(MASK_NOSIDEEFFECTS);
  }

  



  public boolean isExterns() {
    return getFlag(MASK_EXTERNS);
  }

  



  public boolean isJavaDispatch() {
    return getFlag(MASK_JAVADISPATCH);
  }

  



  public boolean isNoCompile() {
    return getFlag(MASK_NOCOMPILE);
  }

  


  public boolean containsDeclaration() {
    return (hasType()
        || hasReturnType()
        || hasEnumParameterType()
        || hasTypedefType()
        || hasThisType()
        || getParameterCount() > 0
        || getFlag(MASK_CONSTANT
            | MASK_CONSTRUCTOR
            | MASK_DEFINE
            | MASK_OVERRIDE
            | MASK_NOALIAS
            | MASK_DEPRECATED
            | MASK_INTERFACE
            | MASK_NOSHADOW
            | MASK_IMPLICITCAST
            | MASK_NOSIDEEFFECTS));
  }

  private boolean getFlag(int mask) {
    return (bitset & mask) != 0x00;
  }

  
  public void setVisibility(Visibility visibility) {
    this.visibility = visibility;
  }

  private void lazyInitInfo() {
    if (info == null) {
      info = new LazilyInitializedInfo();
    }
  }

  



  private boolean lazyInitDocumentation() {
    if (!includeDocumentation) {
      return false;
    }

    if (documentation == null) {
      documentation = new LazilyInitializedDocumentation();
    }

    return true;
  }

  



  Marker addMarker() {
    if (!lazyInitDocumentation()) {
      return null;
    }

    if (documentation.markers == null) {
      documentation.markers = Lists.newArrayList();
    }

    Marker marker = new Marker();
    documentation.markers.add(marker);
    return marker;
  }

  




  boolean setDeprecationReason(String reason) {
    lazyInitInfo();

    if (info.deprecated != null) {
      return false;
    }

    info.deprecated = reason;
    return true;
  }

  


  public void addSuppression(String suppression) {
    lazyInitInfo();

    if (info.suppressions == null) {
      info.suppressions = Sets.newHashSet();
    }
    info.suppressions.add(suppression);
  }

  



  boolean setSuppressions(Set<String> suppressions) {
    lazyInitInfo();

    if (info.suppressions != null) {
      return false;
    }

    info.suppressions = suppressions;
    return true;
  }

  


  void addModifies(String modifies) {
    lazyInitInfo();

    if (info.modifies == null) {
      info.modifies = Sets.newHashSet();
    }
    info.modifies.add(modifies);
  }

  



  boolean setModifies(Set<String> modifies) {
    lazyInitInfo();

    if (info.modifies != null) {
      return false;
    }

    info.modifies = modifies;
    return true;
  }

  


  boolean documentVersion(String version) {
    if (!lazyInitDocumentation()) {
      return true;
    }

    if (documentation.version != null) {
      return false;
    }

    documentation.version = version;
    return true;
  }

  


  boolean documentReference(String reference) {
    if (!lazyInitDocumentation()) {
      return true;
    }

    if (documentation.sees == null) {
      documentation.sees = Lists.newArrayList();
    }

    documentation.sees.add(reference);
    return true;
  }

  


  boolean documentAuthor(String author) {
    if (!lazyInitDocumentation()) {
      return true;
    }

    if (documentation.authors == null) {
      documentation.authors = Lists.newArrayList();
    }

    documentation.authors.add(author);
    return true;
  }

  


  boolean documentThrows(JSTypeExpression type, String throwsDescription) {
    if (!lazyInitDocumentation()) {
      return true;
    }

    if (documentation.throwsDescriptions == null) {
      documentation.throwsDescriptions =
          new LinkedHashMap<JSTypeExpression, String>();
    }

    if (!documentation.throwsDescriptions.containsKey(type)) {
      documentation.throwsDescriptions.put(type, throwsDescription);
      return true;
    }

    return false;
  }


  






  boolean documentParam(String parameter, String description) {
    if (!lazyInitDocumentation()) {
      return true;
    }

    if (documentation.parameters == null) {
      documentation.parameters = new LinkedHashMap<String, String>();
    }

    if (!documentation.parameters.containsKey(parameter)) {
      documentation.parameters.put(parameter, description);
      return true;
    } else {
      return false;
    }
  }

  




  boolean documentBlock(String description) {
    if (!lazyInitDocumentation()) {
      return true;
    }

    if (documentation.blockDescription != null) {
      return false;
    }

    documentation.blockDescription = description;
    return true;
  }

  




  boolean documentFileOverview(String description) {
    setFlag(true, MASK_FILEOVERVIEW);
    if (!lazyInitDocumentation()) {
      return true;
    }

    if (documentation.fileOverview != null) {
      return false;
    }

    documentation.fileOverview = description;
    return true;
  }

  





  boolean documentReturn(String description) {
    if (!lazyInitDocumentation()) {
      return true;
    }

    if (documentation.returnDescription != null) {
      return false;
    }

    documentation.returnDescription = description;
    return true;
  }

  







  boolean declareParam(JSTypeExpression jsType, String parameter) {
    lazyInitInfo();
    if (info.parameters == null) {
      info.parameters = new LinkedHashMap<String, JSTypeExpression>();
    }
    if (!info.parameters.containsKey(parameter)) {
      info.parameters.put(parameter, jsType);
      return true;
    } else {
      return false;
    }
  }

  





  boolean declareTemplateTypeNames(List<String> templateTypeNames) {
    lazyInitInfo();

    if (info.templateTypeNames != null) {
      return false;
    }

    info.templateTypeNames = ImmutableList.copyOf(templateTypeNames);
    return true;
  }

  





  boolean declareClassTemplateTypeNames(List<String> templateTypeNames) {
    lazyInitInfo();

    if (info.classTemplateTypeNames != null) {
      return false;
    }

    info.classTemplateTypeNames = ImmutableList.copyOf(templateTypeNames);
    return true;
  }

  




  boolean declareThrows(JSTypeExpression jsType) {
    lazyInitInfo();

    if (info.thrownTypes == null) {
      info.thrownTypes = Lists.newArrayList();
    }

    info.thrownTypes.add(jsType);
    return true;
  }

  




  public Visibility getVisibility() {
    return visibility;
  }

  





  public JSTypeExpression getParameterType(String parameter) {
    if (info == null || info.parameters == null) {
      return null;
    }
    return info.parameters.get(parameter);
  }

  


  public boolean hasParameter(String parameter) {
    if (info == null || info.parameters == null) {
      return false;
    }
    return info.parameters.containsKey(parameter);
  }

  





  public boolean hasParameterType(String parameter) {
    return getParameterType(parameter) != null;
  }

  






  public Set<String> getParameterNames() {
    if (info == null || info.parameters == null) {
      return ImmutableSet.of();
    }
    return ImmutableSet.copyOf(info.parameters.keySet());
  }

  


  public int getParameterCount() {
    if (info == null || info.parameters == null) {
      return 0;
    }
    return info.parameters.size();
  }

  void setType(JSTypeExpression type) {
    setType(type, TYPEFIELD_TYPE);
  }

  void setReturnType(JSTypeExpression type) {
    setType(type, TYPEFIELD_RETURN);
  }

  void setEnumParameterType(JSTypeExpression type) {
    setType(type, TYPEFIELD_ENUM);
  }

  void setTypedefType(JSTypeExpression type) {
    setType(type, TYPEFIELD_TYPEDEF);
  }

  private void setType(JSTypeExpression type, int mask) {
    if ((bitset & MASK_TYPEFIELD) != 0) {
      throw new IllegalStateException(
          "API tried to add two incompatible type tags. " +
          "This should have been blocked and emitted a warning.");
    }
    this.bitset = (bitset & MASK_FLAGS) | mask;
    this.type = type;
  }

  


  public List<JSTypeExpression> getThrownTypes() {
    if (info == null || info.thrownTypes == null) {
      return ImmutableList.of();
    }
    return Collections.unmodifiableList(info.thrownTypes);
  }

  



  public boolean hasType() {
    return hasType(TYPEFIELD_TYPE);
  }

  



  public boolean hasEnumParameterType() {
    return hasType(TYPEFIELD_ENUM);
  }

  



  public boolean hasTypedefType() {
    return hasType(TYPEFIELD_TYPEDEF);
  }

  



  public boolean hasReturnType() {
    return hasType(TYPEFIELD_RETURN);
  }

  private boolean hasType(int mask) {
    return (bitset & MASK_TYPEFIELD) == mask;
  }

  


  public JSTypeExpression getType() {
    return getType(TYPEFIELD_TYPE);
  }

  


  public JSTypeExpression getReturnType() {
    return getType(TYPEFIELD_RETURN);
  }

  


  public JSTypeExpression getEnumParameterType() {
    return getType(TYPEFIELD_ENUM);
  }

  


  public JSTypeExpression getTypedefType() {
    return getType(TYPEFIELD_TYPEDEF);
  }

  private JSTypeExpression getType(int typefield) {
    if ((MASK_TYPEFIELD & bitset) == typefield) {
      return type;
    } else {
      return null;
    }
  }

  


  public JSTypeExpression getThisType() {
    return thisType;
  }

  


  void setThisType(JSTypeExpression type) {
    this.thisType = type;
  }

  



  public boolean hasThisType() {
    return thisType != null;
  }

  void setBaseType(JSTypeExpression type) {
    lazyInitInfo();
    info.baseType = type;
  }

  


  public JSTypeExpression getBaseType() {
    return (info == null) ? null : info.baseType;
  }

  


  public String getDescription() {
    return (info == null) ? null : info.description;
  }

  void setDescription(String desc) {
    lazyInitInfo();
    info.description = desc;
  }

  










  public String getMeaning() {
    return (info == null) ? null : info.meaning;
  }

  void setMeaning(String meaning) {
    lazyInitInfo();
    info.meaning = meaning;
  }

  







  public String getLendsName() {
    return (info == null) ? null : info.lendsName;
  }

  void setLendsName(String name) {
    lazyInitInfo();
    info.lendsName = name;
  }

  


  public boolean isNgInject() {
    return (info == null) ? false : info.ngInject;
  }

  void setNgInject(boolean ngInject) {
    lazyInitInfo();
    info.ngInject = ngInject;
  }

  


  public boolean isWizaction() {
    return (info == null) ? false : info.wizaction;
  }

  void setWizaction(boolean wizaction) {
    lazyInitInfo();
    info.wizaction = wizaction;
  }

  


  public String getLicense() {
    return (info == null) ? null : info.license;
  }

  






  public void setLicense(String license) {
    lazyInitInfo();
    info.license = license;
  }

  @Override
  public String toString() {
    return "JSDocInfo";
  }

  



  public boolean hasBaseType() {
    return getBaseType() != null;
  }

  



  boolean addImplementedInterface(JSTypeExpression interfaceName) {
    lazyInitInfo();
    if (info.implementedInterfaces == null) {
      info.implementedInterfaces = Lists.newArrayListWithCapacity(2);
    }
    if (info.implementedInterfaces.contains(interfaceName)) {
      return false;
    }
    info.implementedInterfaces.add(interfaceName);
    return true;
  }

  





  public List<JSTypeExpression> getImplementedInterfaces() {
    if (info == null || info.implementedInterfaces == null) {
      return ImmutableList.of();
    }
    return Collections.unmodifiableList(info.implementedInterfaces);
  }

  



  public int getImplementedInterfaceCount() {
    if (info == null || info.implementedInterfaces == null) {
      return 0;
    }
    return info.implementedInterfaces.size();
  }

  




  boolean addExtendedInterface(JSTypeExpression type) {
    lazyInitInfo();
    if (info.extendedInterfaces == null) {
      info.extendedInterfaces = Lists.newArrayListWithCapacity(2);
    }
    if (info.extendedInterfaces.contains(type)) {
      return false;
    }
    info.extendedInterfaces.add(type);
    return true;
  }

  





  public List<JSTypeExpression> getExtendedInterfaces() {
    if (info == null || info.extendedInterfaces == null) {
      return ImmutableList.of();
    }
    return Collections.unmodifiableList(info.extendedInterfaces);
  }

  


  public int getExtendedInterfacesCount() {
    if (info == null || info.extendedInterfaces == null) {
      return 0;
    }
    return info.extendedInterfaces.size();
  }

  


  public String getDeprecationReason() {
    return info == null ? null : info.deprecated;
  }

  


  public Set<String> getSuppressions() {
    Set<String> suppressions = info == null ? null : info.suppressions;
    return suppressions == null ? Collections.<String>emptySet() : suppressions;
  }

  


  public Set<String> getModifies() {
    Set<String> modifies = info == null ? null : info.modifies;
    return modifies == null ? Collections.<String>emptySet() : modifies;
  }

  



  public boolean hasDescriptionForParameter(String name) {
    if (documentation == null || documentation.parameters == null) {
      return false;
    }

    return documentation.parameters.containsKey(name);
  }

  



  public String getDescriptionForParameter(String name) {
    if (documentation == null || documentation.parameters == null) {
      return null;
    }

    return documentation.parameters.get(name);
  }

  


  public Collection<String> getAuthors() {
    return documentation == null ? null : documentation.authors;
  }

  


  public Collection<String> getReferences() {
    return documentation == null ? null : documentation.sees;
  }

  


  public String getVersion() {
    return documentation == null ? null : documentation.version;
  }

  


  public String getReturnDescription() {
    return documentation == null ? null : documentation.returnDescription;
  }

  


  public String getBlockDescription() {
    return documentation == null ? null : documentation.blockDescription;
  }

  


  public boolean hasFileOverview() {
    return getFlag(MASK_FILEOVERVIEW);
  }

  


  public String getFileOverview() {
    return documentation == null ? null : documentation.fileOverview;
  }

  public Node getAssociatedNode() {
    return this.associatedNode;
  }

  






  public void setAssociatedNode(Node node) {
    this.associatedNode = node;
  }

  
  public String getSourceName() {
    return this.associatedNode != null
        ? this.associatedNode.getSourceFileName() : null;
  }

  
  public Collection<Marker> getMarkers() {
    return (documentation == null || documentation.markers == null)
        ? ImmutableList.<Marker>of() : documentation.markers;
  }

  
  public ImmutableList<String> getTemplateTypeNames() {
    if (info == null || info.templateTypeNames == null) {
      return ImmutableList.of();
    }
    return info.templateTypeNames;
  }

  public ImmutableList<String> getClassTemplateTypeNames() {
    if (info == null || info.classTemplateTypeNames == null) {
      return ImmutableList.of();
    }
    return info.classTemplateTypeNames;
  }

  






  public Collection<Node> getTypeNodes() {
    List<Node> nodes = Lists.newArrayList();

    if (type != null) {
      nodes.add(type.getRoot());
    }

    if (thisType != null) {
      nodes.add(thisType.getRoot());
    }

    if (info != null) {
      if (info.baseType != null) {
        nodes.add(info.baseType.getRoot());
      }

      if (info.extendedInterfaces != null) {
        for (JSTypeExpression interfaceType : info.extendedInterfaces) {
          nodes.add(interfaceType.getRoot());
        }
      }

      if (info.implementedInterfaces != null) {
        for (JSTypeExpression interfaceType : info.implementedInterfaces) {
          nodes.add(interfaceType.getRoot());
        }
      }

      if (info.parameters != null) {
        for (JSTypeExpression parameterType : info.parameters.values()) {
          if (parameterType != null) {
            nodes.add(parameterType.getRoot());
          }
        }
      }

      if (info.thrownTypes != null) {
        for (JSTypeExpression thrownType : info.thrownTypes) {
          if (thrownType != null) {
            nodes.add(thrownType.getRoot());
          }
        }
      }
    }

    return nodes;
  }

  public boolean hasModifies() {
    return info != null && info.modifies != null;
  }

  



  public String getOriginalCommentString() {
    return documentation == null ? null : documentation.sourceComment;
  }

  void setOriginalCommentString(String sourceComment) {
    if (!lazyInitDocumentation()) {
      return;
    }
    documentation.sourceComment = sourceComment;
  }

  public int getOriginalCommentPosition() {
    return originalCommentPosition;
  }

  void setOriginalCommentPosition(int position) {
    originalCommentPosition = position;
  }
}
