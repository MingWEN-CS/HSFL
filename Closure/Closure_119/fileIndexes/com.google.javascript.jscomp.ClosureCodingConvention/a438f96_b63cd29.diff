1,64c1,47
< <!DOCTYPE HTML PUBLIC "-
< <!--NewPage-->
< <HTML>
< <HEAD>
< <TITLE>
< ClosureCodingConvention (Compiler)
< </TITLE>
< 
< 
< <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../dev_javadoc.css" TITLE="Style">
< 
< <SCRIPT type="text/javascript">
< function windowTitle()
< {
<     if (location.href.indexOf('is-external=true') == -1) {
<         parent.document.title="ClosureCodingConvention (Compiler)";
<     }
< }
< </SCRIPT>
< <NOSCRIPT>
< </NOSCRIPT>
< 
< </HEAD>
< 
< <BODY BGCOLOR="white" onload="windowTitle();">
< <HR>
< 
< 
< <!-- ========= START OF TOP NAVBAR ======= -->
< <A NAME="navbar_top"><!-- --></A>
< <A HREF="#skip-navbar_top" title="Skip navigation links"></A>
< <TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
< <TR>
< <TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
< <A NAME="navbar_top_firstrow"><!-- --></A>
< <TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
<   <TR ALIGN="center" VALIGN="top">
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
<   </TR>
< </TABLE>
< </TD>
< <TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
< </EM>
< </TD>
< </TR>
< 
< <TR>
< <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
< &nbsp;<A HREF="../../../../com/google/javascript/jscomp/CheckLevelLegacy.html" title="enum in com.google.javascript.jscomp"><B>PREV CLASS</B></A>&nbsp;
< &nbsp;<A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html" title="interface in com.google.javascript.jscomp"><B>NEXT CLASS</B></A></FONT></TD>
< <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
<   <A HREF="../../../../index.html?com/google/javascript/jscomp/ClosureCodingConvention.html" target="_top"><B>FRAMES</B></A>  &nbsp;
< &nbsp;<A HREF="ClosureCodingConvention.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
< &nbsp;<SCRIPT type="text/javascript">
<   <!--
<   if(window==top) {
<     document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
<   }
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> package com.google.javascript.jscomp;
> 
> import com.google.common.base.Preconditions;
> import com.google.common.collect.ImmutableSet;
> import com.google.common.collect.ImmutableList;
> import com.google.common.collect.Lists;
> import com.google.javascript.rhino.Node;
> import com.google.javascript.rhino.Token;
> import com.google.javascript.rhino.jstype.FunctionType;
> import com.google.javascript.rhino.jstype.JSTypeNative;
> import com.google.javascript.rhino.jstype.ObjectType;
> 
> import java.util.Collection;
> import java.util.List;
> import java.util.Set;
> 
> 
> 
> 
> 
> 
> 
> 
> public class ClosureCodingConvention extends DefaultCodingConvention {
> 
>   private static final String TYPEDEF_NAME = "goog.typedef";
> 
>   static final DiagnosticType OBJECTLIT_EXPECTED = DiagnosticType.warning(
>       "JSC_REFLECT_OBJECTLIT_EXPECTED",
>       "Object literal expected as second argument");
> 
66,750c49,60
< </SCRIPT>
< <NOSCRIPT>
<   <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
< </NOSCRIPT>
< 
< 
< </FONT></TD>
< </TR>
< <TR>
< <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
<   SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
< <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
< DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
< </TR>
< </TABLE>
< <A NAME="skip-navbar_top"></A>
< <!-- ========= END OF TOP NAVBAR ========= -->
< 
< <HR>
< <!-- ======== START OF CLASS DATA ======== -->
< <H2>
< <FONT SIZE="-1">
< com.google.javascript.jscomp</FONT>
< <BR>
< Class ClosureCodingConvention</H2>
< <PRE>
< <A HREF="http:
<   <IMG SRC="../../../../resources/inherit.gif" ALT="extended by "><A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html" title="class in com.google.javascript.jscomp">com.google.javascript.jscomp.DefaultCodingConvention</A>
<       <IMG SRC="../../../../resources/inherit.gif" ALT="extended by "><B>com.google.javascript.jscomp.ClosureCodingConvention</B>
< </PRE>
< <DL>
< <DT><B>All Implemented Interfaces:</B> <DD><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html" title="interface in com.google.javascript.jscomp">CodingConvention</A></DD>
< </DL>
< <DL>
< <DT><B>Direct Known Subclasses:</B> <DD><A HREF="../../../../com/google/javascript/jscomp/GoogleCodingConvention.html" title="class in com.google.javascript.jscomp">GoogleCodingConvention</A></DD>
< </DL>
< <HR>
< <DL>
< <DT><PRE>public class <B>ClosureCodingConvention</B><DT>extends <A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html" title="class in com.google.javascript.jscomp">DefaultCodingConvention</A></DL>
< </PRE>
< 
< <P>
< This describes the Closure-specific JavaScript coding conventions.
< <P>
< 
< <P>
< <HR>
< 
< <P>
< <!-- ======== NESTED CLASS SUMMARY ======== -->
< 
< <A NAME="nested_class_summary"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
< <B>Nested Class Summary</B></FONT></TH>
< </TR>
< </TABLE>
< &nbsp;<A NAME="nested_classes_inherited_from_class_com.google.javascript.jscomp.CodingConvention"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
< <TH ALIGN="left"><B>Nested classes/interfaces inherited from interface com.google.javascript.jscomp.<A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html" title="interface in com.google.javascript.jscomp">CodingConvention</A></B></TH>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD><CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.DelegateRelationship.html" title="class in com.google.javascript.jscomp">CodingConvention.DelegateRelationship</A>, <A HREF="../../../../com/google/javascript/jscomp/CodingConvention.ObjectLiteralCast.html" title="class in com.google.javascript.jscomp">CodingConvention.ObjectLiteralCast</A>, <A HREF="../../../../com/google/javascript/jscomp/CodingConvention.SubclassRelationship.html" title="class in com.google.javascript.jscomp">CodingConvention.SubclassRelationship</A>, <A HREF="../../../../com/google/javascript/jscomp/CodingConvention.SubclassType.html" title="enum in com.google.javascript.jscomp">CodingConvention.SubclassType</A></CODE></TD>
< </TR>
< </TABLE>
< &nbsp;
< 
< <!-- ======== CONSTRUCTOR SUMMARY ======== -->
< 
< <A NAME="constructor_summary"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
< <B>Constructor Summary</B></FONT></TH>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/ClosureCodingConvention.html#ClosureCodingConvention()">ClosureCodingConvention</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< </TABLE>
< &nbsp;
< <!-- ========== METHOD SUMMARY =========== -->
< 
< <A NAME="method_summary"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
< <B>Method Summary</B></FONT></TH>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/ClosureCodingConvention.html#applySingletonGetter(com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.ObjectType)">applySingletonGetter</A></B>(<A HREF="../../../../com/google/javascript/rhino/jstype/FunctionType.html" title="class in com.google.javascript.rhino.jstype">FunctionType</A>&nbsp;functionType,
<                      <A HREF="../../../../com/google/javascript/rhino/jstype/FunctionType.html" title="class in com.google.javascript.rhino.jstype">FunctionType</A>&nbsp;getterType,
<                      <A HREF="../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A>&nbsp;objectType)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;In many JS libraries, the function that adds a singleton getter to a class
<  adds properties to the class.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/ClosureCodingConvention.html#applySubclassRelationship(com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.jscomp.CodingConvention.SubclassType)">applySubclassRelationship</A></B>(<A HREF="../../../../com/google/javascript/rhino/jstype/FunctionType.html" title="class in com.google.javascript.rhino.jstype">FunctionType</A>&nbsp;parentCtor,
<                           <A HREF="../../../../com/google/javascript/rhino/jstype/FunctionType.html" title="class in com.google.javascript.rhino.jstype">FunctionType</A>&nbsp;childCtor,
<                           <A HREF="../../../../com/google/javascript/jscomp/CodingConvention.SubclassType.html" title="enum in com.google.javascript.jscomp">CodingConvention.SubclassType</A>&nbsp;type)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Closure's goog.inherits adds a <code>superClass_</code> property to the
<  subclass, and a <code>constructor</code> property.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/ClosureCodingConvention.html#extractClassNameIfProvide(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)">extractClassNameIfProvide</A></B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;node,
<                           <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;parent)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Exctracts X from goog.provide('X'), if the applied Node is goog.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/ClosureCodingConvention.html#extractClassNameIfRequire(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)">extractClassNameIfRequire</A></B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;node,
<                           <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;parent)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Exctracts X from goog.require('X'), if the applied Node is goog.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/ClosureCodingConvention.html#getAbstractMethodName()">getAbstractMethodName</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Function name for abstract methods.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/jscomp/CodingConvention.SubclassRelationship.html" title="class in com.google.javascript.jscomp">CodingConvention.SubclassRelationship</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/ClosureCodingConvention.html#getClassesDefinedByCall(com.google.javascript.rhino.Node)">getClassesDefinedByCall</A></B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;callNode)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checks if the given method defines a subclass relationship,
<  and if it does, returns information on that relationship.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/ClosureCodingConvention.html#getExportPropertyFunction()">getExportPropertyFunction</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Use closure's implementation.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/ClosureCodingConvention.html#getExportSymbolFunction()">getExportSymbolFunction</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Use closure's implementation.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/ClosureCodingConvention.html#getGlobalObject()">getGlobalObject</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the name of the global object.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/jscomp/CodingConvention.ObjectLiteralCast.html" title="class in com.google.javascript.jscomp">CodingConvention.ObjectLiteralCast</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/ClosureCodingConvention.html#getObjectLiteralCast(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)">getObjectLiteralCast</A></B>(<A HREF="../../../../com/google/javascript/jscomp/NodeTraversal.html" title="class in com.google.javascript.jscomp">NodeTraversal</A>&nbsp;t,
<                      <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;callNode)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checks if the given method performs a object literal cast, and if it does,
<  returns information on the cast.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/ClosureCodingConvention.html#getSingletonGetterClassName(com.google.javascript.rhino.Node)">getSingletonGetterClassName</A></B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;callNode)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checks if the given method defines a singleton getter, and if it does,
<  returns the name of the class with the singleton getter.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/ClosureCodingConvention.html#identifyTypeDeclarationCall(com.google.javascript.rhino.Node)">identifyTypeDeclarationCall</A></B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;n)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checks if the given CALL node is forward-declaring any types,
<  and returns the name of the types if it is.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/ClosureCodingConvention.html#identifyTypeDefAssign(com.google.javascript.rhino.Node)">identifyTypeDefAssign</A></B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;n)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checks if the given ASSIGN node is a typedef, and returns the
<  name of the type if it is.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/ClosureCodingConvention.html#isOptionalParameter(com.google.javascript.rhino.Node)">isOptionalParameter</A></B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;parameter)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This checks whether a given parameter name should be treated as an
<  optional parameter as far as type checking or function call arg count
<  checking is concerned.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/ClosureCodingConvention.html#isPrivate(java.lang.String)">isPrivate</A></B>(<A HREF="http:
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checks whether a name should be considered private.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/ClosureCodingConvention.html#isPropertyTestFunction(com.google.javascript.rhino.Node)">isPropertyTestFunction</A></B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;call)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Whether this CALL function is testing for the existence of a property.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/ClosureCodingConvention.html#isSuperClassReference(java.lang.String)">isSuperClassReference</A></B>(<A HREF="http:
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns true if passed a string referring to the superclass.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/ClosureCodingConvention.html#isVarArgsParameter(com.google.javascript.rhino.Node)">isVarArgsParameter</A></B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;parameter)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This checks whether a given parameter should be treated as a marker
<  for a variable argument list function.</TD>
< </TR>
< </TABLE>
< &nbsp;<A NAME="methods_inherited_from_class_com.google.javascript.jscomp.DefaultCodingConvention"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
< <TH ALIGN="left"><B>Methods inherited from class com.google.javascript.jscomp.<A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html" title="class in com.google.javascript.jscomp">DefaultCodingConvention</A></B></TH>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD><CODE><A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html#applyDelegateRelationship(com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.jstype.ObjectType, com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.FunctionType)">applyDelegateRelationship</A>, <A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html#defineDelegateProxyPrototypeProperties(com.google.javascript.rhino.jstype.JSTypeRegistry, com.google.javascript.jscomp.Scope, java.util.List)">defineDelegateProxyPrototypeProperties</A>, <A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html#getDelegateRelationship(com.google.javascript.rhino.Node)">getDelegateRelationship</A>, <A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html#getDelegateSuperclassName()">getDelegateSuperclassName</A>, <A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html#isConstant(java.lang.String)">isConstant</A>, <A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html#isExported(java.lang.String)">isExported</A>, <A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html#isExported(java.lang.String, boolean)">isExported</A>, <A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html#isValidEnumKey(java.lang.String)">isValidEnumKey</A></CODE></TD>
< </TR>
< </TABLE>
< &nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
< <TH ALIGN="left"><B>Methods inherited from class java.lang.<A HREF="http:
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD><CODE><A HREF="http:
< </TR>
< </TABLE>
< &nbsp;
< <P>
< 
< <!-- ========= CONSTRUCTOR DETAIL ======== -->
< 
< <A NAME="constructor_detail"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
< <B>Constructor Detail</B></FONT></TH>
< </TR>
< </TABLE>
< 
< <A NAME="ClosureCodingConvention()"><!-- --></A><H3>
< ClosureCodingConvention</H3>
< <PRE>
< public <B>ClosureCodingConvention</B>()</PRE>
< <DL>
< </DL>
< 
< <!-- ============ METHOD DETAIL ========== -->
< 
< <A NAME="method_detail"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
< <B>Method Detail</B></FONT></TH>
< </TR>
< </TABLE>
< 
< <A NAME="applySubclassRelationship(com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.jscomp.CodingConvention.SubclassType)"><!-- --></A><H3>
< applySubclassRelationship</H3>
< <PRE>
< public void <B>applySubclassRelationship</B>(<A HREF="../../../../com/google/javascript/rhino/jstype/FunctionType.html" title="class in com.google.javascript.rhino.jstype">FunctionType</A>&nbsp;parentCtor,
<                                       <A HREF="../../../../com/google/javascript/rhino/jstype/FunctionType.html" title="class in com.google.javascript.rhino.jstype">FunctionType</A>&nbsp;childCtor,
<                                       <A HREF="../../../../com/google/javascript/jscomp/CodingConvention.SubclassType.html" title="enum in com.google.javascript.jscomp">CodingConvention.SubclassType</A>&nbsp;type)</PRE>
< <DL>
< <DD>Closure's goog.inherits adds a <code>superClass_</code> property to the
<  subclass, and a <code>constructor</code> property.
< <P>
< <DD><DL>
< <DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html#applySubclassRelationship(com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.jscomp.CodingConvention.SubclassType)">applySubclassRelationship</A></CODE> in interface <CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html" title="interface in com.google.javascript.jscomp">CodingConvention</A></CODE><DT><B>Overrides:</B><DD><CODE><A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html#applySubclassRelationship(com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.jscomp.CodingConvention.SubclassType)">applySubclassRelationship</A></CODE> in class <CODE><A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html" title="class in com.google.javascript.jscomp">DefaultCodingConvention</A></CODE></DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getClassesDefinedByCall(com.google.javascript.rhino.Node)"><!-- --></A><H3>
< getClassesDefinedByCall</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/jscomp/CodingConvention.SubclassRelationship.html" title="class in com.google.javascript.jscomp">CodingConvention.SubclassRelationship</A> <B>getClassesDefinedByCall</B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;callNode)</PRE>
< <DL>
< <DD>Checks if the given method defines a subclass relationship,
<  and if it does, returns information on that relationship. By default,
<  always returns null. Meant to be overridden by subclasses.
< 
<  <p>Understands several different inheritance patterns that occur in
<  Google code (various uses of <code>inherits</code> and <code>mixin</code>).
< <P>
< <DD><DL>
< <DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html#getClassesDefinedByCall(com.google.javascript.rhino.Node)">getClassesDefinedByCall</A></CODE> in interface <CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html" title="interface in com.google.javascript.jscomp">CodingConvention</A></CODE><DT><B>Overrides:</B><DD><CODE><A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html#getClassesDefinedByCall(com.google.javascript.rhino.Node)">getClassesDefinedByCall</A></CODE> in class <CODE><A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html" title="class in com.google.javascript.jscomp">DefaultCodingConvention</A></CODE></DL>
< </DD>
< <DD><DL>
< <DT><B>Parameters:</B><DD><CODE>callNode</CODE> - A CALL node.</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="isSuperClassReference(java.lang.String)"><!-- --></A><H3>
< isSuperClassReference</H3>
< <PRE>
< public boolean <B>isSuperClassReference</B>(<A HREF="http:
< <DL>
< <DD><B>Description copied from interface: <CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html#isSuperClassReference(java.lang.String)">CodingConvention</A></CODE></B></DD>
< <DD>Returns true if passed a string referring to the superclass.  The string
<  will usually be from the string node at the right of a GETPROP, e.g.
<  this.superClass_.
< <P>
< <DD><DL>
< <DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html#isSuperClassReference(java.lang.String)">isSuperClassReference</A></CODE> in interface <CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html" title="interface in com.google.javascript.jscomp">CodingConvention</A></CODE><DT><B>Overrides:</B><DD><CODE><A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html#isSuperClassReference(java.lang.String)">isSuperClassReference</A></CODE> in class <CODE><A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html" title="class in com.google.javascript.jscomp">DefaultCodingConvention</A></CODE></DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="extractClassNameIfProvide(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)"><!-- --></A><H3>
< extractClassNameIfProvide</H3>
< <PRE>
< public <A HREF="http:
<                                         <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;parent)</PRE>
< <DL>
< <DD>Exctracts X from goog.provide('X'), if the applied Node is goog.
< <P>
< <DD><DL>
< <DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html#extractClassNameIfProvide(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)">extractClassNameIfProvide</A></CODE> in interface <CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html" title="interface in com.google.javascript.jscomp">CodingConvention</A></CODE><DT><B>Overrides:</B><DD><CODE><A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html#extractClassNameIfProvide(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)">extractClassNameIfProvide</A></CODE> in class <CODE><A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html" title="class in com.google.javascript.jscomp">DefaultCodingConvention</A></CODE></DL>
< </DD>
< <DD><DL>
< 
< <DT><B>Returns:</B><DD>The extracted class name, or null.</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="extractClassNameIfRequire(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)"><!-- --></A><H3>
< extractClassNameIfRequire</H3>
< <PRE>
< public <A HREF="http:
<                                         <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;parent)</PRE>
< <DL>
< <DD>Exctracts X from goog.require('X'), if the applied Node is goog.
< <P>
< <DD><DL>
< <DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html#extractClassNameIfRequire(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)">extractClassNameIfRequire</A></CODE> in interface <CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html" title="interface in com.google.javascript.jscomp">CodingConvention</A></CODE><DT><B>Overrides:</B><DD><CODE><A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html#extractClassNameIfRequire(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)">extractClassNameIfRequire</A></CODE> in class <CODE><A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html" title="class in com.google.javascript.jscomp">DefaultCodingConvention</A></CODE></DL>
< </DD>
< <DD><DL>
< 
< <DT><B>Returns:</B><DD>The extracted class name, or null.</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getExportPropertyFunction()"><!-- --></A><H3>
< getExportPropertyFunction</H3>
< <PRE>
< public <A HREF="http:
< <DL>
< <DD>Use closure's implementation.
< <P>
< <DD><DL>
< <DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html#getExportPropertyFunction()">getExportPropertyFunction</A></CODE> in interface <CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html" title="interface in com.google.javascript.jscomp">CodingConvention</A></CODE><DT><B>Overrides:</B><DD><CODE><A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html#getExportPropertyFunction()">getExportPropertyFunction</A></CODE> in class <CODE><A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html" title="class in com.google.javascript.jscomp">DefaultCodingConvention</A></CODE></DL>
< </DD>
< <DD><DL>
< 
< <DT><B>Returns:</B><DD>closure's function name for exporting properties.</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getExportSymbolFunction()"><!-- --></A><H3>
< getExportSymbolFunction</H3>
< <PRE>
< public <A HREF="http:
< <DL>
< <DD>Use closure's implementation.
< <P>
< <DD><DL>
< <DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html#getExportSymbolFunction()">getExportSymbolFunction</A></CODE> in interface <CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html" title="interface in com.google.javascript.jscomp">CodingConvention</A></CODE><DT><B>Overrides:</B><DD><CODE><A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html#getExportSymbolFunction()">getExportSymbolFunction</A></CODE> in class <CODE><A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html" title="class in com.google.javascript.jscomp">DefaultCodingConvention</A></CODE></DL>
< </DD>
< <DD><DL>
< 
< <DT><B>Returns:</B><DD>closure's function name for exporting symbols.</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="identifyTypeDeclarationCall(com.google.javascript.rhino.Node)"><!-- --></A><H3>
< identifyTypeDeclarationCall</H3>
< <PRE>
< public <A HREF="http:
< <DL>
< <DD><B>Description copied from interface: <CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html#identifyTypeDeclarationCall(com.google.javascript.rhino.Node)">CodingConvention</A></CODE></B></DD>
< <DD>Checks if the given CALL node is forward-declaring any types,
<  and returns the name of the types if it is.
< <P>
< <DD><DL>
< <DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html#identifyTypeDeclarationCall(com.google.javascript.rhino.Node)">identifyTypeDeclarationCall</A></CODE> in interface <CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html" title="interface in com.google.javascript.jscomp">CodingConvention</A></CODE><DT><B>Overrides:</B><DD><CODE><A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html#identifyTypeDeclarationCall(com.google.javascript.rhino.Node)">identifyTypeDeclarationCall</A></CODE> in class <CODE><A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html" title="class in com.google.javascript.jscomp">DefaultCodingConvention</A></CODE></DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="identifyTypeDefAssign(com.google.javascript.rhino.Node)"><!-- --></A><H3>
< identifyTypeDefAssign</H3>
< <PRE>
< public <A HREF="http:
< <DL>
< <DD><B>Description copied from interface: <CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html#identifyTypeDefAssign(com.google.javascript.rhino.Node)">CodingConvention</A></CODE></B></DD>
< <DD>Checks if the given ASSIGN node is a typedef, and returns the
<  name of the type if it is.
< <P>
< <DD><DL>
< <DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html#identifyTypeDefAssign(com.google.javascript.rhino.Node)">identifyTypeDefAssign</A></CODE> in interface <CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html" title="interface in com.google.javascript.jscomp">CodingConvention</A></CODE><DT><B>Overrides:</B><DD><CODE><A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html#identifyTypeDefAssign(com.google.javascript.rhino.Node)">identifyTypeDefAssign</A></CODE> in class <CODE><A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html" title="class in com.google.javascript.jscomp">DefaultCodingConvention</A></CODE></DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getAbstractMethodName()"><!-- --></A><H3>
< getAbstractMethodName</H3>
< <PRE>
< public <A HREF="http:
< <DL>
< <DD><B>Description copied from interface: <CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html#getAbstractMethodName()">CodingConvention</A></CODE></B></DD>
< <DD>Function name for abstract methods. An abstract method can be assigned to
<  an interface method instead of an function expression in order to avoid
<  linter warnings produced by assigning a function without a return value
<  where a return value is expected.
< <P>
< <DD><DL>
< <DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html#getAbstractMethodName()">getAbstractMethodName</A></CODE> in interface <CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html" title="interface in com.google.javascript.jscomp">CodingConvention</A></CODE><DT><B>Overrides:</B><DD><CODE><A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html#getAbstractMethodName()">getAbstractMethodName</A></CODE> in class <CODE><A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html" title="class in com.google.javascript.jscomp">DefaultCodingConvention</A></CODE></DL>
< </DD>
< <DD><DL>
< 
< <DT><B>Returns:</B><DD>function name.</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getSingletonGetterClassName(com.google.javascript.rhino.Node)"><!-- --></A><H3>
< getSingletonGetterClassName</H3>
< <PRE>
< public <A HREF="http:
< <DL>
< <DD><B>Description copied from interface: <CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html#getSingletonGetterClassName(com.google.javascript.rhino.Node)">CodingConvention</A></CODE></B></DD>
< <DD>Checks if the given method defines a singleton getter, and if it does,
<  returns the name of the class with the singleton getter. By default, always
<  returns null. Meant to be overridden by subclasses.
< <P>
< <DD><DL>
< <DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html#getSingletonGetterClassName(com.google.javascript.rhino.Node)">getSingletonGetterClassName</A></CODE> in interface <CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html" title="interface in com.google.javascript.jscomp">CodingConvention</A></CODE><DT><B>Overrides:</B><DD><CODE><A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html#getSingletonGetterClassName(com.google.javascript.rhino.Node)">getSingletonGetterClassName</A></CODE> in class <CODE><A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html" title="class in com.google.javascript.jscomp">DefaultCodingConvention</A></CODE></DL>
< </DD>
< <DD><DL>
< <DT><B>Parameters:</B><DD><CODE>callNode</CODE> - A CALL node.</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="applySingletonGetter(com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.ObjectType)"><!-- --></A><H3>
< applySingletonGetter</H3>
< <PRE>
< public void <B>applySingletonGetter</B>(<A HREF="../../../../com/google/javascript/rhino/jstype/FunctionType.html" title="class in com.google.javascript.rhino.jstype">FunctionType</A>&nbsp;functionType,
<                                  <A HREF="../../../../com/google/javascript/rhino/jstype/FunctionType.html" title="class in com.google.javascript.rhino.jstype">FunctionType</A>&nbsp;getterType,
<                                  <A HREF="../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A>&nbsp;objectType)</PRE>
< <DL>
< <DD><B>Description copied from interface: <CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html#applySingletonGetter(com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.ObjectType)">CodingConvention</A></CODE></B></DD>
< <DD>In many JS libraries, the function that adds a singleton getter to a class
<  adds properties to the class.
< <P>
< <DD><DL>
< <DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html#applySingletonGetter(com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.ObjectType)">applySingletonGetter</A></CODE> in interface <CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html" title="interface in com.google.javascript.jscomp">CodingConvention</A></CODE><DT><B>Overrides:</B><DD><CODE><A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html#applySingletonGetter(com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.FunctionType, com.google.javascript.rhino.jstype.ObjectType)">applySingletonGetter</A></CODE> in class <CODE><A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html" title="class in com.google.javascript.jscomp">DefaultCodingConvention</A></CODE></DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getGlobalObject()"><!-- --></A><H3>
< getGlobalObject</H3>
< <PRE>
< public <A HREF="http:
< <DL>
< <DD><B>Description copied from interface: <CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html#getGlobalObject()">CodingConvention</A></CODE></B></DD>
< <DD>Gets the name of the global object.
< <P>
< <DD><DL>
< <DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html#getGlobalObject()">getGlobalObject</A></CODE> in interface <CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html" title="interface in com.google.javascript.jscomp">CodingConvention</A></CODE><DT><B>Overrides:</B><DD><CODE><A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html#getGlobalObject()">getGlobalObject</A></CODE> in class <CODE><A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html" title="class in com.google.javascript.jscomp">DefaultCodingConvention</A></CODE></DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="isPropertyTestFunction(com.google.javascript.rhino.Node)"><!-- --></A><H3>
< isPropertyTestFunction</H3>
< <PRE>
< public boolean <B>isPropertyTestFunction</B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;call)</PRE>
< <DL>
< <DD><B>Description copied from interface: <CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html#isPropertyTestFunction(com.google.javascript.rhino.Node)">CodingConvention</A></CODE></B></DD>
< <DD>Whether this CALL function is testing for the existence of a property.
< <P>
< <DD><DL>
< <DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html#isPropertyTestFunction(com.google.javascript.rhino.Node)">isPropertyTestFunction</A></CODE> in interface <CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html" title="interface in com.google.javascript.jscomp">CodingConvention</A></CODE><DT><B>Overrides:</B><DD><CODE><A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html#isPropertyTestFunction(com.google.javascript.rhino.Node)">isPropertyTestFunction</A></CODE> in class <CODE><A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html" title="class in com.google.javascript.jscomp">DefaultCodingConvention</A></CODE></DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getObjectLiteralCast(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)"><!-- --></A><H3>
< getObjectLiteralCast</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/jscomp/CodingConvention.ObjectLiteralCast.html" title="class in com.google.javascript.jscomp">CodingConvention.ObjectLiteralCast</A> <B>getObjectLiteralCast</B>(<A HREF="../../../../com/google/javascript/jscomp/NodeTraversal.html" title="class in com.google.javascript.jscomp">NodeTraversal</A>&nbsp;t,
<                                                                <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;callNode)</PRE>
< <DL>
< <DD><B>Description copied from interface: <CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html#getObjectLiteralCast(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)">CodingConvention</A></CODE></B></DD>
< <DD>Checks if the given method performs a object literal cast, and if it does,
<  returns information on the cast. By default, always returns null. Meant
<  to be overridden by subclasses.
< <P>
< <DD><DL>
< <DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html#getObjectLiteralCast(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)">getObjectLiteralCast</A></CODE> in interface <CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html" title="interface in com.google.javascript.jscomp">CodingConvention</A></CODE><DT><B>Overrides:</B><DD><CODE><A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html#getObjectLiteralCast(com.google.javascript.jscomp.NodeTraversal, com.google.javascript.rhino.Node)">getObjectLiteralCast</A></CODE> in class <CODE><A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html" title="class in com.google.javascript.jscomp">DefaultCodingConvention</A></CODE></DL>
< </DD>
< <DD><DL>
< <DT><B>Parameters:</B><DD><CODE>t</CODE> - The node traversal.<DD><CODE>callNode</CODE> - A CALL node.</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="isOptionalParameter(com.google.javascript.rhino.Node)"><!-- --></A><H3>
< isOptionalParameter</H3>
< <PRE>
< public boolean <B>isOptionalParameter</B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;parameter)</PRE>
< <DL>
< <DD><B>Description copied from interface: <CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html#isOptionalParameter(com.google.javascript.rhino.Node)">CodingConvention</A></CODE></B></DD>
< <DD>This checks whether a given parameter name should be treated as an
<  optional parameter as far as type checking or function call arg count
<  checking is concerned. Note that an optional function parameter may be
<  declared as a simple type and is automatically converted to a union of the
<  declared type and Undefined.
< <P>
< <DD><DL>
< <DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html#isOptionalParameter(com.google.javascript.rhino.Node)">isOptionalParameter</A></CODE> in interface <CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html" title="interface in com.google.javascript.jscomp">CodingConvention</A></CODE><DT><B>Overrides:</B><DD><CODE><A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html#isOptionalParameter(com.google.javascript.rhino.Node)">isOptionalParameter</A></CODE> in class <CODE><A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html" title="class in com.google.javascript.jscomp">DefaultCodingConvention</A></CODE></DL>
< </DD>
< <DD><DL>
< <DT><B>Parameters:</B><DD><CODE>parameter</CODE> - The parameter's node.
< <DT><B>Returns:</B><DD><code>true</code> if the parameter should be treated as an optional
<  parameter.</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="isVarArgsParameter(com.google.javascript.rhino.Node)"><!-- --></A><H3>
< isVarArgsParameter</H3>
< <PRE>
< public boolean <B>isVarArgsParameter</B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;parameter)</PRE>
< <DL>
< <DD><B>Description copied from interface: <CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html#isVarArgsParameter(com.google.javascript.rhino.Node)">CodingConvention</A></CODE></B></DD>
< <DD>This checks whether a given parameter should be treated as a marker
<  for a variable argument list function. A VarArgs parameter must be the
<  last parameter in a function declaration.
< <P>
< <DD><DL>
< <DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html#isVarArgsParameter(com.google.javascript.rhino.Node)">isVarArgsParameter</A></CODE> in interface <CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html" title="interface in com.google.javascript.jscomp">CodingConvention</A></CODE><DT><B>Overrides:</B><DD><CODE><A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html#isVarArgsParameter(com.google.javascript.rhino.Node)">isVarArgsParameter</A></CODE> in class <CODE><A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html" title="class in com.google.javascript.jscomp">DefaultCodingConvention</A></CODE></DL>
< </DD>
< <DD><DL>
< <DT><B>Parameters:</B><DD><CODE>parameter</CODE> - The parameter's node.
< <DT><B>Returns:</B><DD><code>true</code> if the parameter should be treated as a variable
<  length parameter.</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="isPrivate(java.lang.String)"><!-- --></A><H3>
< isPrivate</H3>
< <PRE>
< public boolean <B>isPrivate</B>(<A HREF="http:
< <DL>
< <DD><B>Description copied from interface: <CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html#isPrivate(java.lang.String)">CodingConvention</A></CODE></B></DD>
< <DD>Checks whether a name should be considered private. Private global
<  variables and functions can only be referenced within the source file in
<  which they are declared. Private properties and methods should only be
<  accessed by the class that defines them.
< <P>
< <DD><DL>
< <DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html#isPrivate(java.lang.String)">isPrivate</A></CODE> in interface <CODE><A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html" title="interface in com.google.javascript.jscomp">CodingConvention</A></CODE><DT><B>Overrides:</B><DD><CODE><A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html#isPrivate(java.lang.String)">isPrivate</A></CODE> in class <CODE><A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html" title="class in com.google.javascript.jscomp">DefaultCodingConvention</A></CODE></DL>
< </DD>
< <DD><DL>
< <DT><B>Parameters:</B><DD><CODE>name</CODE> - The name of a global variable or function, or a method or
<      property.
< <DT><B>Returns:</B><DD><code>true</code> if the name should be considered private.</DL>
< </DD>
< </DL>
< <!-- ========= END OF CLASS DATA ========= -->
< <HR>
< 
< 
< <!-- ======= START OF BOTTOM NAVBAR ====== -->
< <A NAME="navbar_bottom"><!-- --></A>
< <A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
< <TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
< <TR>
< <TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
< <A NAME="navbar_bottom_firstrow"><!-- --></A>
< <TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
<   <TR ALIGN="center" VALIGN="top">
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
<   </TR>
< </TABLE>
< </TD>
< <TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
< </EM>
< </TD>
< </TR>
< 
< <TR>
< <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
< &nbsp;<A HREF="../../../../com/google/javascript/jscomp/CheckLevelLegacy.html" title="enum in com.google.javascript.jscomp"><B>PREV CLASS</B></A>&nbsp;
< &nbsp;<A HREF="../../../../com/google/javascript/jscomp/CodingConvention.html" title="interface in com.google.javascript.jscomp"><B>NEXT CLASS</B></A></FONT></TD>
< <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
<   <A HREF="../../../../index.html?com/google/javascript/jscomp/ClosureCodingConvention.html" target="_top"><B>FRAMES</B></A>  &nbsp;
< &nbsp;<A HREF="ClosureCodingConvention.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
< &nbsp;<SCRIPT type="text/javascript">
<   <!--
<   if(window==top) {
<     document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
---
> 
> 
> 
>   @Override
>   public void applySubclassRelationship(FunctionType parentCtor,
>       FunctionType childCtor, SubclassType type) {
>     if (type == SubclassType.INHERITS) {
>       childCtor.defineDeclaredProperty("superClass_",
>           parentCtor.getPrototype(), false);
>       childCtor.getPrototype().defineDeclaredProperty("constructor",
>           childCtor, false);
>     }
751a62
> 
753,786c64,78
< </SCRIPT>
< <NOSCRIPT>
<   <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
< </NOSCRIPT>
< 
< 
< </FONT></TD>
< </TR>
< <TR>
< <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
<   SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
< <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
< DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
< </TR>
< </TABLE>
< <A NAME="skip-navbar_bottom"></A>
< <!-- ======== END OF BOTTOM NAVBAR ======= -->
< 
< <HR>
< 
<         <div id="footer">
<           <div id="footerlogo">
<             <img src="http:
<                  alt="Google colored balls">
<           </div>
< 
<           <div id="copyright">
<           <p>&copy; 2009 Google -
<             <a href="http:
<             <a href="http:
<             <a href="http:
<           </p>
<           </div>
<         </div>
---
> 
> 
> 
> 
> 
>   @Override
>   public SubclassRelationship getClassesDefinedByCall(Node callNode) {
>     Node callName = callNode.getFirstChild();
>     SubclassType type = typeofClassDefiningName(callName);
>     if (type != null) {
>       Node subclass = null;
>       Node superclass = callNode.getLastChild();
> 
>       
>       
789,790c81,357
< </BODY>
< </HTML>
---
>       
>       
>       
>       if (callNode.getChildCount() == 2 &&
>           callName.getType() == Token.GETPROP) {
>         
>         subclass = callName.getFirstChild();
>       } else if (callNode.getChildCount() == 3) {
>         
>         subclass = callName.getNext();
>       }
> 
>       
>       
>       
>       
>       if (subclass != null &&
>           subclass.isUnscopedQualifiedName() &&
>           superclass.isUnscopedQualifiedName()) {
>         
>         
>         return new SubclassRelationship(
>             type,
>             stripPrototype(subclass),
>             stripPrototype(superclass));
>       }
>     }
> 
>     return null;
>   }
> 
>   
> 
> 
> 
> 
>   private SubclassType typeofClassDefiningName(Node callName) {
>     
>     String methodName = null;
>     if (callName.getType() == Token.GETPROP) {
>       methodName = callName.getLastChild().getString();
>     } else if (callName.getType() == Token.NAME) {
>       String name = callName.getString();
>       int dollarIndex = name.lastIndexOf('$');
>       if (dollarIndex != -1) {
>         methodName = name.substring(dollarIndex + 1);
>       }
>     }
> 
>     if (methodName != null) {
>       if (methodName.equals("inherits")) {
>         return SubclassType.INHERITS;
>       } else if (methodName.equals("mixin")) {
>         return SubclassType.MIXIN;
>       }
>     }
>     return null;
>   }
> 
>   @Override
>   public boolean isSuperClassReference(String propertyName) {
>     return "superClass_".equals(propertyName);
>   }
> 
>   
> 
> 
> 
> 
> 
> 
>   private Node stripPrototype(Node qualifiedName) {
>     if (qualifiedName.getType() == Token.GETPROP &&
>         qualifiedName.getLastChild().getString().equals("prototype")) {
>       return qualifiedName.getFirstChild();
>     }
> 
>     return qualifiedName;
>   }
> 
>   
> 
> 
> 
> 
>   @Override
>   public String extractClassNameIfProvide(Node node, Node parent){
>     return extractClassNameIfGoog(node, parent, "goog.provide");
>   }
> 
>   
> 
> 
> 
> 
>   @Override
>   public String extractClassNameIfRequire(Node node, Node parent){
>     return extractClassNameIfGoog(node, parent, "goog.require");
>   }
> 
>   private static String extractClassNameIfGoog(Node node, Node parent,
>       String functionName){
>     String className = null;
>     if (NodeUtil.isExprCall(parent)) {
>       Node callee = node.getFirstChild();
>       if (callee != null && callee.getType() == Token.GETPROP) {
>         String qualifiedName = callee.getQualifiedName();
>         if ((functionName).equals(qualifiedName)) {
>           className = callee.getNext().getString();
>         }
>       }
>     }
>     return className;
>   }
> 
>   
> 
> 
> 
>   @Override
>   public String getExportPropertyFunction() {
>     return "goog.exportProperty";
>   }
> 
>   
> 
> 
> 
>   @Override
>   public String getExportSymbolFunction() {
>     return "goog.exportSymbol";
>   }
> 
>   @Override
>   public List<String> identifyTypeDeclarationCall(Node n) {
>     Node callName = n.getFirstChild();
>     if ("goog.addDependency".equals(callName.getQualifiedName()) &&
>         n.getChildCount() >= 3) {
>       Node typeArray = callName.getNext().getNext();
>       if (typeArray.getType() == Token.ARRAYLIT) {
>         List<String> typeNames = Lists.newArrayList();
>         for (Node name = typeArray.getFirstChild(); name != null;
>              name = name.getNext()) {
>           if (name.getType() == Token.STRING) {
>             typeNames.add(name.getString());
>           }
>         }
>         return typeNames;
>       }
>     }
>     return null;
>   }
> 
>   @Override
>   public String identifyTypeDefAssign(Node n) {
>     Node firstChild = n.getFirstChild();
>     int type = n.getType();
>     if (type == Token.ASSIGN) {
>       if (TYPEDEF_NAME.equals(n.getLastChild().getQualifiedName())) {
>         return firstChild.getQualifiedName();
>       }
>     } else if (type == Token.VAR && firstChild.hasChildren()) {
>       if (TYPEDEF_NAME.equals(
>               firstChild.getFirstChild().getQualifiedName())) {
>         return firstChild.getString();
>       }
>     }
> 
>     return null;
>   }
> 
>   @Override
>   public String getAbstractMethodName() {
>     return "goog.abstractMethod";
>   }
> 
>   @Override
>   public String getSingletonGetterClassName(Node callNode) {
>     Node callArg = callNode.getFirstChild();
>     String callName = callArg.getQualifiedName();
> 
>     
>     if (!("goog.addSingletonGetter".equals(callName) ||
>           "goog$addSingletonGetter".equals(callName)) ||
>         callNode.getChildCount() != 2) {
>       return null;
>     }
> 
>     return callArg.getNext().getQualifiedName();
>   }
> 
>   @Override
>   public void applySingletonGetter(FunctionType functionType,
>       FunctionType getterType, ObjectType objectType) {
>     functionType.defineDeclaredProperty("getInstance", getterType, false);
>     functionType.defineDeclaredProperty("instance_", objectType, false);
>   }
> 
>   @Override
>   public String getGlobalObject() {
>     return "goog.global";
>   }
> 
>   private final Set<String> propertyTestFunctions = ImmutableSet.of(
>       "goog.isDef", "goog.isNull", "goog.isDefAndNotNull",
>       "goog.isString", "goog.isNumber", "goog.isBoolean",
>       "goog.isFunction", "goog.isArray", "goog.isObject");
> 
>   @Override
>   public boolean isPropertyTestFunction(Node call) {
>     Preconditions.checkArgument(call.getType() == Token.CALL);
>     return propertyTestFunctions.contains(
>         call.getFirstChild().getQualifiedName());
>   }
> 
>   @Override
>   public ObjectLiteralCast getObjectLiteralCast(NodeTraversal t,
>       Node callNode) {
>     Preconditions.checkArgument(callNode.getType() == Token.CALL);
>     Node callName = callNode.getFirstChild();
>     if (!"goog.reflect.object".equals(callName.getQualifiedName()) ||
>         callName.getChildCount() != 2) {
>       return null;
>     }
> 
>     Node typeNode = callName.getNext();
>     if (!typeNode.isQualifiedName()) {
>       return null;
>     }
> 
>     Node objectNode = typeNode.getNext();
>     if (objectNode.getType() != Token.OBJECTLIT) {
>       t.getCompiler().report(JSError.make(t.getSourceName(), callNode,
>                                           OBJECTLIT_EXPECTED));
>       return null;
>     }
> 
>     return new ObjectLiteralCast(typeNode.getQualifiedName(),
>                                  typeNode.getNext());
>   }
> 
>   @Override
>   public boolean isOptionalParameter(Node parameter) {
>     return false;
>   }
> 
>   @Override
>   public boolean isVarArgsParameter(Node parameter) {
>     return false;
>   }
> 
>   @Override
>   public boolean isPrivate(String name) {
>     return false;
>   }
> 
>   @Override
>   public Collection<AssertionFunctionSpec> getAssertionFunctions() {
>     return ImmutableList.<AssertionFunctionSpec>of(
>         new AssertionFunctionSpec("goog.asserts.assert"),
>         new AssertionFunctionSpec("goog.asserts.assertNumber",
>             JSTypeNative.NUMBER_TYPE),
>         new AssertionFunctionSpec("goog.asserts.assertString",
>             JSTypeNative.STRING_TYPE),
>         new AssertionFunctionSpec("goog.asserts.assertFunction",
>             JSTypeNative.FUNCTION_INSTANCE_TYPE),
>         new AssertionFunctionSpec("goog.asserts.assertObject",
>             JSTypeNative.OBJECT_TYPE),
>         new AssertionFunctionSpec("goog.asserts.assertArray",
>             JSTypeNative.ARRAY_TYPE),
>         
>         
>         new AssertionFunctionSpec("goog.asserts.assertInstanceof",
>             JSTypeNative.OBJECT_TYPE)
>     );
>   }
> }
