1,232c1,18
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< package com.google.javascript.jscomp;
< 
< import com.google.common.base.Preconditions;
< import com.google.common.collect.Lists;
< import com.google.javascript.rhino.Node;
< import com.google.javascript.rhino.Token;
< 
< import java.util.ArrayDeque;
< import java.util.Deque;
< import java.util.Iterator;
< import java.util.LinkedList;
< import java.util.List;
< import java.util.Set;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< public class NodeTraversal {
<   
<   private final AbstractCompiler compiler;
<   private final Callback callback;
< 
<   
<   private Node curNode;
< 
<   public static final DiagnosticType NODE_TRAVERSAL_ERROR =
<       DiagnosticType.error("JSC_NODE_TRAVERSAL_ERROR", "{0}");
< 
<   
< 
< 
< 
< 
<   private final Deque<Scope> scopes = new ArrayDeque<Scope>();
< 
<   
< 
< 
< 
<   private final Deque<Node> scopeRoots = new ArrayDeque<Node>();
< 
< 
<   
< 
< 
< 
< 
< 
<   Deque<ControlFlowGraph<Node>> cfgs = new LinkedList<ControlFlowGraph<Node>>();
< 
<   
<   private String sourceName;
< 
<   
<   private ScopeCreator scopeCreator;
< 
<   
<   private ScopedCallback scopeCallback;
< 
<   
< 
< 
<   public interface Callback {
<     
< 
< 
< 
< 
< 
< 
< 
< 
<     boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent);
< 
<     
< 
< 
< 
< 
< 
< 
<     void visit(NodeTraversal t, Node n, Node parent);
<   }
< 
<   
< 
< 
<   public interface ScopedCallback extends Callback {
< 
<     
< 
< 
< 
<     void enterScope(NodeTraversal t);
< 
<     
< 
< 
< 
<     void exitScope(NodeTraversal t);
<   }
< 
<   
< 
< 
< 
<   public abstract static class AbstractPostOrderCallback implements Callback {
<     public final boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,
<         Node parent) {
<       return true;
<     }
<   }
< 
<   
< 
< 
< 
<   public abstract static class AbstractShallowCallback implements Callback {
<     public final boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,
<         Node parent) {
<       
<       
<       return parent == null || parent.getType() != Token.FUNCTION ||
<           n == parent.getFirstChild();
<     }
<   }
< 
<   
< 
< 
< 
<   public abstract static class AbstractShallowStatementCallback
<       implements Callback {
<     public final boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,
<         Node parent) {
<       return parent == null || NodeUtil.isControlStructure(parent)
<          || NodeUtil.isStatementBlock(parent);
<     }
<   }
< 
<   
< 
< 
< 
<   public abstract static class AbstractNodeTypePruningCallback
<         implements Callback {
<     private final Set<Integer> nodeTypes;
<     private final boolean include;
< 
<     
< 
< 
< 
<     public AbstractNodeTypePruningCallback(Set<Integer> nodeTypes) {
<       this(nodeTypes, true);
<     }
< 
<     
< 
< 
< 
< 
<     public AbstractNodeTypePruningCallback(Set<Integer> nodeTypes,
<           boolean include) {
<       this.nodeTypes = nodeTypes;
<       this.include = include;
<     }
< 
<     public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,
<         Node parent) {
<       return include == nodeTypes.contains(n.getType());
<     }
<   }
< 
<   
< 
< 
<   public NodeTraversal(AbstractCompiler compiler, Callback cb) {
<     this(compiler, cb, new SyntacticScopeCreator(compiler));
<   }
< 
<   
< 
< 
< 
<   public NodeTraversal(AbstractCompiler compiler, Callback cb,
<       ScopeCreator scopeCreator) {
<     this.callback = cb;
<     if (cb instanceof ScopedCallback) {
<       this.scopeCallback = (ScopedCallback) cb;
<     }
<     this.compiler = compiler;
<     this.sourceName = "";
<     this.scopeCreator = scopeCreator;
<   }
< 
<   private void throwUnexpectedException(Exception unexpectedException) {
<     
<     
<     String message = unexpectedException.getMessage();
< 
<     
<     
<     
<     if (!sourceName.isEmpty()) {
<       int lineNumber = curNode == null ? -1 : curNode.getLineno();
<       message =
<           unexpectedException.getMessage() + "\n" +
<           "  Node: " + formatNodePosition(curNode) +
<           (curNode == null ? "" :
<             "  Parent: " + formatNodePosition(curNode.getParent()));
---
> <!DOCTYPE HTML PUBLIC "-
> <!--NewPage-->
> <HTML>
> <HEAD>
> <!-- Generated by javadoc (build 1.6.0_0) on Fri Nov 06 21:19:44 EST 2009 -->
> <TITLE>
> NodeTraversal (Compiler)
> </TITLE>
> 
> <META NAME="date" CONTENT="2009-11-06">
> 
> <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../dev_javadoc.css" TITLE="Style">
> 
> <SCRIPT type="text/javascript">
> function windowTitle()
> {
>     if (location.href.indexOf('is-external=true') == -1) {
>         parent.document.title="NodeTraversal (Compiler)";
234,477c20,762
<     compiler.throwInternalError(message, unexpectedException);
<   }
< 
<   
< 
< 
<   public void traverse(Node root) {
<     try {
<       sourceName = "";
<       curNode = root;
<       pushScope(root);
<       traverseBranch(root, null);
<       popScope();
<     } catch (Exception unexpectedException) {
<       throwUnexpectedException(unexpectedException);
<     }
<   }
< 
<   public void traverseRoots(Node ... roots) {
<     traverseRoots(Lists.newArrayList(roots));
<   }
< 
<   public void traverseRoots(List<Node> roots) {
<     if (roots.isEmpty()) {
<       return;
<     }
< 
<     try {
<       Node scopeRoot = roots.get(0).getParent();
<       Preconditions.checkState(scopeRoot != null);
< 
<       sourceName = "";
<       curNode = scopeRoot;
<       pushScope(scopeRoot);
< 
<       for (Node root : roots) {
<         Preconditions.checkState(root.getParent() == scopeRoot);
<         traverseBranch(root, scopeRoot);
<       }
< 
<       popScope();
<     } catch (Exception unexpectedException) {
<       throwUnexpectedException(unexpectedException);
<     }
<   }
< 
<   private String formatNodePosition(Node n) {
<     if (n == null) {
<       return "[missing]\n";
<     }
< 
<     int lineNumber = n.getLineno();
<     int columnNumber = n.getCharno();
<     return sourceName + ":" + lineNumber + ":" + columnNumber + "\n" +
<         compiler.getSourceLine(sourceName, lineNumber) + "\n";
<   }
< 
<   
< 
< 
< 
< 
<   void traverseWithScope(Node root, Scope s) {
<     Preconditions.checkState(s.isGlobal());
< 
<     sourceName = "";
<     curNode = root;
<     pushScope(s);
<     traverseBranch(root, null);
<     popScope();
<   }
< 
<   
< 
< 
< 
<   void traverseAtScope(Scope s) {
<     Node n = s.getRootNode();
<     if (n.getType() == Token.FUNCTION) {
<       
<       
<       sourceName = getSourceName(n);
<       curNode = n;
<       pushScope(s);
< 
<       Node args = n.getFirstChild().getNext();
<       Node body = args.getNext();
<       traverseBranch(args, n);
<       traverseBranch(body, n);
< 
<       popScope();
<     } else {
<       traverseWithScope(n, s);
<     }
<   }
< 
<   
< 
< 
< 
< 
< 
< 
< 
< 
< 
<   protected void traverseInnerNode(Node node, Node parent, Scope refinedScope) {
<     Preconditions.checkNotNull(parent);
<     if (refinedScope != null && getScope() != refinedScope) {
<       curNode = node;
<       pushScope(refinedScope);
<       traverseBranch(node, parent);
<       popScope();
<     } else {
<       traverseBranch(node, parent);
<     }
<   }
< 
<   
< 
< 
<   public Compiler getCompiler() {
<     
<     
<     return (Compiler) compiler;
<   }
< 
<   
< 
< 
< 
<   public int getLineNumber() {
<     Node cur = curNode;
<     while (cur != null) {
<       int line = cur.getLineno();
<       if (line >=0) {
<         return line;
<       }
<       cur = cur.getParent();
<     }
<     return 0;
<   }
< 
<   
< 
< 
< 
< 
<   public String getSourceName() {
<     return sourceName;
<   }
< 
<   
< 
< 
<   public CompilerInput getInput() {
<     return compiler.getInput(sourceName);
<   }
< 
<   
< 
< 
<   public JSModule getModule() {
<     CompilerInput input = getInput();
<     return input == null ? null : input.getModule();
<   }
< 
<   
<   public Node getCurrentNode() {
<     return curNode;
<   }
< 
<   
< 
< 
<   public static void traverse(
<       AbstractCompiler compiler, Node root, Callback cb) {
<     NodeTraversal t = new NodeTraversal(compiler, cb);
<     t.traverse(root);
<   }
< 
<   
< 
< 
<   public static void traverseRoots(
<       AbstractCompiler compiler, List<Node> roots, Callback cb) {
<     NodeTraversal t = new NodeTraversal(compiler, cb);
<     t.traverseRoots(roots);
<   }
< 
<   
< 
< 
<   @SuppressWarnings("fallthrough")
<   private void traverseBranch(Node n, Node parent) {
<     int type = n.getType();
<     if (type == Token.SCRIPT) {
<       sourceName = getSourceName(n);
<     }
< 
<     curNode = n;
<     if (!callback.shouldTraverse(this, n, parent)) return;
< 
<     switch (type) {
<       case Token.CATCH:
<         Preconditions.checkState(n.getChildCount() == 3);
<         Preconditions.checkState(n.getFirstChild().getType() == Token.NAME);
<         
<         
<         traverseBranch(n.getFirstChild(), n);
<         traverseBranch(n.getFirstChild().getNext().getNext(), n);
<         break;
< 
<       case Token.FUNCTION:
<         traverseFunction(n, parent);
<         break;
< 
<       default:
<         for (Node child = n.getFirstChild(); child != null; ) {
<           
<           
<           Node next = child.getNext();
<           traverseBranch(child, n);
<           child = next;
<         }
<         break;
<     }
< 
<     curNode = n;
<     callback.visit(this, n, parent);
<   }
< 
<   
< 
< 
<   private void traverseFunction(Node n, Node parent) {
<     Preconditions.checkState(n.getChildCount() == 3);
<     Preconditions.checkState(n.getType() == Token.FUNCTION);
< 
<     final Node fnName = n.getFirstChild();
< 
<     boolean anonymous = parent != null && NodeUtil.isFunctionAnonymous(n); 
< 
<     if (!anonymous) {
---
> }
> </SCRIPT>
> <NOSCRIPT>
> </NOSCRIPT>
> 
> </HEAD>
> 
> <BODY BGCOLOR="white" onload="windowTitle();">
> <HR>
> 
> 
> <!-- ========= START OF TOP NAVBAR ======= -->
> <A NAME="navbar_top"><!-- --></A>
> <A HREF="#skip-navbar_top" title="Skip navigation links"></A>
> <TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
> <TR>
> <TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
> <A NAME="navbar_top_firstrow"><!-- --></A>
> <TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
>   <TR ALIGN="center" VALIGN="top">
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
>   <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
>   </TR>
> </TABLE>
> </TD>
> <TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
> </EM>
> </TD>
> </TR>
> 
> <TR>
> <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
> &nbsp;<A HREF="../../../../com/google/javascript/jscomp/MessageFormatter.html" title="interface in com.google.javascript.jscomp"><B>PREV CLASS</B></A>&nbsp;
> &nbsp;<A HREF="../../../../com/google/javascript/jscomp/NodeTraversal.AbstractNodeTypePruningCallback.html" title="class in com.google.javascript.jscomp"><B>NEXT CLASS</B></A></FONT></TD>
> <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
>   <A HREF="../../../../index.html?com/google/javascript/jscomp/NodeTraversal.html" target="_top"><B>FRAMES</B></A>  &nbsp;
> &nbsp;<A HREF="NodeTraversal.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
> &nbsp;<SCRIPT type="text/javascript">
>   <!--
>   if(window==top) {
>     document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
>   }
>   
> </SCRIPT>
> <NOSCRIPT>
>   <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
> </NOSCRIPT>
> 
> 
> </FONT></TD>
> </TR>
> <TR>
> <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
>   SUMMARY:&nbsp;<A HREF="#nested_class_summary">NESTED</A>&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
> <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
> DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
> </TR>
> </TABLE>
> <A NAME="skip-navbar_top"></A>
> <!-- ========= END OF TOP NAVBAR ========= -->
> 
> <HR>
> <!-- ======== START OF CLASS DATA ======== -->
> <H2>
> <FONT SIZE="-1">
> com.google.javascript.jscomp</FONT>
> <BR>
> Class NodeTraversal</H2>
> <PRE>
> <A HREF="http:
>   <IMG SRC="../../../../resources/inherit.gif" ALT="extended by "><B>com.google.javascript.jscomp.NodeTraversal</B>
> </PRE>
> <HR>
> <DL>
> <DT><PRE>public class <B>NodeTraversal</B><DT>extends <A HREF="http:
> </PRE>
> 
> <P>
> Nodetraversal allows an iteration through the nodes in the parse tree,
>  and facilitates the optimizations on the parse tree.
> <P>
> 
> <P>
> <HR>
> 
> <P>
> <!-- ======== NESTED CLASS SUMMARY ======== -->
> 
> <A NAME="nested_class_summary"><!-- --></A>
> <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
> <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
> <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
> <B>Nested Class Summary</B></FONT></TH>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
> <CODE>static&nbsp;class</CODE></FONT></TD>
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/NodeTraversal.AbstractNodeTypePruningCallback.html" title="class in com.google.javascript.jscomp">NodeTraversal.AbstractNodeTypePruningCallback</A></B></CODE>
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Abstract callback to visit a pruned set of nodes.</TD>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
> <CODE>static&nbsp;class</CODE></FONT></TD>
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/NodeTraversal.AbstractPostOrderCallback.html" title="class in com.google.javascript.jscomp">NodeTraversal.AbstractPostOrderCallback</A></B></CODE>
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Abstract callback to visit all nodes in post order.</TD>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
> <CODE>static&nbsp;class</CODE></FONT></TD>
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/NodeTraversal.AbstractShallowCallback.html" title="class in com.google.javascript.jscomp">NodeTraversal.AbstractShallowCallback</A></B></CODE>
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Abstract callback to visit all nodes but not traverse into function
>  bodies.</TD>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
> <CODE>static&nbsp;class</CODE></FONT></TD>
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/NodeTraversal.AbstractShallowStatementCallback.html" title="class in com.google.javascript.jscomp">NodeTraversal.AbstractShallowStatementCallback</A></B></CODE>
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Abstract callback to visit all structure and statement nodes but doesn't
>  traverse into functions or expressions.</TD>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
> <CODE>static&nbsp;interface</CODE></FONT></TD>
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/NodeTraversal.Callback.html" title="interface in com.google.javascript.jscomp">NodeTraversal.Callback</A></B></CODE>
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Callback</TD>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
> <CODE>static&nbsp;interface</CODE></FONT></TD>
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/NodeTraversal.ScopedCallback.html" title="interface in com.google.javascript.jscomp">NodeTraversal.ScopedCallback</A></B></CODE>
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Callback that also knows about scope changes</TD>
> </TR>
> </TABLE>
> &nbsp;<!-- =========== FIELD SUMMARY =========== -->
> 
> <A NAME="field_summary"><!-- --></A>
> <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
> <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
> <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
> <B>Field Summary</B></FONT></TH>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
> <CODE>static&nbsp;<A HREF="../../../../com/google/javascript/jscomp/DiagnosticType.html" title="class in com.google.javascript.jscomp">DiagnosticType</A></CODE></FONT></TD>
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/NodeTraversal.html#NODE_TRAVERSAL_ERROR">NODE_TRAVERSAL_ERROR</A></B></CODE>
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
> </TR>
> </TABLE>
> &nbsp;
> <!-- ======== CONSTRUCTOR SUMMARY ======== -->
> 
> <A NAME="constructor_summary"><!-- --></A>
> <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
> <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
> <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
> <B>Constructor Summary</B></FONT></TH>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/NodeTraversal.html#NodeTraversal(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.NodeTraversal.Callback)">NodeTraversal</A></B>(<A HREF="../../../../com/google/javascript/jscomp/AbstractCompiler.html" title="class in com.google.javascript.jscomp">AbstractCompiler</A>&nbsp;compiler,
>               <A HREF="../../../../com/google/javascript/jscomp/NodeTraversal.Callback.html" title="interface in com.google.javascript.jscomp">NodeTraversal.Callback</A>&nbsp;cb)</CODE>
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a node traversal using the specified callback interface.</TD>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/NodeTraversal.html#NodeTraversal(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.NodeTraversal.Callback, com.google.javascript.jscomp.ScopeCreator)">NodeTraversal</A></B>(<A HREF="../../../../com/google/javascript/jscomp/AbstractCompiler.html" title="class in com.google.javascript.jscomp">AbstractCompiler</A>&nbsp;compiler,
>               <A HREF="../../../../com/google/javascript/jscomp/NodeTraversal.Callback.html" title="interface in com.google.javascript.jscomp">NodeTraversal.Callback</A>&nbsp;cb,
>               com.google.javascript.jscomp.ScopeCreator&nbsp;scopeCreator)</CODE>
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a node traversal using the specified callback interface
>  and the scope creator.</TD>
> </TR>
> </TABLE>
> &nbsp;
> <!-- ========== METHOD SUMMARY =========== -->
> 
> <A NAME="method_summary"><!-- --></A>
> <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
> <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
> <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
> <B>Method Summary</B></FONT></TH>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
> <CODE>&nbsp;<A HREF="../../../../com/google/javascript/jscomp/Compiler.html" title="class in com.google.javascript.jscomp">Compiler</A></CODE></FONT></TD>
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/NodeTraversal.html#getCompiler()">getCompiler</A></B>()</CODE>
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the compiler.</TD>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
> <CODE>&nbsp;com.google.javascript.jscomp.ControlFlowGraph&lt;<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&gt;</CODE></FONT></TD>
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/NodeTraversal.html#getControlFlowGraph()">getControlFlowGraph</A></B>()</CODE>
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the control flow graph for the current JS scope.</TD>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
> <CODE>&nbsp;<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A></CODE></FONT></TD>
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/NodeTraversal.html#getCurrentNode()">getCurrentNode</A></B>()</CODE>
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the node currently being traversed.</TD>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
> <CODE>&nbsp;<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A></CODE></FONT></TD>
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/NodeTraversal.html#getEnclosingFunction()">getEnclosingFunction</A></B>()</CODE>
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Examines the functions stack for the last instance of a function node.</TD>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
> <CODE>&nbsp;<A HREF="../../../../com/google/javascript/jscomp/CompilerInput.html" title="class in com.google.javascript.jscomp">CompilerInput</A></CODE></FONT></TD>
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/NodeTraversal.html#getInput()">getInput</A></B>()</CODE>
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the current input source.</TD>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
> <CODE>&nbsp;int</CODE></FONT></TD>
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/NodeTraversal.html#getLineNumber()">getLineNumber</A></B>()</CODE>
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the current line number, or zero if it cannot be determined.</TD>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
> <CODE>&nbsp;<A HREF="../../../../com/google/javascript/jscomp/JSModule.html" title="class in com.google.javascript.jscomp">JSModule</A></CODE></FONT></TD>
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/NodeTraversal.html#getModule()">getModule</A></B>()</CODE>
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the current input module.</TD>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
> <CODE>&nbsp;<A HREF="../../../../com/google/javascript/jscomp/Scope.html" title="class in com.google.javascript.jscomp">Scope</A></CODE></FONT></TD>
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/NodeTraversal.html#getScope()">getScope</A></B>()</CODE>
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the current scope.</TD>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
> <CODE>&nbsp;<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A></CODE></FONT></TD>
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/NodeTraversal.html#getScopeRoot()">getScopeRoot</A></B>()</CODE>
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the current scope's root.</TD>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
> <CODE>&nbsp;<A HREF="http:
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/NodeTraversal.html#getSourceName()">getSourceName</A></B>()</CODE>
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the current input source name.</TD>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
> <CODE>&nbsp;boolean</CODE></FONT></TD>
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/NodeTraversal.html#hasScope()">hasScope</A></B>()</CODE>
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
> <CODE>&nbsp;void</CODE></FONT></TD>
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/NodeTraversal.html#report(com.google.javascript.rhino.Node, com.google.javascript.jscomp.DiagnosticType, java.lang.String...)">report</A></B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;n,
>        <A HREF="../../../../com/google/javascript/jscomp/DiagnosticType.html" title="class in com.google.javascript.jscomp">DiagnosticType</A>&nbsp;diagnosticType,
>        <A HREF="http:
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Reports a diagnostic (error or warning)</TD>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
> <CODE>static&nbsp;void</CODE></FONT></TD>
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/NodeTraversal.html#traverse(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.rhino.Node, com.google.javascript.jscomp.NodeTraversal.Callback)">traverse</A></B>(<A HREF="../../../../com/google/javascript/jscomp/AbstractCompiler.html" title="class in com.google.javascript.jscomp">AbstractCompiler</A>&nbsp;compiler,
>          <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;root,
>          <A HREF="../../../../com/google/javascript/jscomp/NodeTraversal.Callback.html" title="interface in com.google.javascript.jscomp">NodeTraversal.Callback</A>&nbsp;cb)</CODE>
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Traverses a node recursively.</TD>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
> <CODE>&nbsp;void</CODE></FONT></TD>
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/NodeTraversal.html#traverse(com.google.javascript.rhino.Node)">traverse</A></B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;root)</CODE>
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Traverses a parse tree recursively.</TD>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
> <CODE>protected &nbsp;void</CODE></FONT></TD>
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/NodeTraversal.html#traverseInnerNode(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.jscomp.Scope)">traverseInnerNode</A></B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;node,
>                   <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;parent,
>                   <A HREF="../../../../com/google/javascript/jscomp/Scope.html" title="class in com.google.javascript.jscomp">Scope</A>&nbsp;refinedScope)</CODE>
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Traverses an inner node recursively with a refined scope.</TD>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
> <CODE>static&nbsp;void</CODE></FONT></TD>
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/NodeTraversal.html#traverseRoots(com.google.javascript.jscomp.AbstractCompiler, java.util.List, com.google.javascript.jscomp.NodeTraversal.Callback)">traverseRoots</A></B>(<A HREF="../../../../com/google/javascript/jscomp/AbstractCompiler.html" title="class in com.google.javascript.jscomp">AbstractCompiler</A>&nbsp;compiler,
>               <A HREF="http:
>               <A HREF="../../../../com/google/javascript/jscomp/NodeTraversal.Callback.html" title="interface in com.google.javascript.jscomp">NodeTraversal.Callback</A>&nbsp;cb)</CODE>
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Traverses a list of node trees.</TD>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
> <CODE>&nbsp;void</CODE></FONT></TD>
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/NodeTraversal.html#traverseRoots(java.util.List)">traverseRoots</A></B>(<A HREF="http:
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
> <CODE>&nbsp;void</CODE></FONT></TD>
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/NodeTraversal.html#traverseRoots(com.google.javascript.rhino.Node...)">traverseRoots</A></B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>...&nbsp;roots)</CODE>
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
> </TR>
> </TABLE>
> &nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
> <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
> <TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
> <TH ALIGN="left"><B>Methods inherited from class java.lang.<A HREF="http:
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD><CODE><A HREF="http:
> </TR>
> </TABLE>
> &nbsp;
> <P>
> 
> <!-- ============ FIELD DETAIL =========== -->
> 
> <A NAME="field_detail"><!-- --></A>
> <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
> <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
> <TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
> <B>Field Detail</B></FONT></TH>
> </TR>
> </TABLE>
> 
> <A NAME="NODE_TRAVERSAL_ERROR"><!-- --></A><H3>
> NODE_TRAVERSAL_ERROR</H3>
> <PRE>
> public static final <A HREF="../../../../com/google/javascript/jscomp/DiagnosticType.html" title="class in com.google.javascript.jscomp">DiagnosticType</A> <B>NODE_TRAVERSAL_ERROR</B></PRE>
> <DL>
> <DL>
> </DL>
> </DL>
> 
> <!-- ========= CONSTRUCTOR DETAIL ======== -->
> 
> <A NAME="constructor_detail"><!-- --></A>
> <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
> <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
> <TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
> <B>Constructor Detail</B></FONT></TH>
> </TR>
> </TABLE>
> 
> <A NAME="NodeTraversal(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.NodeTraversal.Callback)"><!-- --></A><H3>
> NodeTraversal</H3>
> <PRE>
> public <B>NodeTraversal</B>(<A HREF="../../../../com/google/javascript/jscomp/AbstractCompiler.html" title="class in com.google.javascript.jscomp">AbstractCompiler</A>&nbsp;compiler,
>                      <A HREF="../../../../com/google/javascript/jscomp/NodeTraversal.Callback.html" title="interface in com.google.javascript.jscomp">NodeTraversal.Callback</A>&nbsp;cb)</PRE>
> <DL>
> <DD>Creates a node traversal using the specified callback interface.
> <P>
> </DL>
> <HR>
> 
> <A NAME="NodeTraversal(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.jscomp.NodeTraversal.Callback, com.google.javascript.jscomp.ScopeCreator)"><!-- --></A><H3>
> NodeTraversal</H3>
> <PRE>
> public <B>NodeTraversal</B>(<A HREF="../../../../com/google/javascript/jscomp/AbstractCompiler.html" title="class in com.google.javascript.jscomp">AbstractCompiler</A>&nbsp;compiler,
>                      <A HREF="../../../../com/google/javascript/jscomp/NodeTraversal.Callback.html" title="interface in com.google.javascript.jscomp">NodeTraversal.Callback</A>&nbsp;cb,
>                      com.google.javascript.jscomp.ScopeCreator&nbsp;scopeCreator)</PRE>
> <DL>
> <DD>Creates a node traversal using the specified callback interface
>  and the scope creator.
> <P>
> </DL>
> 
> <!-- ============ METHOD DETAIL ========== -->
> 
> <A NAME="method_detail"><!-- --></A>
> <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
> <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
> <TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
> <B>Method Detail</B></FONT></TH>
> </TR>
> </TABLE>
> 
> <A NAME="traverse(com.google.javascript.rhino.Node)"><!-- --></A><H3>
> traverse</H3>
> <PRE>
> public void <B>traverse</B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;root)</PRE>
> <DL>
> <DD>Traverses a parse tree recursively.
> <P>
> <DD><DL>
> </DL>
> </DD>
> </DL>
> <HR>
> 
> <A NAME="traverseRoots(com.google.javascript.rhino.Node...)"><!-- --></A><H3>
> traverseRoots</H3>
> <PRE>
> public void <B>traverseRoots</B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>...&nbsp;roots)</PRE>
> <DL>
> <DD><DL>
> </DL>
> </DD>
> </DL>
> <HR>
> 
> <A NAME="traverseRoots(java.util.List)"><!-- --></A><H3>
> traverseRoots</H3>
> <PRE>
> public void <B>traverseRoots</B>(<A HREF="http:
> <DL>
> <DD><DL>
> </DL>
> </DD>
> </DL>
> <HR>
> 
> <A NAME="traverseInnerNode(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node, com.google.javascript.jscomp.Scope)"><!-- --></A><H3>
> traverseInnerNode</H3>
> <PRE>
> protected void <B>traverseInnerNode</B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;node,
>                                  <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;parent,
>                                  <A HREF="../../../../com/google/javascript/jscomp/Scope.html" title="class in com.google.javascript.jscomp">Scope</A>&nbsp;refinedScope)</PRE>
> <DL>
> <DD>Traverses an inner node recursively with a refined scope. An inner node may
>  be any node with a non <code>null</code> parent (i.e. all nodes except the
>  root).
> <P>
> <DD><DL>
> <DT><B>Parameters:</B><DD><CODE>node</CODE> - the node to traverse<DD><CODE>parent</CODE> - the node's parent, it may be not be <code>null</code><DD><CODE>refinedScope</CODE> - the refined scope of the scope currently at the top of
>      the scope stack or in trivial cases that very scope or <code>null</code></DL>
> </DD>
> </DL>
> <HR>
> 
> <A NAME="getCompiler()"><!-- --></A><H3>
> getCompiler</H3>
> <PRE>
> public <A HREF="../../../../com/google/javascript/jscomp/Compiler.html" title="class in com.google.javascript.jscomp">Compiler</A> <B>getCompiler</B>()</PRE>
> <DL>
> <DD>Gets the compiler.
> <P>
> <DD><DL>
> </DL>
> </DD>
> </DL>
> <HR>
> 
> <A NAME="getLineNumber()"><!-- --></A><H3>
> getLineNumber</H3>
> <PRE>
> public int <B>getLineNumber</B>()</PRE>
> <DL>
> <DD>Gets the current line number, or zero if it cannot be determined. The line
>  number is retrieved lazily as a running time optimization.
> <P>
> <DD><DL>
> </DL>
> </DD>
> </DL>
> <HR>
> 
> <A NAME="getSourceName()"><!-- --></A><H3>
> getSourceName</H3>
> <PRE>
> public <A HREF="http:
> <DL>
> <DD>Gets the current input source name.
> <P>
> <DD><DL>
> 
> <DT><B>Returns:</B><DD>A string that may be empty, but not null</DL>
> </DD>
> </DL>
> <HR>
> 
> <A NAME="getInput()"><!-- --></A><H3>
> getInput</H3>
> <PRE>
> public <A HREF="../../../../com/google/javascript/jscomp/CompilerInput.html" title="class in com.google.javascript.jscomp">CompilerInput</A> <B>getInput</B>()</PRE>
> <DL>
> <DD>Gets the current input source.
> <P>
> <DD><DL>
> </DL>
> </DD>
> </DL>
> <HR>
> 
> <A NAME="getModule()"><!-- --></A><H3>
> getModule</H3>
> <PRE>
> public <A HREF="../../../../com/google/javascript/jscomp/JSModule.html" title="class in com.google.javascript.jscomp">JSModule</A> <B>getModule</B>()</PRE>
> <DL>
> <DD>Gets the current input module.
> <P>
> <DD><DL>
> </DL>
> </DD>
> </DL>
> <HR>
> 
> <A NAME="getCurrentNode()"><!-- --></A><H3>
> getCurrentNode</H3>
> <PRE>
> public <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A> <B>getCurrentNode</B>()</PRE>
> <DL>
> <DD>Returns the node currently being traversed.
> <P>
> <DD><DL>
> </DL>
> </DD>
> </DL>
> <HR>
> 
> <A NAME="traverse(com.google.javascript.jscomp.AbstractCompiler, com.google.javascript.rhino.Node, com.google.javascript.jscomp.NodeTraversal.Callback)"><!-- --></A><H3>
> traverse</H3>
> <PRE>
> public static void <B>traverse</B>(<A HREF="../../../../com/google/javascript/jscomp/AbstractCompiler.html" title="class in com.google.javascript.jscomp">AbstractCompiler</A>&nbsp;compiler,
>                             <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;root,
>                             <A HREF="../../../../com/google/javascript/jscomp/NodeTraversal.Callback.html" title="interface in com.google.javascript.jscomp">NodeTraversal.Callback</A>&nbsp;cb)</PRE>
> <DL>
> <DD>Traverses a node recursively.
> <P>
> <DD><DL>
> </DL>
> </DD>
> </DL>
> <HR>
> 
> <A NAME="traverseRoots(com.google.javascript.jscomp.AbstractCompiler, java.util.List, com.google.javascript.jscomp.NodeTraversal.Callback)"><!-- --></A><H3>
> traverseRoots</H3>
> <PRE>
> public static void <B>traverseRoots</B>(<A HREF="../../../../com/google/javascript/jscomp/AbstractCompiler.html" title="class in com.google.javascript.jscomp">AbstractCompiler</A>&nbsp;compiler,
>                                  <A HREF="http:
>                                  <A HREF="../../../../com/google/javascript/jscomp/NodeTraversal.Callback.html" title="interface in com.google.javascript.jscomp">NodeTraversal.Callback</A>&nbsp;cb)</PRE>
> <DL>
> <DD>Traverses a list of node trees.
> <P>
> <DD><DL>
> </DL>
> </DD>
> </DL>
> <HR>
> 
> <A NAME="getEnclosingFunction()"><!-- --></A><H3>
> getEnclosingFunction</H3>
> <PRE>
> public <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A> <B>getEnclosingFunction</B>()</PRE>
> <DL>
> <DD>Examines the functions stack for the last instance of a function node.
> <P>
> <DD><DL>
> </DL>
> </DD>
> </DL>
> <HR>
> 
> <A NAME="getScope()"><!-- --></A><H3>
> getScope</H3>
> <PRE>
> public <A HREF="../../../../com/google/javascript/jscomp/Scope.html" title="class in com.google.javascript.jscomp">Scope</A> <B>getScope</B>()</PRE>
> <DL>
> <DD>Gets the current scope.
> <P>
> <DD><DL>
> </DL>
> </DD>
> </DL>
> <HR>
> 
> <A NAME="getControlFlowGraph()"><!-- --></A><H3>
> getControlFlowGraph</H3>
> <PRE>
> public com.google.javascript.jscomp.ControlFlowGraph&lt;<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&gt; <B>getControlFlowGraph</B>()</PRE>
> <DL>
> <DD>Gets the control flow graph for the current JS scope.
> <P>
> <DD><DL>
> </DL>
> </DD>
> </DL>
> <HR>
> 
> <A NAME="getScopeRoot()"><!-- --></A><H3>
> getScopeRoot</H3>
> <PRE>
> public <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A> <B>getScopeRoot</B>()</PRE>
> <DL>
> <DD>Returns the current scope's root.
> <P>
> <DD><DL>
> </DL>
> </DD>
> </DL>
> <HR>
> 
> <A NAME="hasScope()"><!-- --></A><H3>
> hasScope</H3>
> <PRE>
> public boolean <B>hasScope</B>()</PRE>
> <DL>
> <DD><DL>
> </DL>
> </DD>
> </DL>
> <HR>
> 
> <A NAME="report(com.google.javascript.rhino.Node, com.google.javascript.jscomp.DiagnosticType, java.lang.String...)"><!-- --></A><H3>
> report</H3>
> <PRE>
> public void <B>report</B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;n,
>                    <A HREF="../../../../com/google/javascript/jscomp/DiagnosticType.html" title="class in com.google.javascript.jscomp">DiagnosticType</A>&nbsp;diagnosticType,
>                    <A HREF="http:
> <DL>
> <DD>Reports a diagnostic (error or warning)
> <P>
> <DD><DL>
> </DL>
> </DD>
> </DL>
> <!-- ========= END OF CLASS DATA ========= -->
> <HR>
> 
> 
> <!-- ======= START OF BOTTOM NAVBAR ====== -->
> <A NAME="navbar_bottom"><!-- --></A>
> <A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
> <TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
> <TR>
> <TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
> <A NAME="navbar_bottom_firstrow"><!-- --></A>
> <TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
>   <TR ALIGN="center" VALIGN="top">
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
>   <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
>   </TR>
> </TABLE>
> </TD>
> <TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
> </EM>
> </TD>
> </TR>
> 
> <TR>
> <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
> &nbsp;<A HREF="../../../../com/google/javascript/jscomp/MessageFormatter.html" title="interface in com.google.javascript.jscomp"><B>PREV CLASS</B></A>&nbsp;
> &nbsp;<A HREF="../../../../com/google/javascript/jscomp/NodeTraversal.AbstractNodeTypePruningCallback.html" title="class in com.google.javascript.jscomp"><B>NEXT CLASS</B></A></FONT></TD>
> <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
>   <A HREF="../../../../index.html?com/google/javascript/jscomp/NodeTraversal.html" target="_top"><B>FRAMES</B></A>  &nbsp;
> &nbsp;<A HREF="NodeTraversal.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
> &nbsp;<SCRIPT type="text/javascript">
>   <!--
>   if(window==top) {
>     document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
>   }
>   
> </SCRIPT>
> <NOSCRIPT>
>   <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
> </NOSCRIPT>
> 
> 
> </FONT></TD>
> </TR>
> <TR>
> <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
>   SUMMARY:&nbsp;<A HREF="#nested_class_summary">NESTED</A>&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
> <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
> DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
> </TR>
> </TABLE>
> <A NAME="skip-navbar_bottom"></A>
> <!-- ======== END OF BOTTOM NAVBAR ======= -->
> 
> <HR>
> 
>         <div id="footer">
>           <div id="footerlogo">
>             <img src="http:
>                  alt="Google colored balls">
>           </div>
> 
>           <div id="copyright">
>           <p>&copy; 2009 Google -
>             <a href="http:
>             <a href="http:
>             <a href="http:
>           </p>
>           </div>
>         </div>
479,485d763
<       traverseBranch(fnName, n);
<     }
< 
<     curNode = n;
<     pushScope(n);
< 
<     if (anonymous) {
487,614c765,766
<       traverseBranch(fnName, n);
<     }
<     
<     final Node args = fnName.getNext();
<     final Node body = args.getNext();
< 
<     
<     traverseBranch(args, n);
< 
<     
<     Preconditions.checkState(body.getNext() == null &&
<             body.getType() == Token.BLOCK);
<     traverseBranch(body, n);
< 
<     popScope();
<   }
< 
<   
<   @SuppressWarnings("unchecked")
<   public Node getEnclosingFunction() {
<     if (scopes.size() + scopeRoots.size() < 2) {
<       return null;
<     } else {
<       if (scopeRoots.isEmpty()) {
<         return scopes.peek().getRootNode();
<       } else {
<         return scopeRoots.peek();
<       }
<     }
<   }
< 
<   
<   private void pushScope(Node node) {
<     Preconditions.checkState(curNode != null);
<     scopeRoots.push(node);
<     cfgs.push(null);
<     if (scopeCallback != null) {
<       scopeCallback.enterScope(this);
<     }
<   }
< 
<   
<   private void pushScope(Scope s) {
<     Preconditions.checkState(curNode != null);
<     scopes.push(s);
<     cfgs.push(null);
<     if (scopeCallback != null) {
<       scopeCallback.enterScope(this);
<     }
<   }
< 
<   
<   private void popScope() {
<     if (scopeCallback != null) {
<       scopeCallback.exitScope(this);
<     }
<     if (scopeRoots.isEmpty()) {
<       scopes.pop();
<     } else {
<       scopeRoots.pop();
<     }
<     cfgs.pop();
<   }
< 
<   
<   public Scope getScope() {
<     Scope scope = scopes.isEmpty() ? null : scopes.peek();
<     if (scopeRoots.isEmpty()) {
<       return scope;
<     }
< 
<     Iterator<Node> it = scopeRoots.descendingIterator();
<     while (it.hasNext()) {
<       scope = scopeCreator.createScope(it.next(), scope);
<       scopes.push(scope);
<     }
<     scopeRoots.clear();
< 
<     return scope;
<   }
< 
<   
<   public ControlFlowGraph<Node> getControlFlowGraph() {
<     if (cfgs.peek() == null) {
<       ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false);
<       cfa.process(null, getScopeRoot());
<       cfgs.pop();
<       cfgs.push(cfa.getCfg());
<     }
<     return cfgs.peek();
<   }
< 
<   
<   public Node getScopeRoot() {
<     if (scopeRoots.isEmpty()) {
<       return scopes.peek().getRootNode();
<     } else {
<       return scopeRoots.peek();
<     }
<   }
< 
<   
< 
< 
<   boolean inGlobalScope() {
<     return getScopeDepth() <= 1;
<   }
< 
<   int getScopeDepth() {
<     return scopes.size() + scopeRoots.size();
<   }
< 
<   public boolean hasScope() {
<     return !(scopes.isEmpty() && scopeRoots.isEmpty());
<   }
< 
<   
<   public void report(Node n, DiagnosticType diagnosticType,
<       String... arguments) {
<     JSError error = JSError.make(getSourceName(), n, diagnosticType, arguments);
<     compiler.report(error);
<   }
< 
<   private static String getSourceName(Node n) {
<     String name = (String) n.getProp(Node.SOURCENAME_PROP);
<     return name == null ? "" : name;
<   }
< }
---
> </BODY>
> </HTML>
