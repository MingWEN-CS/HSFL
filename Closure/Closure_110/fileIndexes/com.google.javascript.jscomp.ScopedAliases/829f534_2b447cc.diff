28a29
> import java.util.Collection;
115c116
<       for (Node aliasDefinition : traversal.getAliasDefinitions()) {
---
>       for (Node aliasDefinition : traversal.getAliasDefinitionsInOrder()) {
136c137
<           traversal.getAliasDefinitions().size() > 0 ||
---
>           traversal.getAliasDefinitionsInOrder().size() > 0 ||
183c184,186
<     private final List<Node> aliasDefinitions = Lists.newArrayList();
---
> 
>     
>     private final List<Node> aliasDefinitionsInOrder = Lists.newArrayList();
196,197c199,200
<     List<Node> getAliasDefinitions() {
<       return aliasDefinitions;
---
>     Collection<Node> getAliasDefinitionsInOrder() {
>       return aliasDefinitionsInOrder;
222a226
>         findAliases(t);
268,294c272,275
<     @Override
<     public void visit(NodeTraversal t, Node n, Node parent) {
<       if (isCallToScopeMethod(n)) {
<         if (preprocessorSymbolTable != null) {
<           preprocessorSymbolTable.addReference(n.getFirstChild());
<         }
<         if (!NodeUtil.isExpressionNode(parent)) {
<           report(t, n, GOOG_SCOPE_USED_IMPROPERLY);
<         }
<         if (n.getChildCount() != 2) {
<           
<           
<           report(t, n, GOOG_SCOPE_HAS_BAD_PARAMETERS);
<         } else {
<           Node anonymousFnNode = n.getChildAtIndex(1);
<           if (!NodeUtil.isFunction(anonymousFnNode) ||
<               NodeUtil.getFunctionName(anonymousFnNode) != null ||
<               NodeUtil.getFunctionParameters(anonymousFnNode).hasChildren()) {
<             report(t, anonymousFnNode, GOOG_SCOPE_HAS_BAD_PARAMETERS);
<           } else {
<             scopeCalls.add(n);
<           }
<         }
<       }
< 
< 
<       if (t.getScopeDepth() == 2) {
---
>     private void findAliases(NodeTraversal t) {
>       Scope scope = t.getScope();
>       for (Var v : scope.getVarIterable()) {
>         Node n = v.getNode();
296c277,278
<         if (type == Token.NAME && parent.getType() == Token.VAR) {
---
>         Node parent = n.getParent();
>         if (parent.getType() == Token.VAR) {
299c281
<             Var aliasVar = t.getScope().getVar(name);
---
>             Var aliasVar = scope.getVar(name);
301c283
<             aliasDefinitions.add(n);
---
> 
305d286
<             return;
310a292,293
>       }
>     }
312,314c295,349
<         if (type == Token.NAME && NodeUtil.isAssignmentOp(parent) &&
<             n == parent.getFirstChild()) {
<           report(t, n, GOOG_SCOPE_ALIAS_REDEFINED, n.getString());
---
>     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {
>       if (preprocessorSymbolTable != null) {
>         preprocessorSymbolTable.addReference(n.getFirstChild());
>       }
>       if (!NodeUtil.isExpressionNode(parent)) {
>         report(t, n, GOOG_SCOPE_USED_IMPROPERLY);
>       }
>       if (n.getChildCount() != 2) {
>         
>         
>         report(t, n, GOOG_SCOPE_HAS_BAD_PARAMETERS);
>       } else {
>         Node anonymousFnNode = n.getChildAtIndex(1);
>         if (!NodeUtil.isFunction(anonymousFnNode) ||
>             NodeUtil.getFunctionName(anonymousFnNode) != null ||
>             NodeUtil.getFunctionParameters(anonymousFnNode).hasChildren()) {
>           report(t, anonymousFnNode, GOOG_SCOPE_HAS_BAD_PARAMETERS);
>         } else {
>           scopeCalls.add(n);
>         }
>       }
>     }
> 
>     @Override
>     public void visit(NodeTraversal t, Node n, Node parent) {
>       if (isCallToScopeMethod(n)) {
>         validateScopeCall(t, n, n.getParent());
>       }
> 
>       if (t.getScopeDepth() < 2) {
>         return;
>       }
> 
>       int type = n.getType();
>       Var aliasVar = null;
>       if (type == Token.NAME) {
>         String name = n.getString();
>         Var lexicalVar = t.getScope().getVar(n.getString());
>         if (lexicalVar != null && lexicalVar == aliases.get(name)) {
>           aliasVar = lexicalVar;
>         }
>       }
> 
>       
>       if (t.getScopeDepth() == 2) {
>         if (aliasVar != null && NodeUtil.isLValue(n)) {
>           if (aliasVar.getNode() == n) {
>             aliasDefinitionsInOrder.add(n);
> 
>             
>             
>             return;
>           } else {
>             report(t, n, GOOG_SCOPE_ALIAS_REDEFINED, n.getString());
>           }
325a361
>       
327,330c363,364
<         if (n.getType() == Token.NAME) {
<           String name = n.getString();
<           Var aliasVar = aliases.get(name);
< 
---
>         
>         if (aliasVar != null) {
332,342c366,372
<           if (aliasVar != null &&
<               t.getScope().getVar(name) == aliasVar) {
<             
<             
<             
<             
<             
<             
<             Node aliasedNode = aliasVar.getInitialValue();
<             aliasUsages.add(new AliasedNode(n, aliasedNode));
<           }
---
>           
>           
>           
>           
>           
>           Node aliasedNode = aliasVar.getInitialValue();
>           aliasUsages.add(new AliasedNode(n, aliasedNode));
