1a2,199
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> package com.google.javascript.jscomp;
> 
> import com.google.common.base.Preconditions;
> import com.google.javascript.jscomp.ControlFlowGraph.Branch;
> import com.google.javascript.jscomp.DataFlowAnalysis.FlowState;
> import com.google.javascript.jscomp.graph.DiGraph.DiGraphNode;
> import com.google.javascript.jscomp.LiveVariablesAnalysis.LiveVariableLattice;
> import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;
> import com.google.javascript.jscomp.NodeTraversal.ScopedCallback;
> import com.google.javascript.jscomp.Scope.Var;
> import com.google.javascript.rhino.Node;
> import com.google.javascript.rhino.Token;
> 
> import java.util.List;
> import java.util.logging.Logger;
> 
> 
> 
> 
> 
> 
> 
> 
> 
> class DeadAssignmentsElimination extends AbstractPostOrderCallback implements
>     CompilerPass, ScopedCallback {
> 
>   private final AbstractCompiler compiler;
>   private LiveVariablesAnalysis liveness;
>   private static final Logger logger =
>     Logger.getLogger(DeadAssignmentsElimination.class.getName());
> 
>   public DeadAssignmentsElimination(AbstractCompiler compiler) {
>     this.compiler = compiler;
>   }
> 
>   @Override
>   public void process(Node externs, Node root) {
>     Preconditions.checkNotNull(externs);
>     Preconditions.checkNotNull(root);
>     NodeTraversal.traverse(compiler, root, this);
>   }
> 
>   @Override
>   public void enterScope(NodeTraversal t) {
>     Scope scope = t.getScope();
>     
>     
>     
>     if (scope.isGlobal()) {
>       return;
>     }
>     
>     
>     
>     
>     if (!NodeUtil.containsFunctionDeclaration(
>         t.getScopeRoot().getLastChild())) {
>       
>       ControlFlowGraph<Node> cfg = t.getControlFlowGraph();
>       liveness = new LiveVariablesAnalysis(cfg, scope, compiler);
>       liveness.analyze();
>       tryRemoveDeadAssignments(t, cfg);
>     }
>   }
> 
>   @Override
>   public void exitScope(NodeTraversal t) {
>   }
> 
>   @Override
>   public void visit(NodeTraversal t, Node n, Node parent) {
>   }
> 
>   
> 
> 
> 
> 
> 
> 
> 
>   private void tryRemoveDeadAssignments(NodeTraversal t,
>       ControlFlowGraph<Node> cfg) {
>     List<DiGraphNode<Node, Branch>> nodes = cfg.getDirectedGraphNodes();
> 
>     for (DiGraphNode<Node, Branch> cfgNode : nodes) {
>       FlowState<LiveVariableLattice> state =
>           cfgNode.getAnnotation();
>       Node n = cfgNode.getValue();
>       if (n == null) {
>         continue;
>       }
>       switch (n.getType()) {
>         case Token.IF:
>         case Token.WHILE:
>         case Token.DO:
>           tryRemoveAssignment(t, NodeUtil.getConditionExpression(n), n, state);
>           continue;
>         case Token.FOR:
>           if (n.getChildCount() == 4) {
>             tryRemoveAssignment(
>                 t, NodeUtil.getConditionExpression(n), n, state);
>             tryRemoveAssignment(
>                 t, n.getFirstChild().getNext().getNext(), n, state);
>           }
>           continue;
>         case Token.SWITCH:
>         case Token.CASE:
>         case Token.RETURN:
>           if (n.hasChildren()) {
>             tryRemoveAssignment(t, n.getFirstChild(), n, state);
>           }
>           continue;
>         
>       }
>       
>       if (NodeUtil.isExpressionNode(n)) {
>         tryRemoveAssignment(t, n.getFirstChild(), n, state);
>       }
>     }
>   }
> 
>   
> 
> 
> 
> 
> 
> 
> 
> 
>   private void tryRemoveAssignment(NodeTraversal t, Node n, Node parent,
>       FlowState<LiveVariableLattice> state) {
>     if (NodeUtil.isAssign(n)) {
>       Node lhs = n.getFirstChild();
>       Scope scope = t.getScope();
>       if (!NodeUtil.isName(lhs)) {
>         return; 
>       }
>       String name = lhs.getString();
>       if (!scope.isDeclared(name, false)) {
>         return;
>       }
>       Var var = scope.getVar(name);
>       if (liveness.getEscapedLocals().contains(var)) {
>         return; 
>       }
>       if (state.getOut().isLive(var)) {
>         return; 
>       }
>       if (state.getIn().isLive(var)) {
>         
>         
>         
>         
>         
>         
>         
>         
>         
>         
>         return;
>       }
>       Node rhs = n.getLastChild();
>       
>       logger.info("Removing dead assignemnt to " + name + " in "
>           + t.getSourceName() + " line " + n.getLineno());
>       n.removeChild(rhs);
>       parent.replaceChild(n, rhs);
>       compiler.reportCodeChange();
>       return;
> 
>     } else {
>       for (Node c = n.getFirstChild(); c != null;) {
>         Node next = c.getNext();
>         tryRemoveAssignment(t, c, n, state);
>         c = next;
>       }
>       return;
>     }
>   }
> }
