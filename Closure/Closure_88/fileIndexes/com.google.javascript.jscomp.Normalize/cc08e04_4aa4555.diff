88,89d87
<     new RenameConstants().process(externs, root);
< 
96a95,96
>     new PropogateConstantAnnotations(compiler, assertOnChange)
>         .process(externs, root);
106c106,107
<   class RenameConstants extends AbstractPostOrderCallback
---
>   public static class PropogateConstantAnnotations
>       extends AbstractPostOrderCallback
107a109,117
>     private final AbstractCompiler compiler;
>     private final boolean assertOnChange;
> 
>     public PropogateConstantAnnotations(
>         AbstractCompiler compiler, boolean forbidChanges) {
>       this.compiler = compiler;
>       this.assertOnChange = forbidChanges;
>     }
> 
110c120
<       NodeTraversal.traverse(compiler, root, this);
---
>       new NodeTraversal(compiler, this).traverseRoots(externs, root);
114a125
>       
116,117d126
<         
<         
125,130c134
<         if (var == null) {
<           
<           
<           n.putBooleanProp(Node.IS_CONSTANT_NAME, false);
<           return;
<         } else {
---
>         if (var != null) {
134,135c138,147
<         if (NodeUtil.isConstantName(n)) {
<           
---
>         if ((info != null && info.isConstant()) &&
>             !n.getBooleanProp(Node.IS_CONSTANT_NAME)) {
>           n.putBooleanProp(Node.IS_CONSTANT_NAME, true);
>           if (assertOnChange) {
>             String name = n.getString();
>             throw new IllegalStateException(
>                 "Unexpected const change.\n" +
>                 "  name: "+ name + "\n" +
>                 "  gramps:" + n.getParent().getParent().toStringTree());
>           }
139,146d150
<           return;
<         }
< 
<         if ((info != null && info.isConstant()) ||
<             n.getBooleanProp(Node.IS_CONSTANT_NAME)) {
<           n.putBooleanProp(Node.IS_CONSTANT_NAME, true);
<           n.setString(addConstantMarkerToName(n.getString()));
<           reportCodeChange("rename constant var");
152,159d155
<   static String addConstantMarkerToName(String name) {
<     return name + NodeUtil.CONSTANT_MARKER;
<   }
< 
<   static String removeConstantMarkerFromName(String name) {
<     return name.replace(NodeUtil.CONSTANT_MARKER, "");
<   }
< 
188c184
<       if (n.getType() == Token.NAME || n.getType() == Token.STRING) {
---
>       if (n.getType() == Token.NAME) {
197c193,194
<           if (NodeUtil.isConstantName(n)) {
---
>           if (NodeUtil.isConstantName(n)
>               || compiler.getCodingConvention().isConstant(n.getString())) {
229c226
<               "The name " + name + "is not consistently annotated as " +
---
>               "The name " + name + " is not consistently annotated as " +
