1,92c1,18
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< package com.google.javascript.jscomp;
< 
< import com.google.common.annotations.VisibleForTesting;
< import com.google.common.base.Charsets;
< import com.google.common.base.Preconditions;
< import com.google.common.collect.Lists;
< import com.google.common.collect.Maps;
< import com.google.common.io.Files;
< import com.google.javascript.jscomp.CheckLevel;
< import com.google.javascript.jscomp.NodeTraversal.Callback;
< import com.google.javascript.rhino.Node;
< import com.google.javascript.rhino.Token;
< 
< import java.io.File;
< import java.io.IOException;
< import java.util.Collection;
< import java.util.List;
< import java.util.Map;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< public class DefaultPassConfig extends PassConfig {
< 
<   
<   private static final String COMPILED_CONSTANT_NAME = "COMPILED";
< 
<   
<   private static final String CLOSURE_LOCALE_CONSTANT_NAME = "goog.LOCALE";
< 
<   
<   static final DiagnosticType TIGHTEN_TYPES_WITHOUT_TYPE_CHECK =
<       DiagnosticType.error("JSC_TIGHTEN_TYPES_WITHOUT_TYPE_CHECK",
<           "TightenTypes requires type checking. Please use --check_types.");
< 
<   static final DiagnosticType CANNOT_USE_PROTOTYPE_AND_VAR =
<       DiagnosticType.error("JSC_CANNOT_USE_PROTOTYPE_AND_VAR",
<           "Rename prototypes and inline variables cannot be used together");
< 
<   
<   static final DiagnosticType REPORT_PATH_IO_ERROR =
<       DiagnosticType.error("JSC_REPORT_PATH_IO_ERROR",
<           "Error writing compiler report to {0}");
< 
<   
< 
< 
< 
< 
<   private GlobalNamespace namespaceForChecks = null;
< 
<   
< 
< 
<   private TightenTypes tightenTypes = null;
< 
<   public DefaultPassConfig(CompilerOptions options) {
<     super(options);
<   }
< 
<   @Override
<   protected List<PassFactory> getChecks() {
<     List<PassFactory> checks = Lists.newArrayList();
< 
<     if (options.checkSuspiciousCode) {
<       checks.add(suspiciousCode);
<     }
< 
<     if (options.checkControlStructures)  {
<       checks.add(checkControlStructures);
---
> <!DOCTYPE HTML PUBLIC "-
> <!--NewPage-->
> <HTML>
> <HEAD>
> <!-- Generated by javadoc (build 1.6.0_0) on Tue Nov 03 18:15:11 EST 2009 -->
> <TITLE>
> DefaultPassConfig (Compiler)
> </TITLE>
> 
> <META NAME="date" CONTENT="2009-11-03">
> 
> <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../dev_javadoc.css" TITLE="Style">
> 
> <SCRIPT type="text/javascript">
> function windowTitle()
> {
>     if (location.href.indexOf('is-external=true') == -1) {
>         parent.document.title="DefaultPassConfig (Compiler)";
94,252c20,308
< 
<     if (options.checkRequires.isOn()) {
<       checks.add(checkRequires);
<     }
< 
<     if (options.checkProvides.isOn()) {
<       checks.add(checkProvides);
<     }
< 
<     
<     
<     
<     if (options.generateExports) {
<       checks.add(generateExports);
<     }
< 
<     if (options.exportTestFunctions) {
<       checks.add(exportTestFunctions);
<     }
< 
<     if (options.closurePass) {
<       checks.add(closurePrimitives.makeOneTimePass());
<     }
< 
<     if (options.closurePass && options.checkMissingGetCssNameLevel.isOn()) {
<       checks.add(closureCheckGetCssName);
<     }
< 
<     if (options.closurePass) {
<       checks.add(closureReplaceGetCssName);
<     }
< 
<     if (options.syntheticBlockStartMarker != null) {
<       
<       checks.add(createSyntheticBlocks);
<     }
< 
<     if (options.checkSymbols) {
<       checks.add(checkVars);
<     }
< 
<     if (options.checkShadowVars.isOn()) {
<       checks.add(checkShadowVars);
<     }
< 
<     if (options.aggressiveVarCheck.isOn()) {
<       checks.add(checkVariableReferences);
<     }
< 
<     
<     if (options.processObjectPropertyString) {
<       checks.add(objectPropertyStringPreprocess);
<     }
< 
<     
<     
<     if (options.checkTypes) {
<       checks.add(resolveTypes.makeOneTimePass());
<       checks.add(inferTypes.makeOneTimePass());
<       checks.add(checkTypes.makeOneTimePass());
<     } else {
<       if (options.checkFunctions.isOn()) {
<         checks.add(checkFunctions);
<       }
< 
<       if (options.checkMethods.isOn()) {
<         checks.add(checkMethods);
<       }
<     }
< 
<     if (options.checkUnreachableCode.isOn() ||
<         (options.checkTypes && options.checkMissingReturn.isOn())) {
<       checks.add(checkControlFlow);
<     }
< 
<     
<     if (options.enables(DiagnosticGroups.ACCESS_CONTROLS)
<         && options.checkTypes) {
<       checks.add(checkAccessControls);
<     }
< 
<     if (options.checkGlobalNamesLevel.isOn()) {
<       checks.add(checkGlobalNames);
<     }
< 
<     if (options.checkUndefinedProperties.isOn() ||
<         options.checkUnusedPropertiesEarly) {
<       checks.add(checkSuspiciousProperties);
<     }
< 
<     if (options.checkCaja || options.checkEs5Strict) {
<       checks.add(checkStrictMode);
<     }
< 
<     
<     checks.add(processDefines);
<     assertAllOneTimePasses(checks);
<     return checks;
<   }
< 
<   @Override
<   protected List<PassFactory> getOptimizations() {
<     List<PassFactory> passes = Lists.newArrayList();
< 
<     
<     
< 
<     if (!options.idGenerators.isEmpty()) {
<       passes.add(replaceIdGenerators);
<     }
< 
<     
<     if (options.optimizeArgumentsArray) {
<       passes.add(optimizeArgumentsArray);
<     }
< 
<     
<     if (options.optimizeParameters) {
<       passes.add(removeUselessParameters);
<     }
< 
<     
<     
<     if (options.closurePass) {
<       passes.add(removeAbstractMethods);
<     }
< 
<     
<     
<     if (options.collapseProperties) {
<       passes.add(undoConstantRenaming);
<       passes.add(collapseProperties);
<       passes.add(renameConstants.makeOneTimePass());
<     }
< 
<     
<     if (options.tightenTypes) {
<       passes.add(tightenTypesBuilder);
<     }
< 
<     
<     
<     
<     
<     if (options.disambiguateProperties) {
<       passes.add(disambiguateProperties);
<     }
< 
<     if (options.computeFunctionSideEffects) {
<       passes.add(markPureFunctions);
<     } else if (options.markNoSideEffectCalls) {
<       
<       
<       
<       
<       
<       
<       
<       
---
> }
> </SCRIPT>
> <NOSCRIPT>
> </NOSCRIPT>
> 
> </HEAD>
> 
> <BODY BGCOLOR="white" onload="windowTitle();">
> <HR>
> 
> 
> <!-- ========= START OF TOP NAVBAR ======= -->
> <A NAME="navbar_top"><!-- --></A>
> <A HREF="#skip-navbar_top" title="Skip navigation links"></A>
> <TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
> <TR>
> <TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
> <A NAME="navbar_top_firstrow"><!-- --></A>
> <TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
>   <TR ALIGN="center" VALIGN="top">
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
>   <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
>   </TR>
> </TABLE>
> </TD>
> <TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
> </EM>
> </TD>
> </TR>
> 
> <TR>
> <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
> &nbsp;<A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html" title="class in com.google.javascript.jscomp"><B>PREV CLASS</B></A>&nbsp;
> &nbsp;<A HREF="../../../../com/google/javascript/jscomp/DiagnosticGroup.html" title="class in com.google.javascript.jscomp"><B>NEXT CLASS</B></A></FONT></TD>
> <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
>   <A HREF="../../../../index.html?com/google/javascript/jscomp/DefaultPassConfig.html" target="_top"><B>FRAMES</B></A>  &nbsp;
> &nbsp;<A HREF="DefaultPassConfig.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
> &nbsp;<SCRIPT type="text/javascript">
>   <!--
>   if(window==top) {
>     document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
>   }
>   
> </SCRIPT>
> <NOSCRIPT>
>   <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
> </NOSCRIPT>
> 
> 
> </FONT></TD>
> </TR>
> <TR>
> <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
>   SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
> <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
> DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
> </TR>
> </TABLE>
> <A NAME="skip-navbar_top"></A>
> <!-- ========= END OF TOP NAVBAR ========= -->
> 
> <HR>
> <!-- ======== START OF CLASS DATA ======== -->
> <H2>
> <FONT SIZE="-1">
> com.google.javascript.jscomp</FONT>
> <BR>
> Class DefaultPassConfig</H2>
> <PRE>
> <A HREF="http:
>   <IMG SRC="../../../../resources/inherit.gif" ALT="extended by "><A HREF="../../../../com/google/javascript/jscomp/PassConfig.html" title="class in com.google.javascript.jscomp">com.google.javascript.jscomp.PassConfig</A>
>       <IMG SRC="../../../../resources/inherit.gif" ALT="extended by "><B>com.google.javascript.jscomp.DefaultPassConfig</B>
> </PRE>
> <HR>
> <DL>
> <DT><PRE>public class <B>DefaultPassConfig</B><DT>extends <A HREF="../../../../com/google/javascript/jscomp/PassConfig.html" title="class in com.google.javascript.jscomp">PassConfig</A></DL>
> </PRE>
> 
> <P>
> Pass factories and meta-data for native JSCompiler passes.
> <P>
> 
> <P>
> <HR>
> 
> <P>
> 
> <!-- ======== CONSTRUCTOR SUMMARY ======== -->
> 
> <A NAME="constructor_summary"><!-- --></A>
> <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
> <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
> <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
> <B>Constructor Summary</B></FONT></TH>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/DefaultPassConfig.html#DefaultPassConfig(com.google.javascript.jscomp.CompilerOptions)">DefaultPassConfig</A></B>(<A HREF="../../../../com/google/javascript/jscomp/CompilerOptions.html" title="class in com.google.javascript.jscomp">CompilerOptions</A>&nbsp;options)</CODE>
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
> </TR>
> </TABLE>
> &nbsp;
> <!-- ========== METHOD SUMMARY =========== -->
> 
> <A NAME="method_summary"><!-- --></A>
> <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
> <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
> <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
> <B>Method Summary</B></FONT></TH>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
> <CODE>protected &nbsp;<A HREF="http:
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/DefaultPassConfig.html#getChecks()">getChecks</A></B>()</CODE>
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the checking passes to run.</TD>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
> <CODE>protected &nbsp;<A HREF="http:
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/DefaultPassConfig.html#getOptimizations()">getOptimizations</A></B>()</CODE>
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the optimization passes to run.</TD>
> </TR>
> </TABLE>
> &nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
> <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
> <TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
> <TH ALIGN="left"><B>Methods inherited from class java.lang.<A HREF="http:
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD><CODE><A HREF="http:
> </TR>
> </TABLE>
> &nbsp;
> <P>
> 
> <!-- ========= CONSTRUCTOR DETAIL ======== -->
> 
> <A NAME="constructor_detail"><!-- --></A>
> <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
> <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
> <TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
> <B>Constructor Detail</B></FONT></TH>
> </TR>
> </TABLE>
> 
> <A NAME="DefaultPassConfig(com.google.javascript.jscomp.CompilerOptions)"><!-- --></A><H3>
> DefaultPassConfig</H3>
> <PRE>
> public <B>DefaultPassConfig</B>(<A HREF="../../../../com/google/javascript/jscomp/CompilerOptions.html" title="class in com.google.javascript.jscomp">CompilerOptions</A>&nbsp;options)</PRE>
> <DL>
> </DL>
> 
> <!-- ============ METHOD DETAIL ========== -->
> 
> <A NAME="method_detail"><!-- --></A>
> <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
> <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
> <TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
> <B>Method Detail</B></FONT></TH>
> </TR>
> </TABLE>
> 
> <A NAME="getChecks()"><!-- --></A><H3>
> getChecks</H3>
> <PRE>
> protected <A HREF="http:
> <DL>
> <DD><B>Description copied from class: <CODE><A HREF="../../../../com/google/javascript/jscomp/PassConfig.html#getChecks()">PassConfig</A></CODE></B></DD>
> <DD>Gets the checking passes to run.
> 
>  Checking passes revolve around emitting warnings and errors.
>  They also may include pre-processor passes needed to do
>  error analysis more effectively.
> 
>  Clients that only want to analyze code (like IDEs) and not emit
>  code will only run checks and not optimizations.
> <P>
> <DD><DL>
> <DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/google/javascript/jscomp/PassConfig.html#getChecks()">getChecks</A></CODE> in class <CODE><A HREF="../../../../com/google/javascript/jscomp/PassConfig.html" title="class in com.google.javascript.jscomp">PassConfig</A></CODE></DL>
> </DD>
> <DD><DL>
> </DL>
> </DD>
> </DL>
> <HR>
> 
> <A NAME="getOptimizations()"><!-- --></A><H3>
> getOptimizations</H3>
> <PRE>
> protected <A HREF="http:
> <DL>
> <DD><B>Description copied from class: <CODE><A HREF="../../../../com/google/javascript/jscomp/PassConfig.html#getOptimizations()">PassConfig</A></CODE></B></DD>
> <DD>Gets the optimization passes to run.
> 
>  Optimization passes revolve around producing smaller and faster code.
>  They should always run after checking passes.
> <P>
> <DD><DL>
> <DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/google/javascript/jscomp/PassConfig.html#getOptimizations()">getOptimizations</A></CODE> in class <CODE><A HREF="../../../../com/google/javascript/jscomp/PassConfig.html" title="class in com.google.javascript.jscomp">PassConfig</A></CODE></DL>
> </DD>
> <DD><DL>
> </DL>
> </DD>
> </DL>
> <!-- ========= END OF CLASS DATA ========= -->
> <HR>
> 
> 
> <!-- ======= START OF BOTTOM NAVBAR ====== -->
> <A NAME="navbar_bottom"><!-- --></A>
> <A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
> <TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
> <TR>
> <TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
> <A NAME="navbar_bottom_firstrow"><!-- --></A>
> <TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
>   <TR ALIGN="center" VALIGN="top">
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
>   <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
>   </TR>
> </TABLE>
> </TD>
> <TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
> </EM>
> </TD>
> </TR>
> 
> <TR>
> <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
> &nbsp;<A HREF="../../../../com/google/javascript/jscomp/DefaultCodingConvention.html" title="class in com.google.javascript.jscomp"><B>PREV CLASS</B></A>&nbsp;
> &nbsp;<A HREF="../../../../com/google/javascript/jscomp/DiagnosticGroup.html" title="class in com.google.javascript.jscomp"><B>NEXT CLASS</B></A></FONT></TD>
> <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
>   <A HREF="../../../../index.html?com/google/javascript/jscomp/DefaultPassConfig.html" target="_top"><B>FRAMES</B></A>  &nbsp;
> &nbsp;<A HREF="DefaultPassConfig.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
> &nbsp;<SCRIPT type="text/javascript">
>   <!--
>   if(window==top) {
>     document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
>   }
>   
> </SCRIPT>
> <NOSCRIPT>
>   <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
> </NOSCRIPT>
> 
> 
> </FONT></TD>
> </TR>
> <TR>
> <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
>   SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
> <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
> DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
> </TR>
> </TABLE>
> <A NAME="skip-navbar_bottom"></A>
> <!-- ======== END OF BOTTOM NAVBAR ======= -->
> 
> <HR>
> 
>         <div id="footer">
>           <div id="footerlogo">
>             <img src="http:
>                  alt="Google colored balls">
>           </div>
> 
>           <div id="copyright">
>           <p>&copy; 2009 Google -
>             <a href="http:
>             <a href="http:
>             <a href="http:
>           </p>
>           </div>
>         </div>
254,350d309
<       passes.add(markNoSideEffectCalls);
<     }
< 
<     if (options.chainCalls) {
<       passes.add(chainCalls);
<     }
< 
<     
<     
<     
<     
<     if (options.devirtualizePrototypeMethods) {
<       passes.add(devirtualizePrototypeMethods);
<     }
< 
<     
<     
<     if (options.inlineConstantVars) {
<       passes.add(checkConsts);
<     }
< 
<     assertAllOneTimePasses(passes);
< 
<     if (options.smartNameRemoval || options.reportPath != null) {
<       passes.addAll(getCodeRemovingPasses(true));
<       passes.add(smartNamePass);
<     }
< 
<     if (options.customPasses != null) {
<       passes.add(getCustomPasses(
<           CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));
<     }
< 
<     passes.add(createEmptyPass("beforeMainOptimizations"));
< 
<     passes.addAll(getMainOptimizationLoop());
< 
<     passes.add(createEmptyPass("beforeModuleMotion"));
< 
<     if (options.crossModuleCodeMotion) {
<       passes.add(crossModuleCodeMotion);
<     }
< 
<     if (options.crossModuleMethodMotion) {
<       passes.add(crossModuleMethodMotion);
<     }
< 
<     passes.add(createEmptyPass("afterModuleMotion"));
< 
<     
<     
<     if (options.customPasses != null) {
<       passes.add(getCustomPasses(
<           CustomPassExecutionTime.AFTER_OPTIMIZATION_LOOP));
<     }
< 
<     return passes;
<   }
< 
<   
<   private List<PassFactory> getMainOptimizationLoop() {
<     List<PassFactory> passes = Lists.newArrayList();
<     if (options.inlineGetters) {
<       passes.add(inlineGetters);
<     }
< 
<     passes.addAll(getCodeRemovingPasses(false));
< 
<     if (options.inlineFunctions) {
<       passes.add(inlineFunctions);
<     }
< 
<     if (options.removeUnusedVars) {
<       if (options.deadAssignmentElimination) {
<         passes.add(deadAssignmentsElimination);
<       }
<       passes.add(removeUnusedVars);
<     }
<     assertAllLoopablePasses(passes);
<     return passes;
<   }
< 
<   
<   private List<PassFactory> getCodeRemovingPasses(
<       boolean beforeSmartNameRemoval) {
<     List<PassFactory> passes = Lists.newArrayList();
<     if (options.inlineVariables && !beforeSmartNameRemoval) {
<       passes.add(inlineVariables);
<     } else if (options.inlineConstantVars) {
<       passes.add(inlineConstants);
<     }
< 
<     if (options.removeConstantExpressions) {
<       passes.add(removeConstantExpressions);
<     }
< 
<     if (options.foldConstants) {
352,1244c311,312
<       passes.add(minimizeExitPoints);
<       passes.add(foldConstants);
<     }
< 
<     if (options.removeDeadCode) {
<       passes.add(removeUnreachableCode);
<     }
< 
<     if (options.removeUnusedPrototypeProperties) {
<       passes.add(removeUnusedPrototypeProperties);
<     }
< 
<     assertAllLoopablePasses(passes);
<     return passes;
<   }
< 
<   
< 
< 
<   
<   final PassFactory suspiciousCode =
<       new PassFactory("suspiciousCode", true) {
< 
<     @Override
<     protected CompilerPass createInternal(final AbstractCompiler compiler) {
<       List<Callback> sharedCallbacks = Lists.newArrayList();
<       sharedCallbacks.add(new CheckAccidentalSemicolon(CheckLevel.WARNING));
<       sharedCallbacks.add(new CheckSideEffects(CheckLevel.WARNING));
<       if (options.checkGlobalThisLevel.isOn()) {
<         sharedCallbacks.add(
<             new CheckGlobalThis(compiler, options.checkGlobalThisLevel));
<       }
<       return combineChecks(compiler, sharedCallbacks);
<     }
< 
<   };
< 
<   
<   private void assertAllOneTimePasses(List<PassFactory> passes) {
<     for (PassFactory pass : passes) {
<       Preconditions.checkState(pass.isOneTimePass());
<     }
<   }
< 
<   
<   private void assertAllLoopablePasses(List<PassFactory> passes) {
<     for (PassFactory pass : passes) {
<       Preconditions.checkState(!pass.isOneTimePass());
<     }
<   }
< 
<   
<   private final PassFactory checkControlStructures =
<       new PassFactory("checkControlStructures", true) {
<     @Override
<     protected CompilerPass createInternal(AbstractCompiler compiler) {
<       return new ControlStructureCheck(compiler);
<     }
<   };
< 
<   
<   private final PassFactory checkRequires =
<       new PassFactory("checkRequires", true) {
<     @Override
<     protected CompilerPass createInternal(AbstractCompiler compiler) {
<       return new CheckRequiresForConstructors(compiler, options.checkRequires);
<     }
<   };
< 
<   
<   private final PassFactory checkProvides =
<       new PassFactory("checkProvides", true) {
<     @Override
<     protected CompilerPass createInternal(AbstractCompiler compiler) {
<       return new CheckProvides(compiler, options.checkProvides);
<     }
<   };
< 
<   private static final DiagnosticType GENERATE_EXPORTS_ERROR =
<       DiagnosticType.error(
<           "JSC_GENERATE_EXPORTS_ERROR",
<           "Exports can only be generated if export symbol/property " +
<           "functions are set.");
< 
<   
<   private final PassFactory generateExports =
<       new PassFactory("generateExports", true) {
<     @Override
<     protected CompilerPass createInternal(AbstractCompiler compiler) {
<       CodingConvention convention = compiler.getCodingConvention();
<       if (convention.getExportSymbolFunction() != null &&
<           convention.getExportPropertyFunction() != null) {
<         return new GenerateExports(compiler,
<             convention.getExportSymbolFunction(),
<             convention.getExportPropertyFunction());
<       } else {
<         return new ErrorPass(compiler, GENERATE_EXPORTS_ERROR);
<       }
<     }
<   };
< 
<   
<   private final PassFactory exportTestFunctions =
<       new PassFactory("exportTestFunctions", true) {
<     @Override
<     protected CompilerPass createInternal(AbstractCompiler compiler) {
<       CodingConvention convention = compiler.getCodingConvention();
<       if (convention.getExportSymbolFunction() != null) {
<         return new ExportTestFunctions(compiler,
<             convention.getExportSymbolFunction());
<       } else {
<         return new ErrorPass(compiler, GENERATE_EXPORTS_ERROR);
<       }
<     }
<   };
< 
<   
<   @SuppressWarnings("deprecation")
<   final PassFactory closurePrimitives =
<       new PassFactory("processProvidesAndRequires", false) {
<     @Override
<     protected CompilerPass createInternal(AbstractCompiler compiler) {
<       final ProcessClosurePrimitives pass =
<           options.brokenClosureRequiresLevel != null ?
<           new ProcessClosurePrimitives(
<               compiler,
<               options.brokenClosureRequiresLevel,
<               options.rewriteNewDateGoogNow) :
<           new ProcessClosurePrimitives(
<               compiler,
<               options.allowBrokenClosureRequires,
<               options.rewriteNewDateGoogNow);
< 
<       return new CompilerPass() {
<         @Override
<         public void process(Node externs, Node root) {
<           pass.process(externs, root);
<           setExportedNames(pass.getExportedVariableNames());
<         }
<       };
<     }
<   };
< 
<   
<   private final PassFactory closureCheckGetCssName =
<       new PassFactory("checkMissingGetCssName", true) {
<     @Override
<     protected CompilerPass createInternal(AbstractCompiler compiler) {
<       String blacklist = options.checkMissingGetCssNameBlacklist;
<       Preconditions.checkState(blacklist != null && !blacklist.isEmpty(),
<           "Not checking use of goog.getCssName because of empty blacklist.");
<       return new CheckMissingGetCssName(
<           compiler, options.checkMissingGetCssNameLevel, blacklist);
<     }
<   };
< 
<   
< 
< 
< 
< 
<   private final PassFactory closureReplaceGetCssName =
<       new PassFactory("renameCssNames", true) {
<     @Override
<     protected CompilerPass createInternal(final AbstractCompiler compiler) {
<       return new CompilerPass() {
<         @Override
<         public void process(Node externs, Node jsRoot) {
<           Map<String, Integer> cssNames = null;
<           if (options.gatherCssNames) {
<             cssNames = Maps.newHashMap();
<           }
<           (new ReplaceCssNames(compiler, cssNames)).process(
<               externs, jsRoot);
<           setCssNames(cssNames);
<         }
<       };
<     }
<   };
< 
<   
< 
< 
< 
<   private final PassFactory createSyntheticBlocks =
<       new PassFactory("createSyntheticBlocks", true) {
<     @Override
<     protected CompilerPass createInternal(AbstractCompiler compiler) {
<       return new CreateSyntheticBlocks(compiler,
<           options.syntheticBlockStartMarker,
<           options.syntheticBlockEndMarker);
<     }
<   };
< 
<   
<   static final PassFactory foldConstants =
<       new PassFactory("foldConstants", false) {
<     @Override
<     protected CompilerPass createInternal(AbstractCompiler compiler) {
<       return new FoldConstants(compiler);
<     }
<   };
< 
<   
<   private final PassFactory checkVars =
<       new PassFactory("checkVars", true) {
<     @Override
<     protected CompilerPass createInternal(AbstractCompiler compiler) {
<       return new VarCheck(compiler);
<     }
<   };
< 
<   
<   private final PassFactory checkShadowVars =
<       new PassFactory("variableShadowDeclarationCheck", true) {
<     @Override
<     protected CompilerPass createInternal(AbstractCompiler compiler) {
<       return new VariableShadowDeclarationCheck(
<           compiler, options.checkShadowVars);
<     }
<   };
< 
<   
<   private final PassFactory checkVariableReferences =
<       new PassFactory("checkVariableReferences", true) {
<     @Override
<     protected CompilerPass createInternal(AbstractCompiler compiler) {
<       return new VariableReferenceCheck(
<           compiler, options.aggressiveVarCheck);
<     }
<   };
< 
<   
<   private final PassFactory objectPropertyStringPreprocess =
<       new PassFactory("ObjectPropertyStringPreprocess", true) {
<     @Override
<     protected CompilerPass createInternal(AbstractCompiler compiler) {
<       return new ObjectPropertyStringPreprocess(compiler);
<     }
<   };
< 
<   
<   private final PassFactory checkFunctions =
<       new PassFactory("checkFunctions", true) {
<     @Override
<     protected CompilerPass createInternal(AbstractCompiler compiler) {
<       return new FunctionCheck(compiler, options.checkFunctions);
<     }
<   };
< 
<   
<   private final PassFactory checkMethods =
<       new PassFactory("checkMethods", true) {
<     @Override
<     protected CompilerPass createInternal(AbstractCompiler compiler) {
<       return new MethodCheck(compiler, options.checkMethods);
<     }
<   };
< 
<   
<   final PassFactory resolveTypes =
<       new PassFactory("resolveTypes", false) {
<     @Override
<     protected CompilerPass createInternal(AbstractCompiler compiler) {
<       return new GlobalTypeResolver(compiler);
<     }
<   };
< 
<   
<   private final PassFactory inferTypes =
<       new PassFactory("inferTypes", false) {
<     @Override
<     protected CompilerPass createInternal(final AbstractCompiler compiler) {
<       return new CompilerPass() {
<         @Override
<         public void process(Node externs, Node root) {
<           Preconditions.checkNotNull(topScope);
<           Preconditions.checkNotNull(typedScopeCreator);
< 
<           makeTypeInference(compiler).process(externs, root);
<         }
<       };
<     }
<   };
< 
<   
<   private final PassFactory checkTypes =
<       new PassFactory("checkTypes", false) {
<     @Override
<     protected CompilerPass createInternal(final AbstractCompiler compiler) {
<       return new CompilerPass() {
<         @Override
<         public void process(Node externs, Node root) {
<           Preconditions.checkNotNull(topScope);
<           Preconditions.checkNotNull(typedScopeCreator);
< 
<           TypeCheck check = makeTypeCheck(compiler);
<           check.process(externs, root);
<           compiler.getErrorManager().setTypedPercent(check.getTypedPercent());
<         }
<       };
<     }
<   };
< 
<   
< 
< 
< 
<   private final PassFactory checkControlFlow =
<       new PassFactory("checkControlFlow", true) {
<     @Override
<     protected CompilerPass createInternal(AbstractCompiler compiler) {
<       List<Callback> callbacks = Lists.newArrayList();
<       if (options.checkUnreachableCode.isOn()) {
<         callbacks.add(
<             new CheckUnreachableCode(compiler, options.checkUnreachableCode));
<       }
<       if (options.checkMissingReturn.isOn() && options.checkTypes) {
<         callbacks.add(
<             new CheckMissingReturn(compiler, options.checkMissingReturn));
<       }
<       return combineChecks(compiler, callbacks);
<     }
<   };
< 
<   
<   private final PassFactory checkAccessControls =
<       new PassFactory("checkAccessControls", true) {
<     @Override
<     protected CompilerPass createInternal(AbstractCompiler compiler) {
<       return new CheckAccessControls(compiler);
<     }
<   };
< 
<   
<   private static CompilerPass combineChecks(AbstractCompiler compiler,
<       List<Callback> callbacks) {
<     Preconditions.checkArgument(callbacks.size() > 0);
<     Callback[] array = callbacks.toArray(new Callback[callbacks.size()]);
<     return new CombinedCompilerPass(compiler, array);
<   }
< 
<   
<   private class GlobalTypeResolver implements CompilerPass {
<     private final AbstractCompiler compiler;
< 
<     GlobalTypeResolver(AbstractCompiler compiler) {
<       this.compiler = compiler;
<     }
< 
<     @Override
<     public void process(Node externs, Node root) {
<       if (topScope == null) {
<         typedScopeCreator =
<             new MemoizedScopeCreator(new TypedScopeCreator(compiler));
<         topScope = typedScopeCreator.createScope(root.getParent(), null);
<       } else {
<         compiler.getTypeRegistry().resolveTypesInScope(topScope);
<       }
<     }
<   }
< 
<   
<   private final PassFactory checkGlobalNames =
<       new PassFactory("Check names", true) {
<     @Override
<     protected CompilerPass createInternal(final AbstractCompiler compiler) {
<       return new CompilerPass() {
<         @Override
<         public void process(Node externs, Node jsRoot) {
<           
<           
<           
<           namespaceForChecks = new GlobalNamespace(compiler, jsRoot);
<           new CheckGlobalNames(compiler, options.checkGlobalNamesLevel)
<               .injectNamespace(namespaceForChecks).process(externs, jsRoot);
<         }
<       };
<     }
<   };
< 
<   
<   private final PassFactory checkSuspiciousProperties =
<       new PassFactory("checkSuspiciousProperties", true) {
<     @Override
<     protected CompilerPass createInternal(AbstractCompiler compiler) {
<       return new SuspiciousPropertiesCheck(
<           compiler,
<           options.checkUndefinedProperties,
<           options.checkUnusedPropertiesEarly ?
<               CheckLevel.WARNING : CheckLevel.OFF);
<     }
<   };
< 
<   
<   private final PassFactory checkStrictMode =
<       new PassFactory("checkStrictMode", true) {
<     @Override
<     protected CompilerPass createInternal(AbstractCompiler compiler) {
<       return new StrictModeCheck(compiler,
<           !options.checkSymbols,  
<           !options.checkCaja);    
<     }
<   };
< 
<   
<   final PassFactory processDefines =
<       new PassFactory("processDefines", true) {
<     @Override
<     protected CompilerPass createInternal(final AbstractCompiler compiler) {
<       return new CompilerPass() {
<         @Override
<         public void process(Node externs, Node jsRoot) {
<           Map<String, Node> replacements = getAdditionalReplacements(options);
<           replacements.putAll(options.getDefineReplacements());
< 
<           new ProcessDefines(compiler, replacements)
<               .injectNamespace(namespaceForChecks).process(externs, jsRoot);
< 
<           
<           
<           
<           namespaceForChecks = null;
<         }
<       };
<     }
<   };
< 
<   
<   private final PassFactory checkConsts =
<       new PassFactory("checkConsts", true) {
<     @Override
<     protected CompilerPass createInternal(AbstractCompiler compiler) {
<       return new ConstCheck(compiler);
<     }
<   };
< 
<   
<   private final PassFactory replaceIdGenerators =
<       new PassFactory("replaceIdGenerators", true) {
<     @Override
<     protected CompilerPass createInternal(AbstractCompiler compiler) {
<       return new ReplaceIdGenerators(compiler, options.idGenerators);
<     }
<   };
< 
<   
<   private final PassFactory optimizeArgumentsArray =
<       new PassFactory("optimizeArgumentsArray", true) {
<     @Override
<     protected CompilerPass createInternal(AbstractCompiler compiler) {
<       return new OptimizeArgumentsArray(compiler);
<     }
<   };
< 
<   
<   private final PassFactory removeUselessParameters =
<       new PassFactory("optimizeParameters", true) {
<     @Override
<     protected CompilerPass createInternal(final AbstractCompiler compiler) {
<       return new CompilerPass() {
<         @Override public void process(Node externs, Node root) {
<           NameReferenceGraphConstruction c =
<               new NameReferenceGraphConstruction(compiler);
<           c.process(externs, root);
< 
<           (new OptimizeParameters(compiler, c.getNameReferenceGraph())).process(
<               externs, root);
<         }
<       };
<     }
<   };
< 
<   
<   private final PassFactory removeAbstractMethods =
<       new PassFactory("removeAbstractMethods", true) {
<     @Override
<     protected CompilerPass createInternal(final AbstractCompiler compiler) {
<       return new GoogleCodeRemoval(compiler);
<     }
<   };
< 
<   
<   private final PassFactory collapseProperties =
<       new PassFactory("collapseProperties", true) {
<     @Override
<     protected CompilerPass createInternal(AbstractCompiler compiler) {
<       return new CollapseProperties(
<           compiler, options.collapsePropertiesOnExternTypes,
<           !isInliningForbidden());
<     }
<   };
< 
<   
< 
< 
< 
<   private final PassFactory undoConstantRenaming =
<       new PassFactory("undoConstantNames", true) {
<     @Override
<     protected CompilerPass createInternal(AbstractCompiler compiler) {
<       return new MakeDeclaredNamesUnique.UndoConstantRenaming(compiler);
<     }
<   };
< 
<   
< 
< 
< 
<   private final PassFactory renameConstants =
<       new PassFactory("renameConstants", false) {
<     @Override
<     protected CompilerPass createInternal(AbstractCompiler compiler) {
<       return new Normalize(compiler, false).new RenameConstants();
<     }
<   };
< 
<   
< 
< 
< 
<   private final PassFactory tightenTypesBuilder =
<       new PassFactory("tightenTypes", true) {
<     @Override
<     protected CompilerPass createInternal(AbstractCompiler compiler) {
<       if (!options.checkTypes) {
<         return new ErrorPass(compiler, TIGHTEN_TYPES_WITHOUT_TYPE_CHECK);
<       }
<       tightenTypes = new TightenTypes(compiler);
<       return tightenTypes;
<     }
<   };
< 
<   
<   private final PassFactory disambiguateProperties =
<       new PassFactory("disambiguateProperties", true) {
<     @Override
<     protected CompilerPass createInternal(AbstractCompiler compiler) {
<       if (tightenTypes == null) {
<         return DisambiguateProperties.forJSTypeSystem(compiler);
<       } else {
<         return DisambiguateProperties.forConcreteTypeSystem(
<             compiler, tightenTypes);
<       }
<     }
<   };
< 
<   
< 
< 
<   private final PassFactory chainCalls =
<       new PassFactory("chainCalls", true) {
<     @Override
<     protected CompilerPass createInternal(AbstractCompiler compiler) {
<       return new ChainCalls(compiler);
<     }
<   };
< 
<   
< 
< 
< 
<   private final PassFactory devirtualizePrototypeMethods =
<       new PassFactory("devirtualizePrototypeMethods", true) {
<     @Override
<     protected CompilerPass createInternal(AbstractCompiler compiler) {
<       return new DevirtualizePrototypeMethods(compiler);
<     }
<   };
< 
<   
< 
< 
< 
<   private final PassFactory markPureFunctions =
<       new PassFactory("markPureFunctions", true) {
<     @Override
<     protected CompilerPass createInternal(AbstractCompiler compiler) {
<       return new PureFunctionMarker(
<           compiler, options.debugFunctionSideEffectsPath, false);
<     }
<   };
< 
<   
< 
< 
< 
<   private final PassFactory markNoSideEffectCalls =
<       new PassFactory("markNoSideEffectCalls", true) {
<     @Override
<     protected CompilerPass createInternal(AbstractCompiler compiler) {
<       return new MarkNoSideEffectCalls(compiler);
<     }
<   };
< 
<   
<   private final PassFactory inlineVariables =
<       new PassFactory("inlineVariables", false) {
<     @Override
<     protected CompilerPass createInternal(AbstractCompiler compiler) {
<       if (isInliningForbidden()) {
<         
<         
<         
<         return new ErrorPass(compiler, CANNOT_USE_PROTOTYPE_AND_VAR);
<       } else {
<         return new InlineVariables(compiler, false, true);
<       }
<     }
<   };
< 
<   
<   private final PassFactory inlineConstants =
<       new PassFactory("inlineConstants", false) {
<     @Override
<     protected CompilerPass createInternal(AbstractCompiler compiler) {
<       return new InlineVariables(compiler, true, true);
<     }
<   };
< 
<   
< 
< 
<   private final PassFactory removeConstantExpressions =
<       new PassFactory("removeConstantExpressions", false) {
<     @Override
<     protected CompilerPass createInternal(AbstractCompiler compiler) {
<       return new RemoveConstantExpressions(compiler);
<     }
<   };
< 
<   
< 
< 
<   private final PassFactory minimizeExitPoints =
<       new PassFactory("minimizeExitPoints", false) {
<     @Override
<     protected CompilerPass createInternal(AbstractCompiler compiler) {
<       return new MinimizeExitPoints(compiler);
<     }
<   };
< 
<   
< 
< 
<   private final PassFactory removeUnreachableCode =
<       new PassFactory("removeUnreachableCode", false) {
<     @Override
<     protected CompilerPass createInternal(AbstractCompiler compiler) {
<       return new UnreachableCodeElimination(compiler, true);
<     }
<   };
< 
<   
< 
< 
<   private final PassFactory removeUnusedPrototypeProperties =
<       new PassFactory("removeUnusedPrototypeProperties", false) {
<     @Override
<     protected CompilerPass createInternal(AbstractCompiler compiler) {
<       return new RemoveUnusedPrototypeProperties(
<           compiler, options.removeUnusedPrototypePropertiesInExterns,
<           !options.removeUnusedVars);
<     }
<   };
< 
<   
< 
< 
< 
<   private final PassFactory smartNamePass =
<       new PassFactory("smartNamePass", true) {
<     @Override
<     protected CompilerPass createInternal(final AbstractCompiler compiler) {
<       return new CompilerPass() {
<         @Override
<         public void process(Node externs, Node root) {
<           NameAnalyzer na = new NameAnalyzer(compiler, false);
<           na.process(externs, root);
< 
<           String reportPath = options.reportPath;
<           if (reportPath != null) {
<             try {
<               Files.write(na.getHtmlReport(), new File(reportPath),
<                   Charsets.UTF_8);
<             } catch (IOException e) {
<               compiler.report(JSError.make(REPORT_PATH_IO_ERROR, reportPath));
<             }
<           }
< 
<           if (options.smartNameRemoval) {
<             na.removeUnreferenced();
<           }
<         }
<       };
<     }
<   };
< 
<   
<   private PassFactory inlineGetters =
<       new PassFactory("inlineGetters", false) {
<     @Override
<     protected CompilerPass createInternal(AbstractCompiler compiler) {
<       return new InlineGetters(compiler);
<     }
<   };
< 
<   
<   private PassFactory deadAssignmentsElimination =
<       new PassFactory("deadAssignmentsElimination", false) {
<     @Override
<     protected CompilerPass createInternal(AbstractCompiler compiler) {
<       return new DeadAssignmentsElimination(compiler);
<     }
<   };
< 
<   
<   private PassFactory inlineFunctions =
<       new PassFactory("inlineFunctions", false) {
<     @Override
<     protected CompilerPass createInternal(AbstractCompiler compiler) {
<       boolean enableBlockInlining = !isInliningForbidden();
<       return new InlineFunctions(
<           compiler, compiler.getUniqueNameIdSupplier(),
<           enableBlockInlining, options.decomposeExpressions,
<           options.inlineAnonymousFunctionExpressions);
<     }
<   };
< 
<   
<   private PassFactory removeUnusedVars =
<       new PassFactory("removeUnusedVars", false) {
<     @Override
<     protected CompilerPass createInternal(AbstractCompiler compiler) {
<       return new RemoveUnusedVars(
<           compiler, options.removeUnusedVarsInGlobalScope);
<     }
<   };
< 
<   
< 
< 
<   private PassFactory crossModuleCodeMotion =
<       new PassFactory("crossModuleCodeMotion", false) {
<     @Override
<     protected CompilerPass createInternal(AbstractCompiler compiler) {
<       return new CrossModuleCodeMotion(compiler, compiler.getModuleGraph());
<     }
<   };
< 
<   
< 
< 
<   private PassFactory crossModuleMethodMotion =
<       new PassFactory("crossModuleMethodMotion", false) {
<     @Override
<     protected CompilerPass createInternal(AbstractCompiler compiler) {
<       return new CrossModuleMethodMotion(
<           compiler, getCrossModuleIdGenerator(),
<           
<           
<           options.removeUnusedPrototypePropertiesInExterns);
<     }
<   };
< 
<   
< 
< 
<   private static PassFactory createEmptyPass(String name) {
<     return new PassFactory(name, true) {
<       @Override
<       protected CompilerPass createInternal(final AbstractCompiler compiler) {
<         return runInSerial();
<       }
<     };
<   }
< 
<   
< 
< 
<   private PassFactory getCustomPasses(
<       final CustomPassExecutionTime executionTime) {
<     return new PassFactory("runCustomPasses", true) {
<       @Override
<       protected CompilerPass createInternal(final AbstractCompiler compiler) {
<         return runInSerial(options.customPasses.get(executionTime));
<       }
<     };
<   }
< 
<   
< 
< 
< 
<   private boolean isInliningForbidden() {
<     return options.propertyRenaming == PropertyRenamingPolicy.HEURISTIC ||
<         options.propertyRenaming ==
<             PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC;
<   }
< 
<   
<   private static CompilerPass runInSerial(final CompilerPass ... passes) {
<     return runInSerial(Lists.newArrayList(passes));
<   }
< 
<   
<   private static CompilerPass runInSerial(
<       final Collection<CompilerPass> passes) {
<     return new CompilerPass() {
<       @Override public void process(Node externs, Node root) {
<         for (CompilerPass pass : passes) {
<           pass.process(externs, root);
<         }
<       }
<     };
<   }
< 
<   @VisibleForTesting
<   static Map<String, Node> getAdditionalReplacements(
<       CompilerOptions options) {
<     Map<String, Node> additionalReplacements = Maps.newHashMap();
< 
<     if (options.markAsCompiled || options.closurePass) {
<       additionalReplacements.put(COMPILED_CONSTANT_NAME, new Node(Token.TRUE));
<     }
< 
<     if (options.closurePass && options.locale != null) {
<       additionalReplacements.put(CLOSURE_LOCALE_CONSTANT_NAME,
<           Node.newString(options.locale));
<     }
< 
<     return additionalReplacements;
<   }
< 
<   
<   private static class ErrorPass implements CompilerPass {
<     private final AbstractCompiler compiler;
<     private final DiagnosticType error;
< 
<     private ErrorPass(AbstractCompiler compiler, DiagnosticType error) {
<       this.compiler = compiler;
<       this.error = error;
<     }
< 
<     @Override
<     public void process(Node externs, Node root) {
<       compiler.report(JSError.make(error));
<     }
<   }
< 
<   
<   private static class PureFunctionMarker implements CompilerPass {
<     private final AbstractCompiler compiler;
<     private final String reportPath;
<     private final boolean useNameReferenceGraph;
< 
<     PureFunctionMarker(AbstractCompiler compiler, String reportPath,
<         boolean useNameReferenceGraph) {
<       this.compiler = compiler;
<       this.reportPath = reportPath;
<       this.useNameReferenceGraph = useNameReferenceGraph;
<     }
< 
<     @Override
<     public void process(Node externs, Node root) {
<       DefinitionProvider definitionProvider = null;
<       if (useNameReferenceGraph) {
<         NameReferenceGraphConstruction graphBuilder =
<             new NameReferenceGraphConstruction(compiler);
<         graphBuilder.process(externs, root);
<         definitionProvider = graphBuilder.getNameReferenceGraph();
<       } else {
<         SimpleDefinitionFinder defFinder = new SimpleDefinitionFinder(compiler);
<         defFinder.process(externs, root);
<         definitionProvider = defFinder;
<       }
< 
<       PureFunctionIdentifier pureFunctionIdentifier =
<           new PureFunctionIdentifier(compiler, definitionProvider);
<       pureFunctionIdentifier.process(externs, root);
< 
<       if (reportPath != null) {
<         try {
<           Files.write(pureFunctionIdentifier.getDebugReport(),
<               new File(reportPath),
<               Charsets.UTF_8);
<         } catch (IOException e) {
<           throw new RuntimeException(e);
<         }
<       }
<     }
<   }
< }
---
> </BODY>
> </HTML>
