1a2,112
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> package com.google.javascript.jscomp;
> 
> import com.google.common.base.Preconditions;
> import com.google.javascript.jscomp.NodeTraversal.Callback;
> import com.google.javascript.rhino.Node;
> import com.google.javascript.rhino.Token;
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> class Denormalize implements CompilerPass, Callback {
> 
>   private final AbstractCompiler compiler;
> 
>   Denormalize(AbstractCompiler compiler) {
>     this.compiler = compiler;
>   }
> 
>   @Override
>   public void process(Node externs, Node root) {
>     NodeTraversal.traverse(compiler, root, this);
>   }
> 
>   @Override
>   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
>     return true;
>   }
> 
>   @Override
>   public void visit(NodeTraversal t, Node n, Node parent) {
>     maybeCollapseIntoForStatements(n, parent);
>   }
> 
>   
> 
> 
> 
>   private void maybeCollapseIntoForStatements(Node n, Node parent) {
>     
>     
>     if (parent == null || !NodeUtil.isStatementBlock(parent)) {
>       return;
>     }
> 
>     
>     if (!NodeUtil.isExpressionNode(n) && !NodeUtil.isVar(n)) {
>       return;
>     }
> 
>     
>     Node nextSibling = n.getNext();
>     if (nextSibling != null
>         && nextSibling.getType() == Token.FOR
>         && nextSibling.getChildCount() == 4
>         && nextSibling.getFirstChild().getType() == Token.EMPTY) {
> 
>       
>       
>       
>       
>       
>       if (NodeUtil.containsType(n, Token.IN)) {
>         return;
>       }
> 
>       
>       Node forNode = nextSibling;
>       Node oldInitializer = forNode.getFirstChild();
>       parent.removeChild(n);
> 
>       Node newInitializer;
>       if (NodeUtil.isVar(n)) {
>         newInitializer = n;
>       } else {
>         
>         Preconditions.checkState(n.hasOneChild());
>         newInitializer = n.getFirstChild();
>         n.removeChild(newInitializer);
>       }
> 
>       forNode.replaceChild(oldInitializer, newInitializer);
> 
>       compiler.reportCodeChange();
>     }
>   }
> }
