















package com.google.javascript.jscomp;


import com.google.common.collect.Maps;
import com.google.common.collect.Sets;

import java.io.Serializable;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Set;






public abstract class PassConfig {

  
  final CompilerOptions options;

  
  private Set<String> exportedNames = null;

  



  private CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator =
      new CrossModuleMethodMotion.IdGenerator();

  




  MemoizedScopeCreator typedScopeCreator;

  
  Scope topScope = null;

  



  private Map<String, Integer> cssNames = null;

  public PassConfig(CompilerOptions options) {
    this.options = options;
  }

  
  
  
  
  
  
  
  
  
  

  



  Map<String, Integer> getCssNames() {
    return cssNames == null ? null : Maps.newHashMap(cssNames);
  }

  


  Set<String> getExportedNames() {
    return exportedNames == null ? null :
        Collections.unmodifiableSet(exportedNames);
  }

  



  CrossModuleMethodMotion.IdGenerator getCrossModuleIdGenerator() {
    return crossModuleIdGenerator;
  }

  


  void setCssNames(Map<String, Integer> newVal) {
    cssNames = newVal == null ? null : Maps.newHashMap(newVal);
  }

  


  void setExportedNames(Set<String> newVal) {
    exportedNames = newVal == null ? null : Sets.newHashSet(newVal);
  }

  


  ScopeCreator getScopeCreator() {
    return typedScopeCreator;
  }

  


  Scope getTopScope() {
    return topScope;
  }

  









  abstract protected List<PassFactory> getChecks();

  





  abstract protected List<PassFactory> getOptimizations();

  


  final TypeInferencePass makeTypeInference(AbstractCompiler compiler) {
    return new TypeInferencePass(
        compiler, compiler.getReverseAbstractInterpreter(),
        topScope, typedScopeCreator);
  }

  


  final TypeCheck makeTypeCheck(AbstractCompiler compiler) {
    return new TypeCheck(
        compiler,
        compiler.getReverseAbstractInterpreter(),
        compiler.getTypeRegistry(),
        topScope,
        typedScopeCreator,
        options.reportMissingOverride,
        options.reportUnknownTypes)
        .reportMissingProperties(options.enables(
            DiagnosticGroup.forType(TypeCheck.INEXISTENT_PROPERTY)));
  }

  final static void addPassFactoryBefore(
      List<PassFactory> factoryList, PassFactory factory, String passName) {
    for (int i = 0; i < factoryList.size(); i++) {
      if (factoryList.get(i).getName().equals(passName)) {
        factoryList.add(i, factory);
        return;
      }
    }

    throw new IllegalArgumentException(
        "No factory named '" + passName + "' in the factory list");
  }

  


  final PassConfig getBasePassConfig() {
    PassConfig current = this;
    while (current instanceof PassConfigDelegate) {
      current = ((PassConfigDelegate) current).delegate;
    }
    return current;
  }

  



  State getIntermediateState() {
    return new State(getCssNames(), getExportedNames(),
                     crossModuleIdGenerator);
  }

  



  void setIntermediateState(State state) {
    setCssNames(state.cssNames);
    setExportedNames(state.exportedNames);
    crossModuleIdGenerator = state.crossModuleIdGenerator;
  }

  



  static class PassConfigDelegate extends PassConfig {

    private final PassConfig delegate;

    PassConfigDelegate(PassConfig delegate) {
      super(delegate.options);
      this.delegate = delegate;
    }

    @Override protected List<PassFactory> getChecks() {
      return delegate.getChecks();
    }

    @Override protected List<PassFactory> getOptimizations() {
      return delegate.getOptimizations();
    }

    @Override Map<String, Integer> getCssNames() {
      return delegate.getCssNames();
    }

    @Override Set<String> getExportedNames() {
      return delegate.getExportedNames();
    }

    @Override void setCssNames(Map<String, Integer> newVal) {
      delegate.setCssNames(newVal);
    }

    @Override void setExportedNames(Set<String> newVal) {
      delegate.setExportedNames(newVal);
    }

    @Override ScopeCreator getScopeCreator() {
      return delegate.getScopeCreator();
    }

    @Override Scope getTopScope() {
      return delegate.getTopScope();
    }

    @Override State getIntermediateState() {
      return delegate.getIntermediateState();
    }

    @Override void setIntermediateState(State state) {
      delegate.setIntermediateState(state);
    }
  }

  


  static class State implements Serializable {
    private static final long serialVersionUID = 1L;

    private final Map<String, Integer> cssNames;
    private final Set<String> exportedNames;
    private final CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator;

    private State(Map<String, Integer> cssNames, Set<String> exportedNames,
                  CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator) {
      this.cssNames = cssNames;
      this.exportedNames = exportedNames;
      this.crossModuleIdGenerator = crossModuleIdGenerator;
    }
  }
}
