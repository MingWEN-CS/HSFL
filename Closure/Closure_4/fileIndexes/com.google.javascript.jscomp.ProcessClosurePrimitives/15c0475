















package com.google.javascript.jscomp;

import com.google.common.base.Preconditions;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Maps;
import com.google.common.collect.Sets;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.NodeTraversal.AbstractNodeTypePruningCallback;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.Token;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;










class ProcessClosurePrimitives extends AbstractNodeTypePruningCallback
    implements CompilerPass {

  static final DiagnosticType NULL_ARGUMENT_ERROR = DiagnosticType.error(
      "JSC_NULL_ARGUMENT_ERROR",
      "method \"{0}\" called without an argument");

  static final DiagnosticType INVALID_ARGUMENT_ERROR = DiagnosticType.error(
      "JSC_INVALID_ARGUMENT_ERROR",
      "method \"{0}\" called with a non-string argument");

  static final DiagnosticType TOO_MANY_ARGUMENTS_ERROR = DiagnosticType.error(
      "JSC_TOO_MANY_ARGUMENTS_ERROR",
      "method \"{0}\" called with more than one argument");

  static final DiagnosticType DUPLICATE_NAMESPACE_ERROR = DiagnosticType.error(
      "JSC_DUPLICATE_NAMESPACE_ERROR",
      "namespace \"{0}\" cannot be provided twice");

  static final DiagnosticType FUNCTION_NAMESPACE_ERROR = DiagnosticType.error(
      "JSC_FUNCTION_NAMESPACE_ERROR",
      "\"{0}\" cannot be both provided and declared as a function");

  static final DiagnosticType MISSING_PROVIDE_ERROR = DiagnosticType.error(
      "JSC_MISSING_PROVIDE_ERROR",
      "required \"{0}\" namespace never provided");

  static final DiagnosticType LATE_PROVIDE_ERROR = DiagnosticType.error(
      "JSC_LATE_PROVIDE_ERROR",
      "required \"{0}\" namespace not provided yet");

  static final DiagnosticType INVALID_PROVIDE_ERROR = DiagnosticType.error(
      "JSC_INVALID_PROVIDE_ERROR",
      "\"{0}\" is not a valid JS property name");

  static final DiagnosticType XMODULE_REQUIRE_ERROR = DiagnosticType.warning(
      "JSC_XMODULE_REQUIRE_ERROR",
      "namespace \"{0}\" provided in module {1} " +
      "but required in module {2}");

  static final DiagnosticType NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR =
      DiagnosticType.error(
          "JSC_NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR",
      "goog.setCssNameMapping only takes an object literal with string values");

  
  static final String GOOG = "goog";

  private final AbstractCompiler compiler;
  private final List<UnrecognizedRequire> unrecognizedRequires;
  private final Map<String, ProvidedNode> providedNodes;
  private final Set<String> exportedVariables = Sets.newHashSet();
  private final CheckLevel requiresLevel;
  private final boolean rewriteNewDateGoogNow;

  private static final Set<Integer> TRAVERSAL_NODE_TYPES = ImmutableSet.of(
    Token.SCRIPT,
    Token.BLOCK,
    Token.EXPR_RESULT,
    Token.CALL,
    Token.ASSIGN,
    Token.IF,
    Token.VAR,
    Token.NAME,
    Token.NEW,
    Token.FUNCTION);

  ProcessClosurePrimitives(AbstractCompiler compiler,
                           CheckLevel requiresLevel,
                           boolean rewriteNewDateGoogNow) {
    super(TRAVERSAL_NODE_TYPES);

    this.compiler = compiler;
    this.unrecognizedRequires = new ArrayList<UnrecognizedRequire>();
    this.providedNodes = new HashMap<String, ProvidedNode>();
    this.requiresLevel = requiresLevel;
    this.rewriteNewDateGoogNow = rewriteNewDateGoogNow;

    
    providedNodes.put(GOOG, new ProvidedNode(null, null, null));
  }

  Set<String> getExportedVariableNames() {
    return exportedVariables;
  }

  


  public void process(Node externs, Node root) {
    new NodeTraversal(compiler, this).traverse(root);

    for (ProvidedNode pn : providedNodes.values()) {
      if (pn != null) {
        pn.maybeRemove();
      }
    }

    if (requiresLevel.isOn()) {
      for (UnrecognizedRequire r : unrecognizedRequires) {
        DiagnosticType error;
        if (providedNodes.get(r.namespace) != null) {
          
          error = LATE_PROVIDE_ERROR;
        } else {
          error = MISSING_PROVIDE_ERROR;
        }

        compiler.report(JSError.make(
            r.inputName, r.requireNode, requiresLevel, error, r.namespace));
      }
    }
  }

  


  public void visit(NodeTraversal t, Node n, Node parent) {
    switch (n.getType()) {
      case Token.CALL:
        if (parent.getType() == Token.EXPR_RESULT) {
          Node left = n.getFirstChild();
          if (left.getType() == Token.GETPROP) {
            Node name = left.getFirstChild();
            if (name.getType() == Token.NAME &&
                GOOG.equals(name.getString())) {
              
              
              
              String methodName = name.getNext().getString();
              if ("require".equals(methodName)) {
                Node arg = left.getNext();
                if (verifyArgument(t, left, arg)) {
                  String ns = arg.getString();
                  ProvidedNode provided = providedNodes.get(ns);
                  if (provided == null) {
                    unrecognizedRequires.add(
                        new UnrecognizedRequire(n, ns, t.getSourceName()));
                  } else {
                    JSModule module = t.getModule();
                    if (module != provided.module  &&
                        !compiler.getModuleGraph().dependsOn(module,
                            provided.module)) {
                      compiler.report(
                          JSError.make(t, n, XMODULE_REQUIRE_ERROR, ns,
                              provided.module.getName(),
                              module.getName()));
                    }
                  }

                  
                  
                  
                  
                  
                  
                  if (provided != null || requiresLevel.isOn()) {
                    parent.getParent().removeChild(parent);
                    compiler.reportCodeChange();
                  }
                }
              } else if ("provide".equals(methodName)) {
                Node arg = left.getNext();
                if (verifyProvide(t, left, arg)) {
                  String ns = arg.getString();
                  if (providedNodes.get(ns) != null) {
                    compiler.report(
                        JSError.make(t, n, DUPLICATE_NAMESPACE_ERROR, ns));
                  } else if (!providedNodes.containsKey(ns)) {
                    replaceProvide(t, parent, parent.getParent(), ns);
                  } else {
                    
                    parent.getParent().removeChild(parent);
                    providedNodes.put(ns,
                        new ProvidedNode(null, null, t.getModule()));
                  }
                  compiler.reportCodeChange();
                }
              } else if ("exportSymbol".equals(methodName)) {
                Node arg = left.getNext();
                if (arg.getType() == Token.STRING) {
                  int dot = arg.getString().indexOf('.');
                  if (dot == -1) {
                    exportedVariables.add(arg.getString());
                  } else {
                    exportedVariables.add(arg.getString().substring(0, dot));
                  }
                }
              } else if ("addDependency".equals(methodName)) {
                CodingConvention convention = compiler.getCodingConvention();
                List<String> typeDecls =
                    convention.identifyTypeDeclarationCall(n);
                if (typeDecls != null) {
                  for (String typeDecl : typeDecls) {
                    compiler.getTypeRegistry().forwardDeclareType(typeDecl);
                  }
                }

                
                
                parent.replaceChild(n, Node.newNumber(0));
                compiler.reportCodeChange();
              } else if ("setCssNameMapping".equals(methodName)) {
                processSetCssNameMapping(t, n, parent);
              }
            }
          }
        }
        break;
      case Token.ASSIGN:
        
        
        if (t.inGlobalScope() &&
            parent.getType() == Token.EXPR_RESULT) {
          Node nameNode = n.getFirstChild();
          String name = nameNode.getQualifiedName();
          if (name != null) {
            if (parent.getBooleanProp(Node.IS_NAMESPACE)) {
              processProvideFromPreviousPass(t, name, parent);
            } else {
              ProvidedNode pn = providedNodes.get(name);
              if (pn != null) {
                pn.addCandidate(parent, parent.getParent());
              }
            }
          }
        }
        break;
      case Token.NAME:
        
        
        if (t.inGlobalScope() &&
            parent.getType() == Token.VAR) {
          String name = n.getString();
          if (parent.getBooleanProp(Node.IS_NAMESPACE)) {
            processProvideFromPreviousPass(t, name, parent);
          } else {
            ProvidedNode pn = providedNodes.get(name);
            if (pn != null) {
              pn.addCandidate(parent, parent.getParent());
            }
          }
        }
        break;
      case Token.FUNCTION:
        
        
        if (t.inGlobalScope() &&
            !NodeUtil.isFunctionAnonymous(n)) {
          String name = n.getFirstChild().getString();
          ProvidedNode pn = providedNodes.get(name);
          if (pn != null) {
            compiler.report(JSError.make(t, n, FUNCTION_NAMESPACE_ERROR, name));
          }
        }
        break;

      case Token.NEW:
        trySimplifyNewDate(t, n, parent);
        break;
    }
  }

  




  private void processProvideFromPreviousPass(
      NodeTraversal t, String name, Node parent) {
    if (!providedNodes.containsKey(name)) {
      
      providedNodes.put(name, new ProvidedNode(
          parent, parent.getParent(), t.getModule()));
    } else {
      
      
      parent.getParent().removeChild(parent);
    }
  }

  






  private void processSetCssNameMapping(NodeTraversal t, Node n, Node parent) {
    Node left = n.getFirstChild();
    Node arg = left.getNext();
    if (verifyArgument(t, left, arg, Token.OBJECTLIT)) {
      
      
      final Map<String,String> cssNames = Maps.newHashMap();
      JSError error = null;
      for (Node key = arg.getFirstChild(); key != null;
          key = key.getNext().getNext()) {
        Node value = key.getNext();
        if (key.getType() != Token.STRING
            || value == null
            || value.getType() != Token.STRING) {
          error = JSError.make(t, n,
              NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR);
        }
        if (error != null) {
          compiler.report(error);
          break;
        }
        cssNames.put(key.getString(), value.getString());
      }

      
      
      if (error == null) {
        CssRenamingMap cssRenamingMap = new CssRenamingMap() {
          public String get(String value) {
            if (cssNames.containsKey(value)) {
              return cssNames.get(value);
            } else {
              return value;
            }
          }
        };
        compiler.setCssRenamingMap(cssRenamingMap);
        parent.getParent().removeChild(parent);
        compiler.reportCodeChange();
      }
    }
  }

  


  private void trySimplifyNewDate(NodeTraversal t, Node n, Node parent) {
    if (!rewriteNewDateGoogNow) {
      return;
    }
    Preconditions.checkArgument(n.getType() == Token.NEW);
    Node date = n.getFirstChild();
    if (!NodeUtil.isName(date) || !"Date".equals(date.getString())) {
      return;
    }
    Node callGoogNow = date.getNext();
    if (callGoogNow == null || !NodeUtil.isCall(callGoogNow) ||
        callGoogNow.getNext() != null) {
      return;
    }
    Node googNow = callGoogNow.getFirstChild();
    String googNowQName = googNow.getQualifiedName();
    if (googNowQName == null || !"goog.now".equals(googNowQName)
        || googNow.getNext() != null) {
      return;
    }
    n.removeChild(callGoogNow);
    compiler.reportCodeChange();
  }

  






  private boolean verifyProvide(NodeTraversal t, Node methodName, Node arg) {
    if (!verifyArgument(t, methodName, arg)) {
      return false;
    }

    for (String part : arg.getString().split("\\.")) {
      if (!NodeUtil.isValidPropertyName(part)) {
        compiler.report(JSError.make(t, arg, INVALID_PROVIDE_ERROR, part));
        return false;
      }
    }
    return true;
  }

  





  private boolean verifyArgument(NodeTraversal t, Node methodName, Node arg) {
    return verifyArgument(t, methodName, arg, Token.STRING);
  }

  





  private boolean verifyArgument(NodeTraversal t, Node methodName, Node arg,
      int desiredType) {
    DiagnosticType diagnostic = null;
    if (arg == null) {
      diagnostic = NULL_ARGUMENT_ERROR;
    } else if (arg.getType() != desiredType) {
      diagnostic = INVALID_ARGUMENT_ERROR;
    } else if (arg.getNext() != null) {
      diagnostic = TOO_MANY_ARGUMENTS_ERROR;
    }
    if (diagnostic != null) {
      compiler.report(
          JSError.make(t, methodName,
                       diagnostic, methodName.getQualifiedName()));
      return false;
    }
    return true;
  }

  







  private void replaceProvide(
      NodeTraversal t, Node node, Node parent, String ns) {
    Node newNode;
    if (ns.indexOf('.') == -1) {
      newNode = makeVarDeclNode(ns);
      parent.replaceChild(node, newNode);
    } else {
      newNode = makeAssignmentExprNode(ns, node);
      parent.replaceChild(node, newNode);
      maybeProvidePrefixes(newNode, parent, ns);
    }
    providedNodes.put(ns, new ProvidedNode(newNode, parent, t.getModule()));
  }

  






  private void maybeProvidePrefixes(Node node, Node parent, String ns) {
    int pos = ns.lastIndexOf('.');
    Node nodeToAddBefore = node;
    while (pos != -1) {
      String prefixNs = ns.substring(0, pos);
      pos = prefixNs.lastIndexOf('.');
      if (providedNodes.containsKey(prefixNs)) {
        break;
      } else {
        
        
        providedNodes.put(prefixNs, null);
        Node newNode = (pos == -1
                        ? makeVarDeclNode(prefixNs)
                        : makeAssignmentExprNode(prefixNs, node));
        parent.addChildBefore(newNode, nodeToAddBefore);
        nodeToAddBefore = newNode;
      }
    }
  }

  





  private Node makeVarDeclNode(String namespace) {
    Node name = Node.newString(Token.NAME, namespace);
    name.addChildToFront(new Node(Token.OBJECTLIT));
    Node decl = new Node(Token.VAR, name);
    decl.putBooleanProp(Node.IS_NAMESPACE, true);

    
    if (compiler.getCodingConvention().isConstant(namespace)) {
      name.putBooleanProp(Node.IS_CONSTANT_NAME, true);
    }

    return decl;
  }

  






  private Node makeAssignmentExprNode(String namespace, Node node) {
    Node decl = new Node(Token.EXPR_RESULT,
        new Node(Token.ASSIGN,
            NodeUtil.newQualifiedNameNode(namespace, node, namespace),
            new Node(Token.OBJECTLIT)));
    decl.putBooleanProp(Node.IS_NAMESPACE, true);
    return decl;
  }

  

  


  private class ProvidedNode {
    private final Node providedNode;
    private final Node providedParent;
    private final JSModule module;
    private Node replacementCandidate;
    private Node replacementCandidateParent;

    ProvidedNode(Node node, Node parent, JSModule module) {
      Preconditions.checkArgument((node == null) ||
                                  NodeUtil.isVar(node) ||
                                  NodeUtil.isExpressionNode(node));
      Preconditions.checkArgument((node == null) == (parent == null));
      this.providedNode = node;
      this.providedParent = parent;
      this.replacementCandidate = null;
      this.replacementCandidateParent = null;
      this.module = module;
    }

    





    void addCandidate(Node node, Node parent) {
      Preconditions.checkArgument(NodeUtil.isExpressionNode(node) || 
                                  NodeUtil.isFunction(node) ||
                                  NodeUtil.isVar(node));
      Preconditions.checkArgument(providedNode != node);

      if ((replacementCandidate == null) || !NodeUtil.isExpressionNode(node)) {
        replacementCandidate = node;
        replacementCandidateParent = parent;
      }
    }

    





    void maybeRemove() {
      if ((providedNode != null) && (replacementCandidate != null)) {
        providedParent.removeChild(providedNode);
        compiler.reportCodeChange();

        if (NodeUtil.isExpressionNode(replacementCandidate)) {
          replacementCandidate.putBooleanProp(Node.IS_NAMESPACE, true);
          Node assignNode = replacementCandidate.getFirstChild();
          Node nameNode = assignNode.getFirstChild();
          if (nameNode.getType() == Token.NAME) {
            
            Node valueNode = nameNode.getNext();
            assignNode.removeChild(nameNode);
            assignNode.removeChild(valueNode);
            nameNode.addChildToFront(valueNode);
            Node varNode = new Node(Token.VAR, nameNode);
            replacementCandidateParent.replaceChild(replacementCandidate,
                                                    varNode);
            nameNode.setJSDocInfo(assignNode.getJSDocInfo());
            compiler.reportCodeChange();
          }
        }
      }
    }
  }

  

  


  private class UnrecognizedRequire {
    final Node requireNode;
    final String namespace;
    final String inputName;

    UnrecognizedRequire(Node requireNode, String namespace, String inputName) {
      this.requireNode = requireNode;
      this.namespace = namespace;
      this.inputName = inputName;
    }
  }
}
