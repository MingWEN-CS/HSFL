92a93
>   private final JSModuleGraph moduleGraph;
96c97
<       Maps.newLinkedHashMap();
---
>       Maps.newTreeMap();
107a109
>     this.moduleGraph = compiler.getModuleGraph();
150d151
<     
169,198c170
<               Node arg = left.getNext();
<               if (verifyArgument(t, left, arg)) {
<                 String ns = arg.getString();
<                 ProvidedName provided = providedNames.get(ns);
<                 if (provided == null || !provided.isExplicitlyProvided()) {
<                   unrecognizedRequires.add(
<                       new UnrecognizedRequire(n, ns, t.getSourceName()));
<                 } else {
<                   JSModule module = t.getModule();
<                   if (module != provided.firstModule  &&
<                       !compiler.getModuleGraph().dependsOn(module,
<                           provided.firstModule)) {
<                     compiler.report(
<                         JSError.make(t, n, XMODULE_REQUIRE_ERROR, ns,
<                             provided.firstModule.getName(),
<                             module.getName()));
<                   }
<                 }
< 
<                 
<                 
<                 
<                 
<                 
<                 
<                 if (provided != null || requiresLevel.isOn()) {
<                   parent.getParent().removeChild(parent);
<                   compiler.reportCodeChange();
<                 }
<               }
---
>               processRequireCall(t, n, parent);
200,216c172
<               Node arg = left.getNext();
<               if (verifyProvide(t, left, arg)) {
<                 String ns = arg.getString();
<                 if (providedNames.containsKey(ns)) {
<                   ProvidedName previouslyProvided = providedNames.get(ns);
<                   if (!previouslyProvided.isExplicitlyProvided()) {
<                     previouslyProvided.addProvide(parent, t.getModule(), true);
<                   } else {
<                     compiler.report(
<                         JSError.make(t, n, DUPLICATE_NAMESPACE_ERROR, ns));
<                   }
<                 } else {
<                   registerAnyProvidedPrefixes(ns, parent, t.getModule());
<                   providedNames.put(
<                       ns, new ProvidedName(ns, parent, t.getModule(), true));
<                 }
<               }
---
>               processProvideCall(t, n, parent);
248,265d203
<         
<         
<         if (t.inGlobalScope() &&
<             parent.getType() == Token.EXPR_RESULT) {
<           Node nameNode = n.getFirstChild();
<           String name = nameNode.getQualifiedName();
<           if (name != null) {
<             if (parent.getBooleanProp(Node.IS_NAMESPACE)) {
<               processProvideFromPreviousPass(t, name, parent);
<             } else {
<               ProvidedName pn = providedNames.get(name);
<               if (pn != null) {
<                 pn.addDefinition(parent);
<               }
<             }
<           }
<         }
<         break;
269,280c207
<         if (t.inGlobalScope() &&
<             parent.getType() == Token.VAR) {
<           String name = n.getString();
<           if (parent.getBooleanProp(Node.IS_NAMESPACE)) {
<             processProvideFromPreviousPass(t, name, parent);
<           } else {
<             ProvidedName pn = providedNames.get(name);
<             if (pn != null) {
<               pn.addDefinition(parent);
<             }
<           }
<         }
---
>         handleCandidateProvideDefinition(t, n, parent);
312a240,327
>   private void processRequireCall(NodeTraversal t, Node n, Node parent) {
>     Node left = n.getFirstChild();
>     Node arg = left.getNext();
>     if (verifyArgument(t, left, arg)) {
>       String ns = arg.getString();
>       ProvidedName provided = providedNames.get(ns);
>       if (provided == null || !provided.isExplicitlyProvided()) {
>         unrecognizedRequires.add(
>             new UnrecognizedRequire(n, ns, t.getSourceName()));
>       } else {
>         JSModule module = t.getModule();
>         if (module != provided.firstModule  &&
>             !compiler.getModuleGraph().dependsOn(module,
>                 provided.firstModule)) {
>           compiler.report(
>               JSError.make(t, n, XMODULE_REQUIRE_ERROR, ns,
>                   provided.firstModule.getName(),
>                   module.getName()));
>         }
>       }
> 
>       
>       
>       
>       
>       
>       
>       if (provided != null || requiresLevel.isOn()) {
>         parent.detachFromParent();
>         compiler.reportCodeChange();
>       }
>     }
>   }
> 
>   
> 
> 
>   private void processProvideCall(NodeTraversal t, Node n, Node parent) {
>     Node left = n.getFirstChild();
>     Node arg = left.getNext();
>     if (verifyProvide(t, left, arg)) {
>       String ns = arg.getString();
>       if (providedNames.containsKey(ns)) {
>         ProvidedName previouslyProvided = providedNames.get(ns);
>         if (!previouslyProvided.isExplicitlyProvided()) {
>           previouslyProvided.addProvide(parent, t.getModule(), true);
>         } else {
>           compiler.report(
>               JSError.make(t, n, DUPLICATE_NAMESPACE_ERROR, ns));
>         }
>       } else {
>         registerAnyProvidedPrefixes(ns, parent, t.getModule());
>         providedNames.put(
>             ns, new ProvidedName(ns, parent, t.getModule(), true));
>       }
>     }
>   }
> 
>   
> 
> 
>   private void handleCandidateProvideDefinition(
>       NodeTraversal t, Node n, Node parent) {
>     if (t.inGlobalScope()) {
>       String name = null;
>       if (n.getType() == Token.NAME && parent.getType() == Token.VAR) {
>         name = n.getString();
>       } else if (n.getType() == Token.ASSIGN &&
>           parent.getType() == Token.EXPR_RESULT) {
>         name = n.getFirstChild().getQualifiedName();
>       }
> 
>       if (name != null) {
>         if (parent.getBooleanProp(Node.IS_NAMESPACE)) {
>           processProvideFromPreviousPass(t, name, parent);
>         } else {
>           ProvidedName pn = providedNames.get(name);
>           if (pn != null) {
>             pn.addDefinition(parent, t.getModule());
>           }
>         }
>       }
>     }
>   }
> 
>   
> 
> 
464c479,480
<       registerAnyProvidedPrefixes(name, expr, t.getModule());
---
>       JSModule module = t.getModule();
>       registerAnyProvidedPrefixes(name, expr, module);
466c482
<       ProvidedName provided = new ProvidedName(name, expr, t.getModule(), true);
---
>       ProvidedName provided = new ProvidedName(name, expr, module, true);
468c484
<       provided.addDefinition(parent);
---
>       provided.addDefinition(parent, module);
656a673,679
>     private JSModule candidateModule = null;
> 
>     
>     private JSModule minimumModule = null;
> 
>     
>     private Node replacementNode = null;
674,675d696
<       
<       
680a702
>       updateMinimumModule(module);
693c715
<     void addDefinition(Node node) {
---
>     void addDefinition(Node node, JSModule module) {
699a722,734
>         candidateModule = module;
>         updateMinimumModule(module);
>       }
>     }
> 
>     private void updateMinimumModule(JSModule newModule) {
>       if (moduleGraph != null) {
>         if (minimumModule == null) {
>           minimumModule = newModule;
>         } else {
>           minimumModule = moduleGraph.getDeepestCommonDependencyInclusive(
>               minimumModule, newModule);
>         }
712a748
>         replacementNode = candidateDefinition;
722a759
>         replacementNode = candidateDefinition;
738a776
>             replacementNode = varNode;
743,751c781,783
<         Node declaration = createDeclarationNode();
< 
<         
<         
<         if (explicitNode != firstNode) {
<           firstNode.getParent().addChildBefore(declaration, firstNode);
<           if (explicitNode != null) {
<             explicitNode.detachFromParent();
<           }
---
>         replacementNode = createDeclarationNode();
>         if (firstModule == minimumModule) {
>           firstNode.getParent().addChildBefore(replacementNode, firstNode);
753,754c785,803
<           Preconditions.checkNotNull(explicitNode);
<           explicitNode.getParent().replaceChild(explicitNode, declaration);
---
>           
>           
>           int indexOfDot = namespace.indexOf('.');
>           if (indexOfDot == -1) {
>             
>             compiler.getNodeForCodeInsertion(minimumModule)
>                 .addChildToBack(replacementNode);
>           } else {
>             
>             ProvidedName parentName =
>                 providedNames.get(namespace.substring(0, indexOfDot));
>             Preconditions.checkNotNull(parentName);
>             Preconditions.checkNotNull(parentName.replacementNode);
>             parentName.replacementNode.getParent().addChildAfter(
>                 replacementNode, parentName.replacementNode);
>           }
>         }
>         if (explicitNode != null) {
>           explicitNode.detachFromParent();
