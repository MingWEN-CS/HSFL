1a2,124
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> package com.google.javascript.jscomp;
> 
> import com.google.common.collect.Lists;
> import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;
> import com.google.javascript.rhino.Node;
> import com.google.javascript.rhino.Token;
> 
> import java.util.List;
> 
> 
> 
> 
> 
> 
> 
> 
> final class ClosureOptimizePrimitives implements CompilerPass {
> 
>   
>   private final AbstractCompiler compiler;
> 
>   
> 
> 
>   private class FindObjectCreateCalls extends AbstractPostOrderCallback {
>     List<Node> callNodes = Lists.newArrayList();
> 
>     @Override
>     public void visit(NodeTraversal t, Node n, Node parent) {
>       if (n.getType() == Token.CALL) {
>         String fnName = n.getFirstChild().getQualifiedName();
>         if ("goog$object$create".equals(fnName) ||
>             "goog.object.create".equals(fnName)) {
>           callNodes.add(n);
>         }
>       }
>     }
>   }
> 
>   
> 
> 
>   ClosureOptimizePrimitives(AbstractCompiler compiler) {
>     this.compiler = compiler;
>   }
> 
>   @Override
>   public void process(Node externs, Node root) {
>     FindObjectCreateCalls pass = new FindObjectCreateCalls();
>     NodeTraversal.traverse(compiler, root, pass);
>     processObjectCreateCalls(pass.callNodes);
>   }
> 
>   
> 
> 
> 
>   private void processObjectCreateCalls(List<Node> callNodes) {
>     for (Node callNode : callNodes) {
>       Node curParam = callNode.getFirstChild().getNext();
>       if (canOptimizeObjectCreate(curParam)) {
>         Node objNode = new Node(Token.OBJECTLIT)
>             .copyInformationFrom(callNode);
>         while (curParam != null) {
>           Node keyNode = curParam;
>           Node valueNode = curParam.getNext();
>           curParam = valueNode.getNext();
> 
>           callNode.removeChild(keyNode);
>           callNode.removeChild(valueNode);
> 
>           if (keyNode.getType() != Token.STRING) {
>             keyNode = Node.newString(NodeUtil.getStringValue(keyNode))
>                 .copyInformationFrom(keyNode);
>           }
>           keyNode.setQuotedString();
>           keyNode.addChildToBack(valueNode);
>           objNode.addChildToBack(keyNode);
>         }
>         callNode.getParent().replaceChild(callNode, objNode);
>         compiler.reportCodeChange();
>       }
>     }
>   }
> 
>   
> 
> 
> 
>   private boolean canOptimizeObjectCreate(Node firstParam) {
>     Node curParam = firstParam;
>     while (curParam != null) {
>       
>       if (curParam.getType() != Token.STRING &&
>           curParam.getType() != Token.NUMBER) {
>         return false;
>       }
>       curParam = curParam.getNext();
> 
>       
>       if (curParam == null) {
>         return false;
>       }
>       curParam = curParam.getNext();
>     }
>     return true;
>   }
> }
