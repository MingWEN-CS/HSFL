137a138,140
>       case Token.BLOCK:
>         return tryReplaceIf(node);
> 
173a177,218
>   private Node tryReplaceIf(Node n) {
> 
>     for (Node child = n.getFirstChild();
>          child != null; child = child.getNext()){
>       if (child.getType() == Token.IF){
> 
>         Node cond = child.getFirstChild();
>         Node thenBranch = cond.getNext();
>         Node elseBranch = thenBranch.getNext();
>         Node nextNode = child.getNext();
> 
>         if (nextNode != null && elseBranch == null &&
>             isReturnBlock(thenBranch) && isReturnExpression(nextNode)) {
>           Node thenExpr = null;
>           
>           if (isReturnExpressBlock(thenBranch)) {
>             thenExpr = getBlockReturnExpression(thenBranch);
>             thenExpr.detachFromParent();
>           } else {
>             thenExpr = NodeUtil.newUndefinedNode(child);
>           }
> 
>           Node elseExpr = nextNode.getFirstChild();
> 
>           cond.detachFromParent();
>           elseExpr.detachFromParent();
> 
>           Node hookNode = new Node(Token.HOOK, cond, thenExpr, elseExpr)
>                               .copyInformationFrom(child);
>           Node returnNode = new Node(Token.RETURN, hookNode);
>           n.replaceChild(child, returnNode);
>           n.removeChild(nextNode);
>           reportCodeChange();
>         }
>       }
>     }
>     return n;
>   }
> 
>   
> 
> 
743a789,803
>   private boolean isReturnBlock(Node n) {
>     if (n.getType() == Token.BLOCK) {
>       if (n.hasOneChild()) {
>         Node first = n.getFirstChild();
>         return first.getType() == Token.RETURN;
>       }
>     }
> 
>     return false;
>   }
> 
>   
> 
> 
> 
753a814,823
>     return false;
>   }
> 
>   
> 
> 
>   private boolean isReturnExpression(Node n) {
>     if (n.getType() == Token.RETURN) {
>       return n.hasOneChild();
>     }
