42d41
< import com.google.common.collect.ImmutableSet;
48d46
< import java.util.Set;
71,79c69
<         ? null : referencedObjType.getPropertyMap();
<   }
< 
<   @Override
<   public Property getSlot(String name) {
<     if (referencedObjType != null) {
<       return referencedObjType.getSlot(name);
<     }
<     return null;
---
>         ? PropertyMap.immutableEmptyMap() : referencedObjType.getPropertyMap();
285,321d274
<   public boolean isPropertyTypeDeclared(String propertyName) {
<     return referencedObjType == null ? false :
<         referencedObjType.isPropertyTypeDeclared(propertyName);
<   }
< 
<   @Override
<   public Node getPropertyNode(String propertyName) {
<     return referencedObjType == null ? null :
<         referencedObjType.getPropertyNode(propertyName);
<   }
< 
<   @Override
<   public boolean isPropertyTypeInferred(String propertyName) {
<     return referencedObjType == null ? false :
<         referencedObjType.isPropertyTypeInferred(propertyName);
<   }
< 
<   @Override
<   public boolean isPropertyInExterns(String propertyName) {
<     return referencedObjType == null ? false :
<         referencedObjType.isPropertyInExterns(propertyName);
<   }
< 
<   @Override
<   public int getPropertiesCount() {
<     return referencedObjType == null ? 0 :
<         referencedObjType.getPropertiesCount();
<   }
< 
<   @Override
<   protected void collectPropertyNames(Set<String> props) {
<     if (referencedObjType != null) {
<       referencedObjType.collectPropertyNames(props);
<     }
<   }
< 
<   @Override
327,333d279
<   public JSType getPropertyType(String propertyName) {
<     return referencedObjType == null ?
<         getNativeType(JSTypeNative.UNKNOWN_TYPE) :
<         referencedObjType.getPropertyType(propertyName);
<   }
< 
<   @Override
346,351d291
<   public JSDocInfo getOwnPropertyJSDocInfo(String propertyName) {
<     return referencedObjType == null ? null :
<         referencedObjType.getOwnPropertyJSDocInfo(propertyName);
<   }
< 
<   @Override
356,373d295
<   }
< 
<   @Override
<   public boolean hasProperty(String propertyName) {
<     return referencedObjType == null ? false :
<         referencedObjType.hasProperty(propertyName);
<   }
< 
<   @Override
<   public boolean hasOwnProperty(String propertyName) {
<     return referencedObjType == null ? false :
<         referencedObjType.hasOwnProperty(propertyName);
<   }
< 
<   @Override
<   public Set<String> getOwnPropertyNames() {
<     return referencedObjType == null ? ImmutableSet.<String>of() :
<         referencedObjType.getOwnPropertyNames();
