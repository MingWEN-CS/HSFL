33a34
>   private final boolean late;
34a36,45
>   
> 
> 
> 
> 
> 
>   PeepholeReplaceKnownMethods(boolean late) {
>     this.late = late;
>   }
>   
94c105,107
<     if (firstArg == null) {
---
>     if (functionNameString.equals("split")) {
>       subtree = tryFoldStringSplit(subtree, stringNode, firstArg);
>     } else if (firstArg == null) {
645a659,776
>   }
> 
>   
> 
> 
> 
>   private int jsSplitMatch(String stringValue, int startIndex,
>       String separator) {
> 
>     if (startIndex + separator.length() > stringValue.length()) {
>       return -1;
>     }
>     
>     int matchIndex = stringValue.indexOf(separator, startIndex);
>     
>     if (matchIndex < 0) {
>       return -1;
>     }
>     
>     return matchIndex + separator.length();
>   }
>   
>   
> 
> 
>   private String[] jsSplit(String stringValue, String separator, int limit) {
>     Preconditions.checkArgument(limit >= 0);
> 
>     
>     if (limit == 0) {
>       return new String[0];
>     }
>     
>     
> 
> 
>     if (separator == null) {
>       return new String[] {stringValue};
>     }
>     
>     List<String> splitStrings = Lists.newArrayList();
>     
>     
> 
> 
>     if (separator.length() == 0) {
>       for (int i = 0; i < stringValue.length() && i < limit; i++) {
>         splitStrings.add(stringValue.substring(i, i + 1));
>       }      
>     } else {    
>       int startIndex = 0, matchEndIndex;
>       while ((matchEndIndex =
>           jsSplitMatch(stringValue, startIndex, separator)) >= 0 &&
>           splitStrings.size() < limit) {
>         if (separator.length() == 0) {
>           matchEndIndex++;
>         }
>         splitStrings.add(stringValue.substring(startIndex,
>             matchEndIndex - separator.length()));
>         startIndex = matchEndIndex;
>       }
>       if (startIndex < stringValue.length() && splitStrings.size() < limit) {
>         splitStrings.add(stringValue.substring(startIndex));
>       }
>     }
>     
>     return splitStrings.toArray(new String[splitStrings.size()]);
>   }
>   
>   
> 
> 
>   private Node tryFoldStringSplit(Node n, Node stringNode, Node arg1) {
>     if (late) {
>       return n;
>     }
>     
>     Preconditions.checkArgument(n.isCall());
>     Preconditions.checkArgument(stringNode.isString());
> 
>     String separator = null;
>     String stringValue = stringNode.getString();
>     
>     
>     int limit = stringValue.length() + 1;
> 
>     if (arg1 != null) {
>       if (arg1.isString()) {
>         separator = arg1.getString();
>       } else if (!arg1.isNull()) {
>         return n;
>       }
>       
>       Node arg2 = arg1.getNext();
>       if (arg2 != null) {
>         if (arg2.isNumber()) {
>           limit = Math.min((int) arg2.getDouble(), limit);
>           if (limit < 0) {
>             return n;
>           }
>         } else {
>           return n;
>         }
>       }
>     }
>     
>     
>     String[] stringArray = jsSplit(stringValue, separator, limit);    
>     Node arrayOfStrings = IR.arraylit();
>     for (int i = 0; i < stringArray.length; i++) {
>       arrayOfStrings.addChildToBack(
>           IR.string(stringArray[i]).srcref(stringNode));
>     }
> 
>     Node parent = n.getParent();
>     parent.replaceChild(n, arrayOfStrings);
>     reportCodeChange();
>     return arrayOfStrings;
