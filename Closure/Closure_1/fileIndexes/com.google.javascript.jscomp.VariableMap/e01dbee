















package com.google.javascript.jscomp;

import com.google.common.base.Charsets;
import com.google.common.collect.Maps;
import com.google.common.io.ByteStreams;
import com.google.common.io.CharStreams;
import com.google.common.io.Files;

import java.io.*;
import java.text.*;
import java.util.*;





public class VariableMap {

  
  private final Map<String, String> map;

  
  private Map<String, String> reverseMap = null;

  private static final char SEPARATOR = ':';

  VariableMap(Map<String, String> map) {
    this.map = Collections.unmodifiableMap(map);
  }

  



  public String lookupNewName(String sourceName) {
    return map.get(sourceName);
  }

  



  public String lookupSourceName(String newName) {
    if (reverseMap == null) {
      initReverseMap();
    }
    return reverseMap.get(newName);
  }

  


  private synchronized void initReverseMap() {
    if (reverseMap == null) {
      Map<String, String> rm = new HashMap<String, String>();
      for (Map.Entry<String, String> entry : map.entrySet()) {
        rm.put(entry.getValue(), entry.getKey());
      }
      reverseMap = Collections.unmodifiableMap(rm);
    }
  }

  


  public Map<String, String> getOriginalNameToNewNameMap() {
    return map;
  }

  


  public Map<String, String> getNewNameToOriginalNameMap() {
    if (reverseMap == null) {
      initReverseMap();
    }
    return reverseMap;
  }

  


  public void save(String filename) throws IOException {
    Files.write(toBytes(), new File(filename));
  }

  


  public static VariableMap load(String filename) throws IOException {
    try {
      return fromBytes(Files.toByteArray(new File(filename)));
    } catch (ParseException e) {
      
      throw new IOException(e);
    }
  }

  


  public byte[] toBytes() {
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    Writer writer = new OutputStreamWriter(baos, Charsets.UTF_8);
    try {
      for (Map.Entry<String, String> entry : map.entrySet()) {
        writer.write(entry.getKey());
        writer.write(SEPARATOR);
        writer.write(entry.getValue());
        writer.write('\n');
      }
      writer.close();
    } catch (IOException e) {
      
      
      throw new RuntimeException(e);
    }
    return baos.toByteArray();
  }

  



  public static VariableMap fromBytes(byte[] bytes) throws ParseException {
    Iterable<String> lines;
    try {
      lines = CharStreams.readLines(CharStreams.newReaderSupplier(
          ByteStreams.newInputStreamSupplier(bytes), Charsets.UTF_8));
    } catch (IOException e) {
      
      
      throw new RuntimeException(e);
    }

    Map<String, String> map = new HashMap<String, String>();

    for (String line : lines) {
      int pos = line.lastIndexOf(SEPARATOR);
      if (pos <= 0 || pos == line.length() - 1) {
        throw new ParseException("Bad line: " + line, 0);
      }
      map.put(line.substring(0, pos), line.substring(pos + 1));
    }
    return new VariableMap(map);
  }

  





  public static VariableMap fromMap(Map<String, String> map) {
    return new VariableMap(Maps.newHashMap(map));
  }
}
