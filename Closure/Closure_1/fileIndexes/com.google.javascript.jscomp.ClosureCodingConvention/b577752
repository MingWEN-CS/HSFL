















package com.google.javascript.jscomp;

import com.google.common.base.Preconditions;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.Token;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.ObjectType;

import java.util.List;
import java.util.Set;








public class ClosureCodingConvention extends DefaultCodingConvention {

  private static final String TYPEDEF_NAME = "goog.typedef";

  static final DiagnosticType OBJECTLIT_EXPECTED = DiagnosticType.warning(
      "JSC_REFLECT_OBJECTLIT_EXPECTED",
      "Object literal expected as second argument");

  



  @Override
  public void applySubclassRelationship(FunctionType parentCtor,
      FunctionType childCtor, SubclassType type) {
    if (type == SubclassType.INHERITS) {
      childCtor.defineDeclaredProperty("superClass_",
          parentCtor.getPrototype(), false);
      childCtor.getPrototype().defineDeclaredProperty("constructor",
          childCtor, false);
    }
  }

  





  @Override
  public SubclassRelationship getClassesDefinedByCall(Node callNode) {
    Node callName = callNode.getFirstChild();
    SubclassType type = typeofClassDefiningName(callName);
    if (type != null) {
      Node subclass = null;
      Node superclass = callNode.getLastChild();

      
      
      
      
      
      
      
      if (callNode.getChildCount() == 2 &&
          callName.getType() == Token.GETPROP) {
        
        subclass = callName.getFirstChild();
      } else if (callNode.getChildCount() == 3) {
        
        subclass = callName.getNext();
      }

      
      
      
      
      if (subclass != null &&
          subclass.isUnscopedQualifiedName() &&
          superclass.isUnscopedQualifiedName()) {
        
        
        return new SubclassRelationship(
            type,
            stripPrototype(subclass),
            stripPrototype(superclass));
      }
    }

    return null;
  }

  




  private SubclassType typeofClassDefiningName(Node callName) {
    
    String methodName = null;
    if (callName.getType() == Token.GETPROP) {
      methodName = callName.getLastChild().getString();
    } else if (callName.getType() == Token.NAME) {
      String name = callName.getString();
      int dollarIndex = name.lastIndexOf('$');
      if (dollarIndex != -1) {
        methodName = name.substring(dollarIndex + 1);
      }
    }

    if (methodName != null) {
      if (methodName.equals("inherits")) {
        return SubclassType.INHERITS;
      } else if (methodName.equals("mixin")) {
        return SubclassType.MIXIN;
      }
    }
    return null;
  }

  @Override
  public boolean isSuperClassReference(String propertyName) {
    return "superClass_".equals(propertyName);
  }

  






  private Node stripPrototype(Node qualifiedName) {
    if (qualifiedName.getType() == Token.GETPROP &&
        qualifiedName.getLastChild().getString().equals("prototype")) {
      return qualifiedName.getFirstChild();
    }

    return qualifiedName;
  }

  




  @Override
  public String extractClassNameIfProvide(Node node, Node parent){
    return extractClassNameIfGoog(node, parent, "goog.provide");
  }

  




  @Override
  public String extractClassNameIfRequire(Node node, Node parent){
    return extractClassNameIfGoog(node, parent, "goog.require");
  }

  private static String extractClassNameIfGoog(Node node, Node parent,
      String functionName){
    String className = null;
    if (NodeUtil.isExprCall(parent)) {
      Node callee = node.getFirstChild();
      if (callee != null && callee.getType() == Token.GETPROP) {
        String qualifiedName = callee.getQualifiedName();
        if ((functionName).equals(qualifiedName)) {
          className = callee.getNext().getString();
        }
      }
    }
    return className;
  }

  



  @Override
  public String getExportPropertyFunction() {
    return "goog.exportProperty";
  }

  



  @Override
  public String getExportSymbolFunction() {
    return "goog.exportSymbol";
  }

  @Override
  public List<String> identifyTypeDeclarationCall(Node n) {
    Node callName = n.getFirstChild();
    if ("goog.addDependency".equals(callName.getQualifiedName()) &&
        n.getChildCount() >= 3) {
      Node typeArray = callName.getNext().getNext();
      if (typeArray.getType() == Token.ARRAYLIT) {
        List<String> typeNames = Lists.newArrayList();
        for (Node name = typeArray.getFirstChild(); name != null;
             name = name.getNext()) {
          if (name.getType() == Token.STRING) {
            typeNames.add(name.getString());
          }
        }
        return typeNames;
      }
    }
    return null;
  }

  @Override
  public String identifyTypeDefAssign(Node n) {
    Node firstChild = n.getFirstChild();
    int type = n.getType();
    if (type == Token.ASSIGN) {
      if (TYPEDEF_NAME.equals(n.getLastChild().getQualifiedName())) {
        return firstChild.getQualifiedName();
      }
    } else if (type == Token.VAR && firstChild.hasChildren()) {
      if (TYPEDEF_NAME.equals(
              firstChild.getFirstChild().getQualifiedName())) {
        return firstChild.getString();
      }
    }

    return null;
  }

  @Override
  public String getAbstractMethodName() {
    return "goog.abstractMethod";
  }

  @Override
  public String getSingletonGetterClassName(Node callNode) {
    Node callName = callNode.getFirstChild();
    if (!"goog.addSingletonGetter".equals(callName.getQualifiedName()) ||
        callName.getChildCount() != 2) {
      return null;
    }

    Node classNode = callName.getNext();
    if (!classNode.isQualifiedName()) {
      return null;
    }

    return callName.getNext().getQualifiedName();
  }

  @Override
  public void applySingletonGetter(FunctionType functionType,
      FunctionType getterType, ObjectType objectType) {
    functionType.defineDeclaredProperty("getInstance", getterType, false);
    functionType.defineDeclaredProperty("instance_", objectType, false);
  }

  @Override
  public String getGlobalObject() {
    return "goog.global";
  }

  private final Set<String> propertyTestFunctions = ImmutableSet.of(
      "goog.isDef", "goog.isNull", "goog.isDefAndNotNull",
      "goog.isString", "goog.isNumber", "goog.isBoolean",
      "goog.isFunction", "goog.isArray", "goog.isObject");

  @Override
  public boolean isPropertyTestFunction(Node call) {
    Preconditions.checkArgument(call.getType() == Token.CALL);
    return propertyTestFunctions.contains(
        call.getFirstChild().getQualifiedName());
  }

  @Override
  public ObjectLiteralCast getObjectLiteralCast(NodeTraversal t,
      Node callNode) {
    Preconditions.checkArgument(callNode.getType() == Token.CALL);
    Node callName = callNode.getFirstChild();
    if (!"goog.reflect.object".equals(callName.getQualifiedName()) ||
        callName.getChildCount() != 2) {
      return null;
    }

    Node typeNode = callName.getNext();
    if (!typeNode.isQualifiedName()) {
      return null;
    }

    Node objectNode = typeNode.getNext();
    if (objectNode.getType() != Token.OBJECTLIT) {
      t.getCompiler().report(JSError.make(t.getSourceName(), callNode,
                                          OBJECTLIT_EXPECTED));
      return null;
    }

    return new ObjectLiteralCast(typeNode.getQualifiedName(),
                                 typeNode.getNext());
  }

  


  @Override
  public boolean isOptionalParameter(Node parameter) {
    return false;
  }

  


  @Override
  public boolean isVarArgsParameter(Node parameter) {
    return false;
  }

  


  @Override
  public boolean isPrivate(String name) {
    return false;
  }
}
