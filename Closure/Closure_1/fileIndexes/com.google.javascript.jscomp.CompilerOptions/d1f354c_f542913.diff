515a516,521
>   private TweakProcessing tweakProcessing;
> 
>   
>   private Map<String, Object> tweakReplacements;
> 
>   
735a742,743
>     tweakProcessing = TweakProcessing.OFF;
>     tweakReplacements = Maps.newHashMap();
766a775,789
>     return getReplacementsHelper(defineReplacements);
>   }
> 
>   
> 
> 
>   public Map<String, Node> getTweakReplacements() {
>     return getReplacementsHelper(tweakReplacements);
>   }
> 
>   
> 
> 
>   private static Map<String, Node> getReplacementsHelper(
>       Map<String, Object> source) {
768c791
<     for (Map.Entry<String, Object> entry : defineReplacements.entrySet()) {
---
>     for (Map.Entry<String, Object> entry : source.entrySet()) {
820a844,875
> 
>   public void setTweakToBooleanLiteral(String tweakId, boolean value) {
>     tweakReplacements.put(tweakId, new Boolean(value));
>   }
> 
>   
> 
> 
> 
>   public void setTweakToStringLiteral(String tweakId, String value) {
>     tweakReplacements.put(tweakId, value);
>   }
> 
>   
> 
> 
> 
>   public void setTweakToNumberLiteral(String tweakId, int value) {
>     tweakReplacements.put(tweakId, new Integer(value));
>   }
> 
>   
> 
> 
> 
>   public void setTweakToDoubleLiteral(String tweakId, double value) {
>     tweakReplacements.put(tweakId, new Double(value));
>   }
> 
>   
> 
> 
1015a1071,1081
>   public void setTweakProcessing(TweakProcessing tweakProcessing) {
>     this.tweakProcessing = tweakProcessing;
>   }
> 
>   public TweakProcessing getTweakProcessing() {
>     return tweakProcessing;
>   }
> 
>   
> 
> 
1076a1143,1156
>     }
>   }
> 
>   public static enum TweakProcessing {
>     OFF,  
>     CHECK, 
>     STRIP;  
> 
>     public boolean isOn() {
>       return this != OFF;
>     }
> 
>     public boolean shouldStrip() {
>       return this == STRIP;
