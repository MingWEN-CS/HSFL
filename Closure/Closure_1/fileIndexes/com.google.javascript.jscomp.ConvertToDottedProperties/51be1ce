















package com.google.javascript.jscomp;

import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.Token;







class ConvertToDottedProperties extends AbstractPostOrderCallback
    implements CompilerPass {

  private final AbstractCompiler compiler;

  ConvertToDottedProperties(AbstractCompiler compiler) {
    this.compiler = compiler;
  }

  @Override
  public void process(Node externs, Node root) {
    NodeTraversal.traverse(compiler, root, this);
  }

  @Override
  public void visit(NodeTraversal t, Node n, Node parent) {
    switch (n.getType()) {
      case Token.GET:
      case Token.SET:
      case Token.STRING:
        if (NodeUtil.isObjectLitKey(n, parent)) {
          n.putBooleanProp(Node.QUOTED_PROP, false);
        }
        break;

      case Token.GETELEM:
        Node left = n.getFirstChild();
        Node right = left.getNext();
        if (right.getType() == Token.STRING &&
            NodeUtil.isValidPropertyName(right.getString())) {
          n.removeChild(left);
          n.removeChild(right);
          parent.replaceChild(n, new Node(Token.GETPROP, left, right));
          compiler.reportCodeChange();
        }
        break;
    }
  }
}
