1,16c1,108
< <!DOCTYPE HTML PUBLIC "-
< <!--NewPage-->
< <HTML>
< <HEAD>
< <TITLE>
< SortedDependencies (Compiler)
< </TITLE>
< 
< 
< <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../../dev_javadoc.css" TITLE="Style">
< 
< <SCRIPT type="text/javascript">
< function windowTitle()
< {
<     if (location.href.indexOf('is-external=true') == -1) {
<         parent.document.title="SortedDependencies (Compiler)";
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> package com.google.javascript.jscomp.deps;
> 
> import com.google.common.base.Joiner;
> import com.google.common.base.Preconditions;
> import com.google.common.collect.ArrayListMultimap;
> import com.google.common.collect.HashMultimap;
> import com.google.common.collect.HashMultiset;
> import com.google.common.collect.ImmutableList;
> import com.google.common.collect.Lists;
> import com.google.common.collect.Maps;
> import com.google.common.collect.Multimap;
> import com.google.common.collect.Multimaps;
> import com.google.common.collect.Multiset;
> import com.google.common.collect.Sets;
> 
> import java.util.ArrayDeque;
> import java.util.Collection;
> import java.util.Collections;
> import java.util.Comparator;
> import java.util.Deque;
> import java.util.List;
> import java.util.Map;
> import java.util.PriorityQueue;
> import java.util.Set;
> import java.util.SortedSet;
> import java.util.TreeSet;
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> public class SortedDependencies<INPUT extends DependencyInfo> {
> 
>   private final List<INPUT> inputs;
> 
>   
>   private final List<INPUT> sortedList;
> 
>   
>   private final List<INPUT> noProvides;
> 
>   private final Map<String, INPUT> provideMap = Maps.newHashMap();
> 
>   public SortedDependencies(List<INPUT> inputs)
>       throws CircularDependencyException {
>     this.inputs = Lists.newArrayList(inputs);
>     noProvides = Lists.newArrayList();
> 
>     
>     for (INPUT input : inputs) {
>       Collection<String> currentProvides = input.getProvides();
>       if (currentProvides.isEmpty()) {
>         noProvides.add(input);
>       }
> 
>       for (String provide : currentProvides) {
>         provideMap.put(provide, input);
>       }
>     }
> 
>     
>     final Multimap<INPUT, INPUT> deps = HashMultimap.create();
>     for (INPUT input : inputs) {
>       for (String req : input.getRequires()) {
>         INPUT dep = provideMap.get(req);
>         if (dep != null) {
>           deps.put(input, dep);
>         }
>       }
>     }
> 
>     
>     sortedList = topologicalStableSort(inputs, deps);
> 
>     
>     
>     
>     
>     
>     
>     if (sortedList.size() < inputs.size()) {
>       List<INPUT> subGraph = Lists.newArrayList(inputs);
>       subGraph.removeAll(sortedList);
> 
>       throw new CircularDependencyException(
>           cycleToString(findCycle(subGraph, deps)));
18,63d109
< }
< </SCRIPT>
< <NOSCRIPT>
< </NOSCRIPT>
< 
< </HEAD>
< 
< <BODY BGCOLOR="white" onload="windowTitle();">
< <HR>
< 
< 
< <!-- ========= START OF TOP NAVBAR ======= -->
< <A NAME="navbar_top"><!-- --></A>
< <A HREF="#skip-navbar_top" title="Skip navigation links"></A>
< <TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
< <TR>
< <TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
< <A NAME="navbar_top_firstrow"><!-- --></A>
< <TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
<   <TR ALIGN="center" VALIGN="top">
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
<   </TR>
< </TABLE>
< </TD>
< <TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
< </EM>
< </TD>
< </TR>
< 
< <TR>
< <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
< &nbsp;<A HREF="../../../../../com/google/javascript/jscomp/deps/SimpleDependencyInfo.html" title="class in com.google.javascript.jscomp.deps"><B>PREV CLASS</B></A>&nbsp;
< &nbsp;NEXT CLASS</FONT></TD>
< <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
<   <A HREF="../../../../../index.html?com/google/javascript/jscomp/deps/SortedDependencies.html" target="_top"><B>FRAMES</B></A>  &nbsp;
< &nbsp;<A HREF="SortedDependencies.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
< &nbsp;<SCRIPT type="text/javascript">
<   <!--
<   if(window==top) {
<     document.writeln('<A HREF="../../../../../allclasses-noframe.html"><B>All Classes</B></A>');
64a111
> 
66,276c113,120
< </SCRIPT>
< <NOSCRIPT>
<   <A HREF="../../../../../allclasses-noframe.html"><B>All Classes</B></A>
< </NOSCRIPT>
< 
< 
< </FONT></TD>
< </TR>
< <TR>
< <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
<   SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
< <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
< DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
< </TR>
< </TABLE>
< <A NAME="skip-navbar_top"></A>
< <!-- ========= END OF TOP NAVBAR ========= -->
< 
< <HR>
< <!-- ======== START OF CLASS DATA ======== -->
< <H2>
< <FONT SIZE="-1">
< com.google.javascript.jscomp.deps</FONT>
< <BR>
< Class SortedDependencies&lt;INPUT extends <A HREF="../../../../../com/google/javascript/jscomp/deps/DependencyInfo.html" title="interface in com.google.javascript.jscomp.deps">DependencyInfo</A>&gt;</H2>
< <PRE>
< <A HREF="http:
<   <IMG SRC="../../../../../resources/inherit.gif" ALT="extended by "><B>com.google.javascript.jscomp.deps.SortedDependencies&lt;INPUT&gt;</B>
< </PRE>
< <HR>
< <DL>
< <DT><PRE>public class <B>SortedDependencies&lt;INPUT extends <A HREF="../../../../../com/google/javascript/jscomp/deps/DependencyInfo.html" title="interface in com.google.javascript.jscomp.deps">DependencyInfo</A>&gt;</B><DT>extends <A HREF="http:
< </PRE>
< 
< <P>
< A sorted list of inputs with dependency information. Uses a stable
<  topological sort to make sure that an input always comes after its
<  dependencies.
< 
<  Also exposes other information about the inputs, like which inputs
<  do not provide symbols.
< <P>
< 
< <P>
< <HR>
< 
< <P>
< 
< <!-- ======== CONSTRUCTOR SUMMARY ======== -->
< 
< <A NAME="constructor_summary"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
< <B>Constructor Summary</B></FONT></TH>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/jscomp/deps/SortedDependencies.html#SortedDependencies(java.util.List)">SortedDependencies</A></B>(<A HREF="http:
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< </TABLE>
< &nbsp;
< <!-- ========== METHOD SUMMARY =========== -->
< 
< <A NAME="method_summary"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
< <B>Method Summary</B></FONT></TH>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/jscomp/deps/SortedDependencies.html#getInputsWithoutProvides()">getInputsWithoutProvides</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/jscomp/deps/SortedDependencies.html#getSortedDependenciesOf(java.util.List)">getSortedDependenciesOf</A></B>(<A HREF="http:
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets all the dependencies of the given roots.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/jscomp/deps/SortedDependencies.html#getSortedList()">getSortedList</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< </TABLE>
< &nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
< <TH ALIGN="left"><B>Methods inherited from class java.lang.<A HREF="http:
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD><CODE><A HREF="http:
< </TR>
< </TABLE>
< &nbsp;
< <P>
< 
< <!-- ========= CONSTRUCTOR DETAIL ======== -->
< 
< <A NAME="constructor_detail"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
< <B>Constructor Detail</B></FONT></TH>
< </TR>
< </TABLE>
< 
< <A NAME="SortedDependencies(java.util.List)"><!-- --></A><H3>
< SortedDependencies</H3>
< <PRE>
< public <B>SortedDependencies</B>(<A HREF="http:
< <DL>
< </DL>
< 
< <!-- ============ METHOD DETAIL ========== -->
< 
< <A NAME="method_detail"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
< <B>Method Detail</B></FONT></TH>
< </TR>
< </TABLE>
< 
< <A NAME="getSortedList()"><!-- --></A><H3>
< getSortedList</H3>
< <PRE>
< public <A HREF="http:
< <DL>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getSortedDependenciesOf(java.util.List)"><!-- --></A><H3>
< getSortedDependenciesOf</H3>
< <PRE>
< public <A HREF="http:
< <DL>
< <DD>Gets all the dependencies of the given roots. The inputs must be returned
<  in a stable order. In other words, if A comes before B, and A does not
<  transitively depend on B, then A must also come before B in the returned
<  list.
< <P>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getInputsWithoutProvides()"><!-- --></A><H3>
< getInputsWithoutProvides</H3>
< <PRE>
< public <A HREF="http:
< <DL>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <!-- ========= END OF CLASS DATA ========= -->
< <HR>
< 
< 
< <!-- ======= START OF BOTTOM NAVBAR ====== -->
< <A NAME="navbar_bottom"><!-- --></A>
< <A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
< <TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
< <TR>
< <TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
< <A NAME="navbar_bottom_firstrow"><!-- --></A>
< <TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
<   <TR ALIGN="center" VALIGN="top">
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
<   </TR>
< </TABLE>
< </TD>
< <TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
< </EM>
< </TD>
< </TR>
< 
< <TR>
< <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
< &nbsp;<A HREF="../../../../../com/google/javascript/jscomp/deps/SimpleDependencyInfo.html" title="class in com.google.javascript.jscomp.deps"><B>PREV CLASS</B></A>&nbsp;
< &nbsp;NEXT CLASS</FONT></TD>
< <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
<   <A HREF="../../../../../index.html?com/google/javascript/jscomp/deps/SortedDependencies.html" target="_top"><B>FRAMES</B></A>  &nbsp;
< &nbsp;<A HREF="SortedDependencies.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
< &nbsp;<SCRIPT type="text/javascript">
<   <!--
<   if(window==top) {
<     document.writeln('<A HREF="../../../../../allclasses-noframe.html"><B>All Classes</B></A>');
---
> 
> 
> 
> 
>   private List<INPUT> findCycle(
>       List<INPUT> subGraph, Multimap<INPUT, INPUT> deps) {
>     return findCycle(subGraph.get(0), Sets.<INPUT>newHashSet(subGraph),
>         deps, Sets.<INPUT>newHashSet());
278,312c122,138
<   
< </SCRIPT>
< <NOSCRIPT>
<   <A HREF="../../../../../allclasses-noframe.html"><B>All Classes</B></A>
< </NOSCRIPT>
< 
< 
< </FONT></TD>
< </TR>
< <TR>
< <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
<   SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
< <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
< DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
< </TR>
< </TABLE>
< <A NAME="skip-navbar_bottom"></A>
< <!-- ======== END OF BOTTOM NAVBAR ======= -->
< 
< <HR>
< 
<         <div id="footer">
<           <div id="footerlogo">
<             <img src="http:
<                  alt="Google colored balls">
<           </div>
< 
<           <div id="copyright">
<           <p>&copy; 2009 Google -
<             <a href="http:
<             <a href="http:
<             <a href="http:
<           </p>
<           </div>
<         </div>
---
> 
>   private List<INPUT> findCycle(
>       INPUT current, Set<INPUT> subGraph, Multimap<INPUT, INPUT> deps,
>       Set<INPUT> covered) {
>     if (covered.add(current)) {
>       List<INPUT> cycle = findCycle(
>           findRequireInSubGraphOrFail(current, subGraph),
>           subGraph, deps, covered);
> 
>       
>       if (cycle.get(0) != cycle.get(cycle.size() - 1)) {
>         cycle.add(current);
>       }
> 
>       return cycle;
>     } else {
>       
315,316c141,258
< </BODY>
< </HTML>
---
>       List<INPUT> cycle = Lists.<INPUT>newArrayList();
>       cycle.add(current);
>       return cycle;
>     }
>   }
> 
>   private INPUT findRequireInSubGraphOrFail(INPUT input, Set<INPUT> subGraph) {
>     for (String symbol : input.getRequires()) {
>       INPUT candidate = provideMap.get(symbol);
>       if (subGraph.contains(candidate)) {
>         return candidate;
>       }
>     }
>     throw new IllegalStateException("no require found in subgraph");
>   }
> 
>   
> 
> 
>   private String cycleToString(List<INPUT> cycle) {
>     List<String> symbols = Lists.newArrayList();
>     for (int i = cycle.size() - 1; i >= 0; i--) {
>       symbols.add(cycle.get(i).getProvides().iterator().next());
>     }
>     symbols.add(symbols.get(0));
>     return Joiner.on(" -> ").join(symbols);
>   }
> 
>   public List<INPUT> getSortedList() {
>     return Collections.<INPUT>unmodifiableList(sortedList);
>   }
> 
>   
> 
> 
> 
> 
> 
>   public List<INPUT> getSortedDependenciesOf(List<INPUT> roots) {
>     Preconditions.checkArgument(inputs.containsAll(roots));
>     Set<INPUT> included = Sets.newHashSet();
>     Deque<INPUT> worklist = new ArrayDeque<INPUT>(roots);
>     while (!worklist.isEmpty()) {
>       INPUT current = worklist.pop();
>       if (included.add(current)) {
>         for (String req : current.getRequires()) {
>           INPUT dep = provideMap.get(req);
>           if (dep != null) {
>             worklist.add(dep);
>           }
>         }
>       }
>     }
> 
>     ImmutableList.Builder<INPUT> builder = ImmutableList.builder();
>     for (INPUT current : sortedList) {
>       if (included.contains(current)) {
>         builder.add(current);
>       }
>     }
>     return builder.build();
>   }
> 
>   public List<INPUT> getInputsWithoutProvides() {
>     return Collections.<INPUT>unmodifiableList(noProvides);
>   }
> 
>   private static <T> List<T> topologicalStableSort(
>       List<T> items, Multimap<T, T> deps) {
>     final Map<T, Integer> originalIndex = Maps.newHashMap();
>     for (int i = 0; i < items.size(); i++) {
>       originalIndex.put(items.get(i), i);
>     }
> 
>     PriorityQueue<T> inDegreeZero = new PriorityQueue<T>(items.size(),
>         new Comparator<T>() {
>       @Override
>       public int compare(T a, T b) {
>         return originalIndex.get(a).intValue() -
>             originalIndex.get(b).intValue();
>       }
>     });
>     List<T> result = Lists.newArrayList();
> 
>     Multiset<T> inDegree = HashMultiset.create();
>     Multimap<T, T> reverseDeps = ArrayListMultimap.create();
>     Multimaps.invertFrom(deps, reverseDeps);
> 
>     
>     for (T item : items) {
>       Collection<T> itemDeps = deps.get(item);
>       inDegree.add(item, itemDeps.size());
>       if (itemDeps.isEmpty()) {
>         inDegreeZero.add(item);
>       }
>     }
> 
>     
>     while (!inDegreeZero.isEmpty()) {
>       T item = inDegreeZero.remove();
>       result.add(item);
>       for (T inWaiting : reverseDeps.get(item)) {
>         inDegree.remove(inWaiting, 1);
>         if (inDegree.count(inWaiting) == 0) {
>           inDegreeZero.add(inWaiting);
>         }
>       }
>     }
> 
>     return result;
>   }
> 
>   public static class CircularDependencyException extends Exception {
>     CircularDependencyException(String message) {
>       super(message);
>     }
>   }
> }
