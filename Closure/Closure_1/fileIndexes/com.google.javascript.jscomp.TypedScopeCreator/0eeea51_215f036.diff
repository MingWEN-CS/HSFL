1085a1086,1090
>       
>       boolean isExtern = n.isFromExterns();
>       Var newVar = null;
> 
>       
1089c1094
<         validator.expectUndeclaredVariable(
---
>         newVar = validator.expectUndeclaredVariable(
1096,1099c1101,1102
<         
<         boolean isExtern = n.isFromExterns();
<         Var newVar =
<             scopeToDeclareIn.declare(variableName, n, type, input, inferred);
---
>         newVar =
>           scopeToDeclareIn.declare(variableName, n, type, input, inferred);
1109a1113
>       }
1111,1128c1115,1147
<         
<         FunctionType fnType = JSType.toMaybeFunctionType(type);
<         if (fnType != null &&
<             
<             !type.isEmptyType()) {
<           if ((fnType.isConstructor() || fnType.isInterface()) &&
<               !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {
<             
<             FunctionType superClassCtor = fnType.getSuperClassConstructor();
<             ObjectType.Property prototypeSlot = fnType.getSlot("prototype");
< 
<             String prototypeName = variableName + ".prototype";
< 
<             
<             
<             
<             if (scopeToDeclareIn.getOwnSlot(prototypeName) == null) {
<               
---
>       
>       FunctionType fnType = JSType.toMaybeFunctionType(type);
>       if (fnType != null &&
>           
>           !type.isEmptyType()) {
>         if ((fnType.isConstructor() || fnType.isInterface()) &&
>             !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {
>           
>           FunctionType superClassCtor = fnType.getSuperClassConstructor();
>           ObjectType.Property prototypeSlot = fnType.getSlot("prototype");
> 
>           
>           
>           
>           
>           
>           
>           
>           
>           prototypeSlot.setNode(n);
> 
>           String prototypeName = variableName + ".prototype";
> 
>           
>           
>           
>           Var prototypeVar = scopeToDeclareIn.getVar(prototypeName);
>           if (prototypeVar != null && prototypeVar.scope == scopeToDeclareIn) {
>             scopeToDeclareIn.undeclare(prototypeVar);
>           }
> 
>           scopeToDeclareIn.declare(prototypeName,
>               n, prototypeSlot.getType(), input,
1129a1149,1156
>               superClassCtor == null ||
>               superClassCtor.getInstanceType().equals(
>                   getNativeType(OBJECT_TYPE)));
> 
>           
>           
>           if (newVar.getInitialValue() == null &&
>               !isExtern &&
1136,1163c1163,1169
<               prototypeSlot.setNode(n);
< 
<               scopeToDeclareIn.declare(prototypeName,
<                   n, prototypeSlot.getType(), input,
<                   
<                   superClassCtor == null ||
<                   superClassCtor.getInstanceType().equals(
<                       getNativeType(OBJECT_TYPE)));
<             }
< 
<             
<             
<             if (newVar.getInitialValue() == null &&
<                 !isExtern &&
<                 
<                 
<                 
<                 
<                 
<                 
<                 variableName.equals(
<                     fnType.getInstanceType().getReferenceName())) {
<               compiler.report(
<                   JSError.make(sourceName, n,
<                       fnType.isConstructor() ?
<                           CTOR_INITIALIZER : IFACE_INITIALIZER,
<                       variableName));
<             }
---
>               variableName.equals(
>                   fnType.getInstanceType().getReferenceName())) {
>             compiler.report(
>                 JSError.make(sourceName, n,
>                     fnType.isConstructor() ?
>                     CTOR_INITIALIZER : IFACE_INITIALIZER,
>                     variableName));
