1a2,897
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> package com.google.javascript.jscomp;
> 
> import com.google.common.base.Preconditions;
> import com.google.common.base.StringUtil;
> import com.google.javascript.rhino.Node;
> import com.google.javascript.rhino.Token;
> import com.google.javascript.rhino.TokenStream;
> 
> 
> 
> 
> 
> 
> 
> 
> 
> class CodeGenerator {
> 
>   private final CodeConsumer cc;
> 
>   CodeGenerator(CodeConsumer consumer) {
>     cc = consumer;
>   }
> 
>   void add(String str) {
>     cc.add(str);
>   }
> 
>   private void addIdentifier(String identifier) {
>     cc.addIdentifier(identifierEscape(identifier));
>   }
> 
>   void add(Node n) {
>     add(n, Context.OTHER);
>   }
> 
>   void add(Node n, Context context) {
>     if (!cc.continueProcessing()) {
>       return;
>     }
> 
>     int type = n.getType();
>     String opstr = NodeUtil.opToStr(type);
>     int childCount = n.getChildCount();
>     Node first = n.getFirstChild();
>     Node last = n.getLastChild();
> 
>     
>     if (opstr != null && first != last) {
>       Preconditions.checkState(childCount == 2);
>       int p = NodeUtil.precedence(type);
>       addLeftExpr(first, p, context);
>       cc.addOp(opstr, true);
> 
>       
>       
>       Context rhsContext = getContextForNoInOperator(context);
> 
>       
>       
>       
>       if (last.getType() == type &&
>           NodeUtil.isAssociative(type)) {
>         addExpr(last, p, rhsContext);
>       } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {
>         
>         addExpr(last, p, rhsContext);
>       } else {
>         addExpr(last, p + 1, rhsContext);
>       }
>       return;
>     }
> 
>     cc.startSourceMapping(n);
> 
>     switch (type) {
>       case Token.TRY: {
>         Preconditions.checkState(first.getNext().getType() == Token.BLOCK &&
>                 first.getNext().getChildCount() <= 1);
>         Preconditions.checkState(childCount >= 2 && childCount <= 3);
> 
>         add("try");
>         add(first, Context.PRESERVE_BLOCK);
> 
>         
>         
>         Node catchblock = first.getNext().getFirstChild();
>         if (catchblock != null) {
>           add(catchblock);
>         }
> 
>         if (childCount == 3) {
>           add("finally");
>           add(last, Context.PRESERVE_BLOCK);
>         }
>         break;
>       }
> 
>       case Token.CATCH:
>         Preconditions.checkState(childCount == 3);
>         if (first.getNext().getType() != Token.EMPTY) {
>           throw new Error("Catch conditions not suppored because I think" +
>                           " that it may be a netscape only feature.");
>         }
> 
>         add("catch(");
>         add(first);
>         add(")");
>         add(last, Context.PRESERVE_BLOCK);
>         break;
> 
>       case Token.THROW:
>         Preconditions.checkState(childCount == 1);
>         add("throw");
>         add(first);
> 
>         
>         
>         cc.endStatement(true);
>         break;
> 
>       case Token.RETURN:
>         add("return");
>         if (childCount == 1) {
>           add(first);
>         } else {
>           Preconditions.checkState(childCount == 0);
>         }
>         cc.endStatement();
>         break;
> 
>       case Token.VAR:
>         if (first != null) {
>           add("var ");
>           addList(first, false, getContextForNoInOperator(context));
>         }
>         break;
> 
>       case Token.NAME:
>         if (first == null || first.getType() == Token.EMPTY) {
>           addIdentifier(n.getString());
>         } else {
>           Preconditions.checkState(childCount == 1);
>           addIdentifier(n.getString());
>           cc.addOp("=", true);
>           if (first.getType() == Token.COMMA) {
>             addExpr(first, NodeUtil.precedence(Token.ASSIGN));
>           } else {
>             
>             
>             addExpr(first, 0, getContextForNoInOperator(context));
>           }
>         }
> 
>         break;
> 
>       case Token.ARRAYLIT:
>         add("[");
>         addList(first, (int[]) n.getProp(Node.SKIP_INDEXES_PROP));
>         add("]");
>         break;
> 
>       case Token.LP:
>         add("(");
>         addList(first);
>         add(")");
>         break;
> 
>       case Token.COMMA:
>         addList(first, false, context);
>         break;
> 
>       case Token.NUMBER:
>         Preconditions.checkState(childCount == 0);
>         cc.addNumber(n.getDouble());
>         break;
> 
>       case Token.TYPEOF:
>       case Token.VOID:
>       case Token.NOT:
>       case Token.BITNOT:
>       case Token.POS:
>       case Token.NEG: {
>         
>         Preconditions.checkState(childCount == 1);
>         cc.addOp(NodeUtil.opToStrNoFail(type), false);
>         addExpr(first, NodeUtil.precedence(type));
>         break;
>       }
> 
>       case Token.HOOK: {
>         Preconditions.checkState(childCount == 3);
>         int p = NodeUtil.precedence(type);
>         addLeftExpr(first, p + 1, context);
>         cc.addOp("?", true);
>         addExpr(first.getNext(), p);
>         cc.addOp(":", true);
>         addExpr(last, p);
>         break;
>       }
> 
>       case Token.REGEXP:
>         if (first.getType() != Token.STRING ||
>             last.getType() != Token.STRING) {
>           throw new Error("Expected children to be strings");
>         }
> 
>         String regexp = regexpEscape(first.getString());
> 
>         
>         if (childCount == 2) {
>           add(regexp + last.getString());
>         } else {
>           Preconditions.checkState(childCount == 1);
>           add(regexp);
>         }
>         break;
> 
>       case Token.GET_REF:
>         add(first);
>         break;
> 
>       case Token.REF_SPECIAL:
>         Preconditions.checkState(childCount == 1);
>         add(first);
>         add(".");
>         add((String) n.getProp(Node.NAME_PROP));
>         break;
> 
>       case Token.FUNCTION:
>         Preconditions.checkState(childCount == 3);
>         boolean funcNeedsParens = (context == Context.START_OF_EXPR);
>         if (funcNeedsParens) {
>           add("(");
>         }
> 
>         add("function");
>         add(first);
> 
>         add(first.getNext());
>         add(last, Context.PRESERVE_BLOCK);
>         cc.endFunction(context == Context.STATEMENT);
> 
>         if (funcNeedsParens) {
>           add(")");
>         }
>         break;
> 
>       case Token.SCRIPT:
>       case Token.BLOCK: {
>         boolean stripBlock = n.isSyntheticBlock() ||
>             ((context != Context.PRESERVE_BLOCK) && (n.getChildCount() < 2));
>         if (!stripBlock) {
>           cc.beginBlock();
>         }
>         for (Node c = first; c != null; c = c.getNext()) {
>           add(c, Context.STATEMENT);
> 
>           
>           if (c.getType() == Token.VAR) {
>             cc.endStatement();
>           }
> 
>           if (c.getType() == Token.FUNCTION) {
>             cc.maybeLineBreak();
>           }
> 
>           
>           
>           if (type == Token.SCRIPT) {
>             cc.notePreferredLineBreak();
>           }
>         }
>         if (!stripBlock) {
>           cc.endBlock(context == Context.STATEMENT);
>         }
>         break;
>       }
> 
>       case Token.FOR:
>         if (childCount == 4) {
>           add("for(");
>           if (first.getType() == Token.VAR) {
>             add(first, Context.IN_FOR_INIT_CLAUSE);
>           } else {
>             addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);
>           }
>           add(";");
>           add(first.getNext());
>           add(";");
>           add(first.getNext().getNext());
>           add(")");
>           addNonEmptyExpression(
>               last, getContextForNonEmptyExpression(context), false);
>         } else {
>           Preconditions.checkState(childCount == 3);
>           add("for(");
>           add(first);
>           add("in");
>           add(first.getNext());
>           add(")");
>           addNonEmptyExpression(
>               last, getContextForNonEmptyExpression(context), false);
>         }
>         break;
> 
>       case Token.DO:
>         Preconditions.checkState(childCount == 2);
>         add("do");
>         addNonEmptyExpression(first, Context.OTHER, false);
>         add("while(");
>         add(last);
>         add(")");
>         cc.endStatement();
>         break;
> 
>       case Token.WHILE:
>         Preconditions.checkState(childCount == 2);
>         add("while(");
>         add(first);
>         add(")");
>         addNonEmptyExpression(
>             last, getContextForNonEmptyExpression(context), false);
>         break;
> 
>       case Token.EMPTY:
>         Preconditions.checkState(childCount == 0);
>         break;
> 
>       case Token.GETPROP: {
>         Preconditions.checkState(childCount == 2);
>         Preconditions.checkState(last.getType() == Token.STRING);
>         boolean needsParens = (first.getType() == Token.NUMBER);
>         if (needsParens) {
>           add("(");
>         }
>         addLeftExpr(first, NodeUtil.precedence(type), context);
>         if (needsParens) {
>           add(")");
>         }
>         add(".");
>         addIdentifier(last.getString());
>         break;
>       }
> 
>       case Token.GETELEM:
>         Preconditions.checkState(childCount == 2);
>         addLeftExpr(first, NodeUtil.precedence(type), context);
>         add("[");
>         add(first.getNext());
>         add("]");
>         break;
> 
>       case Token.WITH:
>         Preconditions.checkState(childCount == 2);
>         add("with(");
>         add(first);
>         add(")");
>         addNonEmptyExpression(
>             last, getContextForNonEmptyExpression(context), false);
>         break;
> 
>       case Token.INC:
>       case Token.DEC: {
>         Preconditions.checkState(childCount == 1);
>         String o = type == Token.INC ? "++" : "--";
>         int postProp = n.getIntProp(Node.INCRDECR_PROP, 0);
>         
>         
>         if (postProp != 0) {
>           addLeftExpr(first, NodeUtil.precedence(type), context);
>           cc.addOp(o, false);
>         } else {
>           cc.addOp(o, false);
>           add(first);
>         }
>         break;
>       }
> 
>       case Token.CALL:
>         addLeftExpr(first, NodeUtil.precedence(type), context);
>         add("(");
>         addList(first.getNext());
>         add(")");
>         break;
> 
>       case Token.IF:
>         boolean hasElse = childCount == 3;
>         boolean ambiguousElseClause =
>             context == Context.BEFORE_DANGLING_ELSE && !hasElse;
>         if (ambiguousElseClause) {
>           cc.beginBlock();
>         }
> 
>         add("if(");
>         add(first);
>         add(")");
> 
>         if (hasElse) {
>           addNonEmptyExpression(
>               first.getNext(), Context.BEFORE_DANGLING_ELSE, false);
>           add("else");
>           addNonEmptyExpression(
>               last, getContextForNonEmptyExpression(context), false);
>         } else {
>           addNonEmptyExpression(first.getNext(), Context.OTHER, false);
>           Preconditions.checkState(childCount == 2);
>         }
> 
>         if (ambiguousElseClause) {
>           cc.endBlock();
>         }
>         break;
> 
>       case Token.NULL:
>       case Token.THIS:
>       case Token.FALSE:
>       case Token.TRUE:
>         Preconditions.checkState(childCount == 0);
>         add(Node.tokenToName(type));
>         break;
> 
>       case Token.CONTINUE:
>         Preconditions.checkState(childCount <= 1);
>         add("continue");
>         if (childCount == 1) {
>           add(" ");
>           add(first);
>         }
>         cc.endStatement();
>         break;
> 
>       case Token.DEBUGGER:
>         Preconditions.checkState(childCount == 0);
>         add("debugger");
>         cc.endStatement();
>         break;
> 
>       case Token.BREAK:
>         Preconditions.checkState(childCount <= 1);
>         add("break");
>         if (childCount == 1) {
>           add(" ");
>           add(first);
>         }
>         cc.endStatement();
>         break;
> 
>       case Token.EXPR_VOID:
>         
>         
>         
>       case Token.EXPR_RESULT:
>         Preconditions.checkState(childCount == 1);
>         add(first, Context.START_OF_EXPR);
>         cc.endStatement();
>         break;
> 
>       case Token.NEW:
>         add("new ");
>         int precedence = NodeUtil.precedence(type);
> 
>         
>         
>         
>         if (NodeUtil.containsCall(first)) {
>           precedence = NodeUtil.precedence(first.getType()) + 1;
>         }
>         addExpr(first, precedence);
> 
>         
>         Node next = first.getNext();
>         if (next != null) {
>           add("(");
>           addList(next);
>           add(")");
>         }
>         break;
> 
>       case Token.STRING:
>         Preconditions.checkState(childCount == 0);
>         add(jsString(n.getString()));
>         break;
> 
>       case Token.DELPROP:
>         Preconditions.checkState(childCount == 1);
>         add("delete ");
>         add(first);
>         break;
> 
>       case Token.OBJECTLIT: {
>         Preconditions.checkState(childCount % 2 == 0);
>         boolean needsParens = (context == Context.START_OF_EXPR);
>         if (needsParens) {
>           add("(");
>         }
>         add("{");
>         for (Node c = first; c != null; c = c.getNext().getNext()) {
>           if (c != first) {
>             cc.listSeparator();
>           }
> 
>           
>           
>           if (c.getType() == Token.STRING &&
>               !TokenStream.isKeyword(c.getString()) &&
>               TokenStream.isJSIdentifier(c.getString()) &&
>               
>               
>               NodeUtil.isLatin(c.getString())) {
>             add(c.getString());
>           } else {
>             addExpr(c, 1);
>           }
>           add(":");
>           addExpr(c.getNext(), 1);
>         }
>         add("}");
>         if (needsParens) {
>           add(")");
>         }
>         break;
>       }
> 
>       case Token.SWITCH:
>         add("switch(");
>         add(first);
>         add(")");
>         cc.beginBlock();
>         addAllSiblings(first.getNext());
>         cc.endBlock(context == Context.STATEMENT);
>         break;
> 
>       case Token.CASE:
>         Preconditions.checkState(childCount == 2);
>         add("case ");
>         add(first);
>         addCaseBody(last);
>         break;
> 
>       case Token.DEFAULT:
>         Preconditions.checkState(childCount == 1);
>         add("default");
>         addCaseBody(first);
>         break;
> 
>       case Token.LABEL:
>         Preconditions.checkState(childCount == 2);
>         add(first);
>         add(":");
>         addNonEmptyExpression(
>             last, getContextForNonEmptyExpression(context), true);
>         break;
> 
>       
>       
>       case Token.SETNAME:
>         break;
> 
>       default:
>         throw new Error("Unknown type " + type + "\n" + n.toStringTree());
>     }
> 
>     cc.endSourceMapping(n);
>   }
> 
>   
> 
> 
> 
> 
> 
> 
>   private void addNonEmptyExpression(
>       Node n, Context context, boolean allowNonBlockChild) {
>     Node nodeToProcess = n;
> 
>     if (!allowNonBlockChild && n.getType() != Token.BLOCK) {
>       
>       
>     }
> 
>     
>     if (n.getType() == Token.BLOCK) {
>       int count = getNonEmptyChildCount(n);
>       if (count == 0) {
>         cc.endStatement(true);
>         return;
>       }
> 
>       if (count == 1) {
>         
>         
>         
>         Node firstAndOnlyChild = getFirstNonEmptyChild(n);
>         if (firstAndOnlyChild.getType() == Token.FUNCTION ||
>             firstAndOnlyChild.getType() == Token.DO) {
>           cc.beginBlock();
>           add(firstAndOnlyChild, Context.STATEMENT);
>           cc.maybeLineBreak();
>           cc.endBlock(context == Context.STATEMENT);
>           return;
>         } else {
>           
>           nodeToProcess = firstAndOnlyChild;
>         }
>       }
>     }
> 
>     if (nodeToProcess.getType() == Token.EMPTY) {
>       cc.endStatement(true);
>     } else {
>       add(nodeToProcess, context);
> 
>       
>       
>       if (nodeToProcess.getType() == Token.VAR) {
>         cc.endStatement();
>       }
>     }
>   }
> 
>   
> 
> 
> 
> 
> 
> 
> 
> 
>   void addLeftExpr(Node n, int minPrecedence, Context context) {
>     addExpr(n, minPrecedence, context);
>   }
> 
>   void addExpr(Node n, int minPrecedence) {
>     addExpr(n, minPrecedence, Context.OTHER);
>   }
> 
>   private void addExpr(Node n, int minPrecedence, Context context) {
>     if ((NodeUtil.precedence(n.getType()) < minPrecedence) ||
>         ((context == Context.IN_FOR_INIT_CLAUSE) &&
>         (n.getType() == Token.IN))){
>       add("(");
>       add(n, clearContextForNoInOperator(context));
>       add(")");
>     } else {
>       add(n, context);
>     }
>   }
> 
>   void addList(Node firstInList) {
>     addList(firstInList, true, Context.OTHER);
>   }
> 
>   void addList(Node firstInList, boolean isArrayOrFunctionArgument) {
>     addList(firstInList, isArrayOrFunctionArgument, Context.OTHER);
>   }
> 
>   void addList(Node firstInList, boolean isArrayOrFunctionArgument,
>                Context lhsContext) {
>     for (Node n = firstInList; n != null; n = n.getNext()) {
>       boolean isFirst = n == firstInList;
>       if (isFirst) {
>         addLeftExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);
>       } else {
>         cc.listSeparator();
>         addExpr(n, isArrayOrFunctionArgument ? 1 : 0);
>       }
>     }
>   }
> 
>   
> 
> 
> 
> 
> 
> 
> 
> 
> 
>   void addList(Node firstInList, int[] skipIndexes) {
>     int nextSlot = 0;
>     int nextSkipSlot = 0;
>     for (Node n = firstInList; n != null; n = n.getNext()) {
>       while (skipIndexes != null && nextSkipSlot < skipIndexes.length) {
>         if (nextSlot == skipIndexes[nextSkipSlot]) {
>           cc.listSeparator();
>           nextSlot++;
>           nextSkipSlot++;
>         } else {
>           break;
>         }
>       }
>       if (n != firstInList) {
>         cc.listSeparator();
>       }
>       addExpr(n, 1);
>       nextSlot++;
>     }
>   }
> 
>   void addCaseBody(Node caseBody) {
>     cc.beginCaseBody();
>     add(caseBody);
>     cc.endCaseBody();
>   }
> 
>   void addAllSiblings(Node n) {
>     for (Node c = n; c != null; c = c.getNext()) {
>       add(c);
>     }
>   }
> 
>   
>   static String jsString(String s) {
>     int singleq = 0, doubleq = 0;
> 
>     
>     for (int i = 0; i < s.length(); i++) {
>       switch (s.charAt(i)) {
>         case '"': doubleq++; break;
>         case '\'': singleq++; break;
>       }
>     }
> 
>     String doublequote, singlequote;
>     char quote;
>     if (singleq < doubleq) {
>       
>       quote = '\'';
>       doublequote = "\"";
>       singlequote = "\\\'";
>     } else {
>       
>       quote = '\"';
>       doublequote = "\\\"";
>       singlequote = "\'";
>     }
> 
>     return strEscape(s, quote, doublequote, singlequote, "\\\\");
>   }
> 
>   
>   static String regexpEscape(String s) {
>     return strEscape(s, '/', "\"", "'", "\\");
>   }
> 
>   
>   static String strEscape(String s, char quote,
>                           String doublequoteEscape,
>                           String singlequoteEscape,
>                           String backslashEscape) {
>     StringBuilder sb = new StringBuilder();
>     sb.append(quote);
>     for (int i = 0; i < s.length(); i++) {
>       char c = s.charAt(i);
>       switch (c) {
>         case '\n': sb.append("\\n"); break;
>         case '\r': sb.append("\\r"); break;
>         case '\t': sb.append("\\t"); break;
>         case '\\': sb.append(backslashEscape); break;
>         case '\"': sb.append(doublequoteEscape); break;
>         case '\'': sb.append(singlequoteEscape); break;
>         case '>':                       
>           if (i >= 2 &&
>               ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||
>                (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {
>             sb.append("\\>");
>           } else {
>             sb.append(c);
>           }
>           break;
>         case '<':                       
>           final String END_SCRIPT = "/script";
>           if (s.regionMatches(true, i + 1, END_SCRIPT, 0,
>               END_SCRIPT.length())) {
>             sb.append("<\\");
>           } else {
>             sb.append(c);
>           }
>           break;
>         default:
>           
>           if (c > 0x1F && c < 0x7F) {
>             
>             sb.append(c);
>           } else {
>             
>             
>             
>             StringUtil.appendHexJavaScriptRepresentation(sb, c);
>           }
>       }
>     }
>     sb.append(quote);
>     return sb.toString();
>   }
> 
>   static String identifierEscape(String s) {
>     
>     if (NodeUtil.isLatin(s)) {
>       return s;
>     }
> 
>     
>     StringBuilder sb = new StringBuilder();
>     for (int i = 0; i < s.length(); i++) {
>       char c = s.charAt(i);
>       
>       if (c > 0x1F && c < 0x7F) {
>         sb.append(c);
>       } else {
>         StringUtil.appendHexJavaScriptRepresentation(sb, c);
>       }
>     }
>     return sb.toString();
>   }
> 
>   
>   private static int getNonEmptyChildCount(Node n) {
>     int i = 0;
>     for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
>       if (c.getType() != Token.EMPTY) {
>         i++;
>       }
>     }
>     return i;
>   }
> 
>   
>   private static Node getFirstNonEmptyChild(Node n) {
>     for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
>       if (c.getType() != Token.EMPTY) {
>         return c;
>       }
>     }
>     return null;
>   }
> 
>   
>   
>   
>   enum Context {
>     STATEMENT,
>     BEFORE_DANGLING_ELSE, 
>     START_OF_EXPR,
>     PRESERVE_BLOCK,
>     
>     
>     
>     IN_FOR_INIT_CLAUSE,
>     OTHER
>   }
> 
>   private Context getContextForNonEmptyExpression(Context currentContext) {
>     return currentContext == Context.BEFORE_DANGLING_ELSE ?
>         Context.BEFORE_DANGLING_ELSE : Context.OTHER;
>   }
> 
>   
> 
> 
> 
>   private  Context getContextForNoInOperator(Context context) {
>     return (context == Context.IN_FOR_INIT_CLAUSE
>         ? Context.IN_FOR_INIT_CLAUSE : Context.OTHER);
>   }
> 
>   
> 
> 
> 
> 
> 
>   private  Context clearContextForNoInOperator(Context context) {
>     return (context == Context.IN_FOR_INIT_CLAUSE
>         ? Context.OTHER : context);
>   }
> }
