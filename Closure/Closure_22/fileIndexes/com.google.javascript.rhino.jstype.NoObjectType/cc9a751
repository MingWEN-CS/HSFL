






































package com.google.javascript.rhino.jstype;

import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;

import java.io.Serializable;


















public class NoObjectType extends FunctionType {
  private static final long serialVersionUID = 1L;

  


  private final Visitor<JSType> leastSupertypeVisitor =
      new LeastSupertypeVisitor();

  private class LeastSupertypeVisitor implements Visitor<JSType>, Serializable {
    private static final long serialVersionUID = 1L;

    public JSType caseNoObjectType() {
      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
    }

    public JSType caseUnknownType() {
      return getNativeType(JSTypeNative.UNKNOWN_TYPE);
    }

    public JSType caseNoType() {
      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
    }

    public JSType caseBooleanType() {
      return registry.createUnionType(JSTypeNative.NO_OBJECT_TYPE,
          JSTypeNative.BOOLEAN_TYPE);
    }

    public JSType caseFunctionType(FunctionType type) {
      return type;
    }

    public JSType caseNullType() {
      return registry.createUnionType(JSTypeNative.NO_OBJECT_TYPE,
          JSTypeNative.NULL_TYPE);
    }

    public JSType caseNumberType() {
      return registry.createUnionType(JSTypeNative.NO_OBJECT_TYPE,
          JSTypeNative.NUMBER_TYPE);
    }

    public JSType caseObjectType(ObjectType type) {
      return type;
    }

    public JSType caseStringType() {
      return registry.createUnionType(JSTypeNative.NO_OBJECT_TYPE,
          JSTypeNative.STRING_TYPE);
    }

    public JSType caseUnionType(UnionType type) {
      return registry.createUnionType(
          getNativeType(JSTypeNative.NO_OBJECT_TYPE), type);
    }

    public JSType caseAllType() {
      return getNativeType(JSTypeNative.ALL_TYPE);
    }

    public JSType caseVoidType() {
      return registry.createUnionType(JSTypeNative.NO_OBJECT_TYPE,
          JSTypeNative.VOID_TYPE);
    }

    public JSType caseEnumElementType(EnumElementType type) {
      JSType primitive = type.getPrimitiveType();
      return primitive.isObject() ? primitive :
          registry.createUnionType(
              getNativeType(JSTypeNative.NO_OBJECT_TYPE), type);
    }
  }

  


  private final Visitor<JSType> greatestSubtypeVisitor =
      new GreatestSupertypeVisitor();

  private class GreatestSupertypeVisitor
      implements Visitor<JSType>, Serializable {
    private static final long serialVersionUID = 1L;

    public JSType caseNoObjectType() {
      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
    }

    public JSType caseUnknownType() {
      return getNativeType(JSTypeNative.UNKNOWN_TYPE);
    }

    public JSType caseNoType() {
      return getNativeType(JSTypeNative.NO_TYPE);
    }

    public JSType caseBooleanType() {
      return getNativeType(JSTypeNative.NO_TYPE);
    }

    public JSType caseFunctionType(FunctionType type) {
      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
    }

    public JSType caseNullType() {
      return getNativeType(JSTypeNative.NO_TYPE);
    }

    public JSType caseNumberType() {
      return getNativeType(JSTypeNative.NO_TYPE);
    }

    public JSType caseObjectType(ObjectType type) {
      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
    }

    public JSType caseStringType() {
      return getNativeType(JSTypeNative.NO_TYPE);
    }

    public JSType caseUnionType(UnionType that) {
      JSType anyObjectType = getNativeType(JSTypeNative.NO_OBJECT_TYPE);
      if (anyObjectType.isSubtype(that)) {
        return anyObjectType;
      } else if (that.isSubtype(anyObjectType)) {
        return that;
      } else {
        return getNativeType(JSTypeNative.NO_TYPE);
      }
    }

    public JSType caseAllType() {
      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
    }

    public JSType caseVoidType() {
      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
    }

    public JSType caseEnumElementType(EnumElementType type) {
      return type.getPrimitiveType().visit(this);
    }
  }

  NoObjectType(JSTypeRegistry registry) {
    super(registry, null, null,
          registry.createArrowType(null, null),
          null, null, true, true);
    getInternalArrowType().returnType = this;
    this.setInstanceType(this);
  }

  @Override
  public TernaryValue testForEquality(JSType that) {
    return that.isEmptyType() ? TernaryValue.TRUE : TernaryValue.UNKNOWN;
  }

  @Override
  public boolean isSubtype(JSType that) {
    if (JSType.isSubtype(this, that)) {
      return true;
    } else {
      return that.isObject() && !that.isNoType();
    }
  }

  @Override
  public boolean isFunctionType() {
    return false;
  }

  @Override
  public boolean isNoObjectType() {
    return true;
  }

  @Override
  public JSType getLeastSupertype(JSType that) {
    return that.visit(leastSupertypeVisitor);
  }

  @Override
  public JSType getGreatestSubtype(JSType that) {
    return that.visit(greatestSubtypeVisitor);
  }

  @Override
  public ObjectType getImplicitPrototype() {
    return null;
  }

  @Override
  public String getReferenceName() {
    return null;
  }

  @Override
  public boolean matchesNumberContext() {
    return true;
  }

  @Override
  public boolean matchesObjectContext() {
    return true;
  }

  @Override
  public boolean matchesStringContext() {
    return true;
  }

  @Override
  public boolean isEquivalentTo(JSType that) {
    return this == that;
  }

  @Override
  public int hashCode() {
    return System.identityHashCode(this);
  }

  @Override
  public int getPropertiesCount() {
    
    
    return Integer.MAX_VALUE;
  }

  @Override
  public JSType getPropertyType(String propertyName) {
    
    return getNativeType(JSTypeNative.NO_TYPE);
  }

  @Override
  public boolean hasProperty(String propertyName) {
    
    return true;
  }

  @Override
  boolean defineProperty(String propertyName, JSType type,
      boolean inferred, boolean inExterns, Node propertyNode) {
    
    return true;
  }

  @Override
  public JSDocInfo getOwnPropertyJSDocInfo(String propertyName) {
    return null;
  }

  @Override
  public void setPropertyJSDocInfo(String propertyName, JSDocInfo info,
      boolean inExterns) {
    
  }

  @Override
  public boolean isPropertyTypeInferred(String propertyName) {
    return false;
  }

  @Override
  public <T> T visit(Visitor<T> visitor) {
    return visitor.caseNoObjectType();
  }

  @Override
  public String toString() {
    return "NoObject";
  }

  @Override
  public FunctionType getConstructor() {
    return null;
  }

  @Override
  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
    return this;
  }
}
