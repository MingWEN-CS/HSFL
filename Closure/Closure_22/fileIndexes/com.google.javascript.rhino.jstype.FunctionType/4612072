






































package com.google.javascript.rhino.jstype;

import static com.google.javascript.rhino.jstype.JSTypeNative.U2U_CONSTRUCTOR_TYPE;

import com.google.common.annotations.VisibleForTesting;
import com.google.common.base.Preconditions;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.Iterables;
import com.google.common.collect.Lists;
import com.google.common.collect.Sets;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.Token;

import java.util.Collections;
import java.util.List;
import java.util.Set;











public class FunctionType extends PrototypeObjectType {
  private static final long serialVersionUID = 1L;

  private enum Kind {
    ORDINARY,
    CONSTRUCTOR,
    INTERFACE
  }

  


  private final ArrowType call;

  






  private FunctionPrototypeType prototype;

  



  private final Kind kind;

  


  private ObjectType typeOfThis;

  


  private Node source;

  



  private List<ObjectType> implementedInterfaces = ImmutableList.of();

  



  private List<FunctionType> subTypes;

  


  private String templateTypeName;

  











  @VisibleForTesting
  public FunctionType(JSTypeRegistry registry, String name, Node source,
      Node parameters, JSType returnType) {
    this(registry, name, source, parameters, returnType, null, null, false,
         false);
  }

  













  public FunctionType(JSTypeRegistry registry, String name, Node source,
      Node parameters, JSType returnType, ObjectType typeOfThis) {
    this(registry, name, source, parameters, returnType, typeOfThis,
        null, false, false);
  }

  














  public FunctionType(JSTypeRegistry registry, String name, Node source,
      Node parameters, JSType returnType, ObjectType typeOfThis,
      String templateTypeName) {
    this(registry, name, source, parameters, returnType, typeOfThis,
        templateTypeName, false, false);
  }

  
  FunctionType(JSTypeRegistry registry, String name, Node source,
      Node parameters, JSType returnType, ObjectType typeOfThis,
      String templateTypeName,  boolean isConstructor, boolean nativeType) {
    super(registry, name,
        registry.getNativeObjectType(JSTypeNative.FUNCTION_INSTANCE_TYPE),
        nativeType);
    Preconditions.checkArgument(source == null ||
        Token.FUNCTION == source.getType());
    this.source = source;
    this.kind = isConstructor ? Kind.CONSTRUCTOR : Kind.ORDINARY;
    if (isConstructor) {
      this.typeOfThis = typeOfThis != null && typeOfThis.isNoObjectType() ?
          typeOfThis : new InstanceObjectType(registry, this, nativeType);
    } else {
      this.typeOfThis = typeOfThis != null ?
          typeOfThis :
          registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
    }
    
    
    this.call = new ArrowType(registry, parameters,
        (returnType == null ? getReturnType() : returnType));
    this.templateTypeName = templateTypeName;
  }

  
  FunctionType(JSTypeRegistry registry, String name, Node source) {
    super(registry, name,
        registry.getNativeObjectType(JSTypeNative.FUNCTION_INSTANCE_TYPE));
    Preconditions.checkArgument(source == null ||
        Token.FUNCTION == source.getType());
    Preconditions.checkArgument(name != null);
    this.source = source;
    this.call = null;
    this.kind = Kind.INTERFACE;
    this.typeOfThis = new InstanceObjectType(registry, this);
  }

  @Override
  public boolean isInstanceType() {
    
    return equals(registry.getNativeType(U2U_CONSTRUCTOR_TYPE));
  }

  @Override
  public boolean isConstructor() {
    return kind == Kind.CONSTRUCTOR;
  }

  @Override
  public boolean isInterface() {
    return kind == Kind.INTERFACE;
  }

  @Override
  public boolean isOrdinaryFunction() {
    return kind == Kind.ORDINARY;
  }

  @Override
  public boolean isFunctionType() {
    return true;
  }

  @Override
  public boolean canBeCalled() {
    return true;
  }

  public Iterable<Node> getParameters() {
    Node n = getParametersNode();
    if (n != null) {
      return n.children();
    } else {
      return Collections.emptySet();
    }
  }

  
  public Node getParametersNode() {
    return call == null ? null : call.parameters;
  }

  
  public int getMinArguments() {
    
    
    
    int i = 0;
    int min = 0;
    for (Node n : getParameters()) {
      i++;
      if (!n.isOptionalArg() && !n.isVarArgs()) {
        min = i;
      }
    }
    return min;
  }

  



  public int getMaxArguments() {
    Node params = getParametersNode();
    if (params != null) {
      Node lastParam = params.getLastChild();
      if (lastParam == null || !lastParam.isVarArgs()) {
        return params.getChildCount();
      }
    }

    return Integer.MAX_VALUE;
  }

  public JSType getReturnType() {
    return call == null ? null : call.returnType;
  }

  



  public FunctionPrototypeType getPrototype() {
    
    if (prototype == null) {
      setPrototype(new FunctionPrototypeType(registry, this, null));
    }
    return prototype;
  }

  




  public void setPrototypeBasedOn(ObjectType baseType) {
    if (prototype == null) {
      setPrototype(
          new FunctionPrototypeType(
              registry, this, baseType, isNativeObjectType()));
    } else {
      prototype.setImplicitPrototype(baseType);
    }
  }

  




  public boolean setPrototype(FunctionPrototypeType prototype) {
    if (prototype == null) {
      return false;
    }
    
    if (isConstructor() && prototype == getInstanceType()) {
      return false;
    }

    this.prototype = prototype;

    if (isConstructor() || isInterface()) {
      FunctionType superClass = getSuperClassConstructor();
      if (superClass != null) {
        superClass.addSubType(this);
      }
    }
    return true;
  }

  




  public Iterable<ObjectType> getAllImplementedInterfaces() {
    Set<ObjectType> interfaces = Sets.newHashSet();

    for (ObjectType type : getImplementedInterfaces()) {
      addRelatedInterfaces(type, interfaces);
    }
    return interfaces;
  }

  private void addRelatedInterfaces(ObjectType instance, Set<ObjectType> set) {
    FunctionType constructor = instance.getConstructor();
    if (constructor != null) {
      if (!constructor.isInterface()) {
        return;
      }

      set.add(instance);

      if (constructor.getSuperClassConstructor() != null) {
        addRelatedInterfaces(
            constructor.getSuperClassConstructor().getInstanceType(), set);
      }
    }
  }

  
  public Iterable<ObjectType> getImplementedInterfaces() {
    FunctionType superCtor = isConstructor() ?
        getSuperClassConstructor() : null;
    if (superCtor == null) {
      return implementedInterfaces;
    } else {
      return Iterables.concat(
          implementedInterfaces, superCtor.getImplementedInterfaces());
    }
  }

  public void setImplementedInterfaces(List<ObjectType> implementedInterfaces) {
    
    for (ObjectType type : implementedInterfaces) {
      registry.registerTypeImplementingInterface(this, type);
    }
    this.implementedInterfaces = ImmutableList.copyOf(implementedInterfaces);
  }

  @Override
  public boolean hasProperty(String name) {
    return super.hasProperty(name) || "prototype".equals(name);
  }

  @Override
  public JSType getPropertyType(String name) {
    if ("prototype".equals(name)) {
      return getPrototype();
    } else {
      if (!hasOwnProperty(name)) {
        if ("call".equals(name)) {
          
          Node params = getParametersNode();
          if (params == null) {
            
            
            defineDeclaredProperty(name,
                new FunctionType(registry, null, null,
                    null, getReturnType()),
                false);
          } else {
            params = params.cloneTree();
            Node thisTypeNode = Node.newString(Token.NAME, "thisType");
            thisTypeNode.setJSType(
                registry.createOptionalNullableType(getTypeOfThis()));
            params.addChildToFront(thisTypeNode);
            thisTypeNode.setOptionalArg(true);

            defineDeclaredProperty(name,
                new FunctionType(registry, null, null,
                    params, getReturnType()),
                false);
          }
        } else if ("apply".equals(name)) {
          
          FunctionParamBuilder builder = new FunctionParamBuilder(registry);

          
          
          
          
          builder.addOptionalParams(
              registry.createNullableType(getTypeOfThis()),
              registry.createNullableType(
                  registry.getNativeType(JSTypeNative.OBJECT_TYPE)));

          defineDeclaredProperty(name,
              new FunctionType(registry, null, null,
                  builder.build(), getReturnType()),
              false);
        }
      }

      return super.getPropertyType(name);
    }
  }

  @Override
  boolean defineProperty(String name, JSType type,
      boolean inferred, boolean inExterns) {
    if ("prototype".equals(name)) {
      ObjectType objType = type.toObjectType();
      if (objType != null) {
        return setPrototype(
            new FunctionPrototypeType(
                registry, this, objType, isNativeObjectType()));
      } else {
        return false;
      }
    }
    return super.defineProperty(name, type, inferred, inExterns);
  }

  @Override
  public boolean isPropertyTypeInferred(String property) {
    return "prototype".equals(property) ||
        super.isPropertyTypeInferred(property);
  }

  @Override
  public JSType getLeastSupertype(JSType that) {
    
    
    
    
    
    
    
    
    
    
    
    
    
    if (isFunctionType() && that.isFunctionType()) {
      if (equals(that)) {
        return this;
      }

      JSType functionInstance = registry.getNativeType(
          JSTypeNative.FUNCTION_INSTANCE_TYPE);
      if (functionInstance.equals(that)) {
        return that;
      } else if (functionInstance.equals(this)) {
        return this;
      }

      return registry.getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE);
    }

    return super.getLeastSupertype(that);
  }

  @Override
  public JSType getGreatestSubtype(JSType that) {
    if (isFunctionType() && that.isFunctionType()) {
      if (equals(that)) {
        return this;
      }

      JSType functionInstance = registry.getNativeType(
          JSTypeNative.FUNCTION_INSTANCE_TYPE);
      if (functionInstance.equals(that)) {
        return this;
      } else if (functionInstance.equals(this)) {
        return that;
      }

      return registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
    }

    return super.getGreatestSubtype(that);
  }

  



  public FunctionType getSuperClassConstructor() {
    Preconditions.checkArgument(isConstructor() || isInterface());
    ObjectType maybeSuperInstanceType = getPrototype().getImplicitPrototype();
    if (maybeSuperInstanceType == null) {
      return null;
    }
    return maybeSuperInstanceType.getConstructor();
  }

  



  public boolean hasUnknownSupertype() {
    Preconditions.checkArgument(isConstructor() || isInterface());
    Preconditions.checkArgument(!this.isUnknownType());
    
    
    FunctionType ctor = this;
    while (true) {
      ObjectType maybeSuperInstanceType =
          ctor.getPrototype().getImplicitPrototype();
      if (maybeSuperInstanceType == null) {
        return false;
      }
      if (maybeSuperInstanceType.isUnknownType()) {
        return true;
      }
      ctor = maybeSuperInstanceType.getConstructor();
      if (ctor == null) {
        return false;
      }
      Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());
    }
  }

  




  public JSType getTopMostDefiningType(String propertyName) {
    Preconditions.checkState(isConstructor() || isInterface());
    Preconditions.checkArgument(getPrototype().hasProperty(propertyName));
    FunctionType ctor = this;
    JSType topInstanceType;
    do {
      topInstanceType = ctor.getInstanceType();
      ctor = ctor.getSuperClassConstructor();
    } while (ctor != null && ctor.getPrototype().hasProperty(propertyName));
    return topInstanceType;
  }

  



  @Override
  public boolean equals(Object otherType) {
    if (!(otherType instanceof FunctionType)) {
      return false;
    }
    FunctionType that = (FunctionType) otherType;
    if (!that.isFunctionType()) {
      return false;
    }
    if (this.isConstructor()) {
      if (that.isConstructor()) {
        return this == that;
      }
      return false;
    }
    if (this.isInterface()) {
      if (that.isInterface()) {
        return this.getReferenceName().equals(that.getReferenceName());
      }
      return false;
    }
    if (that.isInterface()) {
      return false;
    }
    return this.typeOfThis.equals(that.typeOfThis) &&
        this.call.equals(that.call);
  }

  @Override
  public int hashCode() {
    return isInterface() ? getReferenceName().hashCode() : call.hashCode();
  }

  public boolean hasEqualCallType(FunctionType otherType) {
    return this.call.equals(otherType.call);
  }

  





  @Override
  public String toString() {
    if (this == registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)) {
      return "Function";
    }

    StringBuilder b = new StringBuilder(32);
    b.append("function (");
    int paramNum = (call == null || call.parameters == null) ?
        0 : call.parameters.getChildCount();
    boolean hasKnownTypeOfThis = !typeOfThis.isUnknownType();
    if (hasKnownTypeOfThis) {
      b.append("this:");
      b.append(typeOfThis.toString());
    }
    if (paramNum > 0) {
      if (hasKnownTypeOfThis) {
        b.append(", ");
      }
      Node p = call.parameters.getFirstChild();
      if (p.isVarArgs()) {
        appendVarArgsString(b, p.getJSType());
      } else {
        b.append(p.getJSType().toString());
      }
      p = p.getNext();
      while (p != null) {
        b.append(", ");
        if (p.isVarArgs()) {
          appendVarArgsString(b, p.getJSType());
        } else {
          b.append(p.getJSType().toString());
        }
        p = p.getNext();
      }
    }
    b.append(")");
    if (call != null && call.returnType != null) {
      b.append(": ");
      b.append(call.returnType);
    }
    return b.toString();
  }

  
  private void appendVarArgsString(StringBuilder builder, JSType paramType) {
    if (paramType.isUnionType()) {
      
      paramType = ((UnionType) paramType).getRestrictedUnion(
          registry.getNativeType(JSTypeNative.VOID_TYPE));
    }
    builder.append("...[").append(paramType.toString()).append("]");
  }

  




  @Override
  public boolean isSubtype(JSType that) {
    if (this.equals(that)) {
      return true;
    }
    if (that.isFunctionType()) {
      if (((FunctionType) that).isInterface()) {
        
        return true;
      }
      if (this.isInterface()) {
        
        return false;
      }
      
      
      
      
      
      
      
      FunctionType other = (FunctionType) that;
      return (this.isConstructor() || other.isConstructor() ||
              other.typeOfThis.isSubtype(this.typeOfThis) ||
              this.typeOfThis.isSubtype(other.typeOfThis)) &&
          this.call.isSubtype(other.call);
    }
    if (that instanceof UnionType) {
      UnionType union = (UnionType) that;
      for (JSType element : union.alternates) {
        if (this.isSubtype(element)) {
          return true;
        }
      }
    }
    return getNativeType(JSTypeNative.FUNCTION_PROTOTYPE).isSubtype(that);
  }

  @Override
  public <T> T visit(Visitor<T> visitor) {
    return visitor.caseFunctionType(this);
  }

  




  public ObjectType getInstanceType() {
    Preconditions.checkState(hasInstanceType());
    return typeOfThis;
  }

  
  void setInstanceType(ObjectType instanceType) {
    typeOfThis = instanceType;
  }

  


  public boolean hasInstanceType() {
    return isConstructor() || isInterface();
  }

  


  public ObjectType getTypeOfThis() {
    return typeOfThis.isNoObjectType() ?
        registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE) : typeOfThis;
  }

  


  public Node getSource() {
    return source;
  }

  


  public void setSource(Node source) {
    this.source = source;
  }

  
  private void addSubType(FunctionType subType) {
    if (subTypes == null) {
      subTypes = Lists.newArrayList();
    }
    subTypes.add(subType);
  }

  




  public List<FunctionType> getSubTypes() {
    return subTypes;
  }

  @Override
  public boolean hasCachedValues() {
    return prototype != null || super.hasCachedValues();
  }

  


  public String getTemplateTypeName() {
    return templateTypeName;
  }
}
