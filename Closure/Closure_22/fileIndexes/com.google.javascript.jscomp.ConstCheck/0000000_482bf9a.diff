1a2,138
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> package com.google.javascript.jscomp;
> 
> import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;
> import com.google.javascript.rhino.Node;
> import com.google.javascript.rhino.Token;
> 
> import java.util.*;
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> class ConstCheck extends AbstractPostOrderCallback
>     implements CompilerPass {
> 
>   static final DiagnosticType CONST_REASSIGNED_VALUE_ERROR =
>       DiagnosticType.error(
>           "JSC_CONSTANT_REASSIGNED_VALUE_ERROR",
>           "constant {0} assigned a value more than once");
> 
>   private final AbstractCompiler compiler;
>   private final Set<Scope.Var> initializedConstants;
> 
>   
> 
> 
>   public ConstCheck(AbstractCompiler compiler) {
>     this.compiler = compiler;
>     this.initializedConstants = new HashSet<Scope.Var>();
>   }
> 
>   
> 
> 
>   public void process(Node externs, Node root) {
>     NodeTraversal.traverse(compiler, root, this);
>   }
> 
>   
> 
> 
>   public void visit(NodeTraversal t, Node n, Node parent) {
>     switch (n.getType()) {
>       case Token.NAME:
>         if (parent != null &&
>             parent.getType() == Token.VAR &&
>             n.hasChildren()) {
>           String name = n.getString();
>           Scope.Var var = t.getScope().getVar(name);
>           if (isConstant(var)) {
>             if (initializedConstants.contains(var)) {
>               reportError(t, n, name);
>             } else {
>               initializedConstants.add(var);
>             }
>           }
>         }
>         break;
> 
>       case Token.ASSIGN:
>       case Token.ASSIGN_BITOR:
>       case Token.ASSIGN_BITXOR:
>       case Token.ASSIGN_BITAND:
>       case Token.ASSIGN_LSH:
>       case Token.ASSIGN_RSH:
>       case Token.ASSIGN_URSH:
>       case Token.ASSIGN_ADD:
>       case Token.ASSIGN_SUB:
>       case Token.ASSIGN_MUL:
>       case Token.ASSIGN_DIV:
>       case Token.ASSIGN_MOD: {
>         Node lhs = n.getFirstChild();
>         if (lhs.getType() == Token.NAME) {
>           String name = lhs.getString();
>           Scope.Var var = t.getScope().getVar(name);
>           if (isConstant(var)) {
>             if (initializedConstants.contains(var)) {
>               reportError(t, n, name);
>             } else {
>               initializedConstants.add(var);
>             }
>           }
>         }
>         break;
>       }
> 
>       case Token.INC:
>       case Token.DEC: {
>         Node lhs = n.getFirstChild();
>         if (lhs.getType() == Token.NAME) {
>           String name = lhs.getString();
>           Scope.Var var = t.getScope().getVar(name);
>           if (isConstant(var)) {
>             reportError(t, n, name);
>           }
>         }
>         break;
>       }
>     }
>   }
> 
>   
> 
> 
> 
>   private boolean isConstant(Scope.Var var) {
>     return var != null && var.isConst();
>   }
> 
>   
> 
> 
>   void reportError(NodeTraversal t, Node n, String name) {
>     compiler.report(JSError.make(t, n, CONST_REASSIGNED_VALUE_ERROR, name));
>   }
> }
