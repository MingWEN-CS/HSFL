1,18c1,94
< <!DOCTYPE HTML PUBLIC "-
< <!--NewPage-->
< <HTML>
< <HEAD>
< <!-- Generated by javadoc (build 1.6.0_0) on Fri Nov 06 21:19:44 EST 2009 -->
< <TITLE>
< JSModuleGraph (Compiler)
< </TITLE>
< 
< <META NAME="date" CONTENT="2009-11-06">
< 
< <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../dev_javadoc.css" TITLE="Style">
< 
< <SCRIPT type="text/javascript">
< function windowTitle()
< {
<     if (location.href.indexOf('is-external=true') == -1) {
<         parent.document.title="JSModuleGraph (Compiler)";
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> package com.google.javascript.jscomp;
> 
> import com.google.common.collect.Iterables;
> import com.google.common.collect.Maps;
> import com.google.common.collect.Multimap;
> import com.google.common.collect.Multimaps;
> 
> import java.util.ArrayList;
> import java.util.Collection;
> import java.util.Comparator;
> import java.util.HashMap;
> import java.util.Iterator;
> import java.util.List;
> import java.util.Map;
> import java.util.Set;
> import java.util.TreeSet;
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> public class JSModuleGraph {
> 
>   
> 
> 
>   private Map<JSModule, Integer> moduleDepths;
> 
>   
> 
> 
> 
>   private List<List<JSModule>> modulesByDepth;
> 
>   
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>   private Map<JSModule, Set<JSModule>> dependencyMap = Maps.newHashMap();
> 
>   
> 
> 
>   public JSModuleGraph(JSModule[] modulesInDepOrder) {
>     moduleDepths = new HashMap<JSModule, Integer>(modulesInDepOrder.length);
>     modulesByDepth = new ArrayList<List<JSModule>>();
> 
>     for (JSModule module : modulesInDepOrder) {
>       int depth = 0;
>       for (JSModule dep : module.getDependencies()) {
>         Integer depDepth = moduleDepths.get(dep);
>         if (depDepth == null) {
>           throw new ModuleDependenceException(String.format(
>               "Modules not in dependency order: %s preceded %s",
>               module.getName(), dep.getName()),
>               module, dep);
>         }
>         depth = Math.max(depth, depDepth + 1);
>       }
> 
>       moduleDepths.put(module, depth);
>       if (depth == modulesByDepth.size()) {
>         modulesByDepth.add(new ArrayList<JSModule>());
>       }
>       modulesByDepth.get(depth).add(module);
20,368c96,158
< }
< </SCRIPT>
< <NOSCRIPT>
< </NOSCRIPT>
< 
< </HEAD>
< 
< <BODY BGCOLOR="white" onload="windowTitle();">
< <HR>
< 
< 
< <!-- ========= START OF TOP NAVBAR ======= -->
< <A NAME="navbar_top"><!-- --></A>
< <A HREF="#skip-navbar_top" title="Skip navigation links"></A>
< <TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
< <TR>
< <TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
< <A NAME="navbar_top_firstrow"><!-- --></A>
< <TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
<   <TR ALIGN="center" VALIGN="top">
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
<   </TR>
< </TABLE>
< </TD>
< <TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
< </EM>
< </TD>
< </TR>
< 
< <TR>
< <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
< &nbsp;<A HREF="../../../../com/google/javascript/jscomp/JSModule.html" title="class in com.google.javascript.jscomp"><B>PREV CLASS</B></A>&nbsp;
< &nbsp;<A HREF="../../../../com/google/javascript/jscomp/JSModuleGraph.ModuleDependenceException.html" title="class in com.google.javascript.jscomp"><B>NEXT CLASS</B></A></FONT></TD>
< <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
<   <A HREF="../../../../index.html?com/google/javascript/jscomp/JSModuleGraph.html" target="_top"><B>FRAMES</B></A>  &nbsp;
< &nbsp;<A HREF="JSModuleGraph.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
< &nbsp;<SCRIPT type="text/javascript">
<   <!--
<   if(window==top) {
<     document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
<   }
<   
< </SCRIPT>
< <NOSCRIPT>
<   <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
< </NOSCRIPT>
< 
< 
< </FONT></TD>
< </TR>
< <TR>
< <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
<   SUMMARY:&nbsp;<A HREF="#nested_class_summary">NESTED</A>&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
< <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
< DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
< </TR>
< </TABLE>
< <A NAME="skip-navbar_top"></A>
< <!-- ========= END OF TOP NAVBAR ========= -->
< 
< <HR>
< <!-- ======== START OF CLASS DATA ======== -->
< <H2>
< <FONT SIZE="-1">
< com.google.javascript.jscomp</FONT>
< <BR>
< Class JSModuleGraph</H2>
< <PRE>
< <A HREF="http:
<   <IMG SRC="../../../../resources/inherit.gif" ALT="extended by "><B>com.google.javascript.jscomp.JSModuleGraph</B>
< </PRE>
< <HR>
< <DL>
< <DT><PRE>public class <B>JSModuleGraph</B><DT>extends <A HREF="http:
< </PRE>
< 
< <P>
< A <A HREF="../../../../com/google/javascript/jscomp/JSModule.html" title="class in com.google.javascript.jscomp"><CODE>JSModule</CODE></A> dependency graph that assigns a depth to each module and
<  can answer depth-related queries about them. For the purposes of this class,
<  a module's depth is defined as the number of hops in the longest path from
<  the module to a module with no dependencies.
< <P>
< 
< <P>
< <HR>
< 
< <P>
< <!-- ======== NESTED CLASS SUMMARY ======== -->
< 
< <A NAME="nested_class_summary"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
< <B>Nested Class Summary</B></FONT></TH>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>protected static&nbsp;class</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/JSModuleGraph.ModuleDependenceException.html" title="class in com.google.javascript.jscomp">JSModuleGraph.ModuleDependenceException</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< </TABLE>
< &nbsp;
< <!-- ======== CONSTRUCTOR SUMMARY ======== -->
< 
< <A NAME="constructor_summary"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
< <B>Constructor Summary</B></FONT></TH>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/JSModuleGraph.html#JSModuleGraph(com.google.javascript.jscomp.JSModule[])">JSModuleGraph</A></B>(<A HREF="../../../../com/google/javascript/jscomp/JSModule.html" title="class in com.google.javascript.jscomp">JSModule</A>[]&nbsp;modulesInDepOrder)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a module graph from a list of modules in dependency order.</TD>
< </TR>
< </TABLE>
< &nbsp;
< <!-- ========== METHOD SUMMARY =========== -->
< 
< <A NAME="method_summary"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
< <B>Method Summary</B></FONT></TH>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/JSModuleGraph.html#coalesceDuplicateFiles()">coalesceDuplicateFiles</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Replaces any files that are found multiple times with a single instance in
<  the closest parent module that is common to all modules where it appears.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/JSModuleGraph.html#dependsOn(com.google.javascript.jscomp.JSModule, com.google.javascript.jscomp.JSModule)">dependsOn</A></B>(<A HREF="../../../../com/google/javascript/jscomp/JSModule.html" title="class in com.google.javascript.jscomp">JSModule</A>&nbsp;src,
<           <A HREF="../../../../com/google/javascript/jscomp/JSModule.html" title="class in com.google.javascript.jscomp">JSModule</A>&nbsp;m)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Determines whether this module depends on a given module.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/jscomp/JSModule.html" title="class in com.google.javascript.jscomp">JSModule</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/JSModuleGraph.html#getDeepestCommonDependencyInclusive(java.util.Collection)">getDeepestCommonDependencyInclusive</A></B>(<A HREF="http:
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the deepest common dependency of the given modules.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/jscomp/JSModule.html" title="class in com.google.javascript.jscomp">JSModule</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/JSModuleGraph.html#getDeepestCommonDependencyInclusive(com.google.javascript.jscomp.JSModule, com.google.javascript.jscomp.JSModule)">getDeepestCommonDependencyInclusive</A></B>(<A HREF="../../../../com/google/javascript/jscomp/JSModule.html" title="class in com.google.javascript.jscomp">JSModule</A>&nbsp;m1,
<                                     <A HREF="../../../../com/google/javascript/jscomp/JSModule.html" title="class in com.google.javascript.jscomp">JSModule</A>&nbsp;m2)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Finds the deepest common dependency of two modules, including the
<  modules themselves.</TD>
< </TR>
< </TABLE>
< &nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
< <TH ALIGN="left"><B>Methods inherited from class java.lang.<A HREF="http:
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD><CODE><A HREF="http:
< </TR>
< </TABLE>
< &nbsp;
< <P>
< 
< <!-- ========= CONSTRUCTOR DETAIL ======== -->
< 
< <A NAME="constructor_detail"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
< <B>Constructor Detail</B></FONT></TH>
< </TR>
< </TABLE>
< 
< <A NAME="JSModuleGraph(com.google.javascript.jscomp.JSModule[])"><!-- --></A><H3>
< JSModuleGraph</H3>
< <PRE>
< public <B>JSModuleGraph</B>(<A HREF="../../../../com/google/javascript/jscomp/JSModule.html" title="class in com.google.javascript.jscomp">JSModule</A>[]&nbsp;modulesInDepOrder)</PRE>
< <DL>
< <DD>Creates a module graph from a list of modules in dependency order.
< <P>
< </DL>
< 
< <!-- ============ METHOD DETAIL ========== -->
< 
< <A NAME="method_detail"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
< <B>Method Detail</B></FONT></TH>
< </TR>
< </TABLE>
< 
< <A NAME="dependsOn(com.google.javascript.jscomp.JSModule, com.google.javascript.jscomp.JSModule)"><!-- --></A><H3>
< dependsOn</H3>
< <PRE>
< public boolean <B>dependsOn</B>(<A HREF="../../../../com/google/javascript/jscomp/JSModule.html" title="class in com.google.javascript.jscomp">JSModule</A>&nbsp;src,
<                          <A HREF="../../../../com/google/javascript/jscomp/JSModule.html" title="class in com.google.javascript.jscomp">JSModule</A>&nbsp;m)</PRE>
< <DL>
< <DD>Determines whether this module depends on a given module. Note that a
<  module never depends on itself, as that dependency would be cyclic.
< <P>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getDeepestCommonDependencyInclusive(com.google.javascript.jscomp.JSModule, com.google.javascript.jscomp.JSModule)"><!-- --></A><H3>
< getDeepestCommonDependencyInclusive</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/jscomp/JSModule.html" title="class in com.google.javascript.jscomp">JSModule</A> <B>getDeepestCommonDependencyInclusive</B>(<A HREF="../../../../com/google/javascript/jscomp/JSModule.html" title="class in com.google.javascript.jscomp">JSModule</A>&nbsp;m1,
<                                                     <A HREF="../../../../com/google/javascript/jscomp/JSModule.html" title="class in com.google.javascript.jscomp">JSModule</A>&nbsp;m2)</PRE>
< <DL>
< <DD>Finds the deepest common dependency of two modules, including the
<  modules themselves.
< <P>
< <DD><DL>
< <DT><B>Parameters:</B><DD><CODE>m1</CODE> - A module in this graph<DD><CODE>m2</CODE> - A module in this graph
< <DT><B>Returns:</B><DD>The deepest common dep of <code>m1</code> and <code>m2</code>, or null if
<      they have no common dependencies</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getDeepestCommonDependencyInclusive(java.util.Collection)"><!-- --></A><H3>
< getDeepestCommonDependencyInclusive</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/jscomp/JSModule.html" title="class in com.google.javascript.jscomp">JSModule</A> <B>getDeepestCommonDependencyInclusive</B>(<A HREF="http:
< <DL>
< <DD>Returns the deepest common dependency of the given modules.
< <P>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="coalesceDuplicateFiles()"><!-- --></A><H3>
< coalesceDuplicateFiles</H3>
< <PRE>
< public void <B>coalesceDuplicateFiles</B>()</PRE>
< <DL>
< <DD>Replaces any files that are found multiple times with a single instance in
<  the closest parent module that is common to all modules where it appears.
< 
<  JSCompiler normally errors if you attempt to compile modules containing the
<  same file.  This method can be used to remove duplicates before compiling
<  to avoid such an error.
< <P>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <!-- ========= END OF CLASS DATA ========= -->
< <HR>
< 
< 
< <!-- ======= START OF BOTTOM NAVBAR ====== -->
< <A NAME="navbar_bottom"><!-- --></A>
< <A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
< <TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
< <TR>
< <TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
< <A NAME="navbar_bottom_firstrow"><!-- --></A>
< <TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
<   <TR ALIGN="center" VALIGN="top">
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
<   </TR>
< </TABLE>
< </TD>
< <TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
< </EM>
< </TD>
< </TR>
< 
< <TR>
< <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
< &nbsp;<A HREF="../../../../com/google/javascript/jscomp/JSModule.html" title="class in com.google.javascript.jscomp"><B>PREV CLASS</B></A>&nbsp;
< &nbsp;<A HREF="../../../../com/google/javascript/jscomp/JSModuleGraph.ModuleDependenceException.html" title="class in com.google.javascript.jscomp"><B>NEXT CLASS</B></A></FONT></TD>
< <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
<   <A HREF="../../../../index.html?com/google/javascript/jscomp/JSModuleGraph.html" target="_top"><B>FRAMES</B></A>  &nbsp;
< &nbsp;<A HREF="JSModuleGraph.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
< &nbsp;<SCRIPT type="text/javascript">
<   <!--
<   if(window==top) {
<     document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
<   }
<   
< </SCRIPT>
< <NOSCRIPT>
<   <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
< </NOSCRIPT>
< 
< 
< </FONT></TD>
< </TR>
< <TR>
< <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
<   SUMMARY:&nbsp;<A HREF="#nested_class_summary">NESTED</A>&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
< <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
< DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
< </TR>
< </TABLE>
< <A NAME="skip-navbar_bottom"></A>
< <!-- ======== END OF BOTTOM NAVBAR ======= -->
< 
< <HR>
< 
<         <div id="footer">
<           <div id="footerlogo">
<             <img src="http:
<                  alt="Google colored balls">
<           </div>
< 
<           <div id="copyright">
<           <p>&copy; 2009 Google -
<             <a href="http:
<             <a href="http:
<             <a href="http:
<           </p>
<           </div>
<         </div>
---
>   }
> 
>   
> 
> 
>   Iterable<JSModule> getAllModules() {
>     return moduleDepths.keySet();
>   }
> 
>   
> 
> 
>   int getModuleCount() {
>     return moduleDepths.size();
>   }
> 
>   
> 
> 
>   JSModule getRootModule() {
>     return Iterables.getOnlyElement(modulesByDepth.get(0));
>   }
> 
>   
> 
> 
> 
> 
> 
>   int getDepth(JSModule module) {
>     return moduleDepths.get(module);
>   }
> 
>   
> 
> 
> 
>   public boolean dependsOn(JSModule src, JSModule m) {
>     Set<JSModule> deps = dependencyMap.get(src);
>     if (deps == null) {
>       deps = getTransitiveDepsDeepestFirst(src);
>       dependencyMap.put(src, deps);
>     }
> 
>     return deps.contains(m);
>   }
> 
>   
> 
> 
> 
> 
> 
> 
> 
> 
>   JSModule getDeepestCommonDependency(JSModule m1, JSModule m2) {
>     int m1Depth = getDepth(m1);
>     int m2Depth = getDepth(m2);
>     
>     
>     for (int depth = Math.min(m1Depth, m2Depth) - 1; depth >= 0; depth--) {
>       List<JSModule> modulesAtDepth = modulesByDepth.get(depth);
371,372c161,308
< </BODY>
< </HTML>
---
>       for (int i = modulesAtDepth.size() - 1; i >= 0; i--) {
>         JSModule m = modulesAtDepth.get(i);
>         if (dependsOn(m1, m) && dependsOn(m2, m)) {
>           return m;
>         }
>       }
>     }
>     return null;
>   }
> 
>   
> 
> 
> 
> 
> 
> 
> 
> 
>   public JSModule getDeepestCommonDependencyInclusive(
>       JSModule m1, JSModule m2) {
>     if (m2 == m1 || dependsOn(m2, m1)) {
>       return m1;
>     } else if (dependsOn(m1, m2)) {
>       return m2;
>     }
> 
>     return getDeepestCommonDependency(m1, m2);
>   }
> 
>   
>   public JSModule getDeepestCommonDependencyInclusive(
>       Collection<JSModule> modules) {
>     Iterator<JSModule> iter = modules.iterator();
>     JSModule dep = iter.next();
>     while (iter.hasNext()) {
>       dep = getDeepestCommonDependencyInclusive(dep, iter.next());
>     }
>     return dep;
>   }
> 
>   
> 
> 
> 
> 
> 
> 
> 
>   Set<JSModule> getTransitiveDepsDeepestFirst(JSModule m) {
>     Set<JSModule> deps = dependencyMap.get(m);
>     if (deps != null) {
>       return deps;
>     }
>     deps = new TreeSet<JSModule>(new InverseDepthComparator());
>     addDeps(deps, m);
>     dependencyMap.put(m, deps);
>     return deps;
>   }
> 
>   
> 
> 
>   private void addDeps(Set<JSModule> deps, JSModule m) {
>     for (JSModule dep : m.getDependencies()) {
>       deps.add(dep);
>       addDeps(deps, dep);
>     }
>   }
> 
>   
> 
> 
> 
> 
> 
> 
> 
>   public void coalesceDuplicateFiles() {
>     Multimap<String, JSModule> fileRefs = Multimaps.newLinkedHashMultimap();
>     for (JSModule module : moduleDepths.keySet()) {
>       for (CompilerInput jsFile : module.getInputs()) {
>         fileRefs.put(jsFile.getName(), module);
>       }
>     }
> 
>     for (String path : fileRefs.keySet()) {
>       Collection<JSModule> refModules = fileRefs.get(path);
>       if (refModules.size() > 1) {
>         JSModule depModule = getDeepestCommonDependencyInclusive(refModules);
>         CompilerInput file = refModules.iterator().next().getByName(path);
>         for (JSModule module : refModules) {
>           if (module != depModule) {
>             module.removeByName(path);
>           }
>         }
>         if (!refModules.contains(depModule)) {
>           depModule.add(file);
>         }
>       }
>     }
>   }
> 
>   
> 
> 
> 
>   private class InverseDepthComparator implements Comparator<JSModule> {
>     public int compare(JSModule m1, JSModule m2) {
>       if (m1 == m2) {
>         return 0;
>       }
>       int d1 = getDepth(m1);
>       int d2 = getDepth(m2);
>       return d2 < d1 ? -1 : d2 == d1 ? m2.getName().compareTo(m1.getName()) : 1;
>     }
>   }
> 
>   
> 
> 
> 
> 
> 
>   protected static class ModuleDependenceException
>       extends IllegalArgumentException {
>     private static final long serialVersionUID = 1;
> 
>     private final JSModule module;
>     private final JSModule dependentModule;
> 
>     protected ModuleDependenceException(String message,
>         JSModule module, JSModule dependentModule) {
>       super(message);
>       this.module = module;
>       this.dependentModule = dependentModule;
>     }
> 
>     public JSModule getModule() {
>       return module;
>     }
> 
>     public JSModule getDependentModule() {
>       return dependentModule;
>     }
>   }
> 
> }
