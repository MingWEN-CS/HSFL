















package com.google.javascript.jscomp;

import com.google.common.base.Preconditions;
import com.google.common.collect.Lists;
import com.google.javascript.jscomp.NodeTraversal.ScopedCallback;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.Token;

import java.util.Deque;
import java.util.List;


















class OptimizeArgumentsArray implements CompilerPass, ScopedCallback {

  
  
  private static final String ARGUMENTS = "arguments";

  
  
  private static final String PARAMETER_PREFIX =
      "JSCompiler_OptimizeArgumentsArray_p";

  
  private final String paramPredix;

  
  
  private int uniqueId = 0;

  
  private final AbstractCompiler compiler;

  
  private final Deque<List<Node>> argumentsAccessStack = Lists.newLinkedList();

  
  private List<Node> currentArgumentsAccess = null;

  



  OptimizeArgumentsArray(AbstractCompiler compiler) {
    this(compiler, PARAMETER_PREFIX);
  }

  



  OptimizeArgumentsArray(AbstractCompiler compiler, String paramPrefix) {
    this.compiler = Preconditions.checkNotNull(compiler);
    this.paramPredix = Preconditions.checkNotNull(paramPrefix);
  }

  @Override
  public void process(Node externs, Node root) {
    NodeTraversal.traverse(compiler, Preconditions.checkNotNull(root), this);
  }

  @Override
  public void enterScope(NodeTraversal traversal) {
    Preconditions.checkNotNull(traversal);

    
    
    Node function = traversal.getScopeRoot();
    if (!function.isFunction()) {
      return;
    }

    
    
    if (currentArgumentsAccess != null) {
      argumentsAccessStack.push(currentArgumentsAccess);
    }
    currentArgumentsAccess = Lists.newLinkedList();
  }

  @Override
  public void exitScope(NodeTraversal traversal) {
    Preconditions.checkNotNull(traversal);

    
    
    
    if (currentArgumentsAccess == null) {
      return;
    }

    
    
    if (tryReplaceArguments(traversal.getScope())) {
      traversal.getCompiler().reportCodeChange();
    }

    
    
    
    
    
    if (!argumentsAccessStack.isEmpty()) {
      currentArgumentsAccess = argumentsAccessStack.pop();
    } else {
      currentArgumentsAccess = null;
    }
  }

  @Override
  public boolean shouldTraverse(
      NodeTraversal nodeTraversal, Node node, Node parent) {
    
    return true;
  }

  @Override
  public void visit(NodeTraversal traversal, Node node, Node parent) {
    Preconditions.checkNotNull(traversal);
    Preconditions.checkNotNull(node);


    

    
    
    
    if (currentArgumentsAccess == null) {
      return;
    }

    
    
    if (node.isName() && ARGUMENTS.equals(node.getString())) {
      currentArgumentsAccess.add(node);
    }
  }

  






  private boolean tryReplaceArguments(Scope scope) {

    Node parametersList = scope.getRootNode().getFirstChild().getNext();
    Preconditions.checkState(parametersList.isLP());

    
    
    boolean changed = false;

    
    
    int numNamedParameter = parametersList.getChildCount();

    
    
    
    int highestIndex = numNamedParameter - 1;

    
    
    for (Node ref : currentArgumentsAccess) {

      Node getElem = ref.getParent();

      
      
      
      if (getElem.getType() != Token.GETELEM) {
        return false;
      }

      Node index = ref.getNext();

      
      
      if (index.getType() != Token.NUMBER) {
        
        
        
        
        return false; 
      }

      Node getElemParent = getElem.getParent();
      
      
      if (getElemParent.isCall() &&
          getElemParent.getFirstChild() == getElem) {
        
        
        return false;
      }

      
      
      int value = (int) index.getDouble();
      if (value > highestIndex) {
        highestIndex = value;
      }
    }

    
    
    
    
    int numExtraArgs = highestIndex - numNamedParameter + 1;

    
    String[] argNames = new String[numExtraArgs];

    
    
    for (int i = 0; i < numExtraArgs; i++) {
      String name = getNewName();
      argNames[i] = name;
      parametersList.addChildrenToBack(Node.newString(Token.NAME, name));
      changed = true;
    }

    
    for (Node ref : currentArgumentsAccess) {
      Node index = ref.getNext();

      
      if (index.getType() != Token.NUMBER) {
        continue;
      }
      int value = (int) index.getDouble();

      
      if (value >= numNamedParameter) {
        ref.getParent().getParent().replaceChild(ref.getParent(),
            Node.newString(Token.NAME, argNames[value - numNamedParameter]));
      } else {

        
        
        Node name = parametersList.getFirstChild();

        
        
        
        for (int i = 0; i < value; i++) {
          name = name.getNext();
        }
        ref.getParent().getParent().replaceChild(ref.getParent(),
            Node.newString(Token.NAME, name.getString()));
      }
      changed = true;
    }

    return changed;
  }

  


  private String getNewName() {
    return paramPredix + uniqueId++;
  }
}
