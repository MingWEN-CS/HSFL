18a19
> import com.google.common.base.Preconditions;
250,251c251,252
<       Reference decl = references.get(0);
<       if (!decl.isInitializingDeclaration()) {
---
>       Reference init = getInitializingReference();
>       if (init == null) {
255c256,257
<       BasicBlock declBlock = decl.getBasicBlock();
---
>       Preconditions.checkState(references.get(0).isDeclaration());
>       BasicBlock initBlock = init.getBasicBlock();
257c259
<         if (!declBlock.provablyExecutesBefore(
---
>         if (!initBlock.provablyExecutesBefore(
266c268,325
<     boolean isNeverReassigned() {
---
>     
> 
> 
> 
> 
> 
> 
>     private boolean isInitializingDeclarationAt(int index) {
>       Reference maybeInit = references.get(index);
>       if (maybeInit.isInitializingDeclaration()) {
>         
>         
>         
>         return true;
>       }
>       return false;
>     }
>     
>     
> 
> 
> 
> 
> 
>     private boolean isInitializingAssignmentAt(int index) {
>       if (index < references.size() && index > 0) {
>         Reference maybeDecl = references.get(index-1);
>         if (maybeDecl.isVarDeclaration()) {
>           Preconditions.checkState(!maybeDecl.isInitializingDeclaration());
>           Reference maybeInit = references.get(index);
>           if (maybeInit.isSimpleAssignmentToName()) {
>             return true;
>           }
>         }
>       }
>       return false;
>     }    
> 
>     
> 
> 
> 
> 
> 
> 
>     Reference getInitializingReference() {
>       if (isInitializingDeclarationAt(0)) {
>         return references.get(0);
>       } else if (isInitializingAssignmentAt(1)) {
>         return references.get(1);
>       }
>       return null;
>     }
> 
>     
> 
> 
>     Reference getInitializingReferenceForConstants() {
268,270c327,329
<       for (int i = 1; i < size; i++) {
<         if (references.get(i).isLvalue()) {
<           return false;
---
>       for (int i = 0; i < size; i++) {
>         if (isInitializingDeclarationAt(i) || isInitializingAssignmentAt(i)) {
>           return references.get(i);
272a332,333
>       return null;
>     }
274c335,359
<       return true;
---
>     
> 
> 
>     boolean isAssignedOnce() {
>       boolean assigned = false;
>       int size = references.size();
>       for (int i = 0; i < size; i++) {
>         Reference ref = references.get(i);
>         if (ref.isLvalue() || ref.isInitializingDeclaration()) {
>           if (!assigned) {
>             assigned = true;
>           } else {
>             return false;
>           }
>         }
>       }
>       return assigned;
>     }
> 
>     boolean firstReferenceIsAssigningDeclaration() {
>       int size = references.size();
>       if (size > 0 && references.get(0).isInitializingDeclaration()) {
>         return true;
>       }
>       return false;
322a408,417
>     boolean isVarDeclaration() {
>       return parent.getType() == Token.VAR;
>     }
> 
>     boolean isHoistedFunction() {
>       return NodeUtil.isFunctionDeclaration(parent) &&
>           (grandparent.getType() == Token.SCRIPT ||
>            grandparent.getParent().getType() == Token.FUNCTION);
>     }
> 
332a428,435
>    
> 
> 
> 
>     Node getAssignedValue() {
>       return NodeUtil.getAssignedValue(getNameNode());
>     }
> 
352c455
<     
---
> 
357c460
<       } 
---
>       }
360c463,468
<     
---
> 
>     boolean isSimpleAssignmentToName() {
>       return parent.getType() == Token.ASSIGN
>           && parent.getFirstChild() == nameNode;
>     }
> 
363c471
<       return parentType == Token.VAR 
---
>       return (parentType == Token.VAR && nameNode.getFirstChild() != null)
