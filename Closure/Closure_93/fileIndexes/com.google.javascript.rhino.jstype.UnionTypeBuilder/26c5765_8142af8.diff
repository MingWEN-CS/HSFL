39,40d38
<  
< package com.google.javascript.rhino.jstype;
42,44c40
< import com.google.common.collect.ImmutableSet;
< import com.google.common.collect.Lists;
< import com.google.javascript.rhino.jstype.UnionType;
---
> package com.google.javascript.rhino.jstype;
50a47,50
> import com.google.common.collect.ImmutableList;
> import com.google.common.collect.Lists;
> import com.google.javascript.rhino.jstype.UnionType;
> 
51a52,54
> import java.util.Collection;
> import java.util.Collections;
> import java.util.Comparator;
54d56
< import java.util.Set;
107,118c109,131
<         if (!alternate.isUnknownType()) {
<           Iterator<JSType> it = alternates.iterator();
<           while (it.hasNext()) {
<             JSType current = it.next();
<             if (!current.isUnknownType()) {
<               if (alternate.isSubtype(current)) {
<                 
<                 return this;
<               } else if (current.isSubtype(alternate)) {
<                 
<                 it.remove();
<               }
---
>         if (alternates.size() > MAX_UNION_SIZE) {
>           return this;
>         }
> 
>         
>         
>         
>         Iterator<JSType> it = alternates.iterator();
>         while (it.hasNext()) {
>           JSType current = it.next();
>           if (alternate.isUnknownType() ||
>               current.isUnknownType()) {
>             if (alternate.isEquivalentTo(current)) {
>               
>               return this;
>             }
>           } else {
>             if (alternate.isSubtype(current)) {
>               
>               return this;
>             } else if (current.isSubtype(alternate)) {
>               
>               it.remove();
147,148c160
<         Set<JSType> alternateSet = ImmutableSet.copyOf(alternates);
<         int size = alternateSet.size();
---
>         int size = alternates.size();
153c165
<             result = new UnionType(registry, alternateSet);
---
>             result = new UnionType(registry, getAlternateListCopy());
162a175,190
>   }
> 
>   private static final Comparator<JSType> typeSorter =
>       new Comparator<JSType>() {
>     @Override public int compare(JSType a, JSType b) {
>       return b.hashCode() - a.hashCode();
>     }
>   };
> 
>   private Collection<JSType> getAlternateListCopy() {
>     
>     
>     
>     Collections.sort(alternates, typeSorter);
> 
>     return ImmutableList.copyOf(alternates);
