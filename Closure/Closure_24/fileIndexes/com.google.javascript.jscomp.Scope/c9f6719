















package com.google.javascript.jscomp;

import static com.google.javascript.rhino.jstype.JSTypeNative.GLOBAL_THIS;

import com.google.common.base.Preconditions;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.Token;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StaticSlot;

import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;



















public class Scope implements StaticScope<JSType> {
  private final Map<String, Var> vars = new LinkedHashMap<String, Var>();
  private final Scope parent;
  private final Node rootNode;

  
  private final ObjectType thisType;

  
  private final boolean isBottom;

  
  public static class Var implements StaticSlot<JSType> {
    
    String name;

    
    Node nameNode;

    


    private JSType type;

    


    private JSDocInfo info = null;

    




    private final boolean typeInferred;

    
    CompilerInput input;

    
    boolean referenced;

    
    boolean isDefine;

    



    int index;

    
    Scope scope;

    




    private Var(boolean inferred) {
      this.typeInferred = inferred;
    }

    


    public String getName() {
      return name;
    }

    


    public Node getParentNode() {
      return nameNode == null ? null : nameNode.getParent();
    }

    




    int getLocalVarIndex() {
      int num = index;
      Scope s = scope.getParent();
      if (s == null) {
        throw new IllegalArgumentException("Var is not local");
      }
      while (s.getParent() != null) {
        num += s.getVarCount();
        s = s.getParent();
      }
      return num;
    }

    


    public boolean isGlobal() {
      return scope.isGlobal();
    }

    


    public boolean isLocal() {
      return scope.isLocal();
    }

    


    boolean isExtern() {
      return input == null || input.isExtern();
    }

    



    public boolean isConst() {
      return NodeUtil.isConstantName(nameNode);
    }

    



    public boolean isDefine() {
      return isDefine;
    }

    public Node getInitialValue() {
      Node parent = getParentNode();
      return parent.getType() == Token.FUNCTION ?
          parent : nameNode.getFirstChild();
    }

    



    public JSType getType() {
      return type;
    }

    


    public Node getNameNode() {
      return nameNode;
    }

    


    public JSDocInfo getJSDocInfo() {
      return info;
    }

    



    void setType(JSType type) {
      Preconditions.checkState(isTypeInferred());
      this.type = type;
    }

    



    public boolean isTypeInferred() {
      return typeInferred;
    }

    public String getInputName() {
      if (input == null)
        return "<non-file>";
      else
        return input.getName();
    }

    public boolean isNoShadow() {
      if (info != null && info.isNoShadow()) {
        return true;
      } else {
        return false;
      }
    }

    @Override public boolean equals(Object other) {
      if (!(other instanceof Var)) {
        return false;
      }

      Var otherVar = (Var) other;
      return otherVar.nameNode == nameNode;
    }

    @Override public int hashCode() {
      return nameNode.hashCode();
    }

    @Override
    public String toString() {
      return "Scope.Var " + name;
    }
  }

  




  Scope(Scope parent, Node rootNode) {
    Preconditions.checkNotNull(parent);
    Preconditions.checkArgument(rootNode != parent.rootNode);

    this.parent = parent;
    this.rootNode = rootNode;
    JSType nodeType = rootNode.getJSType();
    if (nodeType != null && nodeType instanceof FunctionType) {
      thisType = ((FunctionType) nodeType).getTypeOfThis();
    } else {
      thisType = parent.thisType;
    }
    this.isBottom = false;
  }


  



  Scope(Node rootNode, AbstractCompiler compiler) {
    this.parent = null;
    this.rootNode = rootNode;
    thisType = compiler.getTypeRegistry().getNativeObjectType(GLOBAL_THIS);
    this.isBottom = false;
  }

  




  Scope(Node rootNode, ObjectType thisType) {
    this.parent = null;
    this.rootNode = rootNode;
    this.thisType = thisType;
    this.isBottom = true;
  }

  
  boolean isBottom() {
    return isBottom;
  }

  



  public Node getRootNode() {
    return rootNode;
  }

  public Scope getParent() {
    return parent;
  }

  Scope getGlobalScope() {
    Scope result = this;
    while (result.getParent() != null) {
      result = result.getParent();
    }
    return result;
  }

  @Override
  public StaticScope<JSType> getParentScope() {
    return parent;
  }

  


  public ObjectType getTypeOfThis() {
    return thisType;
  }

  







  Var declare(String name, Node nameNode, JSType type, CompilerInput input) {
    return declare(name, nameNode, type, input, true);
  }

  









  Var declare(String name, Node nameNode,
      JSType type, CompilerInput input, boolean inferred) {
    Preconditions.checkState(name != null && name.length() > 0);

    
    Preconditions.checkState(vars.get(name) == null);

    Var var = new Var(inferred);
    var.name = name;
    var.nameNode = nameNode;
    var.type = type;
    var.referenced = false;
    var.scope = this;
    var.index = vars.size();
    var.input = input;

    
    
    JSDocInfo info = NodeUtil.getInfoForNameNode(nameNode);

    var.isDefine = info != null && info.isDefine();
    var.info = info;

    vars.put(name, var);
    return var;
  }

  



  void undeclare(Var var) {
    Preconditions.checkState(var.scope == this);
    Preconditions.checkState(vars.get(var.name) == var);
    vars.remove(var.name);
  }

  public StaticSlot<JSType> getSlot(String name) {
    return getVar(name);
  }

  public StaticSlot<JSType> getOwnSlot(String name) {
    return vars.get(name);
  }

  


  public Var getVar(String name) {
    Var var = vars.get(name);
    if (var != null) {
      return var;
    } else if (parent != null) { 
      return parent.getVar(name);
    } else {
      return null;
    }
  }

  


  public boolean isDeclared(String name, boolean recurse) {
    Scope scope = this;
    if (scope.vars.containsKey(name))
      return true;

    if (scope.parent != null && recurse) {
      return scope.parent.isDeclared(name, recurse);
    }
    return false;
  }

  


  public Iterator<Var> getVars() {
    return vars.values().iterator();
  }

  


  public int getVarCount() {
    return vars.size();
  }

  


  public boolean isGlobal() {
    return parent == null;
  }

  


  public boolean isLocal() {
    return !isGlobal();
  }
}
