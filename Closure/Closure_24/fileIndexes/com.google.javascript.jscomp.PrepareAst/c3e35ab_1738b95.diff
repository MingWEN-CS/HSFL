139a140,161
>     public void visit(NodeTraversal t, Node n, Node parent) {
>       switch (n.getType()) {
>         case Token.CALL:
>           annotateCalls(n);
>           break;
> 
>         case Token.FUNCTION:
>           annotateFunctions(n, parent);
>           annotateDispatchers(n, parent);
>           break;
> 
>         case Token.NAME:
>         case Token.STRING:
>           annotateConstants(n, parent);
>           break;
> 
>         case Token.OBJECTLIT:
>           normalizeObjectLitJsDocs(n);
>           break;
>       }
>     }
> 
143a166,167
>     private void annotateCalls(Node n) {
>       Preconditions.checkState(n.getType() == Token.CALL);
144a169,174
>       
>       
>       Node first = n.getFirstChild();
>       if (!NodeUtil.isGet(first)) {
>         n.putBooleanProp(Node.FREE_CALL, true);
>       }
145a176,182
>       
>       
>       if (first.getType() == Token.NAME &&
>           "eval".equals(first.getString())) {
>         first.putBooleanProp(Node.DIRECT_EVAL, true);
>       }
>     }
146a184
>     
148a187,196
>     private void annotateDispatchers(Node n, Node parent) {
>       Preconditions.checkState(n.getType() == Token.FUNCTION);
>       if (parent.getJSDocInfo() != null
>           && parent.getJSDocInfo().isJavaDispatch()) {
>         if (parent.getType() == Token.ASSIGN) {
>           Preconditions.checkState(parent.getLastChild() == n);
>           n.putBooleanProp(Node.IS_DISPATCHER, true);
>         }
>       }
>     }
149a198
>     
156,168d204
<     @SuppressWarnings("fallthrough")
<     public void visit(NodeTraversal t, Node n, Node parent) {
<       int nType = n.getType();
<       switch (nType) {
<         case Token.STRING:
<           
<           
<           
<           if (parent.getType() != Token.OBJECTLIT &&
<               parent.getType() != Token.GETPROP) {
<             break;
<           }
<           
170,180d205
<         case Token.NAME:
<           String nString = n.getString();
<           if (nType == Token.NAME &&
<               n.getParent().getType() == Token.CALL &&
<               "eval".equals(nString)) {
<             n.putBooleanProp(Node.DIRECT_EVAL, true);
<           }
<           if (NodeUtil.isConstantByConvention(convention, n, parent)) {
<             n.putBooleanProp(Node.IS_CONSTANT_NAME, true);
<           }
<           break;
182,193d206
<         case Token.FUNCTION:
<           JSDocInfo fnInfo = n.getJSDocInfo();
<           if (fnInfo == null) {
<             
<             if (parent.getType() == Token.ASSIGN) {
<               
<               fnInfo = parent.getJSDocInfo();
<             } else if (parent.getType() == Token.NAME) {
<               
<               fnInfo = parent.getParent().getJSDocInfo();
<             }
<           }
195,214d207
<           
<           
<           Node args = n.getFirstChild().getNext();
<           for (Node arg = args.getFirstChild();
<                arg != null;
<                arg = arg.getNext()) {
<             String argName = arg.getString();
<             JSTypeExpression typeExpr = fnInfo == null ?
<                 null : fnInfo.getParameterType(argName);
< 
<             if (convention.isOptionalParameter(arg) ||
<                 typeExpr != null && typeExpr.isOptionalArg()) {
<               arg.putBooleanProp(Node.IS_OPTIONAL_PARAM, true);
<             }
<             if (convention.isVarArgsParameter(arg) ||
<                 typeExpr != null && typeExpr.isVarArgs()) {
<               arg.putBooleanProp(Node.IS_VAR_ARGS_PARAM, true);
<             }
<           }
<           break;
216,227c209,221
<         case Token.OBJECTLIT:
<           if (n.getType() == Token.OBJECTLIT) {
<             for (Node key = n.getFirstChild();
<                  key != null; key = key.getNext().getNext()) {
<               Node value = key.getNext();
<               if (key.getJSDocInfo() != null &&
<                   key.getNext().getType() == Token.FUNCTION) {
<                 value.setJSDocInfo(key.getJSDocInfo());
<               }
<             }
<           }
<           break;
---
> 
> 
> 
> 
>     private void normalizeObjectLitJsDocs(Node n) {
>       Preconditions.checkState(n.getType() == Token.OBJECTLIT);
>       for (Node key = n.getFirstChild();
>            key != null; key = key.getNext().getNext()) {
>         Node value = key.getNext();
>         if (key.getJSDocInfo() != null &&
>             key.getNext().getType() == Token.FUNCTION) {
>           value.setJSDocInfo(key.getJSDocInfo());
>         }
228a223,230
>     }
> 
>     
> 
> 
>     private void annotateConstants(Node n, Node parent) {
>       Preconditions.checkState(
>           n.getType() == Token.NAME || n.getType() == Token.STRING);
232a235,245
>       if (n.getType() != Token.STRING
>           || parent.getType() == Token.OBJECTLIT
>           || parent.getType() == Token.GETPROP) {
>         if (NodeUtil.isConstantByConvention(convention, n, parent)) {
>           n.putBooleanProp(Node.IS_CONSTANT_NAME, true);
>         }
>       }
>     }
> 
>     
> 
233a247,259
>     private void annotateFunctions(Node n, Node parent) {
>       Preconditions.checkState(n.getType() == Token.FUNCTION);
>       JSDocInfo fnInfo = n.getJSDocInfo();
>       if (fnInfo == null) {
>         
>         if (parent.getType() == Token.ASSIGN) {
>           
>           fnInfo = parent.getJSDocInfo();
>         } else if (parent.getType() == Token.NAME) {
>           
>           fnInfo = parent.getParent().getJSDocInfo();
>         }
>       }
235,239c261,277
<       if (n.getJSDocInfo() != null && n.getJSDocInfo().isJavaDispatch()) {
<         if (n.getType() == Token.ASSIGN) {
<           Node fnNode = n.getLastChild();
<           Preconditions.checkState(fnNode.getType() == Token.FUNCTION);
<           fnNode.putBooleanProp(Node.IS_DISPATCHER, true);
---
>       
>       
>       Node args = n.getFirstChild().getNext();
>       for (Node arg = args.getFirstChild();
>            arg != null;
>            arg = arg.getNext()) {
>         String argName = arg.getString();
>         JSTypeExpression typeExpr = fnInfo == null ?
>             null : fnInfo.getParameterType(argName);
> 
>         if (convention.isOptionalParameter(arg) ||
>             typeExpr != null && typeExpr.isOptionalArg()) {
>           arg.putBooleanProp(Node.IS_OPTIONAL_PARAM, true);
>         }
>         if (convention.isVarArgsParameter(arg) ||
>             typeExpr != null && typeExpr.isVarArgs()) {
>           arg.putBooleanProp(Node.IS_VAR_ARGS_PARAM, true);
242a281
> 
