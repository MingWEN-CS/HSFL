264,265c264,265
<     boolean isEquivalentTo(Node node, boolean recurse) {
<       return (super.isEquivalentTo(node, recurse)
---
>     boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {
>       return (super.isEquivalentTo(node, compareJsType, recurse)
314,315c314,315
<     boolean isEquivalentTo(Node node, boolean recurse) {
<       return (super.isEquivalentTo(node, recurse)
---
>     boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {
>       return (super.isEquivalentTo(node, compareJsType, recurse)
1382,1389d1381
<   public boolean checkTreeEqualsSilent(Node node2) {
<     return checkTreeEqualsImpl(node2) == null;
<   }
< 
<   
< 
< 
< 
1405c1397
<     if (!isEquivalentTo(node2, false)) {
---
>     if (!isEquivalentTo(node2, false, false)) {
1430,1438d1421
<   public boolean checkTreeTypeAwareEqualsSilent(Node node2) {
<     return checkTreeTypeAwareEqualsImpl(node2) == null;
<   }
< 
<   
< 
< 
< 
< 
1441,1445c1424
<     boolean eq = this.isEquivalentTo(node2, false);
< 
<     eq = eq && JSType.isEquivalent(jsType, node2.getJSType());
< 
<     if (!eq) {
---
>     if (!isEquivalentTo(node2, true, false)) {
1587c1566
<     return isEquivalentTo(node, true);
---
>     return isEquivalentTo(node, false, true);
1591c1570,1583
<   boolean isEquivalentTo(Node node, boolean recurse) {
---
> 
> 
> 
>   public boolean isEquivalentToTyped(Node node) {
>     return isEquivalentTo(node, true, true);
>   }
> 
>   
> 
> 
> 
> 
> 
>   boolean isEquivalentTo(Node node, boolean compareJsType, boolean recurse) {
1597a1590,1593
>     if (compareJsType && !JSType.isEquivalent(jsType, node.getJSType())) {
>       return false;
>     }
> 
1639c1635
<         if (!n.isEquivalentTo(n2, true)) {
---
>         if (!n.isEquivalentTo(n2, compareJsType, true)) {
