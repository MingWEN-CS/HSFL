














package com.google.javascript.jscomp;

import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ObjectType;

import java.util.List;
import java.util.Map;








public class DefaultCodingConvention implements CodingConvention {

  @Override
  public boolean isConstant(String variableName) {
    return false;
  }

  @Override
  public boolean isValidEnumKey(String key) {
    return key != null && key.length() > 0;
  }

  @Override
  public boolean isOptionalParameter(String parameterName) {
    return true; 
  }

  @Override
  public boolean isVarArgsParameter(Node parameter, String name) {
    
    return parameter != null &&
        parameter.getParent().getLastChild() == parameter;
  }

  @Override
  public boolean isExported(String name) {
    return false;
  }

  @Override
  public boolean isPrivate(String name) {
    return false;
  }

  @Override
  public SubclassRelationship getClassesDefinedByCall(Node callNode) {
    return null;
  }

  @Override
  public boolean isSuperClassReference(String propertyName) {
    return false;
  }

  @Override
  public String extractClassNameIfProvide(Node node, Node parent) {
    String message = "only implemented in GoogleCodingConvention";
    throw new UnsupportedOperationException(message);
  }

  @Override
  public String extractClassNameIfRequire(Node node, Node parent) {
    String message = "only implemented in GoogleCodingConvention";
    throw new UnsupportedOperationException(message);
  }

  @Override
  public String getExportPropertyFunction() {
    return null;
  }

  @Override
  public String getExportSymbolFunction() {
    return null;
  }

  @Override
  public List<String> identifyTypeDeclarationCall(Node n) {
    return null;
  }

  @Override
  public String identifyTypeDefAssign(Node n) {
    return null;
  }

  @Override
  public void applySubclassRelationship(FunctionType parentCtor,
      FunctionType childCtor, SubclassType type) {
    
  }

  @Override
  public String getAbstractMethodName() {
    return null;
  }

  @Override
  public String getSingletonGetterClassName(Node callNode) {
    return null;
  }

  @Override
  public void applySingletonGetter(FunctionType functionType,
      FunctionType getterType, ObjectType objectType) {
    
  }

  @Override
  public DelegateRelationship getDelegateRelationship(Node callNode) {
    return null;
  }

  @Override
  public void applyDelegateRelationship(
      ObjectType delegateSuperclass, ObjectType delegateBase,
      ObjectType delegator, FunctionType delegateProxy,
      FunctionType findDelegate) {
    
  }

  @Override
  public String getDelegateSuperclassName() {
    return null;
  }

  @Override
  public void defineDelegateProxyProperties(
      JSTypeRegistry registry, Scope scope,
      Map<ObjectType, ObjectType> delegateProxyMap) {
    
  }

  @Override
  public String getGlobalObject() {
    return "window";
  }

  @Override
  public boolean allowsVariableRedeclaration(
      Scope scope, String name, Node parent) {
    return true;
  }

  @Override
  public boolean allowsUndeclaredVariables() {
    return true;
  }

  @Override
  public boolean isPropertyTestFunction(Node call) {
    return false;
  }

  @Override
  public ObjectLiteralCast getObjectLiteralCast(NodeTraversal t,
      Node callNode) {
    return null;
  }
}
