1a2,815
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> package com.google.javascript.jscomp;
> 
> import com.google.common.base.CaseFormat;
> import com.google.common.collect.Maps;
> import com.google.common.collect.Sets;
> import com.google.javascript.jscomp.JsMessage.Builder;
> import static com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;
> import com.google.javascript.rhino.JSDocInfo;
> import com.google.javascript.rhino.Node;
> import com.google.javascript.rhino.Token;
> 
> import java.util.*;
> import java.util.regex.*;
> 
> import javax.annotation.Nullable;
> 
> 
> 
> 
> 
> 
> 
> abstract class JsMessageVisitor extends AbstractPostOrderCallback
>     implements CompilerPass {
> 
>   private static final String MSG_FUNCTION_NAME = "goog.getMsg";
> 
>   static final DiagnosticType MESSAGE_HAS_NO_DESCRIPTION =
>       DiagnosticType.warning("JSC_MSG_HAS_NO_DESCRIPTION",
>           "Message {0} has no description. Add @desc JsDoc tag.");
> 
>   static final DiagnosticType MESSAGE_HAS_NO_TEXT =
>       DiagnosticType.warning("JSC_MSG_HAS_NO_TEXT",
>           "Message value of {0} is just an empty string. "
>               + "Empty messages are forbidden." );
> 
>   static final DiagnosticType MESSAGE_TREE_MALFORMED =
>       DiagnosticType.error("JSC_MSG_TREE_MALFORMED",
>           "Message parse tree malformed. {0}");
> 
>   static final DiagnosticType MESSAGE_HAS_NO_VALUE =
>       DiagnosticType.error("JSC_MSG_HAS_NO_VALUE",
>           "message node {0} has no value");
> 
>   static final DiagnosticType MESSAGE_DUPLICATE_KEY =
>       DiagnosticType.error("JSC_MSG_KEY_DUPLICATED",
>           "duplicate message variable name found for {0}, " +
>               "initial definition {1}:{2}");
> 
>   static final DiagnosticType MESSAGE_NODE_IS_ORPHANED =
>       DiagnosticType.warning("JSC_MSG_ORPHANED_NODE", MSG_FUNCTION_NAME +
>           "() function could be used only with MSG_* property or variable");
> 
>   static final DiagnosticType MESSAGE_NOT_INITIALIZED_USING_NEW_SYNTAX =
>       DiagnosticType.error("JSC_MSG_NOT_INITIALIZED_USING_NEW_SYNTAX",
>           "message not initialized using " + MSG_FUNCTION_NAME);
> 
>   private static final String PH_JS_PREFIX = "{$";
>   private static final String PH_JS_SUFFIX = "}";
> 
>   static final String MSG_PREFIX = "MSG_";
> 
> 
>   private static final Pattern MSG_UNNAMED_PATTERN =
>       Pattern.compile("MSG_UNNAMED_\\d+");
> 
>   private static final Pattern CAMELCASE_PATTERN =
>       Pattern.compile("[a-z][a-zA-Z\\d]*[_\\d]*");
> 
>   static final String HIDDEN_DESC_PREFIX = "@hidden";
> 
>   
>   private static final String DESC_SUFFIX = "_HELP";
> 
>   private final boolean needToCheckDuplications;
>   private final JsMessage.Style style;
>   private final JsMessage.IdGenerator idGenerator;
>   final AbstractCompiler compiler;
> 
>   
> 
> 
> 
>   private final Map<String, MessageLocation> messageNames =
>       Maps.newHashMap();
> 
>   
> 
> 
> 
> 
> 
> 
> 
>   private final Map<Node, String> googMsgNodes = Maps.newHashMap();
> 
>   private final CheckLevel checkLevel;
> 
>   
> 
> 
> 
> 
> 
> 
> 
> 
> 
>   JsMessageVisitor(AbstractCompiler compiler,
>       boolean needToCheckDuplications,
>       JsMessage.Style style, JsMessage.IdGenerator idGenerator) {
> 
>     this.compiler = compiler;
>     this.needToCheckDuplications = needToCheckDuplications;
>     this.style = style;
>     this.idGenerator = idGenerator;
> 
>     checkLevel = (style == JsMessage.Style.CLOSURE)
>         ? CheckLevel.ERROR : CheckLevel.WARNING;
> 
>     
>     
> 
>   }
> 
>   @Override
>   public void process(Node externs, Node root) {
>     NodeTraversal.traverse(compiler, root, this);
> 
>     for (Map.Entry<Node, String> msgNode : googMsgNodes.entrySet()) {
>       compiler.report(JSError.make(msgNode.getValue(), msgNode.getKey(),
>           checkLevel, MESSAGE_NODE_IS_ORPHANED));
>     }
>   }
> 
>   @Override
>   public void visit(NodeTraversal traversal, Node node, Node parent) {
>     String messageKey;
>     boolean isVar;
>     Node msgNode, msgNodeParent;
> 
>     switch (node.getType()) {
>       case Token.NAME:
>         
>         if ((parent != null) && (parent.getType() == Token.VAR)) {
>           messageKey = node.getString();
>           isVar = true;
>         } else {
>           return;
>         }
> 
>         msgNode = node.getFirstChild();
>         msgNodeParent = node;
>         break;
>       case Token.ASSIGN:
>         
>         isVar = false;
> 
>         Node getProp = node.getFirstChild();
>         if (getProp.getType() != Token.GETPROP) {
>           return;
>         }
> 
>         Node propNode = getProp.getLastChild();
> 
>         messageKey = propNode.getString();
>         msgNode = node.getLastChild();
>         msgNodeParent = node;
>         break;
>       case Token.CALL:
>         
>         if (MSG_FUNCTION_NAME.equals(node.getFirstChild().getQualifiedName())) {
>           googMsgNodes.put(node, traversal.getSourceName());
>         }
>         return;
>       default:
>         return;
>     }
> 
>     
>     boolean isNewStyleMessage =
>         msgNode != null && msgNode.getType() == Token.CALL;
>     if (!isMessageName(messageKey, isNewStyleMessage)) {
>       return;
>     }
> 
>     if (msgNode == null) {
>       compiler.report(
>           traversal.makeError(node, MESSAGE_HAS_NO_VALUE, messageKey));
>       return;
>     }
> 
>     
>     
>     if (isNewStyleMessage) {
>       googMsgNodes.remove(msgNode);
>     } else if (style != JsMessage.Style.LEGACY) {
>       compiler.report(traversal.makeError(node, checkLevel,
>           MESSAGE_NOT_INITIALIZED_USING_NEW_SYNTAX));
>     }
> 
>     boolean isUnnamedMsg = isUnnamedMessageName(messageKey);
> 
>     if (!isUnnamedMsg && needToCheckDuplications) {
>       checkIfMessageDuplicated(traversal.getSourceName(), messageKey, msgNode);
>     }
> 
>     Builder builder = new Builder(
>         isUnnamedMsg ? null : messageKey);
>     builder.setSourceName(traversal.getSourceName());
> 
>     try {
>       if (isVar) {
>         extractMessageFromVariable(builder, node, parent, parent.getParent());
>       } else {
>         extractMessageFromProperty(builder, node.getFirstChild(), node);
>       }
>     } catch (MalformedException ex) {
>       compiler.report(traversal.makeError(ex.getNode(),
>           MESSAGE_TREE_MALFORMED, ex.getMessage()));
>       return;
>     }
> 
>     JsMessage extractedMessage = builder.build(idGenerator);
> 
>     if (extractedMessage.isEmpty()) {
>       
>       compiler.report(traversal.makeError(node, MESSAGE_HAS_NO_TEXT,
>           messageKey));
>     }
> 
>     
>     
>     
>     
>     String desc = extractedMessage.getDesc();
>     if (isNewStyleMessage
>         && (desc == null || desc.trim().isEmpty())
>         && !extractedMessage.isExternal()) {
>       compiler.report(traversal.makeError(node, MESSAGE_HAS_NO_DESCRIPTION,
>           messageKey));
>     }
> 
>     JsMessageDefinition msgDefinition = new JsMessageDefinition(
>         node, msgNode, msgNodeParent);
>     processJsMessage(extractedMessage, msgDefinition);
>   }
> 
>   
> 
> 
> 
> 
> 
> 
> 
>   private void checkIfMessageDuplicated(String sourceName, String msgName,
>       Node msgNode) {
>     if (messageNames.containsKey(msgName)) {
>       MessageLocation location = messageNames.get(msgName);
>       compiler.report(JSError.make(sourceName, msgNode, MESSAGE_DUPLICATE_KEY,
>           msgName, location.sourceName, Integer.toString(location.lineNo)));
>     } else {
>       MessageLocation location =
>           new MessageLocation(sourceName, msgNode.getLineno());
>       messageNames.put(msgName, location);
>     }
>   }
> 
>   
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>   private void extractMessageFromVariable(
>       Builder builder, Node nameNode, Node parentNode,
>       @Nullable Node grandParentNode) throws MalformedException {
> 
>     
>     Node valueNode = nameNode.getFirstChild();
>     switch (valueNode.getType()) {
>       case Token.STRING:
>       case Token.ADD:
>         maybeInitMetaDataFromJsDocOrHelpVar(builder, parentNode,
>             grandParentNode);
>         builder.appendStringPart(extractStringFromStringExprNode(valueNode));
>         break;
>       case Token.FUNCTION:
>         maybeInitMetaDataFromJsDocOrHelpVar(builder, parentNode,
>             grandParentNode);
>         extractFromFunctionNode(builder, valueNode);
>         break;
>       case Token.CALL:
>         maybeInitMetaDataFromJsDoc(builder, parentNode);
>         extractFromCallNode(builder, valueNode);
>         break;
>       default:
>         throw new MalformedException("Cannot parse value of message "
>             + builder.getKey(), valueNode);
>     }
>   }
> 
>   
> 
> 
> 
> 
> 
> 
> 
> 
> 
>   private void extractMessageFromProperty(
>       Builder builder, Node getPropNode, Node assignNode)
>       throws MalformedException {
>     Node callNode = getPropNode.getNext();
>     maybeInitMetaDataFromJsDoc(builder, assignNode);
>     extractFromCallNode(builder, callNode);
>   }
> 
>   
> 
> 
> 
> 
> 
> 
> 
>   private void maybeInitMetaDataFromJsDocOrHelpVar(
>       Builder builder, Node varNode, @Nullable Node parentOfVarNode)
>       throws MalformedException {
> 
>     
>     if (maybeInitMetaDataFromJsDoc(builder, varNode)) {
>       return;
>     }
> 
>     
>     if ((parentOfVarNode != null) &&
>         maybeInitMetaDataFromHelpVar(builder,
>             parentOfVarNode.getChildBefore(varNode))) {
>       return;
>     }
> 
>     
>     maybeInitMetaDataFromHelpVar(builder, varNode.getNext());
>   }
> 
>   
> 
> 
> 
> 
> 
> 
> 
>   private boolean maybeInitMetaDataFromHelpVar(Builder builder,
>       @Nullable Node sibling) throws MalformedException {
>     if ((sibling != null) && (sibling.getType() == Token.VAR)) {
>       Node nameNode = sibling.getFirstChild();
>       String name = nameNode.getString();
>       if (name.equals(builder.getKey() + DESC_SUFFIX)) {
>         Node valueNode = nameNode.getFirstChild();
>         String desc = extractStringFromStringExprNode(valueNode);
>         if (desc.startsWith(HIDDEN_DESC_PREFIX)) {
>           builder.setDesc(desc.substring(HIDDEN_DESC_PREFIX.length()).trim());
>           builder.setIsHidden(true);
>         } else {
>           builder.setDesc(desc);
>         }
>         return true;
>       }
>     }
>     return false;
>   }
> 
>   
> 
> 
> 
> 
> 
> 
> 
> 
>   private boolean maybeInitMetaDataFromJsDoc(Builder builder, Node node) {
>     boolean messageHasDesc = false;
>     JSDocInfo info = node.getJSDocInfo();
>     if (info != null) {
>       String desc = info.getDescription();
>       if (desc != null) {
>         builder.setDesc(desc);
>         messageHasDesc = true;
>       }
>       if (info.isHidden()) {
>         builder.setIsHidden(true);
>       }
>     }
> 
>     return messageHasDesc;
>   }
> 
>   
> 
> 
> 
> 
> 
> 
> 
> 
>   private static String extractStringFromStringExprNode(Node node)
>       throws MalformedException {
>     switch (node.getType()) {
>       case Token.STRING:
>         return node.getString();
>       case Token.ADD:
>         StringBuilder sb = new StringBuilder();
>         for (Node child : node.children()) {
>           sb.append(extractStringFromStringExprNode(child));
>         }
>         return sb.toString();
>       default:
>         throw new MalformedException("STRING or ADD node expected; found: " +
>                 getReadableTokenName(node), node);
>     }
>   }
> 
>   
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>   private void extractFromFunctionNode(Builder builder, Node node)
>       throws MalformedException {
>     Set<String> phNames = Sets.newHashSet();
> 
>     for (Node fnChild : node.children()) {
>       switch (fnChild.getType()) {
>         case Token.NAME:
>           
>           break;
>         case Token.LP:
>           
>           for (Node argumentNode : fnChild.children()) {
>             if (argumentNode.getType() == Token.NAME) {
>               String phName = argumentNode.getString();
>               if (phNames.contains(phName)) {
>                 throw new MalformedException("Duplicate placeholder name: "
>                     + phName, argumentNode);
>               } else {
>                 phNames.add(phName);
>               }
>             }
>           }
>           break;
>         case Token.BLOCK:
>           
>           Node returnNode = fnChild.getFirstChild();
>           if (returnNode.getType() != Token.RETURN) {
>             throw new MalformedException("RETURN node expected; found: "
>                 + getReadableTokenName(returnNode), returnNode);
>           }
>           for (Node child : returnNode.children()) {
>             extractFromReturnDescendant(builder, child);
>           }
> 
>           
>           
>           for (String phName : builder.getPlaceholders()) {
>             if(!phNames.contains(phName)) {
>               throw new MalformedException(
>                   "Unrecognized message placeholder referenced: " + phName,
>                   returnNode);
>             }
>           }
>           break;
>         default:
>           throw new MalformedException(
>               "NAME, LP, or BLOCK node expected; found: "
>                   + getReadableTokenName(node), fnChild);
>       }
>     }
>   }
> 
>   
> 
> 
> 
> 
> 
> 
> 
>   private void extractFromReturnDescendant(Builder builder, Node node)
>       throws MalformedException {
> 
>     switch (node.getType()) {
>       case Token.STRING:
>         builder.appendStringPart(node.getString());
>         break;
>       case Token.NAME:
>         builder.appendPlaceholderReference(node.getString());
>         break;
>       case Token.ADD:
>         for (Node child : node.children()) {
>           extractFromReturnDescendant(builder, child);
>         }
>         break;
>       default:
>         throw new MalformedException(
>             "STRING, NAME, or ADD node expected; found: "
>                 + getReadableTokenName(node), node);
>     }
>   }
> 
>   
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>   private void extractFromCallNode(Builder builder,
>       Node node) throws MalformedException {
>     
>     if (node.getType() != Token.CALL) {
>       throw new MalformedException(
>           "Message must be initialized using " + MSG_FUNCTION_NAME +
>           " function.", node);
>     }
> 
>     Node fnNameNode = node.getFirstChild();
>     if (!MSG_FUNCTION_NAME.equals(fnNameNode.getQualifiedName())) {
>       throw new MalformedException(
>           "Message initialized using unrecognized function. " +
>           "Please use " + MSG_FUNCTION_NAME + "() instead.", fnNameNode);
>     }
> 
>     
>     Node stringLiteralNode = fnNameNode.getNext();
>     if (stringLiteralNode == null) {
>       throw new MalformedException("Message string literal expected",
>           stringLiteralNode);
>     }
>     
>     parseMessageTextNode(builder, stringLiteralNode);
> 
>     Node objLitNode = stringLiteralNode.getNext();
>     Set<String> phNames = Sets.newHashSet();
>     if (objLitNode != null) {
>       
>       if (objLitNode.getType() != Token.OBJECTLIT) {
>         throw new MalformedException("OBJLIT node expected", objLitNode);
>       }
>       for (Node aNode = objLitNode.getFirstChild(); aNode != null;
>           aNode = aNode.getNext().getNext()) {
>         if (aNode.getType() != Token.STRING) {
>           throw new MalformedException("STRING node expected as OBJLIT key",
>               aNode);
>         }
>         String phName = aNode.getString();
>         if (!isLowerCamelCaseWithNumericSuffixes(phName)) {
>           throw new MalformedException(
>               "Placeholder name not in lowerCamelCase: " + phName, aNode);
>         }
> 
>         if (phNames.contains(phName)) {
>           throw new MalformedException("Duplicate placeholder name: "
>               + phName, aNode);
>         }
> 
>         phNames.add(phName);
>       }
>     }
> 
>     
>     
>     Set<String> usedPlaceholders = builder.getPlaceholders();
>     for (String phName : usedPlaceholders) {
>       if(!phNames.contains(phName)) {
>         throw new MalformedException(
>             "Unrecognized message placeholder referenced: " + phName,
>             objLitNode);
>       }
>     }
> 
>     
>     
>     for (String phName : phNames) {
>       if(!usedPlaceholders.contains(phName)) {
>         throw new MalformedException(
>             "Unused message placeholder: " + phName,
>             objLitNode);
>       }
>     }
>   }
> 
>   
> 
> 
> 
> 
> 
> 
> 
> 
>   private void parseMessageTextNode(Builder builder, Node node)
>       throws MalformedException {
>     String value = extractStringFromStringExprNode(node);
> 
>     while(true) {
>       int phBegin = value.indexOf(PH_JS_PREFIX);
>       if (phBegin < 0) {
>         
>         builder.appendStringPart(value);
>         return;
>       } else {
>         if (phBegin > 0) {
>           
>           builder.appendStringPart(value.substring(0, phBegin));
>         }
> 
>         
>         int phEnd = value.indexOf(PH_JS_SUFFIX, phBegin);
>         if (phEnd < 0) {
>           throw new MalformedException(
>               "Placeholder incorrectly formatted in: " + builder.getKey(),
>               node);
>         }
> 
>         String phName = value.substring(phBegin + PH_JS_PREFIX.length(),
>             phEnd);
>         builder.appendPlaceholderReference(phName);
>         int nextPos = phEnd + PH_JS_SUFFIX.length();
>         if (nextPos < value.length()) {
>           
>           value = value.substring(nextPos);
>         } else {
>           
>           return;
>         }
>       }
>     }
>   }
> 
> 
>   
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>   abstract void processJsMessage(JsMessage message,
>       JsMessageDefinition definition);
> 
>   
> 
> 
>   boolean isMessageName(String identifier, boolean isNewStyleMessage) {
>     return identifier.startsWith(MSG_PREFIX) &&
>         (style == JsMessage.Style.CLOSURE || isNewStyleMessage ||
>          !identifier.endsWith(DESC_SUFFIX));
>   }
> 
>   
> 
> 
>   private static boolean isUnnamedMessageName(String identifier) {
>     return MSG_UNNAMED_PATTERN.matcher(identifier).matches();
>   }
> 
>   
> 
> 
> 
>   static boolean isLowerCamelCaseWithNumericSuffixes(String input) {
>     return CAMELCASE_PATTERN.matcher(input).matches();
>   }
> 
>   
> 
> 
>   private static String getReadableTokenName(Node node) {
>     return Node.tokenToName(node.getType()).toUpperCase();
>   }
> 
>   
> 
> 
> 
> 
>   static String toLowerCamelCaseWithNumericSuffixes(String input) {
>     
>     int suffixStart = input.length();
>     while (suffixStart > 0) {
>       char ch = '\0';
>       int numberStart = suffixStart;
>       while (numberStart > 0) {
>         ch = input.charAt(numberStart - 1);
>         if (Character.isDigit(ch)) {
>           numberStart--;
>         } else {
>           break;
>         }
>       }
>       if ((numberStart > 0) && (numberStart < suffixStart) && (ch == '_')) {
>         suffixStart = numberStart - 1;
>       } else {
>         break;
>       }
>     }
> 
>     if (suffixStart == input.length()) {
>       return CaseFormat.UPPER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL, input);
>     } else {
>       return CaseFormat.UPPER_UNDERSCORE.to(CaseFormat.LOWER_CAMEL,
>           input.substring(0, suffixStart)) +
>           input.substring(suffixStart);
>     }
>   }
> 
>   static class MalformedException extends Exception {
>     private static final long serialVersionUID = 1L;
> 
>     private final Node node;
> 
>     MalformedException(String message, Node node) {
>       super(message);
>       this.node = node;
>     }
> 
>     Node getNode() {
>       return node;
>     }
>   }
> 
>   private static class MessageLocation {
>     private final String sourceName;
>     private final int lineNo;
> 
>     private MessageLocation(String sourceName, int lineNo) {
>       this.sourceName = sourceName;
>       this.lineNo = lineNo;
>     }
>   }
> }
