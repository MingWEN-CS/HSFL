















package com.google.javascript.jscomp;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.Iterables;
import com.google.common.collect.Lists;
import com.google.common.collect.Sets;
import com.google.javascript.rhino.Node;

import java.io.IOException;
import java.util.Collection;
import java.util.List;



























public class JsMessageExtractor {

  private final JsMessage.Style style;
  private final JsMessage.IdGenerator idGenerator;

  public JsMessageExtractor(JsMessage.IdGenerator idGenerator,
      JsMessage.Style style) {
    this.idGenerator = idGenerator;
    this.style = style;
  }

  


  private class ExtractMessagesVisitor extends JsMessageVisitor {
    
    
    
    
    
    private final List<JsMessage> messages = Lists.newLinkedList();

    private ExtractMessagesVisitor(AbstractCompiler compiler) {
      super(compiler, true, style, idGenerator);
    }

    @Override
    protected void processJsMessage(JsMessage message,
        JsMessageDefinition definition) {
      if (!message.isExternal()) {
        messages.add(message);
      }
    }

    




    public Collection<JsMessage> getMessages() {
      return messages;
    }
  }

  


  public Collection<JsMessage> extractMessages(JSSourceFile... inputs)
      throws IOException {
    return extractMessages(ImmutableList.copyOf(inputs));
  }


  








  public Collection<JsMessage> extractMessages(
      Iterable<JSSourceFile> inputs) throws IOException {

    Compiler compiler = new Compiler();
    compiler.init(
        new JSSourceFile[] {},
        Iterables.toArray(inputs, JSSourceFile.class),
        new CompilerOptions());

    ExtractMessagesVisitor extractCompilerPass =
        new ExtractMessagesVisitor(compiler);
    for (JSSourceFile input : inputs) {
      
      
      Node root = new JsAst(input).getAstRoot(compiler);

      
      extractCompilerPass.process(null, root);
    }

    JSError[] errors = compiler.getErrors();
    
    if (errors.length > 0) {
      StringBuilder msg = new StringBuilder("JSCompiler errors\n");
      MessageFormatter formatter = new LightweightMessageFormatter(compiler);
      for (JSError e : errors) {
        msg.append(formatter.formatError(e));
      }
      throw new RuntimeException(msg.toString());
    }

    return extractCompilerPass.getMessages();
  }
}
