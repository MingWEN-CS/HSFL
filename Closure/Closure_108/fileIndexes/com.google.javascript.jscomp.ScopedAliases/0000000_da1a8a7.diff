1a2,217
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> package com.google.javascript.jscomp;
> 
> import com.google.common.collect.Lists;
> import com.google.common.collect.Maps;
> import com.google.javascript.rhino.Node;
> import com.google.javascript.rhino.Token;
> 
> import java.util.List;
> import java.util.Map;
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> class ScopedAliases implements CompilerPass {
>   
>   static final String SCOPING_METHOD_NAME = "goog.scope";
> 
>   final AbstractCompiler compiler;
> 
>   ScopedAliases(AbstractCompiler compiler) {
>     this.compiler = compiler;
>   }
> 
>   @Override
>   public void process(Node externs, Node root) {
>     Traversal traversal = new Traversal();
>     NodeTraversal.traverse(compiler, root, traversal);
> 
>     
>     for (AliasedNode entry : traversal.getAliasUsages()) {
>       entry.getAliasReference().getParent().replaceChild(
>           entry.getAliasReference(),
>           entry.getAliasDefinition().cloneTree());
>     }
> 
>     
>     for (Node aliasDefinition : traversal.getAliasDefinitions()) {
>       if (aliasDefinition.getParent().getType() == Token.VAR &&
>           aliasDefinition.getParent().getChildCount() == 1) {
>         aliasDefinition.getParent().detachFromParent();
>       } else {
>         aliasDefinition.detachFromParent();
>       }
>     }
> 
>     
>     for (Node scopeCall : traversal.getScopeCalls()) {
>       Node expressionWithScopeCall = scopeCall.getParent();
>       Node scopeClosureBlock = scopeCall.getLastChild().getLastChild();
>       scopeClosureBlock.detachFromParent();
>       expressionWithScopeCall.getParent().replaceChild(
>           expressionWithScopeCall,
>           scopeClosureBlock);
>       NodeUtil.tryMergeBlock(scopeClosureBlock);
>     }
> 
>     if (traversal.getAliasUsages().size() > 0 ||
>         traversal.getAliasDefinitions().size() > 0 ||
>         traversal.getScopeCalls().size() > 0) {
>       compiler.reportCodeChange();
>     }
>   }
> 
>   private class AliasedNode {
>     private final Node aliasReference;
> 
>     private final Node aliasDefinition;
> 
>     AliasedNode(Node aliasReference, Node aliasDefinition) {
>       this.aliasReference = aliasReference;
>       this.aliasDefinition = aliasDefinition;
>     }
> 
>     public Node getAliasReference() {
>       return aliasReference;
>     }
> 
>     public Node getAliasDefinition() {
>       return aliasDefinition;
>     }
>   }
> 
>   private class Traversal implements NodeTraversal.ScopedCallback {
>     
>     private List<Node> aliasDefinitions = Lists.newArrayList();
> 
>     private List<Node> scopeCalls = Lists.newArrayList();
> 
>     private List<AliasedNode> aliasUsages = Lists.newArrayList();
> 
>     
>     private Map<String, Node> aliases = Maps.newHashMap();
> 
> 
>     List<Node> getAliasDefinitions() {
>       return aliasDefinitions;
>     }
> 
>     private List<AliasedNode> getAliasUsages() {
>       return aliasUsages;
>     }
> 
>     List<Node> getScopeCalls() {
>       return scopeCalls;
>     }
> 
>     private boolean isCallToScopeMethod(Node n) {
>       return n.getType() == Token.CALL &&
>           SCOPING_METHOD_NAME.equals(n.getFirstChild().getQualifiedName());
>     }
> 
>     @Override
>     public void enterScope(NodeTraversal t) {
>     }
> 
>     @Override
>     public void exitScope(NodeTraversal t) {
>       if (t.getScopeDepth() == 2) {
>         aliases.clear();
>       }
>     }
> 
>     @Override
>     public final boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
>       if (n.getType() == Token.FUNCTION && t.inGlobalScope()) {
>         
>         if (parent == null || !isCallToScopeMethod(parent)) {
>           return false;
>         }
>       }
>       return true;
>     }
> 
>     @Override
>     public void visit(NodeTraversal t, Node n, Node parent) {
>       if (isCallToScopeMethod(n)) {
>         
>         
>         
>         
>         
>         
>         
>         
>         scopeCalls.add(n);
>       }
> 
>       if (t.getScopeDepth() == 2) {
>         if (n.getType() == Token.NAME && parent.getType() == Token.VAR) {
>           if (n.hasChildren() && n.isQualifiedName()) {
>             
> 
>             aliases.put(n.getString(), n.getFirstChild());
>             aliasDefinitions.add(n);
> 
>             
>             t.getScope().undeclare(t.getScope().getVar(n.getString()));
> 
>             
>             return;
>           }
>         }
>       }
> 
>       if (t.getScopeDepth() >= 2) {
>         if (n.getType() == Token.NAME) {
>           
>           
>           Node aliasedNode = aliases.get(n.getString());
>           
>           
>           if (t.getScope().getVar(n.getString()) == null &&
>               aliasedNode != null) {
>             
>             
>             
>             
>             
>             
>             aliasUsages.add(new AliasedNode(n, aliasedNode));
>           }
>         }
> 
>         
>       }
>     }
>   }
> }
