482c482
<       CompilerInput previous = inputsById.put(id, input);
---
>       CompilerInput previous = putCompilerInput(id, input);
489c489
<       CompilerInput previous = inputsById.put(id, input);
---
>       CompilerInput previous = putCompilerInput(id, input);
1024c1024
<     inputsById.put(input.getInputId(), input);
---
>     putCompilerInput(input.getInputId(), input);
1029a1030,1034
>   private CompilerInput putCompilerInput(InputId id, CompilerInput input) {
>     input.setCompiler(this);
>     return inputsById.put(id, input);
>   }
> 
1034c1039
<     inputsById.put(id, new CompilerInput(ast));
---
>     putCompilerInput(id, new CompilerInput(ast));
1062c1067
<     inputsById.put(ast.getInputId(), newInput);
---
>     putCompilerInput(ast.getInputId(), newInput);
1111c1116
<     inputsById.put(ast.getInputId(), newInput);
---
>     putCompilerInput(ast.getInputId(), newInput);
1272,1274c1277
<       if (options.dependencyOptions.needsManagement()) {
<         for (CompilerInput input : inputs) {
<           input.setCompiler(this);
---
>       boolean staleInputs = false;
1275a1279,1283
>       
>       if (options.dependencyOptions.needsManagement() &&
>           !options.skipAllPasses &&
>           options.closurePass) {
>         for (CompilerInput input : inputs) {
1286a1295
>           staleInputs = true;
1306,1307d1314
<       
<       boolean staleInputs = false;
1449c1456
<     inputsById.put(input.getInputId(), input);
---
>     putCompilerInput(input.getInputId(), input);
1482c1489
<     inputsById.put(input.getInputId(), input);
---
>     putCompilerInput(input.getInputId(), input);
