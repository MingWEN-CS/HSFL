64c64
< public class RecordType extends PrototypeObjectType {
---
> class RecordType extends PrototypeObjectType {
79a80
>     setPrettyPrint(true);
96c97
<     if (!(other instanceof RecordType)) {
---
>     if (!other.isRecordType()) {
101c102,106
<     RecordType otherRecord = (RecordType) other;
---
>     RecordType otherRecord = other.toMaybeRecordType();
>     if (otherRecord == this) {
>       return true;
>     }
> 
141c146
<     RecordType thatRecord = (RecordType) that;
---
>     RecordType thatRecord = that.toMaybeRecordType();
159,160c164
<   @Override
<   public JSType getGreatestSubtype(JSType that) {
---
>   JSType getGreatestSubtypeHelper(JSType that) {
189,190c193,198
<     JSType greatestSubtype = super.getGreatestSubtype(that);
<     if (greatestSubtype.isNoObjectType() && !that.isNoObjectType()) {
---
>     JSType greatestSubtype = registry.getNativeType(
>         JSTypeNative.NO_OBJECT_TYPE);
>     JSType thatRestrictedToObj =
>         registry.getNativeType(JSTypeNative.OBJECT_TYPE)
>         .getGreatestSubtype(that);
>     if (!thatRestrictedToObj.isEmptyType()) {
207c215
<                altPropType.isEquivalentTo(propType))) {
---
>                   altPropType.isEquivalentTo(propType))) {
218,219c226,227
<   public boolean isRecordType() {
<     return true;
---
>   RecordType toMaybeRecordType() {
>     return this;
241c249
<     return RecordType.isSubtype(this, (RecordType) that);
---
>     return RecordType.isSubtype(this, that.toMaybeRecordType());
284,306d291
<   }
< 
<   @Override
<   public String toString() {
<     StringBuilder sb = new StringBuilder();
<     sb.append("{");
< 
<     int i = 0;
< 
<     for (String property : properties.keySet()) {
<       if (i > 0) {
<         sb.append(", ");
<       }
< 
<       sb.append(property);
<       sb.append(": ");
<       sb.append(properties.get(property).toString());
< 
<       ++i;
<     }
< 
<     sb.append("}");
<     return sb.toString();
