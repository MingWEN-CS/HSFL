69,91d68
<       
<       LOCAL_BLOCK_PROP  = -3,
<       OBJECT_IDS_PROP   = -2,
<       CATCH_SCOPE_PROP  = -1,
<       LABEL_ID_PROP     =  0,
< 
<       TARGET_PROP       =  1,
<       BREAK_PROP        =  2,
<       CONTINUE_PROP     =  3,
<       ENUM_PROP         =  4,
<       FUNCTION_PROP     =  5,
<       TEMP_PROP         =  6,
<       LOCAL_PROP        =  7,
<       CODEOFFSET_PROP   =  8,
<       FIXUPS_PROP       =  9,
<       VARS_PROP         = 10,
<       USES_PROP         = 11,
<       REGEXP_PROP       = 12,
<       CASES_PROP        = 13,
<       DEFAULT_PROP      = 14,
<       CASEARRAY_PROP    = 15,
< 
<       
94,120d70
<       TYPE_PROP         = 17,
<       SPECIAL_PROP_PROP = 18,
<       LABEL_PROP        = 19,
<       FINALLY_PROP      = 20,
<       LOCALCOUNT_PROP   = 21,
<   
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<       TARGETBLOCK_PROP  = 22,
<       VARIABLE_PROP     = 23,
<       LASTUSE_PROP      = 24,
<       ISNUMBER_PROP     = 25,
<       DIRECTCALL_PROP   = 26,
< 
<       SPECIALCALL_PROP  = 27,
<       DEBUGSOURCE_PROP  = 28,
124d73
<       SKIP_INDEXES_PROP  = 31,    
126,127d74
<       MEMBER_TYPE_PROP   = 33,    
<       NAME_PROP          = 34,    
162,173d108
<   
<   
<   public static final int
<       BOTH = 0,
<       LEFT = 1,
<       RIGHT = 2;
< 
<   public static final int    
<       NON_SPECIALCALL  = 0,
<       SPECIALCALL_EVAL = 1,
<       SPECIALCALL_WITH = 2;
< 
178,182d112
<   public static final int   
<       PROPERTY_FLAG    = 0x1, 
<       ATTRIBUTE_FLAG   = 0x2, 
<       DESCENDANTS_FLAG = 0x4; 
< 
185,189d114
<         case LOCAL_BLOCK_PROP:   return "local_block";
<         case OBJECT_IDS_PROP:    return "object_ids_prop";
<         case CATCH_SCOPE_PROP:   return "catch_scope_prop";
<         case LABEL_ID_PROP:      return "label_id_prop";
<         case TARGET_PROP:        return "target";
191,199d115
<         case BREAK_PROP:         return "break";
<         case CONTINUE_PROP:      return "continue";
<         case ENUM_PROP:          return "enum";
<         case FUNCTION_PROP:      return "function";
<         case TEMP_PROP:          return "temp";
<         case LOCAL_PROP:         return "local";
<         case CODEOFFSET_PROP:    return "codeoffset";
<         case FIXUPS_PROP:        return "fixups";
<         case VARS_PROP:          return "vars";
201,205d116
<         case USES_PROP:          return "uses";
<         case REGEXP_PROP:        return "regexp";
<         case CASES_PROP:         return "cases";
<         case DEFAULT_PROP:       return "default";
<         case CASEARRAY_PROP:     return "casearray";
207,220d117
<         case TYPE_PROP:          return "type";
<         case SPECIAL_PROP_PROP:  return "special_prop";
<         case LABEL_PROP:         return "label";
<         case FINALLY_PROP:       return "finally";
<         case LOCALCOUNT_PROP:    return "localcount";
< 
<         case TARGETBLOCK_PROP:   return "targetblock";
<         case VARIABLE_PROP:      return "variable";
<         case LASTUSE_PROP:       return "lastuse";
<         case ISNUMBER_PROP:      return "isnumber";
<         case DIRECTCALL_PROP:    return "directcall";
< 
<         case SPECIALCALL_PROP:   return "specialcall";
<         case DEBUGSOURCE_PROP:   return "debugsource";
224d120
<         case SKIP_INDEXES_PROP:  return "skip_indexes";
226,227d121
<         case MEMBER_TYPE_PROP:   return "member_type";
<         case NAME_PROP:          return "name";
1076,1109d969
<             case TARGETBLOCK_PROP: 
<               value = "target block property";
<               break;
<             case LOCAL_BLOCK_PROP: 
<               value = "last local block";
<               break;
<             case ISNUMBER_PROP:
<               switch (x.getIntValue()) {
<                 case BOTH:
<                   value = "both";
<                   break;
<                 case RIGHT:
<                   value = "right";
<                   break;
<                 case LEFT:
<                   value = "left";
<                   break;
<                 default:
<                   throw Kit.codeBug();
<               }
<               break;
<             case SPECIALCALL_PROP:
<               switch (x.getIntValue()) {
<                 case SPECIALCALL_EVAL:
<                   value = "eval";
<                   break;
<                 case SPECIALCALL_WITH:
<                   value = "with";
<                   break;
<                 default:
<                   
<                   throw Kit.codeBug();
<               }
<               break;
1734,1756c1594
<     if (type == Token.ARRAYLIT) {
<       try {
<         int[] indices1 = (int[]) getProp(Node.SKIP_INDEXES_PROP);
<         int[] indices2 = (int[]) node.getProp(Node.SKIP_INDEXES_PROP);
<         if (indices1 == null) {
<           if (indices2 != null) {
<             return false;
<           }
<         } else if (indices2 == null) {
<           return false;
<         } else if (indices1.length != indices2.length) {
<           return false;
<         } else {
<           for (int i = 0; i < indices1.length; i++) {
<             if (indices1[i] != indices2[i]) {
<               return false;
<             }
<           }
<         }
<       } catch (Exception e) {
<         return false;
<       }
<     } else if (type == Token.INC || type == Token.DEC) {
---
>     if (type == Token.INC || type == Token.DEC) {
1786,1843d1623
<   }
< 
<   public boolean hasSideEffects() {
<     switch (type) {
<       case Token.COMMA:
<         if (last != null)
<           return last.hasSideEffects();
<         else
<           return true;
< 
<       case Token.HOOK:
<         if (first == null || first.next == null || first.next.next == null) {
<           Kit.codeBug();
<         }
<         return first.next.hasSideEffects() && first.next.next.hasSideEffects();
< 
<       case Token.ERROR: 
<       case Token.EXPR_RESULT:
<       case Token.ASSIGN:
<       case Token.ASSIGN_ADD:
<       case Token.ASSIGN_SUB:
<       case Token.ASSIGN_MUL:
<       case Token.ASSIGN_DIV:
<       case Token.ASSIGN_MOD:
<       case Token.ASSIGN_BITOR:
<       case Token.ASSIGN_BITXOR:
<       case Token.ASSIGN_BITAND:
<       case Token.ASSIGN_LSH:
<       case Token.ASSIGN_RSH:
<       case Token.ASSIGN_URSH:
<       case Token.RETURN:
<       case Token.NEW:
<       case Token.DELPROP:
<       case Token.CALL:
<       case Token.THROW:
<       case Token.TRY:
<       case Token.INC:
<       case Token.DEC:
<       case Token.IF:
<       case Token.ELSE:
<       case Token.SWITCH:
<       case Token.WHILE:
<       case Token.DO:
<       case Token.FOR:
<       case Token.BREAK:
<       case Token.CONTINUE:
<       case Token.VAR:
<       case Token.CONST:
<       case Token.WITH:
<       case Token.CATCH:
<       case Token.FINALLY:
<       case Token.BLOCK:
<       case Token.LABEL:
<         return true;
< 
<       default:
<         return false;
<     }
