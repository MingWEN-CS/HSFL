410,412c410
<         
<         
<         return !isFunctionAnonymous(n);
---
>         return !isFunctionExpression(n);
629c627
<         Preconditions.checkState(isAnonymousFunction(n));
---
>         Preconditions.checkState(isFunctionExpression(n));
1054d1051
<     
1197c1194
<     return n.getType() == Token.FUNCTION && !isFunctionAnonymous(n);
---
>     return n.getType() == Token.FUNCTION && isStatement(n);
1211,1220d1207
< 
<   
< 
< 
< 
< 
<   static boolean isAnonymousFunction(Node n) {
<     return n.getType() == Token.FUNCTION && isFunctionAnonymous(n);
<   }
< 
1244,1245c1231,1232
<   static boolean isFunctionAnonymous(Node n) {
<     return !isStatement(n);
---
>   static boolean isFunctionExpression(Node n) {
>     return n.getType() == Token.FUNCTION && !isStatement(n);
