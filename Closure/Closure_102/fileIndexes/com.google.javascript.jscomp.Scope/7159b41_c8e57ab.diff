1,18c1,219
< <!DOCTYPE HTML PUBLIC "-
< <!--NewPage-->
< <HTML>
< <HEAD>
< <!-- Generated by javadoc (build 1.6.0_0) on Fri Nov 06 21:19:45 EST 2009 -->
< <TITLE>
< Scope (Compiler)
< </TITLE>
< 
< <META NAME="date" CONTENT="2009-11-06">
< 
< <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../dev_javadoc.css" TITLE="Style">
< 
< <SCRIPT type="text/javascript">
< function windowTitle()
< {
<     if (location.href.indexOf('is-external=true') == -1) {
<         parent.document.title="Scope (Compiler)";
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> package com.google.javascript.jscomp;
> 
> import static com.google.javascript.rhino.jstype.JSTypeNative.GLOBAL_THIS;
> 
> import com.google.common.base.Preconditions;
> import com.google.javascript.rhino.JSDocInfo;
> import com.google.javascript.rhino.Node;
> import com.google.javascript.rhino.Token;
> import com.google.javascript.rhino.jstype.FunctionType;
> import com.google.javascript.rhino.jstype.JSType;
> import com.google.javascript.rhino.jstype.ObjectType;
> import com.google.javascript.rhino.jstype.StaticScope;
> import com.google.javascript.rhino.jstype.StaticSlot;
> 
> import java.util.Iterator;
> import java.util.LinkedHashMap;
> import java.util.Map;
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> public class Scope implements StaticScope<JSType> {
>   private final Map<String, Var> vars = new LinkedHashMap<String, Var>();
>   private final Scope parent;
>   private final Node rootNode;
> 
>   
>   private final ObjectType thisType;
> 
>   
>   private final boolean isBottom;
> 
>   
>   public static class Var implements StaticSlot<JSType> {
>     
>     String name;
> 
>     
>     Node nameNode;
> 
>     
> 
> 
>     private JSType type;
> 
>     
> 
> 
>     private JSDocInfo info = null;
> 
>     
> 
> 
> 
> 
>     private final boolean typeInferred;
> 
>     
>     CompilerInput input;
> 
>     
>     boolean referenced;
> 
>     
>     boolean isDefine;
> 
>     
> 
> 
> 
>     int index;
> 
>     
>     Scope scope;
> 
>     
> 
> 
> 
> 
>     private Var(boolean inferred) {
>       this.typeInferred = inferred;
>     }
> 
>     
> 
> 
>     public String getName() {
>       return name;
>     }
> 
>     
> 
> 
>     public Node getParentNode() {
>       return nameNode == null ? null : nameNode.getParent();
>     }
> 
>     
> 
> 
> 
> 
>     int getLocalVarIndex() {
>       int num = index;
>       Scope s = scope.getParent();
>       if (s == null) {
>         throw new IllegalArgumentException("Var is not local");
>       }
>       while (s.getParent() != null) {
>         num += s.getVarCount();
>         s = s.getParent();
>       }
>       return num;
>     }
> 
>     
> 
> 
>     public boolean isGlobal() {
>       return scope.isGlobal();
>     }
> 
>     
> 
> 
>     public boolean isLocal() {
>       return scope.isLocal();
>     }
> 
>     
> 
> 
>     boolean isExtern() {
>       return input == null || input.isExtern();
>     }
> 
>     
> 
> 
> 
>     public boolean isConst() {
>       return NodeUtil.isConstantName(nameNode);
>     }
> 
>     
> 
> 
> 
>     public boolean isDefine() {
>       return isDefine;
>     }
> 
>     public Node getInitialValue() {
>       Node parent = getParentNode();
>       return parent.getType() == Token.FUNCTION ?
>           parent : nameNode.getFirstChild();
>     }
> 
>     
> 
> 
> 
>     public JSType getType() {
>       return type;
>     }
> 
>     
> 
> 
>     public Node getNameNode() {
>       return nameNode;
>     }
> 
>     
> 
> 
>     public JSDocInfo getJSDocInfo() {
>       return info;
>     }
> 
>     
> 
> 
> 
>     void setType(JSType type) {
>       Preconditions.checkState(isTypeInferred());
>       this.type = type;
19a221,458
> 
>     
> 
> 
> 
>     public boolean isTypeInferred() {
>       return typeInferred;
>     }
> 
>     public String getInputName() {
>       if (input == null)
>         return "<non-file>";
>       else
>         return input.getName();
>     }
> 
>     public boolean isNoShadow() {
>       if (info != null && info.isNoShadow()) {
>         return true;
>       } else {
>         return false;
>       }
>     }
> 
>     @Override public boolean equals(Object other) {
>       if (!(other instanceof Var)) {
>         return false;
>       }
> 
>       Var otherVar = (Var) other;
>       return otherVar.nameNode == nameNode;
>     }
> 
>     @Override public int hashCode() {
>       return nameNode.hashCode();
>     }
> 
>     @Override
>     public String toString() {
>       return "Scope.Var " + name;
>     }
>   }
> 
>   
> 
> 
> 
> 
>   Scope(Scope parent, Node rootNode) {
>     Preconditions.checkNotNull(parent);
>     Preconditions.checkArgument(rootNode != parent.rootNode);
> 
>     this.parent = parent;
>     this.rootNode = rootNode;
>     JSType nodeType = rootNode.getJSType();
>     if (nodeType != null && nodeType instanceof FunctionType) {
>       thisType = ((FunctionType) nodeType).getTypeOfThis();
>     } else {
>       thisType = parent.thisType;
>     }
>     this.isBottom = false;
>   }
> 
> 
>   
> 
> 
> 
>   Scope(Node rootNode, AbstractCompiler compiler) {
>     this.parent = null;
>     this.rootNode = rootNode;
>     thisType = compiler.getTypeRegistry().getNativeObjectType(GLOBAL_THIS);
>     this.isBottom = false;
>   }
> 
>   
> 
> 
> 
> 
>   Scope(Node rootNode, ObjectType thisType) {
>     this.parent = null;
>     this.rootNode = rootNode;
>     this.thisType = thisType;
>     this.isBottom = true;
>   }
> 
>   
>   boolean isBottom() {
>     return isBottom;
>   }
> 
>   
> 
> 
> 
>   public Node getRootNode() {
>     return rootNode;
>   }
> 
>   public Scope getParent() {
>     return parent;
>   }
> 
>   @Override
>   public StaticScope<JSType> getParentScope() {
>     return parent;
>   }
> 
>   
> 
> 
>   public ObjectType getTypeOfThis() {
>     return thisType;
>   }
> 
>   
> 
> 
> 
> 
> 
> 
> 
>   Var declare(String name, Node nameNode, JSType type, CompilerInput input) {
>     return declare(name, nameNode, type, input, true);
>   }
> 
>   
> 
> 
> 
> 
> 
> 
> 
> 
> 
>   Var declare(String name, Node nameNode,
>       JSType type, CompilerInput input, boolean inferred) {
>     Preconditions.checkState(name != null && name.length() > 0);
> 
>     
>     Preconditions.checkState(vars.get(name) == null);
> 
>     Var var = new Var(inferred);
>     var.name = name;
>     var.nameNode = nameNode;
>     var.type = type;
>     var.referenced = false;
>     var.scope = this;
>     var.index = vars.size();
>     var.input = input;
> 
>     
>     
>     JSDocInfo info = NodeUtil.getInfoForNameNode(nameNode);
> 
>     var.isDefine = info != null && info.isDefine();
>     var.info = info;
> 
>     vars.put(name, var);
>     return var;
>   }
> 
>   
> 
> 
> 
>   void undeclare(Var var) {
>     Preconditions.checkState(var.scope == this);
>     Preconditions.checkState(vars.get(var.name) == var);
>     vars.remove(var.name);
>   }
> 
>   public StaticSlot<JSType> getSlot(String name) {
>     return getVar(name);
>   }
> 
>   public StaticSlot<JSType> getOwnSlot(String name) {
>     return vars.get(name);
>   }
> 
>   
> 
> 
>   public Var getVar(String name) {
>     Var var = vars.get(name);
>     if (var != null) {
>       return var;
>     } else if (parent != null) { 
>       return parent.getVar(name);
>     } else {
>       return null;
>     }
>   }
> 
>   
> 
> 
>   public boolean isDeclared(String name, boolean recurse) {
>     Scope scope = this;
>     if (scope.vars.containsKey(name))
>       return true;
> 
>     if (scope.parent != null && recurse) {
>       return scope.parent.isDeclared(name, recurse);
>     }
>     return false;
>   }
> 
>   
> 
> 
>   public Iterator<Var> getVars() {
>     return vars.values().iterator();
>   }
> 
>   
> 
> 
>   public int getVarCount() {
>     return vars.size();
>   }
> 
>   
> 
> 
>   public boolean isGlobal() {
>     return parent == null;
>   }
> 
>   
> 
> 
>   public boolean isLocal() {
>     return !isGlobal();
>   }
21,545d459
< </SCRIPT>
< <NOSCRIPT>
< </NOSCRIPT>
< 
< </HEAD>
< 
< <BODY BGCOLOR="white" onload="windowTitle();">
< <HR>
< 
< 
< <!-- ========= START OF TOP NAVBAR ======= -->
< <A NAME="navbar_top"><!-- --></A>
< <A HREF="#skip-navbar_top" title="Skip navigation links"></A>
< <TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
< <TR>
< <TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
< <A NAME="navbar_top_firstrow"><!-- --></A>
< <TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
<   <TR ALIGN="center" VALIGN="top">
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
<   </TR>
< </TABLE>
< </TD>
< <TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
< </EM>
< </TD>
< </TR>
< 
< <TR>
< <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
< &nbsp;<A HREF="../../../../com/google/javascript/jscomp/Result.html" title="class in com.google.javascript.jscomp"><B>PREV CLASS</B></A>&nbsp;
< &nbsp;<A HREF="../../../../com/google/javascript/jscomp/Scope.Var.html" title="class in com.google.javascript.jscomp"><B>NEXT CLASS</B></A></FONT></TD>
< <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
<   <A HREF="../../../../index.html?com/google/javascript/jscomp/Scope.html" target="_top"><B>FRAMES</B></A>  &nbsp;
< &nbsp;<A HREF="Scope.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
< &nbsp;<SCRIPT type="text/javascript">
<   <!--
<   if(window==top) {
<     document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
<   }
<   
< </SCRIPT>
< <NOSCRIPT>
<   <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
< </NOSCRIPT>
< 
< 
< </FONT></TD>
< </TR>
< <TR>
< <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
<   SUMMARY:&nbsp;<A HREF="#nested_class_summary">NESTED</A>&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
< <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
< DETAIL:&nbsp;FIELD&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
< </TR>
< </TABLE>
< <A NAME="skip-navbar_top"></A>
< <!-- ========= END OF TOP NAVBAR ========= -->
< 
< <HR>
< <!-- ======== START OF CLASS DATA ======== -->
< <H2>
< <FONT SIZE="-1">
< com.google.javascript.jscomp</FONT>
< <BR>
< Class Scope</H2>
< <PRE>
< <A HREF="http:
<   <IMG SRC="../../../../resources/inherit.gif" ALT="extended by "><B>com.google.javascript.jscomp.Scope</B>
< </PRE>
< <DL>
< <DT><B>All Implemented Interfaces:</B> <DD><A HREF="../../../../com/google/javascript/rhino/jstype/StaticScope.html" title="interface in com.google.javascript.rhino.jstype">StaticScope</A>&lt;<A HREF="../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&gt;</DD>
< </DL>
< <HR>
< <DL>
< <DT><PRE>public class <B>Scope</B><DT>extends <A HREF="http:
< </PRE>
< 
< <P>
< Scope contains information about a variable scope in javascript.
<  Scopes can be nested, a scope points back to its parent scope.
<  A Scope contains information about variables defined in that scope.
<  <p>
<  A Scope is also used as a lattice element for flow-sensitive type inference.
<  As a lattice element, a Scope is viewed as a map from names to types. A name
<  not in the map is considered to have the bottom type. The join of two maps m1
<  and m2 is the map of the union of names with <A HREF="../../../../com/google/javascript/rhino/jstype/JSType.html#getLeastSupertype(com.google.javascript.rhino.jstype.JSType)"><CODE>JSType.getLeastSupertype(com.google.javascript.rhino.jstype.JSType)</CODE></A>
<  to meet the m1 type and m2 type.
< <P>
< 
< <P>
< <DL>
< <DT><B>See Also:</B><DD><A HREF="../../../../com/google/javascript/jscomp/NodeTraversal.html" title="class in com.google.javascript.jscomp"><CODE>NodeTraversal</CODE></A>, 
< <CODE>DataFlowAnalysis</CODE></DL>
< <HR>
< 
< <P>
< <!-- ======== NESTED CLASS SUMMARY ======== -->
< 
< <A NAME="nested_class_summary"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
< <B>Nested Class Summary</B></FONT></TH>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>static&nbsp;class</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Scope.Var.html" title="class in com.google.javascript.jscomp">Scope.Var</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Stores info about a variable</TD>
< </TR>
< </TABLE>
< &nbsp;
< <!-- ========== METHOD SUMMARY =========== -->
< 
< <A NAME="method_summary"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
< <B>Method Summary</B></FONT></TH>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/rhino/jstype/StaticSlot.html" title="interface in com.google.javascript.rhino.jstype">StaticSlot</A>&lt;<A HREF="../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&gt;</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Scope.html#getOwnSlot(java.lang.String)">getOwnSlot</A></B>(<A HREF="http:
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Like <code>getSlot</code> but does not recurse into parent scopes.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/jscomp/Scope.html" title="class in com.google.javascript.jscomp">Scope</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Scope.html#getParent()">getParent</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/rhino/jstype/StaticScope.html" title="interface in com.google.javascript.rhino.jstype">StaticScope</A>&lt;<A HREF="../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&gt;</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Scope.html#getParentScope()">getParentScope</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the scope enclosing this one or null if none.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Scope.html#getRootNode()">getRootNode</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the container node of the scope.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/rhino/jstype/StaticSlot.html" title="interface in com.google.javascript.rhino.jstype">StaticSlot</A>&lt;<A HREF="../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&gt;</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Scope.html#getSlot(java.lang.String)">getSlot</A></B>(<A HREF="http:
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns any defined slot within this scope for this name.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Scope.html#getTypeOfThis()">getTypeOfThis</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the type of <code>this</code> in the current scope.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="../../../../com/google/javascript/jscomp/Scope.Var.html" title="class in com.google.javascript.jscomp">Scope.Var</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Scope.html#getVar(java.lang.String)">getVar</A></B>(<A HREF="http:
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the variable, may be null</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Scope.html#getVarCount()">getVarCount</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns number of variables in this scope</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Scope.html#getVars()">getVars</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Return an iterator over all of the variables declared in this scope.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Scope.html#isDeclared(java.lang.String, boolean)">isDeclared</A></B>(<A HREF="http:
<            boolean&nbsp;recurse)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns true if a variable is declared.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Scope.html#isGlobal()">isGlobal</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns whether this is the global scope.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/Scope.html#isLocal()">isLocal</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns whether this is a local scope (i.e.</TD>
< </TR>
< </TABLE>
< &nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
< <TH ALIGN="left"><B>Methods inherited from class java.lang.<A HREF="http:
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD><CODE><A HREF="http:
< </TR>
< </TABLE>
< &nbsp;
< <P>
< 
< <!-- ============ METHOD DETAIL ========== -->
< 
< <A NAME="method_detail"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
< <B>Method Detail</B></FONT></TH>
< </TR>
< </TABLE>
< 
< <A NAME="getRootNode()"><!-- --></A><H3>
< getRootNode</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A> <B>getRootNode</B>()</PRE>
< <DL>
< <DD>Gets the container node of the scope. This is typically the FUNCTION
<  node or the global BLOCK/SCRIPT node.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getParent()"><!-- --></A><H3>
< getParent</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/jscomp/Scope.html" title="class in com.google.javascript.jscomp">Scope</A> <B>getParent</B>()</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getParentScope()"><!-- --></A><H3>
< getParentScope</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/rhino/jstype/StaticScope.html" title="interface in com.google.javascript.rhino.jstype">StaticScope</A>&lt;<A HREF="../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&gt; <B>getParentScope</B>()</PRE>
< <DL>
< <DD><B>Description copied from interface: <CODE><A HREF="../../../../com/google/javascript/rhino/jstype/StaticScope.html#getParentScope()">StaticScope</A></CODE></B></DD>
< <DD>Returns the scope enclosing this one or null if none.
< <P>
< <DD><DL>
< <DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/google/javascript/rhino/jstype/StaticScope.html#getParentScope()">getParentScope</A></CODE> in interface <CODE><A HREF="../../../../com/google/javascript/rhino/jstype/StaticScope.html" title="interface in com.google.javascript.rhino.jstype">StaticScope</A>&lt;<A HREF="../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&gt;</CODE></DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getTypeOfThis()"><!-- --></A><H3>
< getTypeOfThis</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/rhino/jstype/ObjectType.html" title="class in com.google.javascript.rhino.jstype">ObjectType</A> <B>getTypeOfThis</B>()</PRE>
< <DL>
< <DD>Gets the type of <code>this</code> in the current scope.
< <P>
< <DD><DL>
< <DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/google/javascript/rhino/jstype/StaticScope.html#getTypeOfThis()">getTypeOfThis</A></CODE> in interface <CODE><A HREF="../../../../com/google/javascript/rhino/jstype/StaticScope.html" title="interface in com.google.javascript.rhino.jstype">StaticScope</A>&lt;<A HREF="../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&gt;</CODE></DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getSlot(java.lang.String)"><!-- --></A><H3>
< getSlot</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/rhino/jstype/StaticSlot.html" title="interface in com.google.javascript.rhino.jstype">StaticSlot</A>&lt;<A HREF="../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&gt; <B>getSlot</B>(<A HREF="http:
< <DL>
< <DD><B>Description copied from interface: <CODE><A HREF="../../../../com/google/javascript/rhino/jstype/StaticScope.html#getSlot(java.lang.String)">StaticScope</A></CODE></B></DD>
< <DD>Returns any defined slot within this scope for this name.  This call
<  continues searching through parent scopes if a slot with this name is not
<  found in the current scope.
< <P>
< <DD><DL>
< <DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/google/javascript/rhino/jstype/StaticScope.html#getSlot(java.lang.String)">getSlot</A></CODE> in interface <CODE><A HREF="../../../../com/google/javascript/rhino/jstype/StaticScope.html" title="interface in com.google.javascript.rhino.jstype">StaticScope</A>&lt;<A HREF="../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&gt;</CODE></DL>
< </DD>
< <DD><DL>
< <DT><B>Parameters:</B><DD><CODE>name</CODE> - The name of the variable slot to look up.
< <DT><B>Returns:</B><DD>The defined slot for the variable, or <code>null</code> if no
<          definition exists.</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getOwnSlot(java.lang.String)"><!-- --></A><H3>
< getOwnSlot</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/rhino/jstype/StaticSlot.html" title="interface in com.google.javascript.rhino.jstype">StaticSlot</A>&lt;<A HREF="../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&gt; <B>getOwnSlot</B>(<A HREF="http:
< <DL>
< <DD><B>Description copied from interface: <CODE><A HREF="../../../../com/google/javascript/rhino/jstype/StaticScope.html#getOwnSlot(java.lang.String)">StaticScope</A></CODE></B></DD>
< <DD>Like <code>getSlot</code> but does not recurse into parent scopes.
< <P>
< <DD><DL>
< <DT><B>Specified by:</B><DD><CODE><A HREF="../../../../com/google/javascript/rhino/jstype/StaticScope.html#getOwnSlot(java.lang.String)">getOwnSlot</A></CODE> in interface <CODE><A HREF="../../../../com/google/javascript/rhino/jstype/StaticScope.html" title="interface in com.google.javascript.rhino.jstype">StaticScope</A>&lt;<A HREF="../../../../com/google/javascript/rhino/jstype/JSType.html" title="class in com.google.javascript.rhino.jstype">JSType</A>&gt;</CODE></DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getVar(java.lang.String)"><!-- --></A><H3>
< getVar</H3>
< <PRE>
< public <A HREF="../../../../com/google/javascript/jscomp/Scope.Var.html" title="class in com.google.javascript.jscomp">Scope.Var</A> <B>getVar</B>(<A HREF="http:
< <DL>
< <DD>Returns the variable, may be null
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="isDeclared(java.lang.String, boolean)"><!-- --></A><H3>
< isDeclared</H3>
< <PRE>
< public boolean <B>isDeclared</B>(<A HREF="http:
<                           boolean&nbsp;recurse)</PRE>
< <DL>
< <DD>Returns true if a variable is declared.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getVars()"><!-- --></A><H3>
< getVars</H3>
< <PRE>
< public <A HREF="http:
< <DL>
< <DD>Return an iterator over all of the variables declared in this scope.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="getVarCount()"><!-- --></A><H3>
< getVarCount</H3>
< <PRE>
< public int <B>getVarCount</B>()</PRE>
< <DL>
< <DD>Returns number of variables in this scope
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="isGlobal()"><!-- --></A><H3>
< isGlobal</H3>
< <PRE>
< public boolean <B>isGlobal</B>()</PRE>
< <DL>
< <DD>Returns whether this is the global scope.
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="isLocal()"><!-- --></A><H3>
< isLocal</H3>
< <PRE>
< public boolean <B>isLocal</B>()</PRE>
< <DL>
< <DD>Returns whether this is a local scope (i.e. not the global scope).
< <P>
< <DD><DL>
< </DL>
< </DD>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <!-- ========= END OF CLASS DATA ========= -->
< <HR>
< 
< 
< <!-- ======= START OF BOTTOM NAVBAR ====== -->
< <A NAME="navbar_bottom"><!-- --></A>
< <A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
< <TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
< <TR>
< <TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
< <A NAME="navbar_bottom_firstrow"><!-- --></A>
< <TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
<   <TR ALIGN="center" VALIGN="top">
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
<   </TR>
< </TABLE>
< </TD>
< <TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
< </EM>
< </TD>
< </TR>
< 
< <TR>
< <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
< &nbsp;<A HREF="../../../../com/google/javascript/jscomp/Result.html" title="class in com.google.javascript.jscomp"><B>PREV CLASS</B></A>&nbsp;
< &nbsp;<A HREF="../../../../com/google/javascript/jscomp/Scope.Var.html" title="class in com.google.javascript.jscomp"><B>NEXT CLASS</B></A></FONT></TD>
< <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
<   <A HREF="../../../../index.html?com/google/javascript/jscomp/Scope.html" target="_top"><B>FRAMES</B></A>  &nbsp;
< &nbsp;<A HREF="Scope.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
< &nbsp;<SCRIPT type="text/javascript">
<   <!--
<   if(window==top) {
<     document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
<   }
<   
< </SCRIPT>
< <NOSCRIPT>
<   <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
< </NOSCRIPT>
< 
< 
< </FONT></TD>
< </TR>
< <TR>
< <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
<   SUMMARY:&nbsp;<A HREF="#nested_class_summary">NESTED</A>&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
< <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
< DETAIL:&nbsp;FIELD&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
< </TR>
< </TABLE>
< <A NAME="skip-navbar_bottom"></A>
< <!-- ======== END OF BOTTOM NAVBAR ======= -->
< 
< <HR>
< 
<         <div id="footer">
<           <div id="footerlogo">
<             <img src="http:
<                  alt="Google colored balls">
<           </div>
< 
<           <div id="copyright">
<           <p>&copy; 2009 Google -
<             <a href="http:
<             <a href="http:
<             <a href="http:
<           </p>
<           </div>
<         </div>
<       
<       
< </BODY>
< </HTML>
