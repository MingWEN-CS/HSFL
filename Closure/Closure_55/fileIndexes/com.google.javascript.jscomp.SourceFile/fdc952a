















package com.google.javascript.jscomp;

import com.google.common.annotations.VisibleForTesting;
import com.google.common.base.Charsets;
import com.google.common.io.CharStreams;
import com.google.common.io.Files;
import com.google.javascript.rhino.jstype.StaticSourceFile;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.Serializable;
import java.io.StringReader;
import java.nio.charset.Charset;








public class SourceFile implements StaticSourceFile, Serializable {
  private static final long serialVersionUID = 1L;

  


  public interface Generator {
    public String getCode();
  }

  



  private static final int SOURCE_EXCERPT_REGION_LENGTH = 5;

  private final String fileName;
  private boolean isExternFile = false;

  
  
  
  
  
  private String originalPath = null;

  
  private int[] lineOffsets = null;

  
  
  
  private int lastOffset;
  private int lastLine;

  private String code = null;

  






  public SourceFile(String fileName) {
    if (fileName == null || fileName.isEmpty()) {
      throw new IllegalArgumentException("a source must have a name");
    }
    this.fileName = fileName;
    
    this.lastOffset = 0;
    this.lastLine = 1;
  }

  @Override
  public int getLineOffset(int lineno) {
    if (lineOffsets == null) {
      findLineOffsets();
    }
    if (lineno < 1 || lineno > lineOffsets.length) {
      throw new IllegalArgumentException(
          "Expected line number between 1 and " + lineOffsets.length +
          "\nActual: " + lineno);
    }
    return lineOffsets[lineno - 1];
  }

  
  int getNumLines() {
    if (lineOffsets == null) {
      findLineOffsets();
    }
    return lineOffsets.length;
  }

  private void findLineOffsets() {
    try {
      String[] sourceLines = getCode().split("\n");
      lineOffsets = new int[sourceLines.length];
      for (int ii = 1; ii < sourceLines.length; ++ii) {
        lineOffsets[ii] =
            lineOffsets[ii - 1] + sourceLines[ii - 1].length() + 1;
      }
    } catch (IOException e) {
      lineOffsets = new int[1];
      lineOffsets[0] = 0;
    }
  }


  
  

  



  public String getCode() throws IOException {
    return code;
  }

  


  public Reader getCodeReader() throws IOException {
    return new StringReader(getCode());
  }

  @VisibleForTesting
  String getCodeNoCache() {
    return code;
  }

  private void setCode(String sourceCode) {
    code = sourceCode;
  }

  public String getOriginalPath() {
    return originalPath != null ? originalPath : fileName;
  }

  public void setOriginalPath(String originalPath) {
    this.originalPath = originalPath;
  }

  
  
  
  
  public void clearCachedSource() {
    
    
  }

  boolean hasSourceInMemory() {
    return code != null;
  }

  
  @Override
  public String getName() {
    return fileName;
  }

  
  @Override
  public boolean isExtern() {
    return isExternFile;
  }

  
  void setIsExtern(boolean newVal) {
    isExternFile = newVal;
  }

  







  public String getLine(int lineNumber) {
    String js = "";
    try {
      
      
      
      js = getCode();
    } catch (IOException e) {
      return null;
    }

    int pos = 0;
    int startLine = 1;

    
    
    if (lineNumber >= lastLine) {
      pos = lastOffset;
      startLine = lastLine;
    }

    for (int n = startLine; n < lineNumber; n++) {
      int nextpos = js.indexOf('\n', pos);
      if (nextpos == -1) {
        return null;
      }
      pos = nextpos + 1;
    }

    
    lastOffset = pos;
    lastLine = lineNumber;

    return (js.indexOf('\n', pos) == -1) ? null :
        js.substring(pos, js.indexOf('\n', pos));
  }

  








  public Region getRegion(int lineNumber) {
    String js = "";
    try {
      js = getCode();
    } catch (IOException e) {
      return null;
    }
    int pos = 0;
    int startLine = Math.max(1,
        lineNumber - (SOURCE_EXCERPT_REGION_LENGTH + 1) / 2 + 1);
    for (int n = 1; n < startLine; n++) {
      int nextpos = js.indexOf('\n', pos);
      if (nextpos == -1) {
        break;
      }
      pos = nextpos + 1;
    }
    int end = pos;
    int endLine = startLine;
    for (int n = 0; n < SOURCE_EXCERPT_REGION_LENGTH; n++, endLine++) {
      end = js.indexOf('\n', end);
      if (end == -1) {
        break;
      }
      end++;
    }
    if (lineNumber >= endLine) {
      return null;
    }
    if (end == -1) {
      int last = js.length() - 1;
      if (js.charAt(last) == '\n') {
        return
            new SimpleRegion(startLine, endLine, js.substring(pos, last));
      } else {
        return new SimpleRegion(startLine, endLine, js.substring(pos));
      }
    } else {
      return new SimpleRegion(startLine, endLine, js.substring(pos, end));
    }
  }

  @Override
  public String toString() {
    return fileName;
  }

  public static SourceFile fromFile(String fileName, Charset c) {
    return fromFile(new File(fileName), c);
  }

  public static SourceFile fromFile(String fileName) {
    return fromFile(new File(fileName));
  }

  public static SourceFile fromFile(File file, Charset c) {
    return new OnDisk(file, c);
  }

  public static SourceFile fromFile(File file) {
    return new OnDisk(file);
  }

  public static SourceFile fromCode(String fileName, String code) {
    return new Preloaded(fileName, code);
  }

  public static SourceFile fromCode(String fileName,
      String originalPath, String code) {
    return new Preloaded(fileName, originalPath, code);
  }

  public static SourceFile fromInputStream(String fileName, InputStream s)
      throws IOException {
    return fromCode(fileName,
        CharStreams.toString(new InputStreamReader(s, Charsets.UTF_8)));
  }

  public static SourceFile fromInputStream(String fileName,
      String originalPath, InputStream s) throws IOException {
    return fromCode(fileName, originalPath,
        CharStreams.toString(new InputStreamReader(s, Charsets.UTF_8)));
  }

  public static SourceFile fromReader(String fileName, Reader r)
      throws IOException {
    return fromCode(fileName, CharStreams.toString(r));
  }

  public static SourceFile fromGenerator(String fileName,
      Generator generator) {
    return new Generated(fileName, generator);
  }


  
  

  


  static class Preloaded extends SourceFile {
    private static final long serialVersionUID = 1L;

    Preloaded(String fileName, String code) {
      this(fileName, fileName, code);
    }

    Preloaded(String fileName, String originalPath, String code) {
      super(fileName);
      super.setOriginalPath(originalPath);
      super.setCode(code);
    }
  }

  



  static class Generated extends SourceFile {
    private static final long serialVersionUID = 1L;
    private final Generator generator;

    
    Generated(String fileName, Generator generator) {
      super(fileName);
      this.generator = generator;
    }

    @Override
    public synchronized String getCode() throws IOException {
      String cachedCode = super.getCode();

      if (cachedCode == null) {
        cachedCode = generator.getCode();
        super.setCode(cachedCode);
      }
      return cachedCode;
    }

    
    
    @Override
    public void clearCachedSource() {
      super.setCode(null);
    }
  }

  




  static class OnDisk extends SourceFile {
    private static final long serialVersionUID = 1L;
    private final File file;

    
    
    
    protected String inputCharset = Charsets.UTF_8.name();

    OnDisk(File file, Charset c) {
      this(file);
      if (c != null) {
        this.setCharset(c);
      }
    }

    
    OnDisk(File file) {
      super(file.getPath());
      this.file = file;
    }

    @Override
    public synchronized String getCode() throws IOException {
      String cachedCode = super.getCode();

      if (cachedCode == null) {
        cachedCode = Files.toString(file, this.getCharset());
        super.setCode(cachedCode);
      }
      return cachedCode;
    }

    


    @Override
    public Reader getCodeReader() throws IOException {
      if (hasSourceInMemory()) {
        return super.getCodeReader();
      } else {
        
        return new FileReader(file);
      }
    }

    
    
    @Override
    public void clearCachedSource() {
      super.setCode(null);
    }

    





    public void setCharset(Charset c) {
      inputCharset = c.name();
    }

    





    public Charset getCharset() {
      return Charset.forName(inputCharset);
    }
  }
}
