















package com.google.javascript.jscomp;

import com.google.javascript.jscomp.ControlFlowGraph.Branch;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.NodeTraversal.ScopedCallback;
import com.google.javascript.jscomp.graph.GraphReachability;
import com.google.javascript.jscomp.graph.GraphNode;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.Token;







class CheckUnreachableCode implements ScopedCallback {

  static final DiagnosticType UNREACHABLE_CODE = DiagnosticType.error(
      "JSC_UNREACHABLE_CODE", "unreachable code");

  private final AbstractCompiler compiler;
  private final CheckLevel level;

  CheckUnreachableCode(AbstractCompiler compiler, CheckLevel level) {
    this.compiler = compiler;
    this.level = level;
  }

  @Override
  public void enterScope(NodeTraversal t) {
    new GraphReachability<Node, ControlFlowGraph.Branch>(
        t.getControlFlowGraph()).compute(
            t.getControlFlowGraph().getEntry().getValue());
  }

  @Override
  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
    GraphNode<Node, Branch> gNode = t.getControlFlowGraph().getNode(n);
    if (gNode != null && gNode.getAnnotation() != GraphReachability.REACHABLE) {

      
      
      
      
      if (n.getLineno() != -1 &&
          
          n.getType() != Token.EMPTY && n.getType() != Token.BREAK) {
        compiler.report(t.makeError(n, level, UNREACHABLE_CODE));
        
        
        new GraphReachability<Node, ControlFlowGraph.Branch>(
            t.getControlFlowGraph()).recompute(n);

        
        return false;
      }
    }
    return true;
  }

  @Override
  public void exitScope(NodeTraversal t) {
  }

  @Override
  public void visit(NodeTraversal t, Node n, Node parent) {
  }
}
