






































package com.google.javascript.rhino.jstype;

import static com.google.javascript.rhino.jstype.JSTypeNative.ALL_TYPE;
import static com.google.javascript.rhino.jstype.JSTypeNative.CHECKED_UNKNOWN_TYPE;
import static com.google.javascript.rhino.jstype.JSTypeNative.NO_TYPE;
import static com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE;

import com.google.common.base.Preconditions;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.Lists;
import com.google.javascript.rhino.jstype.UnionType;

import java.io.Serializable;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;






class UnionTypeBuilder implements Serializable {
  private static final long serialVersionUID = 1L;

  
  
  private static final int DEFAULT_MAX_UNION_SIZE = 20;

  private final JSTypeRegistry registry;
  private final List<JSType> alternates = Lists.newArrayList();
  private boolean isAllType = false;
  private boolean isNativeUnknownType = false;
  private boolean areAllUnknownsChecked = true;
  private final int maxUnionSize;

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  private int functionTypePosition = -1;

  
  private JSType result = null;

  UnionTypeBuilder(JSTypeRegistry registry) {
    this(registry, DEFAULT_MAX_UNION_SIZE);
  }

  UnionTypeBuilder(JSTypeRegistry registry, int maxUnionSize) {
    this.registry = registry;
    this.maxUnionSize = maxUnionSize;
  }

  Iterable<JSType> getAlternates() {
    JSType specialCaseType = reduceAlternatesWithoutUnion();
    if (specialCaseType != null) {
      return ImmutableList.of(specialCaseType);
    }
    return alternates;
  }

  



  UnionTypeBuilder addAlternate(JSType alternate) {
    
    
    if (alternate.isNoType()) {
      return this;
    }

    isAllType = isAllType || alternate.isAllType();

    boolean isAlternateUnknown = alternate instanceof UnknownType;
    isNativeUnknownType = isNativeUnknownType || isAlternateUnknown;
    if (isAlternateUnknown) {
      areAllUnknownsChecked = areAllUnknownsChecked &&
          alternate.isCheckedUnknownType();
    }
    if (!isAllType && !isNativeUnknownType) {
      if (alternate.isUnionType()) {
        UnionType union = alternate.toMaybeUnionType();
        for (JSType unionAlt : union.getAlternates()) {
          addAlternate(unionAlt);
        }
      } else {
        if (alternates.size() > maxUnionSize) {
          return this;
        }

        
        
        
        int i = 0;
        Iterator<JSType> it = alternates.iterator();
        while (it.hasNext()) {
          JSType current = it.next();

          
          
          
          if (alternate.isUnknownType() ||
              current.isUnknownType() ||
              alternate.isNoResolvedType() ||
              current.isNoResolvedType()) {
            if (alternate.isEquivalentTo(current)) {
              
              return this;
            }
          } else {
            if (alternate.isSubtype(current)) {
              
              return this;
            } else if (current.isSubtype(alternate)) {
              
              it.remove();
              if (i == functionTypePosition) {
                functionTypePosition = -1;
              }
            }
          }
          i++;
        }

        if (alternate.isFunctionType()) {
          
          if (functionTypePosition == -1) {
            functionTypePosition = alternates.size();
            alternates.add(alternate);
          } else {
            JSType supremum = alternate.toMaybeFunctionType().getLeastSupertype(
                alternates.get(functionTypePosition).toMaybeFunctionType());
            Preconditions.checkState(supremum.isFunctionType());
            alternates.set(functionTypePosition, supremum);
          }
        } else {
          alternates.add(alternate);
        }

        result = null; 
      }
    } else {
      result = null;
    }
    return this;
  }

  




  private JSType reduceAlternatesWithoutUnion() {
    if (isAllType) {
      return registry.getNativeType(ALL_TYPE);
    } else if (isNativeUnknownType) {
      if (areAllUnknownsChecked) {
        return registry.getNativeType(CHECKED_UNKNOWN_TYPE);
      } else {
        return registry.getNativeType(UNKNOWN_TYPE);
      }
    } else {
      int size = alternates.size();
      if (size > maxUnionSize) {
        return registry.getNativeType(UNKNOWN_TYPE);
      } else if (size > 1) {
        return null;
      } else if (size == 1) {
        return alternates.iterator().next();
      } else {
        return registry.getNativeType(NO_TYPE);
      }
    }
  }

  




  JSType build() {
    if (result == null) {
      result = reduceAlternatesWithoutUnion();
      if (result == null) {
        result = new UnionType(registry, getAlternateListCopy());
      }
    }
    return result;
  }

  private Collection<JSType> getAlternateListCopy() {
    return ImmutableList.copyOf(alternates);
  }
}
