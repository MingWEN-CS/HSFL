1,16c1,65
< <!DOCTYPE HTML PUBLIC "-
< <!--NewPage-->
< <HTML>
< <HEAD>
< <TITLE>
< JsFileLineParser (Compiler)
< </TITLE>
< 
< 
< <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../../dev_javadoc.css" TITLE="Style">
< 
< <SCRIPT type="text/javascript">
< function windowTitle()
< {
<     if (location.href.indexOf('is-external=true') == -1) {
<         parent.document.title="JsFileLineParser (Compiler)";
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> package com.google.javascript.jscomp.deps;
> 
> import com.google.common.collect.Lists;
> import com.google.javascript.jscomp.CheckLevel;
> import com.google.javascript.jscomp.DiagnosticType;
> import com.google.javascript.jscomp.ErrorManager;
> import com.google.javascript.jscomp.JSError;
> 
> import java.io.BufferedReader;
> import java.io.IOException;
> import java.io.Reader;
> import java.io.StringReader;
> import java.util.List;
> import java.util.regex.Matcher;
> import java.util.regex.Pattern;
> 
> 
> 
> 
> 
> 
> 
> public abstract class JsFileLineParser {
> 
>   static final DiagnosticType PARSE_WARNING = DiagnosticType.warning(
>       "DEPS_PARSE_WARNING", "{0}\n{1}");
>   static final DiagnosticType PARSE_ERROR = DiagnosticType.error(
>       "DEPS_PARSE_ERROR", "{0}\n{1}");
> 
>   
> 
> 
>   static class ParseException extends Exception {
>     public static final long serialVersionUID = 1L;
>     private boolean fatal;
> 
>     
> 
> 
> 
> 
> 
>     public ParseException(String message, boolean fatal) {
>       super(message);
>       this.fatal = fatal;
>     }
> 
>     public boolean isFatal() {
>       return fatal;
18,63d66
< }
< </SCRIPT>
< <NOSCRIPT>
< </NOSCRIPT>
< 
< </HEAD>
< 
< <BODY BGCOLOR="white" onload="windowTitle();">
< <HR>
< 
< 
< <!-- ========= START OF TOP NAVBAR ======= -->
< <A NAME="navbar_top"><!-- --></A>
< <A HREF="#skip-navbar_top" title="Skip navigation links"></A>
< <TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
< <TR>
< <TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
< <A NAME="navbar_top_firstrow"><!-- --></A>
< <TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
<   <TR ALIGN="center" VALIGN="top">
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
<   </TR>
< </TABLE>
< </TD>
< <TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
< </EM>
< </TD>
< </TR>
< 
< <TR>
< <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
< &nbsp;<A HREF="../../../../../com/google/javascript/jscomp/deps/DepsFileParser.html" title="class in com.google.javascript.jscomp.deps"><B>PREV CLASS</B></A>&nbsp;
< &nbsp;<A HREF="../../../../../com/google/javascript/jscomp/deps/JsFileLineParser.ParseException.html" title="class in com.google.javascript.jscomp.deps"><B>NEXT CLASS</B></A></FONT></TD>
< <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
<   <A HREF="../../../../../index.html?com/google/javascript/jscomp/deps/JsFileLineParser.html" target="_top"><B>FRAMES</B></A>  &nbsp;
< &nbsp;<A HREF="JsFileLineParser.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
< &nbsp;<SCRIPT type="text/javascript">
<   <!--
<   if(window==top) {
<     document.writeln('<A HREF="../../../../../allclasses-noframe.html"><B>All Classes</B></A>');
64a68
> 
66,426c70,211
< </SCRIPT>
< <NOSCRIPT>
<   <A HREF="../../../../../allclasses-noframe.html"><B>All Classes</B></A>
< </NOSCRIPT>
< 
< 
< </FONT></TD>
< </TR>
< <TR>
< <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
<   SUMMARY:&nbsp;<A HREF="#nested_class_summary">NESTED</A>&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
< <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
< DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
< </TR>
< </TABLE>
< <A NAME="skip-navbar_top"></A>
< <!-- ========= END OF TOP NAVBAR ========= -->
< 
< <HR>
< <!-- ======== START OF CLASS DATA ======== -->
< <H2>
< <FONT SIZE="-1">
< com.google.javascript.jscomp.deps</FONT>
< <BR>
< Class JsFileLineParser</H2>
< <PRE>
< <A HREF="http:
<   <IMG SRC="../../../../../resources/inherit.gif" ALT="extended by "><B>com.google.javascript.jscomp.deps.JsFileLineParser</B>
< </PRE>
< <DL>
< <DT><B>Direct Known Subclasses:</B> <DD><A HREF="../../../../../com/google/javascript/jscomp/deps/DepsFileParser.html" title="class in com.google.javascript.jscomp.deps">DepsFileParser</A>, <A HREF="../../../../../com/google/javascript/jscomp/deps/JsFileParser.html" title="class in com.google.javascript.jscomp.deps">JsFileParser</A></DD>
< </DL>
< <HR>
< <DL>
< <DT><PRE>public abstract class <B>JsFileLineParser</B><DT>extends <A HREF="http:
< </PRE>
< 
< <P>
< Base class for classes that parse Javascript sources on a line-by-line basis. Strips comments
<  from files and records all parsing errors.
< <P>
< 
< <P>
< <HR>
< 
< <P>
< <!-- ======== NESTED CLASS SUMMARY ======== -->
< 
< <A NAME="nested_class_summary"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
< <B>Nested Class Summary</B></FONT></TH>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>protected static&nbsp;class</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/jscomp/deps/JsFileLineParser.ParseException.html" title="class in com.google.javascript.jscomp.deps">JsFileLineParser.ParseException</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thrown by base classes to signify a problem parsing a line.</TD>
< </TR>
< </TABLE>
< &nbsp;<!-- =========== FIELD SUMMARY =========== -->
< 
< <A NAME="field_summary"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
< <B>Field Summary</B></FONT></TH>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>protected &nbsp;<A HREF="../../../../../com/google/javascript/jscomp/ErrorManager.html" title="interface in com.google.javascript.jscomp">ErrorManager</A></CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/jscomp/deps/JsFileLineParser.html#errorManager">errorManager</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Handles error messages.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>protected &nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/jscomp/deps/JsFileLineParser.html#filePath">filePath</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Path of the file currently being parsed.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>protected &nbsp;int</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/jscomp/deps/JsFileLineParser.html#lineNum">lineNum</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The line number of the line currently being parsed.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>protected &nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/jscomp/deps/JsFileLineParser.html#parseSucceeded">parseSucceeded</A></B></CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Did our parse succeed.</TD>
< </TR>
< </TABLE>
< &nbsp;
< <!-- ======== CONSTRUCTOR SUMMARY ======== -->
< 
< <A NAME="constructor_summary"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
< <B>Constructor Summary</B></FONT></TH>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/jscomp/deps/JsFileLineParser.html#JsFileLineParser(com.google.javascript.jscomp.ErrorManager)">JsFileLineParser</A></B>(<A HREF="../../../../../com/google/javascript/jscomp/ErrorManager.html" title="interface in com.google.javascript.jscomp">ErrorManager</A>&nbsp;errorManager)</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constructor.</TD>
< </TR>
< </TABLE>
< &nbsp;
< <!-- ========== METHOD SUMMARY =========== -->
< 
< <A NAME="method_summary"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
< <B>Method Summary</B></FONT></TH>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>&nbsp;boolean</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/jscomp/deps/JsFileLineParser.html#didParseSucceed()">didParseSucceed</A></B>()</CODE>
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>protected &nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/jscomp/deps/JsFileLineParser.html#doParse(java.lang.String, java.lang.String)">doParse</A></B>(<A HREF="http:
<         <A HREF="http:
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Performs the line-by-line parsing of the given fileContents.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>protected &nbsp;<A HREF="http:
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/jscomp/deps/JsFileLineParser.html#parseJsString(java.lang.String)">parseJsString</A></B>(<A HREF="http:
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parses a JS string literal.</TD>
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
< <CODE>protected abstract &nbsp;void</CODE></FONT></TD>
< <TD><CODE><B><A HREF="../../../../../com/google/javascript/jscomp/deps/JsFileLineParser.html#parseLine(java.lang.String)">parseLine</A></B>(<A HREF="http:
< 
< <BR>
< &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Called for each line of the file being parsed.</TD>
< </TR>
< </TABLE>
< &nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
< <TH ALIGN="left"><B>Methods inherited from class java.lang.<A HREF="http:
< </TR>
< <TR BGCOLOR="white" CLASS="TableRowColor">
< <TD><CODE><A HREF="http:
< </TR>
< </TABLE>
< &nbsp;
< <P>
< 
< <!-- ============ FIELD DETAIL =========== -->
< 
< <A NAME="field_detail"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
< <B>Field Detail</B></FONT></TH>
< </TR>
< </TABLE>
< 
< <A NAME="filePath"><!-- --></A><H3>
< filePath</H3>
< <PRE>
< protected <A HREF="http:
< <DL>
< <DD>Path of the file currently being parsed.
< <P>
< <DL>
< </DL>
< </DL>
< <HR>
< 
< <A NAME="lineNum"><!-- --></A><H3>
< lineNum</H3>
< <PRE>
< protected int <B>lineNum</B></PRE>
< <DL>
< <DD>The line number of the line currently being parsed.
< <P>
< <DL>
< </DL>
< </DL>
< <HR>
< 
< <A NAME="errorManager"><!-- --></A><H3>
< errorManager</H3>
< <PRE>
< protected <A HREF="../../../../../com/google/javascript/jscomp/ErrorManager.html" title="interface in com.google.javascript.jscomp">ErrorManager</A> <B>errorManager</B></PRE>
< <DL>
< <DD>Handles error messages.
< <P>
< <DL>
< </DL>
< </DL>
< <HR>
< 
< <A NAME="parseSucceeded"><!-- --></A><H3>
< parseSucceeded</H3>
< <PRE>
< protected boolean <B>parseSucceeded</B></PRE>
< <DL>
< <DD>Did our parse succeed.
< <P>
< <DL>
< </DL>
< </DL>
< 
< <!-- ========= CONSTRUCTOR DETAIL ======== -->
< 
< <A NAME="constructor_detail"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
< <B>Constructor Detail</B></FONT></TH>
< </TR>
< </TABLE>
< 
< <A NAME="JsFileLineParser(com.google.javascript.jscomp.ErrorManager)"><!-- --></A><H3>
< JsFileLineParser</H3>
< <PRE>
< public <B>JsFileLineParser</B>(<A HREF="../../../../../com/google/javascript/jscomp/ErrorManager.html" title="interface in com.google.javascript.jscomp">ErrorManager</A>&nbsp;errorManager)</PRE>
< <DL>
< <DD>Constructor.
< <P>
< <DL>
< <DT><B>Parameters:</B><DD><CODE>errorManager</CODE> - Parse error handler.</DL>
< </DL>
< 
< <!-- ============ METHOD DETAIL ========== -->
< 
< <A NAME="method_detail"><!-- --></A>
< <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
< <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
< <TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
< <B>Method Detail</B></FONT></TH>
< </TR>
< </TABLE>
< 
< <A NAME="didParseSucceed()"><!-- --></A><H3>
< didParseSucceed</H3>
< <PRE>
< public boolean <B>didParseSucceed</B>()</PRE>
< <DL>
< <DD><DL>
< </DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="doParse(java.lang.String, java.lang.String)"><!-- --></A><H3>
< doParse</H3>
< <PRE>
< protected void <B>doParse</B>(<A HREF="http:
<                        <A HREF="http:
< <DL>
< <DD>Performs the line-by-line parsing of the given fileContents. This method
<  strips out Javascript comments and then uses the abstract parseLine()
<  method to do the line parsing.
< <P>
< <DD><DL>
< <DT><B>Parameters:</B><DD><CODE>filePath</CODE> - The path to the file being parsed. Used for reporting parse
<      exceptions.<DD><CODE>fileContents</CODE> - The contents of the file.</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="parseLine(java.lang.String)"><!-- --></A><H3>
< parseLine</H3>
< <PRE>
< protected abstract void <B>parseLine</B>(<A HREF="http:
<                            throws <A HREF="../../../../../com/google/javascript/jscomp/deps/JsFileLineParser.ParseException.html" title="class in com.google.javascript.jscomp.deps">JsFileLineParser.ParseException</A></PRE>
< <DL>
< <DD>Called for each line of the file being parsed.
< <P>
< <DD><DL>
< <DT><B>Parameters:</B><DD><CODE>line</CODE> - The line to parse.
< <DT><B>Throws:</B>
< <DD><CODE><A HREF="../../../../../com/google/javascript/jscomp/deps/JsFileLineParser.ParseException.html" title="class in com.google.javascript.jscomp.deps">JsFileLineParser.ParseException</A></CODE> - Should be thrown to signify a problem with the line.</DL>
< </DD>
< </DL>
< <HR>
< 
< <A NAME="parseJsString(java.lang.String)"><!-- --></A><H3>
< parseJsString</H3>
< <PRE>
< protected <A HREF="http:
<                         throws <A HREF="../../../../../com/google/javascript/jscomp/deps/JsFileLineParser.ParseException.html" title="class in com.google.javascript.jscomp.deps">JsFileLineParser.ParseException</A></PRE>
< <DL>
< <DD>Parses a JS string literal.
< <P>
< <DD><DL>
< <DT><B>Parameters:</B><DD><CODE>jsStringLiteral</CODE> - The literal. Must look like "asdf" or 'asdf'
< <DT><B>Throws:</B>
< <DD><CODE><A HREF="../../../../../com/google/javascript/jscomp/deps/JsFileLineParser.ParseException.html" title="class in com.google.javascript.jscomp.deps">JsFileLineParser.ParseException</A></CODE> - Thrown if there is a string literal that cannot be
<      parsed.</DL>
< </DD>
< </DL>
< <!-- ========= END OF CLASS DATA ========= -->
< <HR>
< 
< 
< <!-- ======= START OF BOTTOM NAVBAR ====== -->
< <A NAME="navbar_bottom"><!-- --></A>
< <A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
< <TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
< <TR>
< <TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
< <A NAME="navbar_bottom_firstrow"><!-- --></A>
< <TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
<   <TR ALIGN="center" VALIGN="top">
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
<   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
<   </TR>
< </TABLE>
< </TD>
< <TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
< </EM>
< </TD>
< </TR>
< 
< <TR>
< <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
< &nbsp;<A HREF="../../../../../com/google/javascript/jscomp/deps/DepsFileParser.html" title="class in com.google.javascript.jscomp.deps"><B>PREV CLASS</B></A>&nbsp;
< &nbsp;<A HREF="../../../../../com/google/javascript/jscomp/deps/JsFileLineParser.ParseException.html" title="class in com.google.javascript.jscomp.deps"><B>NEXT CLASS</B></A></FONT></TD>
< <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
<   <A HREF="../../../../../index.html?com/google/javascript/jscomp/deps/JsFileLineParser.html" target="_top"><B>FRAMES</B></A>  &nbsp;
< &nbsp;<A HREF="JsFileLineParser.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
< &nbsp;<SCRIPT type="text/javascript">
<   <!--
<   if(window==top) {
<     document.writeln('<A HREF="../../../../../allclasses-noframe.html"><B>All Classes</B></A>');
---
>   private static final Pattern COMMENT = Pattern.compile(
>       "
>       "|/\\*([^\\*]*(\\*+[^/\\*])?)*(\\*+/)?" 
>       );
>   private static final Pattern END_MULTILINE_COMMENT =
>       Pattern.compile(".*?\\*/");
> 
>   
>   private static final Pattern STRING_LITERAL_PATTERN = Pattern.compile(
>       "\\s*(?:'((?:\\\\'|[^'])*?)'|\"((?:\\\\\"|[^\"])*?)\")\\s*");
> 
>   
>   private Matcher commentMatcher = COMMENT.matcher("");
> 
>   private Matcher endMultilineCommentMatcher =
>       END_MULTILINE_COMMENT.matcher("");
> 
>   
>   private Matcher valueMatcher = STRING_LITERAL_PATTERN.matcher("");
> 
>   
>   String filePath;
>   
>   int lineNum;
>   
>   ErrorManager errorManager;
>   
>   boolean parseSucceeded;
> 
>   
> 
> 
> 
> 
>   public JsFileLineParser(ErrorManager errorManager) {
>     this.errorManager = errorManager;
>   }
> 
>   public boolean didParseSucceed() {
>     return parseSucceeded;
>   }
> 
>   
> 
> 
>   void doParse(String filePath, String fileContents) {
>     doParse(filePath, new StringReader(fileContents));
>   }
> 
>   
> 
> 
> 
> 
> 
> 
> 
> 
>   void doParse(String filePath, Reader fileContents) {
>     this.filePath = filePath;
>     parseSucceeded = true;
> 
>     BufferedReader lineBuffer = new BufferedReader(fileContents);
> 
>     
>     String line = null;
>     lineNum = 0;
>     boolean inMultilineComment = false;
> 
>     try {
>       while (null != (line = lineBuffer.readLine())) {
>         ++lineNum;
>         try {
>           String revisedLine = line;
>           if (inMultilineComment) {
>             endMultilineCommentMatcher.reset(line);
>             if (endMultilineCommentMatcher.lookingAt()) {
>               revisedLine = endMultilineCommentMatcher.replaceFirst("");
>               inMultilineComment = false;
>             } else {
>               revisedLine = "";
>             }
>           }
> 
>           if (!inMultilineComment) {
>             commentMatcher.reset(line);
>             if (commentMatcher.find()) {
>               do {
>                 if (
>                     commentMatcher.group(1) != null &&
>                     
>                     commentMatcher.group(3) == null) {
>                   inMultilineComment = true;
>                 }
>               } while (commentMatcher.find());
> 
>               revisedLine = commentMatcher.replaceAll("");
>             }
>           }
> 
>           if (!revisedLine.isEmpty()) {
>             parseLine(revisedLine);
>           }
>         } catch (ParseException e) {
>           
>           errorManager.report(
>               e.isFatal() ? CheckLevel.ERROR : CheckLevel.WARNING,
>               JSError.make(filePath, lineNum, 0 ,
>                   e.isFatal() ? PARSE_ERROR : PARSE_WARNING,
>                   e.getMessage(), line));
>           parseSucceeded = parseSucceeded && !e.isFatal();
>         }
>       }
>     } catch (IOException e) {
>       errorManager.report(CheckLevel.ERROR,
>           JSError.make(filePath, 0, 0 ,
>               PARSE_ERROR, "Error reading file: " + filePath));
>       parseSucceeded = false;
>     }
>   }
> 
>   
> 
> 
> 
> 
> 
>   abstract void parseLine(String line) throws ParseException;
> 
>   
> 
> 
> 
> 
> 
> 
>   String parseJsString(String jsStringLiteral) throws ParseException {
>     valueMatcher.reset(jsStringLiteral);
>     if (!valueMatcher.matches()) {
>       throw new ParseException("Syntax error in JS String literal", true );
>     }
>     return valueMatcher.group(1) != null ? valueMatcher.group(1) : valueMatcher.group(2);
427a213
> 
429,466c215,253
< </SCRIPT>
< <NOSCRIPT>
<   <A HREF="../../../../../allclasses-noframe.html"><B>All Classes</B></A>
< </NOSCRIPT>
< 
< 
< </FONT></TD>
< </TR>
< <TR>
< <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
<   SUMMARY:&nbsp;<A HREF="#nested_class_summary">NESTED</A>&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
< <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
< DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
< </TR>
< </TABLE>
< <A NAME="skip-navbar_bottom"></A>
< <!-- ======== END OF BOTTOM NAVBAR ======= -->
< 
< <HR>
< 
<         <div id="footer">
<           <div id="footerlogo">
<             <img src="http:
<                  alt="Google colored balls">
<           </div>
< 
<           <div id="copyright">
<           <p>&copy; 2009 Google -
<             <a href="http:
<             <a href="http:
<             <a href="http:
<           </p>
<           </div>
<         </div>
<       
<       
< </BODY>
< </HTML>
---
> 
> 
> 
> 
> 
>   List<String> parseJsStringArray(String input)
>       throws ParseException {
>     List<String> results = Lists.newArrayList();
>     int indexStart = input.indexOf('[');
>     int indexEnd = input.lastIndexOf(']');
>     if ((indexStart == -1) || (indexEnd == -1)) {
>       throw new ParseException("Syntax error when parsing JS array", true );
>     }
>     String innerValues = input.substring(indexStart + 1, indexEnd);
> 
>     if (!innerValues.trim().isEmpty()) {
>       valueMatcher.reset(innerValues);
>       for (;;) {
>         
>         if (!valueMatcher.lookingAt()) {
>           throw new ParseException("Syntax error in JS String literal", true );
>         }
>         
>         results.add(valueMatcher.group(1) != null ?
>             valueMatcher.group(1) : valueMatcher.group(2));
>         if (valueMatcher.hitEnd()) {
>           break;
>         }
>         
>         if (innerValues.charAt(valueMatcher.end()) != ',') {
>           throw new ParseException("Missing comma in string array", true );
>         }
>         
>         valueMatcher.region(valueMatcher.end() + 1, valueMatcher.regionEnd());
>       }
>     }
>     return results;
>   }
> }
