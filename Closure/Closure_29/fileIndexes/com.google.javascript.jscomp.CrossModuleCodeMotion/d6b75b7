















package com.google.javascript.jscomp;

import com.google.javascript.jscomp.CodingConvention.SubclassRelationship;
import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;
import com.google.javascript.jscomp.Scope.Var;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.Token;

import java.util.ArrayDeque;
import java.util.Deque;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Logger;







class CrossModuleCodeMotion extends AbstractPostOrderCallback
    implements CompilerPass {

  private static final Logger logger =
      Logger.getLogger(CrossModuleCodeMotion.class.getName());

  private final AbstractCompiler compiler;
  private final JSModuleGraph graph;

  



  private final Map<JSModule, Node> moduleVarParentMap =
      new HashMap<JSModule, Node>();

  



  private final Map<Scope.Var, NamedInfo> namedInfo =
      new LinkedHashMap<Var, NamedInfo>();

  




  CrossModuleCodeMotion(AbstractCompiler compiler, JSModuleGraph graph) {
    this.compiler = compiler;
    this.graph = graph;
  }

  


  public void process(Node externs, Node root) {
    logger.info("Moving functions + variable into deeper modules");

    
    if (graph != null && graph.getModuleCount() > 1) {

      
      NodeTraversal.traverse(compiler, root, this);

      
      moveCode();
    }
  }

  
  private void moveCode() {
    for (Map.Entry<Var, NamedInfo> e : namedInfo.entrySet()) {
      NamedInfo info = e.getValue();

      JSModule deepestDependency = info.deepestModule;

      
      
      
      
      
      if (info.allowMove && deepestDependency != null) {
        Iterator<Declaration> it = info.declarationIterator();
        JSModuleGraph moduleGraph = compiler.getModuleGraph();
        while (it.hasNext()) {
          Declaration decl = it.next();
          if (decl.module != null &&
              moduleGraph.dependsOn(deepestDependency,
                  decl.module)) {

            
            Node destParent = moduleVarParentMap.get(deepestDependency);
            if (destParent == null) {
              destParent = compiler.getNodeForCodeInsertion(deepestDependency);
              moduleVarParentMap.put(deepestDependency, destParent);
            }

            
            
            
            Node declParent = decl.node.getParent();
            if (declParent.getType() == Token.VAR &&
                declParent.getChildCount() > 1) {
              declParent.removeChild(decl.node);

              
              Node var = new Node(Token.VAR, decl.node);
              destParent.addChildToFront(var);
            } else {
              
              declParent.detachFromParent();

              
              destParent.addChildToFront(declParent);
            }

            compiler.reportCodeChange();
          }
        }
      }
    }
  }

  
  private class NamedInfo {
    boolean allowMove = true;

    
    private JSModule deepestModule = null;

    
    private JSModule declModule = null;

    
    private final Deque<Declaration> declarations =
        new ArrayDeque<Declaration>();

    
    void addUsedModule(JSModule m) {
      
      if (!allowMove) {
        return;
      }

      
      if (deepestModule == null) {
        deepestModule = m;
      } else {
        
        deepestModule =
            graph.getDeepestCommonDependencyInclusive(m, deepestModule);
      }
    }

    




    boolean addDeclaration(Declaration d) {
      
      if (declModule != null && d.module != declModule) {
        return false;
      }
      declarations.push(d);
      declModule = d.module;
      return true;
    }

    



    Iterator<Declaration> declarationIterator() {
      return declarations.iterator();
    }
  }

  private class Declaration {
    final JSModule module;
    final Node node;

    Declaration(JSModule module, Node node, Node parent, Node gramps) {
      this.module = module;
      this.node = node;
    }
  }

  




  private boolean hasConditionalAncestor(Node n) {
    for (Node ancestor : n.getAncestors()) {
      switch (ancestor.getType()) {
        case Token.DO:
        case Token.FOR:
        case Token.HOOK:
        case Token.IF:
        case Token.SWITCH:
        case Token.WHILE:
          return true;
      }
    }
    return false;
  }

  


  private NamedInfo getNamedInfo(Var v) {
    NamedInfo info = namedInfo.get(v);
    if (info == null) {
      info = new NamedInfo();
      namedInfo.put(v, info);
    }
    return info;
  }

  


  private void processReference(NodeTraversal t, NamedInfo info, String name) {
    
    
    
    

    boolean recursive = false;
    Node rootNode = t.getScope().getRootNode();
    if (rootNode.getType() == Token.FUNCTION) {
      
      
      String scopeFuncName = rootNode.getFirstChild().getString();
      if (scopeFuncName.equals(name)) {
        recursive = true;
      }
      
      
      Node rootParent = rootNode.getParent();
      if (rootParent.getType() == Token.ASSIGN) {
        Node owner = rootParent.getFirstChild();
        while (owner.getType() == Token.GETPROP) {
          owner = owner.getFirstChild();
        }
        if (owner.getType() == Token.NAME && owner.getString().equals(name)) {
          recursive = true;
        }
      }
    }

    if (!recursive) {
      info.addUsedModule(t.getModule());
    }
  }

  


  public void visit(NodeTraversal t, Node n, Node parent) {
    if (n.getType() != Token.NAME) {
      return;
    }

    
    String name = n.getString();
    if (name.isEmpty() || compiler.getCodingConvention().isExported(name)) {
      return;
    }

    
    
    
    Var v = t.getScope().getVar(name);
    if (v == null || !v.isGlobal()) {
      return;
    }

    NamedInfo info = getNamedInfo(v);
    if (info.allowMove) {
      if (maybeProcessDeclaration(t, n, parent, info)) {
        if (hasConditionalAncestor(n)) {
          info.allowMove = false;
        }
      } else {
        
        processReference(t, info, name);
      }
    }
  }

  














  private boolean maybeProcessDeclaration(NodeTraversal t, Node name,
      Node parent, NamedInfo info) {
    Node gramps = parent.getParent();
    switch (parent.getType()) {
      case Token.VAR:
        if (canMoveValue(name.getFirstChild())) {
          return info.addDeclaration(
              new Declaration(t.getModule(), name, parent, gramps));
        }
        return false;

      case Token.FUNCTION:
        if (NodeUtil.isFunctionDeclaration(parent)) {
          return info.addDeclaration(
              new Declaration(t.getModule(), name, parent, gramps));
        }
        return false;

      case Token.ASSIGN:
      case Token.GETPROP:
        Node child = name;

        
        
        for (Node current : name.getAncestors()) {
          if (current.getType() == Token.GETPROP) {
            
          } else if (current.getType() == Token.ASSIGN &&
                     current.getFirstChild() == child) {
            Node currentParent = current.getParent();
            if (NodeUtil.isExpressionNode(currentParent) &&
                canMoveValue(current.getLastChild())) {
              return info.addDeclaration(
                  new Declaration(t.getModule(), current, currentParent,
                      currentParent.getParent()));
            }
          } else {
            return false;
          }

          child = current;
        }
        return false;

      case Token.CALL:
        if (NodeUtil.isExprCall(gramps)) {
          SubclassRelationship relationship =
              compiler.getCodingConvention().getClassesDefinedByCall(parent);
          if (relationship != null &&
              name.getString().equals(relationship.subclassName)) {
            return info.addDeclaration(
                new Declaration(t.getModule(), parent, gramps,
                    gramps.getParent()));
          }
        }
        return false;

      default:
        return false;
    }
  }

  


  private boolean canMoveValue(Node n) {
    
    
    
    
    
    
    if (n == null || NodeUtil.isLiteralValue(n) ||
        n.getType() == Token.FUNCTION) {
      return true;
    } else if (n.getType() == Token.CALL) {
      Node functionName = n.getFirstChild();
      return functionName.getType() == Token.NAME &&
          (functionName.getString().equals(
              CrossModuleMethodMotion.STUB_METHOD_NAME) ||
           functionName.getString().equals(
              CrossModuleMethodMotion.UNSTUB_METHOD_NAME));
    } else if (n.getType() == Token.ARRAYLIT ||
        n.getType() == Token.OBJECTLIT) {
      for (Node child = n.getFirstChild(); child != null;
           child = child.getNext()) {
        if (!canMoveValue(child)) {
          return false;
        }
      }

      return true;
    }

    return false;
  }
}
