















package com.google.javascript.jscomp;

import com.google.common.base.Preconditions;
import com.google.common.base.Predicates;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.Token;
import com.google.javascript.rhino.jstype.TernaryValue;








public class PeepholeRemoveDeadCode extends AbstractPeepholeOptimization {

  
  
  
  

  @Override
  Node optimizeSubtree(Node subtree) {
    switch(subtree.getType()) {
      case Token.COMMA:
        return tryFoldComma(subtree);
      case Token.SCRIPT:
      case Token.BLOCK:
        return tryOptimizeBlock(subtree);
      case Token.EXPR_RESULT:
        return tryFoldHookExpr(subtree);
      case Token.HOOK:
        return tryFoldHook(subtree);
      case Token.IF:
        return tryFoldIf(subtree);
      case Token.WHILE:
        return tryFoldWhile(subtree);
       case Token.FOR: {
          Node condition = NodeUtil.getConditionExpression(subtree);
          if (condition != null) {
            tryFoldForCondition(condition);
          }
        }
        return tryFoldFor(subtree);
      case Token.DO:
        return tryFoldDo(subtree);
        default:
          return subtree;
    }
  }

  private Node tryFoldComma(Node n) {
    

    Node parent = n.getParent();
    Node left = n.getFirstChild();
    Node right = left.getNext();

    if (!mayHaveSideEffects(left)) {
      
      n.removeChild(right);
      parent.replaceChild(n, right);
      reportCodeChange();
      return right;
    } else {
      if (parent.getType() == Token.EXPR_RESULT) {
        
        n.detachChildren();
        
        parent.replaceChild(n, left);
        
        Node newStatement = new Node(Token.EXPR_RESULT, right);
        newStatement.copyInformationFrom(n);

        
        
        parent.getParent().addChildAfter(newStatement, parent);
        reportCodeChange();
        return left;
      }
    }

    return n;
  }

  


  Node tryOptimizeBlock(Node n) {
    
    for (Node c = n.getFirstChild(); c != null; ) {
      Node next = c.getNext();  
      if (!mayHaveSideEffects(c)) {
        n.removeChild(c);  
        reportCodeChange();
      } else {
        tryOptimizeConditionalAfterAssign(c);
      }
      c = next;
    }

    if (n.isSyntheticBlock() ||  n.getParent() == null) {
      return n;
    }

    
    if (NodeUtil.tryMergeBlock(n)) {
      reportCodeChange();
      return null;
    }

    return n;
  }

  
  



  private void tryOptimizeConditionalAfterAssign(Node n) {
    Node next = n.getNext();

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    if (isSimpleAssignment(n) && isConditionalStatement(next)) {
      Node lhsAssign = getSimpleAssignmentName(n);

      Node condition = getConditionalStatementCondition(next);
      if (NodeUtil.isName(lhsAssign) && NodeUtil.isName(condition)
          && lhsAssign.getString().equals(condition.getString())) {
        Node rhsAssign = getSimpleAssignmentValue(n);
        TernaryValue value = NodeUtil.getExpressionBooleanValue(rhsAssign);
        if (value != TernaryValue.UNKNOWN) {
          int replacementConditionNodeType =
            (value.toBoolean(true)) ? Token.TRUE : Token.FALSE;
          condition.getParent().replaceChild(condition,
              new Node(replacementConditionNodeType));
          reportCodeChange();
        }
      }
    }
  }

  



  private boolean isSimpleAssignment(Node n) {
    
    
    if (NodeUtil.isExprAssign(n)
        && NodeUtil.isName(n.getFirstChild().getFirstChild())) {
      return true;
    } else if (n.getType() == Token.VAR && n.hasOneChild() &&
        n.getFirstChild().getFirstChild() != null) {
      return true;
    }

    return false;
  }

  


  private Node getSimpleAssignmentName(Node n) {
    Preconditions.checkState(isSimpleAssignment(n));
    if (NodeUtil.isExprAssign(n)) {
      return n.getFirstChild().getFirstChild();
    } else {
      
      return n.getFirstChild();
    }
  }

  


  private Node getSimpleAssignmentValue(Node n) {
    Preconditions.checkState(isSimpleAssignment(n));
    return n.getFirstChild().getLastChild();
  }

  


  private boolean isConditionalStatement(Node n) {
    
    
    return n != null && (n.getType() == Token.IF || isExprConditional(n));
  }

  


  private boolean isExprConditional(Node n) {
    if (n.getType() == Token.EXPR_RESULT) {
      switch (n.getFirstChild().getType()) {
        case Token.HOOK:
        case Token.AND:
        case Token.OR:
          return true;
      }
    }
    return false;
  }

  


  private Node getConditionalStatementCondition(Node n) {
    if (n.getType() == Token.IF) {
      return NodeUtil.getConditionExpression(n);
    } else {
      Preconditions.checkState(isExprConditional(n));
      return n.getFirstChild().getFirstChild();
    }
  }

  



  private Node tryFoldIf(Node n) {
    Preconditions.checkState(n.getType() == Token.IF);
    Node parent = n.getParent();
    Preconditions.checkNotNull(parent);
    int type = n.getType();
    Node cond = n.getFirstChild();
    Node thenBody = cond.getNext();
    Node elseBody = thenBody.getNext();

    
    if (elseBody != null && !mayHaveSideEffects(elseBody)) {
      n.removeChild(elseBody);
      elseBody = null;
      reportCodeChange();
    }

    
    if (!mayHaveSideEffects(thenBody) && elseBody != null) {
      n.removeChild(elseBody);
      n.replaceChild(thenBody, elseBody);
      Node notCond = new Node(Token.NOT);
      n.replaceChild(cond, notCond);
      notCond.addChildToFront(cond);
      cond = notCond;
      thenBody = cond.getNext();
      elseBody = null;
      reportCodeChange();
    }

    
    if (!mayHaveSideEffects(thenBody) && elseBody == null) {
      if (mayHaveSideEffects(cond)) {
        
        n.removeChild(cond);
        Node replacement = NodeUtil.newExpr(cond);
        parent.replaceChild(n, replacement);
        reportCodeChange();
        return replacement;
      } else {
        
        NodeUtil.removeChild(parent, n);
        reportCodeChange();
        return null;
      }
    }

    
    TernaryValue condValue = NodeUtil.getExpressionBooleanValue(cond);
    if (condValue == TernaryValue.UNKNOWN) {
      return n;  
    }

    if (mayHaveSideEffects(cond)) {
      
      boolean newConditionValue = condValue == TernaryValue.TRUE;
      
      if (!newConditionValue && elseBody == null) {
        elseBody = new Node(Token.BLOCK).copyInformationFrom(n);
        n.addChildToBack(elseBody);
      }
      Node newCond = new Node(newConditionValue ? Token.TRUE : Token.FALSE);
      n.replaceChild(cond, newCond);
      Node branchToKeep = newConditionValue ? thenBody : elseBody;
      branchToKeep.addChildToFront(
          new Node(Token.EXPR_RESULT, cond).copyInformationFrom(cond));
      reportCodeChange();
      cond = newCond;
    }

    boolean condTrue = condValue.toBoolean(true);
    if (n.getChildCount() == 2) {
      Preconditions.checkState(type == Token.IF);

      if (condTrue) {
        
        Node thenStmt = n.getFirstChild().getNext();
        n.removeChild(thenStmt);
        parent.replaceChild(n, thenStmt);
        reportCodeChange();
        return thenStmt;
      } else {
        
        NodeUtil.redeclareVarsInsideBranch(n);
        NodeUtil.removeChild(parent, n);
        reportCodeChange();
        return null;
      }
    } else {
      
      
      Node trueBranch = n.getFirstChild().getNext();
      Node falseBranch = trueBranch.getNext();
      Node branchToKeep = condTrue ? trueBranch : falseBranch;
      Node branchToRemove = condTrue ? falseBranch : trueBranch;
      NodeUtil.redeclareVarsInsideBranch(branchToRemove);
      n.removeChild(branchToKeep);
      parent.replaceChild(n, branchToKeep);
      reportCodeChange();
      return branchToKeep;
    }
  }

  



  private Node tryFoldHookExpr(Node n) {
    Preconditions.checkState(NodeUtil.isExpressionNode(n));
    Node hook = n.getFirstChild();
    
    if (hook.getType() != Token.HOOK) {
      return n;
    }

    Node parent = n.getParent();
    Preconditions.checkNotNull(parent);
    Node cond = hook.getFirstChild();
    Node thenBody = cond.getNext();
    Node elseBody = thenBody.getNext();

    
    if (!mayHaveSideEffects(thenBody)) {
      
      Node ifNode = new Node(Token.IF);
      if (cond.getType() == Token.NOT) {
        Node expr = cond.getFirstChild();
        cond.removeChild(expr);
        ifNode.addChildToBack(expr);
      } else {
        Node not = new Node(Token.NOT).copyInformationFrom(cond);
        hook.removeChild(cond);
        not.addChildToBack(cond);
        ifNode.addChildToBack(not);
      }

      hook.removeChild(elseBody);
      ifNode.addChildToBack(
          new Node(Token.BLOCK, NodeUtil.newExpr(elseBody))
              .copyInformationFrom(elseBody));

      parent.replaceChild(n, ifNode);
      reportCodeChange();
      return ifNode;
    } else if (!mayHaveSideEffects(elseBody)) {
      
      Node ifNode = new Node(Token.IF);
      hook.removeChild(cond);
      ifNode.addChildToBack(cond);
      hook.removeChild(thenBody);

      ifNode.addChildToBack(
          new Node(Token.BLOCK, NodeUtil.newExpr(thenBody))
              .copyInformationFrom(thenBody));

      parent.replaceChild(n, ifNode);
      reportCodeChange();
      return ifNode;
    }

    return n;
  }

  



  private Node tryFoldHook(Node n) {
    Preconditions.checkState(n.getType() == Token.HOOK);
    Node parent = n.getParent();
    Preconditions.checkNotNull(parent);
    Node cond = n.getFirstChild();
    Node thenBody = cond.getNext();
    Node elseBody = thenBody.getNext();

    TernaryValue condValue = NodeUtil.getExpressionBooleanValue(cond);
    if (condValue == TernaryValue.UNKNOWN) {
      return n;  
    }

    
    n.detachChildren();
    Node branchToKeep = condValue.toBoolean(true) ? thenBody : elseBody;
    Node replacement;
    if (mayHaveSideEffects(cond)) {
      replacement = new Node(Token.COMMA).copyInformationFrom(n);
      replacement.addChildToFront(cond);
      replacement.addChildToBack(branchToKeep);
    } else {
      replacement = branchToKeep;
    }

    parent.replaceChild(n, replacement);
    reportCodeChange();
    return replacement;
  }

  


  Node tryFoldWhile(Node n) {
    Preconditions.checkArgument(n.getType() == Token.WHILE);
    Node cond = NodeUtil.getConditionExpression(n);
    if (NodeUtil.getBooleanValue(cond) != TernaryValue.FALSE) {
      return n;
    }
    NodeUtil.redeclareVarsInsideBranch(n);
    NodeUtil.removeChild(n.getParent(), n);
    reportCodeChange();

    return null;
  }

  


  Node tryFoldFor(Node n) {
    Preconditions.checkArgument(n.getType() == Token.FOR);
    
    if (n.getChildCount() != 4) {
      return n;
    }
    
    if (n.getFirstChild().getType() != Token.EMPTY) {
      return n;
    }

    Node cond = NodeUtil.getConditionExpression(n);
    if (NodeUtil.getBooleanValue(cond) != TernaryValue.FALSE) {
      return n;
    }

    NodeUtil.redeclareVarsInsideBranch(n);
    NodeUtil.removeChild(n.getParent(), n);
    reportCodeChange();
    return null;
  }

  




  Node tryFoldDo(Node n) {
    Preconditions.checkArgument(n.getType() == Token.DO);

    Node cond = NodeUtil.getConditionExpression(n);
    if (NodeUtil.getBooleanValue(cond) != TernaryValue.FALSE) {
      return n;
    }

    
    
    if (hasBreakOrContinue(n)) {
      return n;
    }

    Preconditions.checkState(
        NodeUtil.isControlStructureCodeBlock(n, n.getFirstChild()));
    Node block = n.removeFirstChild();

    n.getParent().replaceChild(n, block);
    reportCodeChange();

    return n;
  }

  


  boolean hasBreakOrContinue(Node n) {
    
    
    
    return NodeUtil.has(
        n,
        Predicates.<Node>or(
            new NodeUtil.MatchNodeType(Token.BREAK),
            new NodeUtil.MatchNodeType(Token.CONTINUE)),
        new NodeUtil.MatchNotFunction());
  }

  


  private void tryFoldForCondition(Node forCondition) {
    if (NodeUtil.getBooleanValue(forCondition) == TernaryValue.TRUE) {
      forCondition.getParent().replaceChild(forCondition,
          new Node(Token.EMPTY));
      reportCodeChange();
    }
  }
}
