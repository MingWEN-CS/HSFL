















package com.google.javascript.jscomp;

import com.google.common.base.Preconditions;
import com.google.common.base.Predicates;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.Token;
import com.google.javascript.rhino.jstype.TernaryValue;








public class PeepholeRemoveDeadCode extends AbstractPeepholeOptimization {

  
  
  
  

  @Override
  Node optimizeSubtree(Node subtree) {
    switch(subtree.getType()) {
      case Token.COMMA:
        return tryFoldComma(subtree);
      case Token.BLOCK:
        return tryFoldBlock(subtree);
      case Token.IF:
      case Token.HOOK:
        return tryFoldHookIf(subtree);
      case Token.WHILE:
        return tryFoldWhile(subtree);
       case Token.FOR: {
          Node condition = NodeUtil.getConditionExpression(subtree);
          if (condition != null) {
            tryFoldForCondition(condition);
          }
        }
        return tryFoldFor(subtree);
      case Token.DO:
        return tryFoldDo(subtree);
        default:
          return subtree;
    }
  }

  private Node tryFoldComma(Node n) {
    

    Node parent = n.getParent();
    Node left = n.getFirstChild();
    Node right = left.getNext();

    if (!NodeUtil.mayHaveSideEffects(left)) {
      
      n.removeChild(right);
      parent.replaceChild(n, right);
      reportCodeChange();
      return right;
    } else {
      if (parent.getType() == Token.EXPR_RESULT) {
        
        n.detachChildren();
        
        parent.replaceChild(n, left);
        
        Node newStatement = new Node(Token.EXPR_RESULT, right);
        newStatement.copyInformationFrom(n);

        
        
        parent.getParent().addChildAfter(newStatement, parent);
        reportCodeChange();
        return left;
      }
    }

    return n;
  }

  


  Node tryFoldBlock(Node n) {
    
    
    
    for (Node c = n.getFirstChild(); c != null; ) {
      Node next = c.getNext();  
      if (!NodeUtil.mayHaveSideEffects(c)) {
        n.removeChild(c);  
        reportCodeChange();
      }
      c = next;
    }

    if (n.isSyntheticBlock() ||  n.getParent() == null) {
      return n;
    }

    
    if (NodeUtil.tryMergeBlock(n)) {
      reportCodeChange();
      return null;
    }

    return n;
  }

  



  private Node tryFoldHookIf(Node n) {
    Node parent = n.getParent();
    int type = n.getType();
    Node cond = n.getFirstChild();
    Node thenBody = cond.getNext();
    Node elseBody = thenBody.getNext();

    boolean changes = false;

    if (type == Token.IF) {
      
      if (elseBody != null && !NodeUtil.mayHaveSideEffects(elseBody)) {
        n.removeChild(elseBody);
        elseBody = null;
        reportCodeChange();
        changes = true;
      }

      
      if (!NodeUtil.mayHaveSideEffects(thenBody) && elseBody != null) {
        n.removeChild(elseBody);
        n.replaceChild(thenBody, elseBody);
        Node notCond = new Node(Token.NOT);
        n.replaceChild(cond, notCond);
        notCond.addChildToFront(cond);
        cond = notCond;
        thenBody = cond.getNext();
        elseBody = null;
        reportCodeChange();
        changes = true;
      }

      
      if (!NodeUtil.mayHaveSideEffects(thenBody) && elseBody == null) {
        if (NodeUtil.mayHaveSideEffects(cond)) {
          
          n.removeChild(cond);
          Node replacement = NodeUtil.newExpr(cond);
          parent.replaceChild(n, replacement);
          reportCodeChange();
          return replacement;
        } else {
          
          NodeUtil.removeChild(parent, n);
          reportCodeChange();
          return null;
        }
      }
    } else {
      Preconditions.checkState(type == Token.HOOK);
      if (NodeUtil.isExpressionNode(parent)) {
        
        if (!NodeUtil.mayHaveSideEffects(thenBody)) {
          
          Node ifNode = new Node(Token.IF);
          if (cond.getType() == Token.NOT) {
            Node expr = cond.getFirstChild();
            cond.removeChild(expr);
            ifNode.addChildToBack(expr);
          } else {
            Node not = new Node(Token.NOT).copyInformationFrom(cond);
            n.removeChild(cond);
            not.addChildToBack(cond);
            ifNode.addChildToBack(not);
          }

          n.removeChild(elseBody);
          ifNode.addChildToBack(
              new Node(Token.BLOCK, NodeUtil.newExpr(elseBody))
                  .copyInformationFrom(elseBody));

          
          
          parent.getParent().replaceChild(parent, ifNode);
          reportCodeChange();
          return ifNode;
        } else if (!NodeUtil.mayHaveSideEffects(elseBody)) {
          
          Node ifNode = new Node(Token.IF);
          n.removeChild(cond);
          ifNode.addChildToBack(cond);
          n.removeChild(thenBody);

          ifNode.addChildToBack(
              new Node(Token.BLOCK, NodeUtil.newExpr(thenBody))
                  .copyInformationFrom(thenBody));

          
          
          parent.getParent().replaceChild(parent, ifNode);
          reportCodeChange();
          return ifNode;
        }
      }
    }

    
    if (!NodeUtil.isLiteralValue(cond, true)) {
      return n;  
    }

    TernaryValue condValue = NodeUtil.getBooleanValue(cond);
    if (condValue == TernaryValue.UNKNOWN) {
      return n;  
    }

    boolean condTrue = condValue.toBoolean(true);
    if (n.getChildCount() == 2) {
      Preconditions.checkState(type == Token.IF);

      if (condTrue) {
        
        Node thenStmt = n.getFirstChild().getNext();
        n.removeChild(thenStmt);
        parent.replaceChild(n, thenStmt);
        reportCodeChange();
        return thenStmt;
      } else {
        
        NodeUtil.redeclareVarsInsideBranch(n);
        NodeUtil.removeChild(parent, n);
        reportCodeChange();
        return null;
      }
    } else {
      
      
      Node firstBranch = n.getFirstChild().getNext();
      Node secondBranch = firstBranch.getNext();
      Node branch = condTrue ? firstBranch : secondBranch;
      Node notBranch = condTrue ? secondBranch : firstBranch;
      NodeUtil.redeclareVarsInsideBranch(notBranch);
      n.removeChild(branch);
      parent.replaceChild(n, branch);
      reportCodeChange();
      return branch;
    }
  }

  


  Node tryFoldWhile(Node n) {
    Preconditions.checkArgument(n.getType() == Token.WHILE);
    Node cond = NodeUtil.getConditionExpression(n);
    if (NodeUtil.getBooleanValue(cond) != TernaryValue.FALSE) {
      return n;
    }
    NodeUtil.redeclareVarsInsideBranch(n);
    NodeUtil.removeChild(n.getParent(), n);
    reportCodeChange();

    return null;
  }

  


  Node tryFoldFor(Node n) {
    Preconditions.checkArgument(n.getType() == Token.FOR);
    
    if (n.getChildCount() != 4) {
      return n;
    }
    
    if (n.getFirstChild().getType() != Token.EMPTY) {
      return n;
    }

    Node cond = NodeUtil.getConditionExpression(n);
    if (NodeUtil.getBooleanValue(cond) != TernaryValue.FALSE) {
      return n;
    }

    NodeUtil.redeclareVarsInsideBranch(n);
    NodeUtil.removeChild(n.getParent(), n);
    reportCodeChange();
    return null;
  }

  




  Node tryFoldDo(Node n) {
    Preconditions.checkArgument(n.getType() == Token.DO);

    Node cond = NodeUtil.getConditionExpression(n);
    if (NodeUtil.getBooleanValue(cond) != TernaryValue.FALSE) {
      return n;
    }

    
    
    if (hasBreakOrContinue(n)) {
      return n;
    }

    Preconditions.checkState(
        NodeUtil.isControlStructureCodeBlock(n, n.getFirstChild()));
    Node block = n.removeFirstChild();

    n.getParent().replaceChild(n, block);
    reportCodeChange();

    return n;
  }

  


  boolean hasBreakOrContinue(Node n) {
    
    
    
    return NodeUtil.has(
        n,
        Predicates.<Node>or(
            new NodeUtil.MatchNodeType(Token.BREAK),
            new NodeUtil.MatchNodeType(Token.CONTINUE)),
        new NodeUtil.MatchNotFunction());
  }

  


  private void tryFoldForCondition(Node forCondition) {
    if (NodeUtil.getBooleanValue(forCondition) == TernaryValue.TRUE) {
      forCondition.getParent().replaceChild(forCondition,
          new Node(Token.EMPTY));
      reportCodeChange();
    }
  }
}
