841,842c841,842
<         public void hotSwapScript(Node scriptRoot, Scope globalScope) {
<           pass.hotSwapScript(scriptRoot, globalScope);
---
>         public void hotSwapScript(Node scriptRoot) {
>           pass.hotSwapScript(scriptRoot);
1012,1013c1012,1013
<   final PassFactory resolveTypes =
<       new PassFactory("resolveTypes", false) {
---
>   final HotSwapPassFactory resolveTypes =
>       new HotSwapPassFactory("resolveTypes", false) {
1015c1015
<     protected CompilerPass createInternal(AbstractCompiler compiler) {
---
>     protected HotSwapCompilerPass createInternal(AbstractCompiler compiler) {
1035c1035
<         public void hotSwapScript(Node scriptRoot, Scope globalScope) {
---
>         public void hotSwapScript(Node scriptRoot) {
1079c1079
<         public void hotSwapScript(Node scriptRoot, Scope globalScope) {
---
>         public void hotSwapScript(Node scriptRoot) {
1125c1125
<   private class GlobalTypeResolver implements CompilerPass {
---
>   private class GlobalTypeResolver implements HotSwapCompilerPass {
1138a1139,1146
>     }
>     @Override
>     public void hotSwapScript(Node scriptRoot) {
>       
>       
>       
>       
>       regenerateGlobalTypedScope(compiler, compiler.getRoot());
