133a134,146
>       case Token.ASSIGN_BITOR:
>       case Token.ASSIGN_BITXOR:
>       case Token.ASSIGN_BITAND:
>       case Token.ASSIGN_LSH:
>       case Token.ASSIGN_RSH:
>       case Token.ASSIGN_URSH:
>       case Token.ASSIGN_ADD:
>       case Token.ASSIGN_SUB:
>       case Token.ASSIGN_MUL:
>       case Token.ASSIGN_DIV:
>       case Token.ASSIGN_MOD:
>         return tryUnfoldAssignOp(subtree, left, right);
> 
454a468,471
>     if (!late) {
>       return n;
>     }
> 
521a539,563
>   }
> 
>   private Node tryUnfoldAssignOp(Node n, Node left, Node right) {
>     if (late) {
>       return n;
>     }
> 
>     if (!n.hasChildren() ||
>         n.getFirstChild().getNext() != n.getLastChild()) {
>       return n;
>     }
> 
>     if (mayHaveSideEffects(left)) {
>       return n;
>     }
> 
>     
>     int op = NodeUtil.getOpFromAssignmentOp(n);
>     Node replacement = new Node(Token.ASSIGN, left.detachFromParent(),
>         new Node(op, left.cloneTree(), right.detachFromParent())
>             .useSourceInfoFrom(n));
>     n.getParent().replaceChild(n, replacement);
>     reportCodeChange();
> 
>     return replacement;
