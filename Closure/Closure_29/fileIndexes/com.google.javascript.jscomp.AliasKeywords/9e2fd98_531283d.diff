164c164
<   private static class ThrowAliasSpecification extends AliasSpecification {
---
>   private class ThrowAliasSpecification extends AliasSpecification {
171c171,173
<       Node name = NodeUtil.newName(getAliasName(), throwNode, getAliasName());
---
>       Node name = NodeUtil.newName(
>           compiler.getCodingConvention(),
>           getAliasName(), throwNode, getAliasName());
188a191
>   }
190,191c193
<     
< 
---
>   
194,205d195
<     static int estimateMinOccurrencesRequriedToAlias() {
<       
<       
<       
<       
<       
<       
<       
<       
<       Node alias = createAliasFunctionNode("TT");
<       return InlineCostEstimator.getCost(alias) / 2 + 1;
<     }
206a197,200
>   static int estimateMinOccurrencesRequriedToAlias() {
>     
>     
>     
207a202,210
>     
>     
>     
>     
>     Node alias = createAliasFunctionNode("TT");
>     return InlineCostEstimator.getCost(alias) / 2 + 1;
>   }
> 
>   
211,217c214,219
<     private static Node createAliasFunctionNode(String aliasName) {
<       Node parameterName = Node.newString(Token.NAME, "jscomp_throw_param");
<       List<Node> parameters = Lists.newArrayList(parameterName.cloneNode());
<       Node throwStatement = new Node(Token.THROW, parameterName);
<       Node body = new Node(Token.BLOCK, throwStatement);
<       return NodeUtil.newFunctionNode(aliasName, parameters, body, -1, -1);
<     }
---
>   private static Node createAliasFunctionNode(String aliasName) {
>     Node parameterName = Node.newString(Token.NAME, "jscomp_throw_param");
>     List<Node> parameters = Lists.newArrayList(parameterName.cloneNode());
>     Node throwStatement = new Node(Token.THROW, parameterName);
>     Node body = new Node(Token.BLOCK, throwStatement);
>     return NodeUtil.newFunctionNode(aliasName, parameters, body, -1, -1);
221c223
<   private static class KeywordAliasSpecification extends AliasSpecification {
---
>   private class KeywordAliasSpecification extends AliasSpecification {
233c235,236
<       Node aliasNode = NodeUtil.newName(getAliasName(), n, getAliasName());
---
>       Node aliasNode = NodeUtil.newName(
>           compiler.getCodingConvention(), getAliasName(), n, getAliasName());
244c247,249
<       Node name = NodeUtil.newName(getAliasName(), varNode, getAliasName());
---
>       Node name = NodeUtil.newName(
>           compiler.getCodingConvention(), getAliasName(),
>           varNode, getAliasName());
285c290
<       ThrowAliasSpecification.estimateMinOccurrencesRequriedToAlias();
---
>       estimateMinOccurrencesRequriedToAlias();
