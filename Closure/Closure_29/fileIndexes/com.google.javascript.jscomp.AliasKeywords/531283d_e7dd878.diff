255a256,298
>   
>   private class VoidKeywordAliasSpecification extends AliasSpecification {
>     VoidKeywordAliasSpecification(String aliasName, int tokenId) {
>       super(aliasName, tokenId);
>     }
> 
>     @Override
>     public void visit(Node n, Node parent) {
>       Node value = n.getFirstChild();
>       if (value.getType() == Token.NUMBER && value.getDouble() == 0) {
>         super.visit(n, parent);
>       }
>     }
> 
>     @Override
>     protected int minOccurrencesRequiredToAlias() {
>       return MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL;
>     }
> 
>     @Override
>     protected void aliasNode(Node n, Node parent) {
>       Node aliasNode = NodeUtil.newName(
>           compiler.getCodingConvention(), getAliasName(), n, getAliasName());
>       parent.replaceChild(n, aliasNode);
>     }
> 
>     @Override
>     
> 
> 
>     protected void insertAliasDeclaration(Node codeRoot) {
>       Node varNode = new Node(Token.VAR);
>       Node value = new Node(Token.VOID, Node.newNumber(0));
>       Node name = NodeUtil.newName(
>           compiler.getCodingConvention(), getAliasName(),
>           varNode, getAliasName());
>       name.addChildToBack(value);
>       varNode.addChildToBack(name);
>       codeRoot.addChildrenToFront(varNode);
>     }
>   }
> 
> 
259a303
>   static final String ALIAS_VOID = "JSCompiler_alias_VOID";
406a451
>     l.add(new VoidKeywordAliasSpecification(ALIAS_VOID, Token.VOID));
