















package com.google.javascript.jscomp;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.common.collect.Sets;
import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.Token;

import java.util.List;
import java.util.Map;
import java.util.Set;









class AliasKeywords implements CompilerPass {
  
  private class FindAliasableNodes extends AbstractPostOrderCallback {
    @Override
    public void visit(NodeTraversal t, Node n, Node parent) {
      final int type = n.getType();
      if (isAliasableType(type)) {
        visitAliasableNode(n, parent);
      } else if (type == Token.NAME) {
        visitNameNode(n);
      }
    }

    



    private void visitAliasableNode(Node n, Node parent) {
      AliasSpecification aliasableNodes = aliasTypes.get(n.getType());
      aliasableNodes.visit(n, parent);
    }

    



    private void visitNameNode(Node n) {
      if (isAliasDefinition(n)) {
        throw new IllegalStateException(
            "Existing alias definition for " + Node.tokenToName(n.getType()));
      }
    }
  }

  




  private abstract static class AliasSpecification {

    
    private final Map<Node, Node> nodes = Maps.newHashMap();

    



    private boolean isAliased = false;

    private String aliasName;

    private int tokenId;

    



    public AliasSpecification(String aliasName, int tokenId) {
      this.aliasName = aliasName;
      this.tokenId = tokenId;
    }

    public void visit(Node n, Node parent) {
      nodes.put(n, parent);
    }

    






    boolean maybeInsertAliasDeclarationIntoParseTree(Node codeRoot) {
      if (nodes.size() >= minOccurrencesRequiredToAlias()) {
        insertAliasDeclaration(codeRoot);
        isAliased = true;
        return true;
      }
      return false;
    }

    



    public void doAlias(AbstractCompiler compiler) {
      if (isAliased) {
        for (Map.Entry<Node, Node> entry : nodes.entrySet()) {
          Node n = entry.getKey();
          Node parent = entry.getValue();
          aliasNode(n, parent);
          compiler.reportCodeChange();
        }
      }
    }

    public int getTokenId() {
      return tokenId;
    }

    public String getAliasName() {
      return aliasName;
    }

    



    protected abstract int minOccurrencesRequiredToAlias();

    





    protected abstract void insertAliasDeclaration(Node codeRoot);

    
    protected abstract void aliasNode(Node n, Node parent);
  }

  
  
  private class ThrowAliasSpecification extends AliasSpecification {
    ThrowAliasSpecification(String aliasName) {
      super(aliasName, Token.THROW);
    }

    @Override
    protected void aliasNode(Node throwNode, Node parent) {
      Node name = NodeUtil.newName(
          compiler.getCodingConvention(),
          getAliasName(), throwNode, getAliasName());
      Node aliasCall = new Node(Token.CALL, name, throwNode.removeFirstChild());
      Node exprResult = new Node(Token.EXPR_RESULT, aliasCall);
      parent.replaceChild(throwNode, exprResult);
    }

    @Override
    


    protected void insertAliasDeclaration(Node codeRoot) {
      codeRoot.addChildToFront(createAliasFunctionNode(getAliasName()));
    }

    @Override
    protected int minOccurrencesRequiredToAlias() {
      return MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW;
    }
  }

  



  static int estimateMinOccurrencesRequriedToAlias() {
    
    
    
    
    
    
    
    
    Node alias = createAliasFunctionNode("TT");
    return InlineCostEstimator.getCost(alias) / 2 + 1;
  }

  



  private static Node createAliasFunctionNode(String aliasName) {
    Node parameterName = Node.newString(Token.NAME, "jscomp_throw_param");
    List<Node> parameters = Lists.newArrayList(parameterName.cloneNode());
    Node throwStatement = new Node(Token.THROW, parameterName);
    Node body = new Node(Token.BLOCK, throwStatement);
    return NodeUtil.newFunctionNode(aliasName, parameters, body, -1, -1);
  }

  
  private class KeywordAliasSpecification extends AliasSpecification {
    KeywordAliasSpecification(String aliasName, int tokenId) {
      super(aliasName, tokenId);
    }

    @Override
    protected int minOccurrencesRequiredToAlias() {
      return MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL;
    }

    @Override
    protected void aliasNode(Node n, Node parent) {
      Node aliasNode = NodeUtil.newName(
          compiler.getCodingConvention(), getAliasName(), n, getAliasName());
      parent.replaceChild(n, aliasNode);
    }

    @Override
    


    protected void insertAliasDeclaration(Node codeRoot) {
      Node varNode = new Node(Token.VAR);
      Node value = new Node(getTokenId());
      Node name = NodeUtil.newName(
          compiler.getCodingConvention(), getAliasName(),
          varNode, getAliasName());
      name.addChildToBack(value);
      varNode.addChildToBack(name);
      codeRoot.addChildrenToFront(varNode);
    }
  }

  static final String ALIAS_NULL = "JSCompiler_alias_NULL";
  static final String ALIAS_TRUE = "JSCompiler_alias_TRUE";
  static final String ALIAS_FALSE = "JSCompiler_alias_FALSE";
  static final String ALIAS_THROW = "JSCompiler_alias_THROW";

  





















  static final int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL = 6;

  



  static final int MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW =
      estimateMinOccurrencesRequriedToAlias();

  
  private final AbstractCompiler compiler;

  


  private final List<AliasSpecification> aliasSpecifications;

  
  private final Map<Integer, AliasSpecification> aliasTypes;

  
  private final Set<String> aliasNames;

  AliasKeywords(AbstractCompiler compiler) {
    this.compiler = compiler;
    aliasSpecifications = createAliasSpecifications();
    aliasTypes = Maps.newLinkedHashMap();
    aliasNames = Sets.newLinkedHashSet();
    for (AliasSpecification specification : aliasSpecifications) {
      aliasTypes.put(specification.getTokenId(), specification);
      aliasNames.add(specification.getAliasName());
    }
  }

  


  public void process(Node externs, Node root) {
    
    NodeTraversal.traverse(compiler, root, new FindAliasableNodes());

    if (needsAliases()) {
      
      addAliasNodes(compiler.getNodeForCodeInsertion(null));

      
      for (AliasSpecification spec : aliasSpecifications) {
        spec.doAlias(compiler);
      }
    }
  }

  private boolean needsAliases() {
    for (AliasSpecification spec : aliasSpecifications) {
      if (!spec.nodes.isEmpty()) {
        return true;
      }
    }

    return false;
  }

  



  private void addAliasNodes(Node codeRoot) {
    boolean codeChanged = false;

    for (AliasSpecification spec : aliasSpecifications) {
      if (spec.maybeInsertAliasDeclarationIntoParseTree(codeRoot)) {
        codeChanged = true;
      }
    }

    if (codeChanged) {
      compiler.reportCodeChange();
    }
  }

  


  private boolean isAliasDefinition(Node n) {
    if (n.getType() != Token.NAME) {
      return false;
    }

    if (!isAliasName(n.getString())) {
      
      return false;
    }

    



    return n.getFirstChild() != null;
  }

  


  private boolean isAliasableType(int type) {
    return aliasTypes.containsKey(type);
  }

  


  private boolean isAliasName(String name) {
    return aliasNames.contains(name);
  }

  




  private List<AliasSpecification> createAliasSpecifications() {
    List<AliasSpecification> l = Lists.newArrayList();
    l.add(new KeywordAliasSpecification(ALIAS_FALSE, Token.FALSE));
    l.add(new KeywordAliasSpecification(ALIAS_NULL, Token.NULL));
    l.add(new KeywordAliasSpecification(ALIAS_TRUE, Token.TRUE));
    
    
    
    
    
    
    l.add(new ThrowAliasSpecification(ALIAS_THROW));
    return l;
  }
}
