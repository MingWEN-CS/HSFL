22d21
< import com.google.javascript.jscomp.AbstractCompiler.LifeCycleStage;
24d22
< import com.google.javascript.jscomp.Scope.Var;
51a50,54
>   
>   OptimizeParameters(AbstractCompiler compiler, NameReferenceGraph unused) {
>     this(compiler);
>   }
> 
55,56d57
<     Preconditions.checkState(
<         compiler.getLifeCycleStage() == LifeCycleStage.NORMALIZED);
185d185
<     boolean continueLooking = false;
194c194
<         continueLooking = buildParameterList(parameters, cur, site.scope);
---
>         buildParameterList(parameters, cur);
197c197
<         continueLooking= findFixedParameters(parameters, cur);
---
>         findConstantParameters(parameters, cur);
199,206d198
<       if (!continueLooking) {
<         return;
<       }
<     }
< 
<     continueLooking = adjustForSideEffects(parameters);
<     if (!continueLooking) {
<       return;
214c206
<       optimizeCallSite(defFinder, parameters, call);
---
>       optimizeCallSite(parameters, call);
225,274c217
<   
< 
< 
< 
<   private boolean adjustForSideEffects(List<Parameter> parameters) {
<     
<     
< 
<     
<     
< 
<     boolean anyMovable = false;
<     boolean seenUnmovableSideEffects = false;
<     boolean seenUnmoveableSideEfffected = false;
<     for (int i = parameters.size() - 1; i >= 0; i--) {
<       Parameter current = parameters.get(i);
< 
<       
<       
<       
<       
<       
< 
<       if (current.shouldRemove
<           && ((seenUnmovableSideEffects && current.canBeSideEffected())
<           || (seenUnmoveableSideEfffected && current.hasSideEffects()))) {
<         current.shouldRemove = false;
<       }
< 
<       if (current.shouldRemove) {
<         anyMovable = true;
<       } else {
<         if (current.canBeSideEffected) {
<           seenUnmoveableSideEfffected = true;
<         }
< 
<         if (current.hasSideEffects) {
<           seenUnmovableSideEffects = true;
<         }
<       }
<     }
<     return anyMovable;
<   }
< 
<   
< 
< 
< 
<   private boolean findFixedParameters(List<Parameter> parameters, Node cur) {
<     boolean anyMovable = false;
---
>   private void findConstantParameters(List<Parameter> parameters, Node cur) {
277d219
<       Parameter p;
279,289c221,225
<         p = new Parameter(cur, false);
<         parameters.add(p);
<       } else {
<         p = parameters.get(index);
<         if (p.shouldRemove()) {
<           Node value = p.getArg();
<           if (!cur.isEquivalentTo(value)) {
<             p.setShouldRemove(false);
<           } else {
<             anyMovable = true;
<           }
---
>         parameters.add(new Parameter(cur, false));
>       } else if (parameters.get(index).shouldRemove()) {
>         Node value = parameters.get(index).getArg();
>         if (!nodesAreEqual(cur, value)) {
>           parameters.get(index).setShouldRemove(false);
292,293d227
< 
<       setParameterSideEffectInfo(p, cur);
300,301d233
< 
<     return anyMovable;
304,309c236
<   
< 
< 
<   private boolean buildParameterList(
<       List<Parameter> parameters, Node cur, Scope s) {
<     boolean anyMovable = false;
---
>   private void buildParameterList(List<Parameter> parameters, Node cur) {
311,317c238
<       boolean movable = isMovableValue(cur, s);
<       Parameter p = new Parameter(cur, movable);
<       setParameterSideEffectInfo(p, cur);
<       parameters.add(p);
<       if (movable) {
<         anyMovable = true;
<       }
---
>       parameters.add(new Parameter(cur, NodeUtil.isLiteralValue(cur, false)));
319,366d239
<     return anyMovable;
<   }
< 
<   private void setParameterSideEffectInfo(Parameter p, Node value) {
<     if (!p.hasSideEffects()) {
<       p.setHasSideEffects(NodeUtil.mayHaveSideEffects(value, compiler));
<     }
< 
<     if (!p.canBeSideEffected()) {
<       p.setCanBeSideEffected(NodeUtil.canBeSideEffected(value));
<     }
<   }
< 
< 
<   
< 
< 
< 
<   private boolean isMovableValue(Node n, Scope s) {
<     
<     
<     
<     switch (n.getType()) {
<       case Token.THIS:
<         return false;
<       case Token.FUNCTION:
<         
<         
<         
<         return false;
<       case Token.NAME:
<         if (n.getString().equals("arguments")) {
<           return false;
<         } else {
<           Var v = s.getVar(n.getString());
<           if (v != null && v.isLocal()) {
<             return false;
<           }
<         }
<         break;
<     }
< 
<     for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
<       if (!isMovableValue(c, s)) {
<         return false;
<       }
<     }
<     return true;
382,383c255
<   private void optimizeCallSite(
<       SimpleDefinitionFinder defFinder, List<Parameter> parameters, Node call) {
---
>   private void optimizeCallSite(List<Parameter> parameters, Node call) {
385,387c257,258
<       Parameter p = parameters.get(index);
<       if (p.shouldRemove()) {
<         eliminateCallParamAt(defFinder, p, call, index);
---
>       if (parameters.get(index).shouldRemove()) {
>         eliminateCallParamAt(call, index);
395a267,278
> 
> 
> 
>   private boolean nodesAreEqual(Node n1, Node n2) {
>     return NodeUtil.isImmutableValue(n1) && NodeUtil.isImmutableValue(n2) &&
>         n1.isEquivalentTo(n2);
>   }
> 
>   
> 
> 
> 
399,400d281
<     private boolean hasSideEffects;
<     private boolean canBeSideEffected;
418,433d298
< 
<     public void setHasSideEffects(boolean hasSideEffects) {
<       this.hasSideEffects = hasSideEffects;
<     }
< 
<     public boolean hasSideEffects() {
<       return hasSideEffects;
<     }
< 
<     public void setCanBeSideEffected(boolean canBeSideEffected) {
<       this.canBeSideEffected = canBeSideEffected;
<     }
< 
<     public boolean canBeSideEffected() {
<       return canBeSideEffected;
<     }
450,451c315,316
<     Preconditions.checkState(value.getParent() == null);
<     Node newVar = NodeUtil.newVarNode(varName.getString(), value);
---
>     Node newVar = NodeUtil.newVarNode(varName.getQualifiedName(),
>         value.cloneTree());
510,513c375
< 
< 
<   private Node eliminateCallParamAt(
<       SimpleDefinitionFinder defFinder, Parameter p, Node call, int argIndex) {
---
>   private Node eliminateCallParamAt(Node call, int argIndex) {
522,527d383
<       
<       
<       
<       if (p.getArg() != formalArgPtr) {
<         defFinder.removeReferences(formalArgPtr);
<       }
