















package com.google.javascript.jscomp;

import com.google.common.collect.Lists;
import com.google.javascript.rhino.Node;

import java.util.List;











class OptimizeCalls implements CompilerPass {
  List<CallGraphCompilerPass> passes = Lists.newArrayList();
  private AbstractCompiler compiler;

  OptimizeCalls(AbstractCompiler compiler) {
    this.compiler = compiler;
  }

  OptimizeCalls addPass(CallGraphCompilerPass pass) {
    passes.add(pass);
    return this;
  }

  interface CallGraphCompilerPass {
    void process(Node externs, Node root, SimpleDefinitionFinder definitions);
  }

  @Override
  public void process(Node externs, Node root) {
    if (passes.size() > 0) {
      SimpleDefinitionFinder defFinder = new SimpleDefinitionFinder(compiler);
      defFinder.process(externs, root);
      for (CallGraphCompilerPass pass : passes) {
        pass.process(externs, root, defFinder);
      }
    }
  }
}
