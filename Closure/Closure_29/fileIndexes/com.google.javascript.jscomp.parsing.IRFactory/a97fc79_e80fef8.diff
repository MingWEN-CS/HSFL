22,28c22,23
< 
< import com.google.javascript.rhino.JSDocInfo;
< import com.google.javascript.rhino.jstype.JSTypeRegistry;
< import com.google.javascript.rhino.Node;
< import com.google.javascript.rhino.ScriptOrFnNode;
< import com.google.javascript.rhino.Token;
< 
---
> import com.google.common.collect.Sets;
> import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;
71a67,71
> import com.google.javascript.rhino.JSDocInfo;
> import com.google.javascript.rhino.Node;
> import com.google.javascript.rhino.ScriptOrFnNode;
> import com.google.javascript.rhino.Token;
> import com.google.javascript.rhino.jstype.JSTypeRegistry;
73c73
< import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;
---
> import java.util.Set;
93a94,96
>   
>   private final Set<String> ALLOWED_DIRECTIVES = Sets.newHashSet("use strict");
> 
365a369
>       parseDirectives(node);
368a373,407
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     private void parseDirectives(Node node) {
>       
>       Set<String> directives = null;
>       while (isDirective(node.getFirstChild())) {
>         String directive = node.removeFirstChild().getFirstChild().getString();
>         if (directives == null) {
>           directives = Sets.newHashSet(directive);
>         } else {
>           directives.add(directive);
>         }
>       }
> 
>       if (directives != null) {
>         node.setDirectives(directives);
>       }
>     }
> 
>     private boolean isDirective(Node n) {
>       if (n == null) return false;
> 
>       int nType = n.getType();
>       return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&
>           n.getFirstChild().getType() == Token.STRING &&
>           ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());
>     }
> 
531c570,573
<       node.addChildToBack(transform(functionNode.getBody()));
---
> 
>       Node bodyNode = transform(functionNode.getBody());
>       parseDirectives(bodyNode);
>       node.addChildToBack(bodyNode);
