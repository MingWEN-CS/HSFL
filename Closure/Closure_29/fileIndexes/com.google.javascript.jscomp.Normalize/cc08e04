














package com.google.javascript.jscomp;

import com.google.common.base.Preconditions;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;
import com.google.javascript.jscomp.NodeTraversal.Callback;
import com.google.javascript.jscomp.Scope.Var;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.Token;

import java.util.Map;





































class Normalize implements CompilerPass, Callback {

  private final AbstractCompiler compiler;
  private final boolean assertOnChange;
  private static final boolean CONVERT_WHILE_TO_FOR = true;
  static final boolean MAKE_LOCAL_NAMES_UNIQUE = true;

  Normalize(AbstractCompiler compiler, boolean assertOnChange) {
    this.compiler = compiler;
    this.assertOnChange = assertOnChange;
  }

  private void reportCodeChange(String changeDescription) {
    if (assertOnChange) {
      throw new IllegalStateException(
          "Normalize constraints violated:\n" + changeDescription);
    }
    compiler.reportCodeChange();
  }

  @Override
  public void process(Node externs, Node root) {
    new RenameConstants().process(externs, root);

    NodeTraversal.traverse(compiler, root, this);
    if (MAKE_LOCAL_NAMES_UNIQUE) {
      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
      NodeTraversal t = new NodeTraversal(compiler, renamer);
      t.traverseRoots(externs, root);
    }
    removeDuplicateDeclarations(root);
  }

  @Override
  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
    doStatementNormalizations(t, n, parent);

    return true;
  }

  class RenameConstants extends AbstractPostOrderCallback
      implements CompilerPass {
    @Override
    public void process(Node externs, Node root) {
      NodeTraversal.traverse(compiler, root, this);
    }

    @Override
    public void visit(NodeTraversal t, Node n, Node parent) {
      if (n.getType() == Token.NAME) {
        
        
        if (n.getString().isEmpty()) {
          return;
        }

        JSDocInfo info = null;
        
        Var var = t.getScope().getVar(n.getString());
        if (var == null) {
          
          
          n.putBooleanProp(Node.IS_CONSTANT_NAME, false);
          return;
        } else {
          info = var.getJSDocInfo();
        }

        if (NodeUtil.isConstantName(n)) {
          
          
          
          
          return;
        }

        if ((info != null && info.isConstant()) ||
            n.getBooleanProp(Node.IS_CONSTANT_NAME)) {
          n.putBooleanProp(Node.IS_CONSTANT_NAME, true);
          n.setString(addConstantMarkerToName(n.getString()));
          reportCodeChange("rename constant var");
        }
      }
    }
  }

  static String addConstantMarkerToName(String name) {
    return name + NodeUtil.CONSTANT_MARKER;
  }

  static String removeConstantMarkerFromName(String name) {
    return name.replace(NodeUtil.CONSTANT_MARKER, "");
  }

  


  static class VerifyConstants extends AbstractPostOrderCallback
      implements CompilerPass {

    final private AbstractCompiler compiler;
    final private boolean checkUserDeclarations;

    VerifyConstants(AbstractCompiler compiler, boolean checkUserDeclarations) {
      this.compiler = compiler;
      this.checkUserDeclarations = checkUserDeclarations;
    }

    @Override
    public void process(Node externs, Node root) {
      Node externsAndJs = root.getParent();
      Preconditions.checkState(externsAndJs != null);
      Preconditions.checkState(externsAndJs.hasChild(externs));

      NodeTraversal.traverseRoots(
          compiler, Lists.newArrayList(externs, root), this);
    }

    private Map<String,Boolean> constantMap = Maps.newHashMap();

    @Override
    public void visit(NodeTraversal t, Node n, Node parent) {
      if (n.getType() == Token.NAME || n.getType() == Token.STRING) {
        String name = n.getString();
        if (n.getString().isEmpty()) {
          return;
        }

        boolean isConst = n.getBooleanProp(Node.IS_CONSTANT_NAME);
        if (checkUserDeclarations) {
          boolean expectedConst = false;
          if (NodeUtil.isConstantName(n)) {
            expectedConst = true;
          } else {
            expectedConst = false;

            JSDocInfo info = null;
            Var var = t.getScope().getVar(n.getString());
            if (var != null) {
              info = var.getJSDocInfo();
            }

            if (info != null && info.isConstant()) {
              expectedConst = true;
            } else {
              expectedConst = false;
            }
          }

          if (expectedConst) {
            Preconditions.checkState(expectedConst == isConst,
                "The name " + name + " is not annotated as constant.");
          } else {
            Preconditions.checkState(expectedConst == isConst,
                "The name " + name + " should not be annotated as constant.");
          }
        }

        Boolean value = constantMap.get(name);
        if (value == null) {
          constantMap.put(name, isConst);
        } else {
          Preconditions.checkState(value.booleanValue() == isConst,
              "The name " + name + "is not consistently annotated as " +
              "constant.");
        }
      }
    }
  }

  @Override
  public void visit(NodeTraversal t, Node n, Node parent) {
    switch (n.getType()) {
      case Token.WHILE:
        if (CONVERT_WHILE_TO_FOR) {
          Node expr = n.getFirstChild();
          n.setType(Token.FOR);
          n.addChildBefore(new Node(Token.EMPTY), expr);
          n.addChildAfter(new Node(Token.EMPTY), expr);
          reportCodeChange("WHILE node");
        }
        break;
    }
  }

  


  private void doStatementNormalizations(NodeTraversal t, Node n, Node parent) {
    if (n.getType() == Token.LABEL) {
      normalizeLabels(n);
    }

    
    
    if (NodeUtil.isStatementBlock(n) || n.getType() == Token.LABEL) {
      extractForInitializer(n, null, null);
    }

    
    
    if (NodeUtil.isStatementBlock(n)) {
      splitVarDeclarations(n);
    }

    if (n.getType() == Token.FUNCTION) {
      moveNamedFunctions(n.getLastChild());
    }
  }

  
  
  




  private void normalizeLabels(Node n) {
    Preconditions.checkArgument(n.getType() == Token.LABEL);

    Node last = n.getLastChild();
    switch (last.getType()) {
      case Token.LABEL:
      case Token.BLOCK:
      case Token.FOR:
      case Token.WHILE:
      case Token.DO:
        return;
      default:
        Node block = new Node(Token.BLOCK);
        n.replaceChild(last, block);
        block.addChildToFront(last);
        reportCodeChange("LABEL normalization");
        return;
    }
  }

  










  private void extractForInitializer(
      Node n, Node before, Node beforeParent) {

    for (Node next, c = n.getFirstChild(); c != null; c = next) {
      next = c.getNext();
      Node insertBefore = (before == null) ? c : before;
      Node insertBeforeParent = (before == null) ? n : beforeParent;
      switch (c.getType()) {
        case Token.LABEL:
          extractForInitializer(c, insertBefore, insertBeforeParent);
          break;
        case Token.FOR:
          if (!NodeUtil.isForIn(c)
              && c.getFirstChild().getType() != Token.EMPTY) {
            Node init = c.getFirstChild();
            c.replaceChild(init, new Node(Token.EMPTY));

            Node newStatement;
            
            
            if (init.getType() == Token.VAR) {
              newStatement = init;
            } else {
              newStatement = NodeUtil.newExpr(init);
            }

            insertBeforeParent.addChildBefore(newStatement, insertBefore);
            reportCodeChange("FOR initializer");
          }
          break;
      }
    }
  }


  







  private void splitVarDeclarations(Node n) {
    for (Node next, c = n.getFirstChild(); c != null; c = next) {
      next = c.getNext();
      if (c.getType() == Token.VAR) {
        if (assertOnChange && !c.hasChildren()) {
          throw new IllegalStateException("Empty VAR node.");
        }

        while (c.getFirstChild() != c.getLastChild()) {
          Node name = c.getFirstChild();
          c.removeChild(name);
          Node newVar = new Node(Token.VAR, name, n.getLineno(), n.getCharno());
          n.addChildBefore(newVar, c);
          reportCodeChange("VAR with multiple children");
        }
      }
    }
  }

  



  private void moveNamedFunctions(Node functionBody) {
    Preconditions.checkState(
        functionBody.getParent().getType() == Token.FUNCTION);
    Node previous = null;
    Node current = functionBody.getFirstChild();
    
    
    while (current != null && NodeUtil.isFunctionDeclaration(current)) {
      previous = current;
      current = current.getNext();
    }

    
    Node insertAfter = previous;
    while (current != null) {
      
      Node next = current.getNext();
      if (NodeUtil.isFunctionDeclaration(current)) {
        
        Preconditions.checkNotNull(previous);
        functionBody.removeChildAfter(previous);

        
        
        insertAfter = addToFront(functionBody, current, insertAfter);
        compiler.reportCodeChange();
      } else {
        
        previous = current;
      }
      current = next;
    }
  }

  




  private Node addToFront(Node parent, Node newChild, Node after) {
    if (after == null) {
      parent.addChildToFront(newChild);
    } else {
      parent.addChildAfter(newChild, after);
    }
    return newChild;
  }

  


  private void removeDuplicateDeclarations(Node root) {
    Callback tickler = new ScopeTicklingCallback();
    ScopeCreator scopeCreator =  new SyntacticScopeCreator(
        compiler, new DuplicateDeclarationHandler());
    NodeTraversal t = new NodeTraversal(compiler, tickler, scopeCreator);
    t.traverse(root);
  }

  


  private final class DuplicateDeclarationHandler implements
      SyntacticScopeCreator.RedeclarationHandler {

    



    @Override
    public void onRedeclaration(
        Scope s, String name, Node n, Node parent, Node gramps,
        Node nodeWithLineNumber) {
      Preconditions.checkState(n.getType() == Token.NAME);
      if (parent.getType() == Token.VAR) {
        Preconditions.checkState(parent.hasOneChild());

        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        if (n.hasChildren()) {
          
          parent.removeChild(n);
          
          Node value = n.getFirstChild();
          n.removeChild(value);
          Node replacement = new Node(Token.ASSIGN, n, value);
          gramps.replaceChild(parent, new Node(Token.EXPR_RESULT, replacement));
        } else {
          
          if (NodeUtil.isStatementBlock(gramps)) {
            gramps.removeChild(parent);
          } else if (gramps.getType() == Token.FOR) {
            
            
            
            parent.removeChild(n);
            gramps.replaceChild(parent, n);
          } else {
            Preconditions.checkState(gramps.getType() == Token.LABEL);
            gramps.replaceChild(parent, new Node(Token.EMPTY));
          }
        }
        reportCodeChange("Duplicate VAR declaration");
      }
    }

  }

  


  private final class ScopeTicklingCallback
      implements NodeTraversal.ScopedCallback {
    @Override
    public void enterScope(NodeTraversal t) {
      
      
      t.getScope();
    }

    @Override
    public void exitScope(NodeTraversal t) {
      
    }

    @Override
    public boolean shouldTraverse(
        NodeTraversal nodeTraversal, Node n, Node parent) {
      return true;
    }

    @Override
    public void visit(NodeTraversal t, Node n, Node parent) {
      
    }
  }

}
