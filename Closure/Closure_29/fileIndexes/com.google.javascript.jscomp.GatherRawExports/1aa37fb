















package com.google.javascript.jscomp;

import com.google.common.base.Preconditions;
import com.google.common.collect.Sets;
import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.Token;

import java.util.Set;







class GatherRawExports extends AbstractPostOrderCallback
    implements CompilerPass {

  private final AbstractCompiler compiler;

  private static final String GLOBAL_THIS_NAME = "window";

  private final Set<String> exportedVariables = Sets.newHashSet();

  GatherRawExports(AbstractCompiler compiler) {
    this.compiler = compiler;
  }

  @Override
  public void process(Node externs, Node root) {
    Preconditions.checkState(compiler.isNormalized());
    NodeTraversal.traverse(compiler, root, this);
  }

  @Override
  public void visit(NodeTraversal t, Node n, Node parent) {
    Node sibling = n.getNext();
    if (sibling != null
        && sibling.getType() == Token.STRING
        && NodeUtil.isGet(parent)) {
      
      
      if (isGlobalThisObject(t, n)) {
        exportedVariables.add(sibling.getString());
      }
    }
  }

  private boolean isGlobalThisObject(NodeTraversal t, Node n) {
    if (n.getType() == Token.THIS) {
      return t.inGlobalScope();
    } else if (n.getType() == Token.NAME && !NodeUtil.isLabelName(n)) {
      String varName = n.getString();
      if (varName.equals(GLOBAL_THIS_NAME)) {
        return true;
      }
    }
    return false;
  }

  public Set<String> getExportedVariableNames() {
    return exportedVariables;
  }
}
