















package com.google.javascript.jscomp;

import com.google.common.base.Preconditions;
import com.google.common.collect.Lists;
import com.google.javascript.jscomp.DefinitionsRemover.Definition;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.Token;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ObjectType;

import java.util.Collection;
import java.util.List;


































class DevirtualizePrototypeMethods
    implements OptimizeCallGraph.CallGraphCompilerPass,
               SpecializationAwareCompilerPass {
  private final AbstractCompiler compiler;
  private SpecializeModule.SpecializationState specializationState;

  DevirtualizePrototypeMethods(AbstractCompiler compiler) {
    this.compiler = compiler;
  }

  public void enableSpecialization(SpecializeModule.SpecializationState state) {
    this.specializationState = state;
  }

  @Override
  public void process(Node externs, Node root) {
    SimpleDefinitionFinder defFinder = new SimpleDefinitionFinder(compiler);
    defFinder.process(externs, root);
    process(defFinder);
  }

  @Override
  public void process(SimpleDefinitionFinder definitions) {
    for (DefinitionSite defSite : definitions.getDefinitionSites()) {
      rewriteDefinitionIfEligible(defSite, definitions);
    }
  }

  


  private static boolean isCall(UseSite site) {
    Node node = site.node;
    Node parent = node.getParent();
    return (parent.getFirstChild() == node) && NodeUtil.isCall(parent);
  }

  


  private static boolean isPrototypeMethodDefinition(Node node) {
    Node parent = node.getParent();
    if (parent == null) {
      return false;
    }

    Node gramp = parent.getParent();
    if ((gramp == null) ||
        (parent.getFirstChild() != node) ||
        !NodeUtil.isExprAssign(gramp)) {
      return false;
    }

    Node functionNode = parent.getLastChild();
    if ((functionNode == null) || !NodeUtil.isFunction(functionNode)) {
      return false;
    }

    if (!NodeUtil.isGetProp(node)) {
      return false;
    }

    Node nameNode = node.getFirstChild();
    return NodeUtil.isGetProp(nameNode) &&
        nameNode.getLastChild().getString().equals("prototype");

  }

  


  private String getRewrittenMethodName(String orginalMethodName) {
    return "JSCompiler_StaticMethods_" + orginalMethodName;
  }

  










  private void rewriteDefinitionIfEligible(DefinitionSite defSite,
                                           SimpleDefinitionFinder defFinder) {

    if (defSite.inExterns ||
        !defSite.inGlobalScope ||
        !isEligibleDefinition(defFinder, defSite)) {
      return;
    }

    Node node = defSite.node;

    
    
    if (!isPrototypeMethodDefinition(node)) {
      return;
    }

    for (Node ancestor = node.getParent();
         ancestor != null;
         ancestor = ancestor.getParent()) {
      if (NodeUtil.isControlStructure(ancestor)) {
        return;
      }
    }

    
    
    
    
    
    
    
    String newMethodName = getRewrittenMethodName(
        node.getLastChild().getString());
    rewriteDefinition(node, newMethodName);
    rewriteCallSites(defFinder, defSite.definition, newMethodName);
  }

  












  private boolean isEligibleDefinition(SimpleDefinitionFinder defFinder,
                                       DefinitionSite definitionSite) {

    Definition definition = definitionSite.definition;
    JSModule definitionModule = definitionSite.module;

    
    
    
    Node rValue = definition.getRValue();
    if (rValue == null ||
        !NodeUtil.isFunction(rValue) ||
        NodeUtil.isVarArgsFunction(rValue)) {
      return false;
    }

    
    Node lValue = definition.getLValue();
    if ((lValue == null) ||
        !NodeUtil.isGetProp(lValue)) {
      return false;
    }
    CodingConvention codingConvention = compiler.getCodingConvention();
    if (codingConvention.isExported(lValue.getLastChild().getString())) {
      return false;
    }

    Collection<UseSite> useSites = defFinder.getUseSites(definition);

    
    if (useSites.isEmpty()) {
      return false;
    }

    JSModuleGraph moduleGraph = compiler.getModuleGraph();

    for (UseSite site : useSites) {

      
      if (!isCall(site)) {
        return false;
      }

      
      Node nameNode = site.node;

      
      
      if (specializationState != null &&
          !specializationState.canFixupSpecializedFunctionContainingNode(
              nameNode)) {
        return false;
      }

      Collection<Definition> singleSiteDefinitions =
          defFinder.getDefinitionsReferencedAt(nameNode);
      if (singleSiteDefinitions.size() > 1) {
        return false;
      }
      Preconditions.checkState(!singleSiteDefinitions.isEmpty());
      Preconditions.checkState(singleSiteDefinitions.contains(definition));

      
      
      
      JSModule callModule = site.module;
      if ((definitionModule != callModule) &&
          ((callModule == null) ||
          !moduleGraph.dependsOn(callModule, definitionModule))) {
        return false;
      }
    }

    return true;
  }

  









  private void rewriteCallSites(SimpleDefinitionFinder defFinder,
                                Definition definition,
                                String newMethodName) {
    Collection<UseSite> useSites = defFinder.getUseSites(definition);
    for (UseSite site : useSites) {
      Node node = site.node;
      Node parent = node.getParent();

      Node objectNode = node.getFirstChild();
      node.removeChild(objectNode);
      parent.replaceChild(node, objectNode);
      parent.addChildToFront(
          Node.newString(Token.NAME, newMethodName)
              .copyInformationFrom(node));
      compiler.reportCodeChange();

      if (specializationState != null) {
        specializationState.reportSpecializedFunctionContainingNode(parent);
      }
    }
  }

  









  private void rewriteDefinition(Node node, String newMethodName) {
    Node parent = node.getParent();
    Node functionNode = parent.getLastChild();
    Node expr = parent.getParent();
    Node block = expr.getParent();

    Node newNameNode = Node.newString(Token.NAME, newMethodName)
        .copyInformationFrom(parent.getFirstChild());

    if (specializationState != null) {
      specializationState.reportRemovedFunction(functionNode, block);
    }

    parent.removeChild(functionNode);
    newNameNode.addChildToFront(functionNode);
    block.replaceChild(expr, new Node(Token.VAR, newNameNode));

    
    String self = newMethodName + "$self";
    Node argList = functionNode.getFirstChild().getNext();
    argList.addChildToFront(Node.newString(Token.NAME, self)
        .copyInformationFrom(functionNode));

    
    Node body = functionNode.getLastChild();
    replaceReferencesToThis(body, self);

    
    fixFunctionType(functionNode);

    compiler.reportCodeChange();
  }

  





  private void fixFunctionType(Node functionNode) {
    FunctionType type = (FunctionType) functionNode.getJSType();
    if (type != null) {
      JSTypeRegistry typeRegistry = compiler.getTypeRegistry();

      List<JSType> parameterTypes = Lists.newArrayList();
      parameterTypes.add(type.getTypeOfThis());

      for (Node param : type.getParameters()) {
        parameterTypes.add(param.getJSType());
      }

      ObjectType thisType =
          typeRegistry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);
      JSType returnType = type.getReturnType();

      JSType newType = typeRegistry.createFunctionType(
          thisType, returnType, parameterTypes);
      functionNode.setJSType(newType);
    }
  }

  



  private void replaceReferencesToThis(Node node, String name) {
    if (NodeUtil.isFunction(node)) {
      return;
    }

    for (Node child : node.children()) {
      if (NodeUtil.isThis(child)) {
        Node newName = Node.newString(Token.NAME, name);
        newName.setJSType(child.getJSType());
        node.replaceChild(child, newName);
      } else {
        replaceReferencesToThis(child, name);
      }
    }
  }
}
