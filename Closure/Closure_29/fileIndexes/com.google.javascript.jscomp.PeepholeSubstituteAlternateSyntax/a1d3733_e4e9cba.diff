1,466c1,16
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< package com.google.javascript.jscomp;
< 
< import com.google.common.base.Preconditions;
< import com.google.common.base.Predicate;
< import com.google.common.collect.ImmutableSet;
< import com.google.javascript.rhino.Node;
< import com.google.javascript.rhino.Token;
< import com.google.javascript.rhino.jstype.TernaryValue;
< 
< import java.util.regex.Pattern;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< public class PeepholeSubstituteAlternateSyntax 
<   extends AbstractPeepholeOptimization {
< 
<   private static final int AND_PRECEDENCE = NodeUtil.precedence(Token.AND);
<   private static final int OR_PRECEDENCE = NodeUtil.precedence(Token.OR);
< 
<   static final DiagnosticType INVALID_REGULAR_EXPRESSION_FLAGS =
<     DiagnosticType.error(
<         "JSC_INVALID_REGULAR_EXPRESSION_FLAGS",
<         "Invalid flags to RegExp constructor: {0}");
<   
<   static final Predicate<Node> DONT_TRAVERSE_FUNCTIONS_PREDICATE
<       = new Predicate<Node>() {
<     @Override
<     public boolean apply(Node input) {
<       return input.getType() != Token.FUNCTION;
<     }
<   };
<   
<   
< 
< 
<   @Override
<   @SuppressWarnings("fallthrough")
<   public Node optimizeSubtree(Node node) {
<     switch(node.getType()) {
<       case Token.RETURN:
<         return tryReduceReturn(node);  
<         
<       case Token.NOT:
<         return tryMinimizeNot(node);
<         
<       case Token.IF:
<         tryMinimizeCondition(node.getFirstChild());
<         return tryMinimizeIf(node);   
<         
<       case Token.EXPR_RESULT:
<         tryMinimizeCondition(node.getFirstChild());
<         return node;
<         
<       case Token.HOOK:
<         tryMinimizeCondition(node.getFirstChild());
<         return node;
<         
<       case Token.WHILE:
<       case Token.DO:
<       case Token.FOR:
<         if (NodeUtil.getConditionExpression(node) != null) {
<           tryMinimizeCondition(NodeUtil.getConditionExpression(node));
<         }
<         return node;
<         
<       case Token.NEW:
<         node = tryFoldStandardConstructors(node);
<         if (node.getType() != Token.CALL) {
<           return node;
<         }
<         
<         
<       case Token.CALL:
<         return tryFoldLiteralConstructor(node);
<         
<       default:
<           return node; 
<     }
<   }
<   
<   
< 
< 
< 
< 
<   private Node tryReduceReturn(Node n) {
<     Node result = n.getFirstChild();
<     if (result != null) {
<       switch (result.getType()) {
<         case Token.VOID:
<           Node operand = result.getFirstChild();
<           if (!NodeUtil.mayHaveSideEffects(operand)) {
<             n.removeFirstChild();
<             reportCodeChange();
<           }
<           break;
<         case Token.NAME:
<           String name = result.getString();
<           if (name.equals("undefined")) {
<             n.removeFirstChild();
<             reportCodeChange();
<           }
<           break;
<         default:
<           
<             break;
<       }
<     }
<     
<     return n;
<   }
<   
<   
< 
< 
< 
< 
<   private Node tryMinimizeNot(Node n) {
<     Node parent = n.getParent();
<     
<     Node notChild = n.getFirstChild();
<     
<     int complementOperator;
<     switch (notChild.getType()) {
<       case Token.EQ:
<         complementOperator = Token.NE;
<         break;
<       case Token.NE:
<         complementOperator = Token.EQ;
<         break;
<       case Token.SHEQ:
<         complementOperator = Token.SHNE;
<         break;
<       case Token.SHNE:
<         complementOperator = Token.SHEQ;
<         break;
<       
<       default:
<         return n;
<     }
<     Node newOperator = n.removeFirstChild();
<     newOperator.setType(complementOperator);
<     parent.replaceChild(n, newOperator);
<     reportCodeChange();
<     return newOperator;
<   }
<   
<   
< 
< 
< 
< 
< 
<   private Node tryMinimizeIf(Node n) {
<     
<     Node parent = n.getParent();
<     
<     Node cond = n.getFirstChild();
<     
<     
< 
< 
<     if (NodeUtil.isLiteralValue(cond)) {
<       return n;
<     }
<     
<     Node thenBranch = cond.getNext();
<     Node elseBranch = thenBranch.getNext();
< 
<     if (elseBranch == null) {
<       if (isExpressBlock(thenBranch)) {
<         Node expr = getBlockExpression(thenBranch);
<         if (isPropertyAssignmentInExpression(expr)) {
<           
<           
<           return n;
<         }
< 
<         if (cond.getType() == Token.NOT) {
<           
<           if (isLowerPrecedenceInExpression(cond, OR_PRECEDENCE) &&
<               isLowerPrecedenceInExpression(expr.getFirstChild(),
<                   OR_PRECEDENCE)) {
<             
<             return n;
<           }
< 
<           Node or = new Node(Token.OR, cond.removeFirstChild(),
<           expr.removeFirstChild()).copyInformationFrom(n);
<           Node newExpr = NodeUtil.newExpr(or);
<           parent.replaceChild(n, newExpr);
<           reportCodeChange();
< 
<           return newExpr;
<         }
< 
<         
<         if (isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) ||
<             isLowerPrecedenceInExpression(expr.getFirstChild(),
<                 AND_PRECEDENCE)) {
<           
<           return n;
<         }
< 
<         n.removeChild(cond);
<         Node and = new Node(Token.AND, cond, expr.removeFirstChild())
<                        .copyInformationFrom(n);
<         Node newExpr = NodeUtil.newExpr(and);
<         parent.replaceChild(n, newExpr);
<         reportCodeChange();
<         
<         return newExpr;
<       }
< 
<       return n;
<     }
<    
<     
< 
< 
<     tryRemoveRepeatedStatements(n);
< 
<     
<     
<     if (cond.getType() == Token.NOT && !consumesDanglingElse(elseBranch)) {
<       n.replaceChild(cond, cond.removeFirstChild());
<       n.removeChild(thenBranch);
<       n.addChildToBack(thenBranch);
<       reportCodeChange();
<       return n;
<     }
< 
<     
<     if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {
<       Node thenExpr = getBlockReturnExpression(thenBranch);
<       Node elseExpr = getBlockReturnExpression(elseBranch);
<       n.removeChild(cond);
<       thenExpr.detachFromParent();
<       elseExpr.detachFromParent();
< 
<       
<       
<       
<       Node hookNode = new Node(Token.HOOK, cond, thenExpr, elseExpr)
<                           .copyInformationFrom(n);
<       Node returnNode = new Node(Token.RETURN, hookNode);
<       parent.replaceChild(n, returnNode);
<       reportCodeChange();
<       return returnNode;
<     }
< 
<     boolean thenBranchIsExpressionBlock = isExpressBlock(thenBranch);
<     boolean elseBranchIsExpressionBlock = isExpressBlock(elseBranch);
< 
<     if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {
<       Node thenOp = getBlockExpression(thenBranch).getFirstChild();
<       Node elseOp = getBlockExpression(elseBranch).getFirstChild();
<       if (thenOp.getType() == elseOp.getType()) {
<         
<         if (NodeUtil.isAssignmentOp(thenOp)) {
<           Node lhs = thenOp.getFirstChild();
<           if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
<               
<               
<               
<               
<               !NodeUtil.mayEffectMutableState(lhs)) {
< 
<             n.removeChild(cond);
<             Node assignName = thenOp.removeFirstChild();
<             Node thenExpr = thenOp.removeFirstChild();
<             Node elseExpr = elseOp.getLastChild();
<             elseOp.removeChild(elseExpr);
< 
<             Node hookNode = new Node(Token.HOOK, cond, thenExpr, elseExpr)
<                                 .copyInformationFrom(n);
<             Node assign = new Node(thenOp.getType(), assignName, hookNode)
<                               .copyInformationFrom(thenOp);
<             Node expr = NodeUtil.newExpr(assign);
<             parent.replaceChild(n, expr);
<             reportCodeChange();
<             
<             return expr;
<           }
<         } else if (NodeUtil.isCall(thenOp)) {
<           
<           n.removeChild(cond);
<           thenOp.detachFromParent();
<           elseOp.detachFromParent();
<           Node hookNode = new Node(Token.HOOK, cond, thenOp, elseOp)
<                               .copyInformationFrom(n);
<           Node expr = NodeUtil.newExpr(hookNode);
<           parent.replaceChild(n, expr);
<           reportCodeChange();
<           
<           return expr;
<         }
<       }
<       return n;
<     }
< 
<     boolean thenBranchIsVar = isVarBlock(thenBranch);
<     boolean elseBranchIsVar = isVarBlock(elseBranch);
< 
<     
<     if (thenBranchIsVar && elseBranchIsExpressionBlock &&
<         NodeUtil.isAssign(getBlockExpression(elseBranch).getFirstChild())) {
< 
<       Node var = getBlockVar(thenBranch);
<       Node elseAssign = getBlockExpression(elseBranch).getFirstChild();
< 
<       Node name1 = var.getFirstChild();
<       Node maybeName2 = elseAssign.getFirstChild();
< 
<       if (name1.hasChildren()
<           && maybeName2.getType() == Token.NAME
<           && name1.getString().equals(maybeName2.getString())) {
<         Node thenExpr = name1.removeChildren();
<         Node elseExpr = elseAssign.getLastChild().detachFromParent();
<         cond.detachFromParent();
<         Node hookNode = new Node(Token.HOOK, cond, thenExpr, elseExpr)
<                             .copyInformationFrom(n);
<         var.detachFromParent();
<         name1.addChildrenToBack(hookNode);
<         parent.replaceChild(n, var);
<         reportCodeChange();
<         return var;
<       }
< 
<     
<     } else if (elseBranchIsVar && thenBranchIsExpressionBlock &&
<         NodeUtil.isAssign(getBlockExpression(thenBranch).getFirstChild())) {
< 
<       Node var = getBlockVar(elseBranch);
<       Node thenAssign = getBlockExpression(thenBranch).getFirstChild();
< 
<       Node maybeName1 = thenAssign.getFirstChild();
<       Node name2 = var.getFirstChild();
< 
<       if (name2.hasChildren()
<           && maybeName1.getType() == Token.NAME
<           && maybeName1.getString().equals(name2.getString())) {
<         Node thenExpr = thenAssign.getLastChild().detachFromParent();
<         Node elseExpr = name2.removeChildren();
<         cond.detachFromParent();
<         Node hookNode = new Node(Token.HOOK, cond, thenExpr, elseExpr)
<                             .copyInformationFrom(n);
<         var.detachFromParent();
<         name2.addChildrenToBack(hookNode);
<         parent.replaceChild(n, var);
<         reportCodeChange();
<         
<         return var;
<       }
<     }
<     
<     return n;
<   }
<   
<   
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<   private void tryRemoveRepeatedStatements(Node n) {
<     Preconditions.checkState(n.getType() == Token.IF);
< 
<     Node parent = n.getParent();
<     if (!NodeUtil.isStatementBlock(parent)) {
<       
<       
<       return;
<     }
< 
<     Node cond = n.getFirstChild();
<     Node trueBranch = cond.getNext();
<     Node falseBranch = trueBranch.getNext();
<     Preconditions.checkNotNull(trueBranch);
<     Preconditions.checkNotNull(falseBranch);
< 
<     while (true) {
<       Node lastTrue = trueBranch.getLastChild();
<       Node lastFalse = falseBranch.getLastChild();
<       if (lastTrue == null || lastFalse == null
<           || !areNodesEqualForInlining(lastTrue, lastFalse)) {
<         break;
<       }
<       lastTrue.detachFromParent();
<       lastFalse.detachFromParent();
<       parent.addChildAfter(lastTrue, n);
<       reportCodeChange();
<     }
<   }
<   
< 
< 
< 
<   private boolean isExpressBlock(Node n) {
<     if (n.getType() == Token.BLOCK) {
<       if (n.hasOneChild()) {
<         return NodeUtil.isExpressionNode(n.getFirstChild());
<       }
<     }
< 
<     return false;
<   }
<  
<   
< 
< 
<   private Node getBlockExpression(Node n) {
<     Preconditions.checkState(isExpressBlock(n));
<     return n.getFirstChild();
<   }
< 
<   
< 
< 
< 
<   private boolean isReturnExpressBlock(Node n) {
<     if (n.getType() == Token.BLOCK) {
<       if (n.hasOneChild()) {
<         Node first = n.getFirstChild();
<         if (first.getType() == Token.RETURN) {
<           return first.hasOneChild();
<         }
<       }
---
> <!DOCTYPE HTML PUBLIC "-
> <!--NewPage-->
> <HTML>
> <HEAD>
> <TITLE>
> PeepholeSubstituteAlternateSyntax (Compiler)
> </TITLE>
> 
> 
> <LINK REL ="stylesheet" TYPE="text/css" HREF="../../../../dev_javadoc.css" TITLE="Style">
> 
> <SCRIPT type="text/javascript">
> function windowTitle()
> {
>     if (location.href.indexOf('is-external=true') == -1) {
>         parent.document.title="PeepholeSubstituteAlternateSyntax (Compiler)";
468,915c18,346
< 
<     return false;
<   }
< 
<   
< 
< 
<   private Node getBlockReturnExpression(Node n) {
<     Preconditions.checkState(isReturnExpressBlock(n));
<     return n.getFirstChild().getFirstChild();
<   }
< 
<   
< 
< 
< 
<   private boolean isVarBlock(Node n) {
<     if (n.getType() == Token.BLOCK) {
<       if (n.hasOneChild()) {
<         Node first = n.getFirstChild();
<         if (first.getType() == Token.VAR) {
<           return first.hasOneChild();
<         }
<       }
<     }
< 
<     return false;
<   }
< 
<   
< 
< 
<   private Node getBlockVar(Node n) {
<     Preconditions.checkState(isVarBlock(n));
<     return n.getFirstChild();
<   }
<   
<   
< 
< 
< 
< 
<   private boolean consumesDanglingElse(Node n) {
<     while (true) {
<       switch (n.getType()) {
<         case Token.IF:
<           if (n.getChildCount() < 3) {
<             return true;
<           }
<           
<           n = n.getLastChild();
<           continue;
<         case Token.WITH:
<         case Token.WHILE:
<         case Token.FOR:
<           n = n.getLastChild();
<           continue;
<         default:
<           return false;
<       }
<     }
<   }
<   
<   
< 
< 
< 
<   private boolean isLowerPrecedenceInExpression(Node n,
<       final int precedence) {  
<     Predicate<Node> isLowerPrecedencePredicate = new Predicate<Node>() {
<       @Override
<       public boolean apply(Node input) {
<         return NodeUtil.precedence(input.getType()) < precedence;
<       }
<     };
<     
<     return NodeUtil.has(n, isLowerPrecedencePredicate,
<         DONT_TRAVERSE_FUNCTIONS_PREDICATE);
<   }
< 
<   
< 
< 
<   private boolean isPropertyAssignmentInExpression(Node n) {
<     Predicate<Node> isPropertyAssignmentInExpressionPredicate = 
<         new Predicate<Node>() {
<       @Override
<       public boolean apply(Node input) {
<         return (input.getType() == Token.GETPROP && 
<             input.getParent().getType() == Token.ASSIGN);
<       }
<     };
<     
<     return NodeUtil.has(n, isPropertyAssignmentInExpressionPredicate,
<         DONT_TRAVERSE_FUNCTIONS_PREDICATE);
<   }
< 
<   
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<   private Node tryMinimizeCondition(Node n) {
<     Node parent = n.getParent();
<     
<     switch (n.getType()) {
<       case Token.NOT:
<         Node first = n.getFirstChild();
<         switch (first.getType()) {
<           case Token.NOT: {
<               Node newRoot = first.removeFirstChild();
<               parent.replaceChild(n, newRoot);
<               n = newRoot; 
<               reportCodeChange();
< 
<               
<               
<               return tryMinimizeCondition(n);
<             }
<           case Token.AND:
<           case Token.OR: {
<               Node leftParent = first.getFirstChild();
<               Node rightParent = first.getLastChild();
<               if (leftParent.getType() != Token.NOT
<                   || rightParent.getType() != Token.NOT) {
<                 
<                 break;
<               }
<               Node left = leftParent.removeFirstChild();
<               Node right = rightParent.removeFirstChild();
< 
<               int newOp = (first.getType() == Token.AND) ? Token.OR : Token.AND;
<               Node newRoot = new Node(newOp, left, right);
<               parent.replaceChild(n, newRoot);
<               n = newRoot; 
<               reportCodeChange();
< 
<               
<               
<               
<             }
<             break;
<         }
<         break;
< 
<       case Token.OR:
<       case Token.AND:
<         
<         break;
< 
<       default:
<         
<         TernaryValue nVal = NodeUtil.getBooleanValue(n);
<         if (nVal != TernaryValue.UNKNOWN) {
<           boolean result = nVal.toBoolean(true);
<           int equivalentResult = result ? 1 : 0;
<           return maybeReplaceChildWithNumber(n, parent, equivalentResult);
<         }
<         
<         return n;
<     }
< 
<     for (Node c = n.getFirstChild(); c != null; ) {
<       Node next = c.getNext();  
<       tryMinimizeCondition(c);
<       c = next;
<     }
<     
<     return n;
<   }
<   
<   
< 
< 
< 
< 
< 
<   private Node maybeReplaceChildWithNumber(Node n, Node parent, int num) {
<     Node newNode = Node.newNumber(num);
<     if (!newNode.isEquivalentTo(n)) {
<       parent.replaceChild(n, newNode);
<       reportCodeChange();
<       
<       return newNode;
<     }
<     
<     return n;
<   }
<   
<   private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =
<     
<     
<     
<     ImmutableSet.of(
<       "Object",
<       "Array",
<       "RegExp",
<       "Error"
<       );
<   
<   
< 
< 
<   private Node tryFoldStandardConstructors(Node n) {
<     Preconditions.checkState(n.getType() == Token.NEW);
<     
<     
<     
<     
<     if (isASTNormalized()) {
<       if (n.getFirstChild().getType() == Token.NAME) {
<         String className = n.getFirstChild().getString();
<         if (STANDARD_OBJECT_CONSTRUCTORS.contains(className)) {
<             n.setType(Token.CALL);
<             reportCodeChange();
<         }
<       }
<     }
<     
<     return n;
<   }
<   
<   
< 
< 
< 
<   private Node tryFoldLiteralConstructor(Node n) {
<     Preconditions.checkArgument(n.getType() == Token.CALL
<         || n.getType() == Token.NEW);
<   
<     Node constructorNameNode = n.getFirstChild();
<     
<     Node newLiteralNode = null;
< 
<     
<     
<     
< 
<     if (isASTNormalized() && Token.NAME == constructorNameNode.getType()) {
< 
<       String className = constructorNameNode.getString();
< 
<       if ("RegExp".equals(className)) {
<         
<         return tryFoldRegularExpressionConstructor(n);
<       } else {
<         boolean constructorHasArgs = constructorNameNode.getNext() != null;
< 
<         if ("Object".equals(className) && !constructorHasArgs) {
<           
<           newLiteralNode = new Node(Token.OBJECTLIT);
<         } else if ("Array".equals(className)) {
<           
<           Node arg0 = constructorNameNode.getNext();
<           FoldArrayAction action = isSafeToFoldArrayConstructor(arg0);
< 
<           if (action == FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS ||
<               action == FoldArrayAction.SAFE_TO_FOLD_WITHOUT_ARGS) {
<             newLiteralNode = new Node(Token.ARRAYLIT);
<             n.removeChildren();
<             if (action == FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS) {
<               newLiteralNode.addChildrenToFront(arg0);
<             }
<           }
<         }
< 
<         if (newLiteralNode != null) {
<           n.getParent().replaceChild(n, newLiteralNode);
<           reportCodeChange();
<           return newLiteralNode;
<         }   
<       }
<     }
<     return n;
<   } 
< 
<   private static enum FoldArrayAction {
<     NOT_SAFE_TO_FOLD, SAFE_TO_FOLD_WITH_ARGS, SAFE_TO_FOLD_WITHOUT_ARGS}
< 
<   
< 
< 
< 
< 
< 
<   private FoldArrayAction isSafeToFoldArrayConstructor(Node arg) {
<     FoldArrayAction action = FoldArrayAction.NOT_SAFE_TO_FOLD;
< 
<     if (arg == null) {
<       action = FoldArrayAction.SAFE_TO_FOLD_WITHOUT_ARGS;
<     } else if (arg.getNext() != null) {
<       action = FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;
<     } else {
<       switch (arg.getType()) {
<         case (Token.STRING):
<           
<           action = FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;
<           break;
<         case (Token.NUMBER):
<           
<           if (arg.getDouble() == 0) {
<             action = FoldArrayAction.SAFE_TO_FOLD_WITHOUT_ARGS;
<           }
<           break;
<         case (Token.ARRAYLIT):
<           
<           action = FoldArrayAction.SAFE_TO_FOLD_WITH_ARGS;
<           break;
<         default:
<       }
<     }
<     return action;
<   }
< 
<   private Node tryFoldRegularExpressionConstructor(Node n) { 
<     Node parent = n.getParent();
<     Node constructor = n.getFirstChild();
<     Node pattern = constructor.getNext();  
<     Node flags = null != pattern ? pattern.getNext() : null;  
< 
<     
<     
<     
<     if (!isASTNormalized()) {
<       return n;
<     }
<     
<     if (null == pattern || (null != flags && null != flags.getNext())) {
<       
<       return n;
<     }
< 
<     if (
<         pattern.getType() == Token.STRING
<         
<         && !"".equals(pattern.getString())
< 
<         
<         
<         && pattern.getString().length() < 100
< 
<         && (null == flags || flags.getType() == Token.STRING)
<         
<         
<         && !containsUnicodeEscape(pattern.getString())) {
< 
<       
<       
<       pattern = makeForwardSlashBracketSafe(pattern);
< 
<       Node regexLiteral;
<       if (null == flags || "".equals(flags.getString())) {
<         
<         regexLiteral = new Node(Token.REGEXP, pattern);
<       } else {
<         
<         if (!areValidRegexpFlags(flags.getString())) {
<           error(INVALID_REGULAR_EXPRESSION_FLAGS, flags);
<           return n;
<         }
<         if (!areSafeFlagsToFold(flags.getString())) {
<           return n;
<         }
<         n.removeChild(flags);
<         regexLiteral = new Node(Token.REGEXP, pattern, flags);
<       }
< 
<       parent.replaceChild(n, regexLiteral);
<       reportCodeChange();
<       return regexLiteral;
<     }
< 
<     return n;
<   }
< 
<   private static final Pattern REGEXP_FLAGS_RE = Pattern.compile("^[gmi]*$");
< 
<   
< 
< 
< 
< 
< 
< 
<   private static boolean areValidRegexpFlags(String flags) {
<     return REGEXP_FLAGS_RE.matcher(flags).matches();
<   }
< 
<   
< 
< 
< 
< 
< 
< 
< 
<   private static boolean areSafeFlagsToFold(String flags) {
<     return flags.indexOf('g') < 0;
<   }
< 
<   
< 
< 
<   private static Node makeForwardSlashBracketSafe(Node n) {
<     String s = n.getString();
<     
<     StringBuilder sb = null;
<     int pos = 0;
<     for (int i = 0; i < s.length(); ++i) {
<       switch (s.charAt(i)) {
<         case '\\':  
<           ++i;
<           break;
<         case '/':  
<           if (null == sb) { sb = new StringBuilder(s.length() + 16); }
<           sb.append(s, pos, i).append('\\');
<           pos = i;
<           break;
<       }
<     }
< 
<     
<     if (null == sb) { return n.cloneTree(); }
< 
<     sb.append(s, pos, s.length());
<     return Node.newString(sb.toString()).copyInformationFrom(n);
<   }
<   
<   
< 
< 
< 
<   static boolean containsUnicodeEscape(String s) {
<     String esc = CodeGenerator.regexpEscape(s);
<     for (int i = -1; (i = esc.indexOf("\\u", i + 1)) >= 0;) {
<       int nSlashes = 0;
<       while (i - nSlashes > 0 && '\\' == esc.charAt(i - nSlashes - 1)) {
<         ++nSlashes;
<       }
---
> }
> </SCRIPT>
> <NOSCRIPT>
> </NOSCRIPT>
> 
> </HEAD>
> 
> <BODY BGCOLOR="white" onload="windowTitle();">
> <HR>
> 
> 
> <!-- ========= START OF TOP NAVBAR ======= -->
> <A NAME="navbar_top"><!-- --></A>
> <A HREF="#skip-navbar_top" title="Skip navigation links"></A>
> <TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
> <TR>
> <TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
> <A NAME="navbar_top_firstrow"><!-- --></A>
> <TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
>   <TR ALIGN="center" VALIGN="top">
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
>   <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
>   </TR>
> </TABLE>
> </TD>
> <TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
> </EM>
> </TD>
> </TR>
> 
> <TR>
> <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
> &nbsp;<A HREF="../../../../com/google/javascript/jscomp/PassFactory.html" title="class in com.google.javascript.jscomp"><B>PREV CLASS</B></A>&nbsp;
> &nbsp;<A HREF="../../../../com/google/javascript/jscomp/PerformanceTracker.html" title="class in com.google.javascript.jscomp"><B>NEXT CLASS</B></A></FONT></TD>
> <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
>   <A HREF="../../../../index.html?com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.html" target="_top"><B>FRAMES</B></A>  &nbsp;
> &nbsp;<A HREF="PeepholeSubstituteAlternateSyntax.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
> &nbsp;<SCRIPT type="text/javascript">
>   <!--
>   if(window==top) {
>     document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
>   }
>   
> </SCRIPT>
> <NOSCRIPT>
>   <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
> </NOSCRIPT>
> 
> 
> </FONT></TD>
> </TR>
> <TR>
> <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
>   SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
> <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
> DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
> </TR>
> </TABLE>
> <A NAME="skip-navbar_top"></A>
> <!-- ========= END OF TOP NAVBAR ========= -->
> 
> <HR>
> <!-- ======== START OF CLASS DATA ======== -->
> <H2>
> <FONT SIZE="-1">
> com.google.javascript.jscomp</FONT>
> <BR>
> Class PeepholeSubstituteAlternateSyntax</H2>
> <PRE>
> <A HREF="http:
>   <IMG SRC="../../../../resources/inherit.gif" ALT="extended by "><B>com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax</B>
> </PRE>
> <HR>
> <DL>
> <DT><PRE>public class <B>PeepholeSubstituteAlternateSyntax</B><DT>extends <A HREF="http:
> </PRE>
> 
> <P>
> A peephole optimization that minimizes code by simplifying conditional 
>  expressions, replacing IFs with HOOKs, replacing object constructors
>  with literals, and simplifying returns.
> <P>
> 
> <P>
> <HR>
> 
> <P>
> 
> <!-- ======== CONSTRUCTOR SUMMARY ======== -->
> 
> <A NAME="constructor_summary"><!-- --></A>
> <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
> <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
> <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
> <B>Constructor Summary</B></FONT></TH>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.html#PeepholeSubstituteAlternateSyntax()">PeepholeSubstituteAlternateSyntax</A></B>()</CODE>
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>
> </TR>
> </TABLE>
> &nbsp;
> <!-- ========== METHOD SUMMARY =========== -->
> 
> <A NAME="method_summary"><!-- --></A>
> <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
> <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
> <TH ALIGN="left" COLSPAN="2"><FONT SIZE="+2">
> <B>Method Summary</B></FONT></TH>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
> <CODE>protected &nbsp;boolean</CODE></FONT></TD>
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.html#areNodesEqualForInlining(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)">areNodesEqualForInlining</A></B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;n1,
>                          <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;n2)</CODE>
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Are the nodes equal for the purpose of inlining?
>  If type aware optimizations are on, type equality is checked.</TD>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
> <CODE>protected &nbsp;void</CODE></FONT></TD>
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.html#error(com.google.javascript.jscomp.DiagnosticType, com.google.javascript.rhino.Node)">error</A></B>(<A HREF="../../../../com/google/javascript/jscomp/DiagnosticType.html" title="class in com.google.javascript.jscomp">DiagnosticType</A>&nbsp;diagnostic,
>       <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;n)</CODE>
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Helper method for reporting an error to the compiler when applying a 
>  peephole optimization.</TD>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
> <CODE>&nbsp;<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A></CODE></FONT></TD>
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.html#optimizeSubtree(com.google.javascript.rhino.Node)">optimizeSubtree</A></B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;node)</CODE>
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tries apply our various peephole minimizations on the passed in node.</TD>
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD ALIGN="right" VALIGN="top" WIDTH="1%"><FONT SIZE="-1">
> <CODE>protected &nbsp;void</CODE></FONT></TD>
> <TD><CODE><B><A HREF="../../../../com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.html#reportCodeChange()">reportCodeChange</A></B>()</CODE>
> 
> <BR>
> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Helper method for telling the compiler that something has changed.</TD>
> </TR>
> </TABLE>
> &nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
> <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
> <TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
> <TH ALIGN="left"><B>Methods inherited from class java.lang.<A HREF="http:
> </TR>
> <TR BGCOLOR="white" CLASS="TableRowColor">
> <TD><CODE><A HREF="http:
> </TR>
> </TABLE>
> &nbsp;
> <P>
> 
> <!-- ========= CONSTRUCTOR DETAIL ======== -->
> 
> <A NAME="constructor_detail"><!-- --></A>
> <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
> <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
> <TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
> <B>Constructor Detail</B></FONT></TH>
> </TR>
> </TABLE>
> 
> <A NAME="PeepholeSubstituteAlternateSyntax()"><!-- --></A><H3>
> PeepholeSubstituteAlternateSyntax</H3>
> <PRE>
> public <B>PeepholeSubstituteAlternateSyntax</B>()</PRE>
> <DL>
> </DL>
> 
> <!-- ============ METHOD DETAIL ========== -->
> 
> <A NAME="method_detail"><!-- --></A>
> <TABLE BORDER="1" WIDTH="100%" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
> <TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
> <TH ALIGN="left" COLSPAN="1"><FONT SIZE="+2">
> <B>Method Detail</B></FONT></TH>
> </TR>
> </TABLE>
> 
> <A NAME="optimizeSubtree(com.google.javascript.rhino.Node)"><!-- --></A><H3>
> optimizeSubtree</H3>
> <PRE>
> public <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A> <B>optimizeSubtree</B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;node)</PRE>
> <DL>
> <DD>Tries apply our various peephole minimizations on the passed in node.
> <P>
> <DD><DL>
> </DL>
> </DD>
> <DD><DL>
> <DT><B>Parameters:</B><DD><CODE>node</CODE> - The subtree that will be optimized.
> <DT><B>Returns:</B><DD>The new version of the subtree (or null if the subtree or one of
>  its parents was removed from the AST). If the subtree has not changed,
>  this method must return <code>subtree</code>.</DL>
> </DD>
> </DL>
> <HR>
> 
> <A NAME="error(com.google.javascript.jscomp.DiagnosticType, com.google.javascript.rhino.Node)"><!-- --></A><H3>
> error</H3>
> <PRE>
> protected void <B>error</B>(<A HREF="../../../../com/google/javascript/jscomp/DiagnosticType.html" title="class in com.google.javascript.jscomp">DiagnosticType</A>&nbsp;diagnostic,
>                      <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;n)</PRE>
> <DL>
> <DD>Helper method for reporting an error to the compiler when applying a 
>  peephole optimization.
> <P>
> <DD><DL>
> <DT><B>Parameters:</B><DD><CODE>diagnostic</CODE> - The error type<DD><CODE>n</CODE> - The node for which the error should be reported</DL>
> </DD>
> </DL>
> <HR>
> 
> <A NAME="reportCodeChange()"><!-- --></A><H3>
> reportCodeChange</H3>
> <PRE>
> protected void <B>reportCodeChange</B>()</PRE>
> <DL>
> <DD>Helper method for telling the compiler that something has changed. 
>  Subclasses must call these if they have changed the AST.
> <P>
> <DD><DL>
> </DL>
> </DD>
> </DL>
> <HR>
> 
> <A NAME="areNodesEqualForInlining(com.google.javascript.rhino.Node, com.google.javascript.rhino.Node)"><!-- --></A><H3>
> areNodesEqualForInlining</H3>
> <PRE>
> protected boolean <B>areNodesEqualForInlining</B>(<A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;n1,
>                                            <A HREF="../../../../com/google/javascript/rhino/Node.html" title="class in com.google.javascript.rhino">Node</A>&nbsp;n2)</PRE>
> <DL>
> <DD>Are the nodes equal for the purpose of inlining?
>  If type aware optimizations are on, type equality is checked.
> <P>
> <DD><DL>
> </DL>
> </DD>
> </DL>
> <!-- ========= END OF CLASS DATA ========= -->
> <HR>
> 
> 
> <!-- ======= START OF BOTTOM NAVBAR ====== -->
> <A NAME="navbar_bottom"><!-- --></A>
> <A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
> <TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
> <TR>
> <TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
> <A NAME="navbar_bottom_firstrow"><!-- --></A>
> <TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
>   <TR ALIGN="center" VALIGN="top">
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-summary.html"><FONT CLASS="NavBarFont1"><B>Package</B></FONT></A>&nbsp;</TD>
>   <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Class</B></FONT>&nbsp;</TD>
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="package-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../index-all.html"><FONT CLASS="NavBarFont1"><B>Index</B></FONT></A>&nbsp;</TD>
>   <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../../../../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
>   </TR>
> </TABLE>
> </TD>
> <TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
> </EM>
> </TD>
> </TR>
> 
> <TR>
> <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
> &nbsp;<A HREF="../../../../com/google/javascript/jscomp/PassFactory.html" title="class in com.google.javascript.jscomp"><B>PREV CLASS</B></A>&nbsp;
> &nbsp;<A HREF="../../../../com/google/javascript/jscomp/PerformanceTracker.html" title="class in com.google.javascript.jscomp"><B>NEXT CLASS</B></A></FONT></TD>
> <TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
>   <A HREF="../../../../index.html?com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.html" target="_top"><B>FRAMES</B></A>  &nbsp;
> &nbsp;<A HREF="PeepholeSubstituteAlternateSyntax.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
> &nbsp;<SCRIPT type="text/javascript">
>   <!--
>   if(window==top) {
>     document.writeln('<A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>');
>   }
>   
> </SCRIPT>
> <NOSCRIPT>
>   <A HREF="../../../../allclasses-noframe.html"><B>All Classes</B></A>
> </NOSCRIPT>
> 
> 
> </FONT></TD>
> </TR>
> <TR>
> <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
>   SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></FONT></TD>
> <TD VALIGN="top" CLASS="NavBarCell3"><FONT SIZE="-2">
> DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></FONT></TD>
> </TR>
> </TABLE>
> <A NAME="skip-navbar_bottom"></A>
> <!-- ======== END OF BOTTOM NAVBAR ======= -->
> 
> <HR>
> 
>         <div id="footer">
>           <div id="footerlogo">
>             <img src="http:
>                  alt="Google colored balls">
>           </div>
> 
>           <div id="copyright">
>           <p>&copy; 2009 Google -
>             <a href="http:
>             <a href="http:
>             <a href="http:
>           </p>
>           </div>
>         </div>
918,922c349,350
<       if (0 == (nSlashes & 1)) { return true; }
<     }
<     return false;
<   }
< }
---
> </BODY>
> </HTML>
