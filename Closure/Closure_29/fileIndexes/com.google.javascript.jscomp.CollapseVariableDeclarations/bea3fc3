















package com.google.javascript.jscomp;

import com.google.common.base.Preconditions;
import com.google.common.collect.Lists;
import com.google.common.collect.Sets;
import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.Token;

import java.util.List;
import java.util.Set;


































class CollapseVariableDeclarations implements CompilerPass {
  
  private final AbstractCompiler compiler;

  
  private static class Collapse {
    



    final Node firstVarNode;

    
    final Node parent;

    Collapse(Node firstVarNode, Node parent) {
      this.firstVarNode = firstVarNode;
      this.parent = parent;
    }
  }

  


  private final List<Collapse> collapses = Lists.newArrayList();

  




  private final Set<Node> nodesToCollapse = Sets.newHashSet();

  CollapseVariableDeclarations(AbstractCompiler compiler) {
    Preconditions.checkState(!compiler.isNormalized());
    this.compiler = compiler;
  }

  public void process(Node externs, Node root) {
    collapses.clear();
    nodesToCollapse.clear();

    NodeTraversal.traverse(compiler, root,
        new CombinedCompilerPass(compiler,
            new ExploitAssigns(), new GatherCollapses()));
    if (!collapses.isEmpty()) {
      applyCollapses();
      compiler.reportCodeChange();
    }
  }

  private class ExploitAssigns extends AbstractPostOrderCallback {

    public void visit(NodeTraversal t, Node expr, Node exprParent) {
      if (!NodeUtil.isExprAssign(expr)) {
        return;
      }

      collapseAssign(t, expr.getFirstChild(), expr, exprParent);
    }

    


    private void collapseAssign(NodeTraversal t, Node assign, Node expr,
        Node exprParent) {
      Node leftValue = assign.getFirstChild();
      Node rightValue = leftValue.getNext();
      if (isCollapsibleValue(leftValue, true) &&
          collapseAssignEqualTo(expr, exprParent, leftValue)) {
        t.getCompiler().reportCodeChange();
      } else if (isCollapsibleValue(rightValue, false) &&
          collapseAssignEqualTo(expr, exprParent, rightValue)) {
        t.getCompiler().reportCodeChange();
      } else if (rightValue.getType() == Token.ASSIGN) {
        
        collapseAssign(t, rightValue, expr, exprParent);
      }
    }

    













    private boolean isCollapsibleValue(Node value, boolean isLValue) {
      switch (value.getType()) {
        case Token.GETPROP:
          
          
          
          
          return !isLValue || value.getFirstChild().getType() == Token.THIS;

        case Token.NAME:
        case Token.NUMBER:
        case Token.TRUE:
        case Token.FALSE:
        case Token.NULL:
        case Token.STRING:
          return true;
      }

      return false;
    }

    














    private boolean collapseAssignEqualTo(Node expr, Node exprParent,
        Node value) {
      Node assign = expr.getFirstChild();
      Node parent = exprParent;
      Node next = expr.getNext();
      while (next != null) {
        switch (next.getType()) {
          case Token.AND:
          case Token.OR:
          case Token.HOOK:
          case Token.IF:
          case Token.RETURN:
          case Token.EXPR_RESULT:
            
            parent = next;
            next = next.getFirstChild();
            break;

          case Token.VAR:
            if (next.getFirstChild().hasChildren()) {
              parent = next.getFirstChild();
              next = parent.getFirstChild();
              break;
            }
            return false;

          case Token.GETPROP:
          case Token.NAME:
            if (next.isQualifiedName()) {
              String nextName = next.getQualifiedName();
              if (value.isQualifiedName() &&
                  nextName.equals(value.getQualifiedName())) {
                
                
                

                
                if (!isSafeReplacement(next, assign)) {
                  return false;
                }

                exprParent.removeChild(expr);
                expr.removeChild(assign);
                parent.replaceChild(next, assign);
                return true;
              }
            }
            return false;

          case Token.NUMBER:
          case Token.TRUE:
          case Token.FALSE:
          case Token.NULL:
          case Token.STRING:
            if (value.getType() == next.getType()) {
              if ((next.getType() == Token.STRING ||
                      next.getType() == Token.NUMBER) &&
                  !next.isEquivalentTo(value)) {
                return false;
              }

              
              
              
              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
            return false;

          case Token.ASSIGN:
            
            
            
            
            
            
            
            
            
            
            
            
            Node leftSide = next.getFirstChild();
            if (leftSide.getType() == Token.NAME ||
                leftSide.getType() == Token.GETPROP &&
                leftSide.getFirstChild().getType() == Token.THIS) {
              
              parent = next;
              next = leftSide.getNext();
              break;
            } else {
              return false;
            }

          default:
            
            return false;
        }
      }

      return false;
    }
  }

  




  private boolean isSafeReplacement(Node node, Node replacement) {
    
    if (node.getType() == Token.NAME) {
      return true;
    }
    Preconditions.checkArgument(node.getType() == Token.GETPROP);

    Node name = node.getFirstChild();
    if (name.getType() == Token.NAME
        && isNameAssignedTo(name.getString(), replacement)) {
      return false;
    }

    return true;
  }

  


  private boolean isNameAssignedTo(String name, Node node) {
    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
      if (isNameAssignedTo(name, c)) {
        return true;
      }
    }

    if (node.getType() == Token.NAME) {
      Node parent = node.getParent();
      if (parent.getType() == Token.ASSIGN && parent.getFirstChild() == node) {
        if (name.equals(node.getString())) {
          return true;
        }
      }
    }

    return false;
  }

  




  private class GatherCollapses extends AbstractPostOrderCallback {

    public void visit(NodeTraversal t, Node n, Node parent) {
      
      if (n.getType() != Token.VAR) return;

      
      if (nodesToCollapse.contains(n)) return;

      
      
      if (parent.getType() == Token.IF) return;

      Node varNode = n;

      
      n = n.getNext();

      boolean hasNodesToCollapse = false;
      while (n != null && n.getType() == Token.VAR) {
        nodesToCollapse.add(n);
        hasNodesToCollapse = true;

        n = n.getNext();
      }

      if (hasNodesToCollapse) {
        nodesToCollapse.add(varNode);
        collapses.add(new Collapse(varNode, parent));
      }

    }
  }

  private void applyCollapses() {
    for (Collapse collapse : collapses) {
      Node first = collapse.firstVarNode;
      while (first.getNext() != null &&
          first.getNext().getType() == Token.VAR) {
        Node next = collapse.parent.removeChildAfter(first);

        
        first.addChildrenToBack(next.removeChildren());
      }
    }
  }

}
