















package com.google.javascript.jscomp;

import com.google.common.annotations.VisibleForTesting;
import com.google.common.base.Preconditions;
import com.google.javascript.jscomp.DefinitionsRemover.Definition;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.Token;


import java.util.Collection;











public class OptimizeReturns
    implements OptimizeCalls.CallGraphCompilerPass, CompilerPass {

  private AbstractCompiler compiler;

  OptimizeReturns(AbstractCompiler compiler) {
    this.compiler = compiler;
  }

  @Override
  @VisibleForTesting
  public void process(Node externs, Node root) {
    SimpleDefinitionFinder defFinder = new SimpleDefinitionFinder(compiler);
    defFinder.process(externs, root);
    process(defFinder);
  }

  @Override
  public void process(SimpleDefinitionFinder definitions) {
    for (DefinitionSite defSite : definitions.getDefinitionSites()) {
      optimizeResultsIfEligible(defSite, definitions);
    }
  }

  









  private void optimizeResultsIfEligible(
      DefinitionSite defSite, SimpleDefinitionFinder defFinder) {

    if (defSite.inExterns || callResultsMaybeUsed(defFinder, defSite)) {
      return;
    }

    rewriteReturns(defSite.definition.getRValue());
  }

  




  private boolean callResultsMaybeUsed(
      SimpleDefinitionFinder defFinder, DefinitionSite definitionSite) {

    Definition definition = definitionSite.definition;

    
    Node rValue = definition.getRValue();
    if (rValue == null || !NodeUtil.isFunction(rValue)) {
      return true;
    }

    
    
    if (!isSimpleFunctionDeclaration(rValue)) {
      return true;
    }

    
    if (maybeExported(compiler, definition)) {
      return true;
    }

    Collection<UseSite> useSites = defFinder.getUseSites(definition);
    for (UseSite site : useSites) {
      
      Node useNodeParent = site.node.getParent();
      if (isCall(site)) {
        Node callNode = useNodeParent;
        Preconditions.checkState(callNode.getType() == Token.CALL);
        if (isValueUsed(callNode)) {
          return true;
        }
      } else {
        
        
        if (!NodeUtil.isVar(useNodeParent)) {
          return true;
        }
      }

      
    }

    
    return false;
  }

  static boolean maybeExported(
      AbstractCompiler compiler, Definition definition) {
    
    Node lValue = definition.getLValue();
    if (lValue == null) {
      return true;
    }

    String partialName;
    if (NodeUtil.isGetProp(lValue)) {
      partialName = lValue.getLastChild().getString();
    } else if (NodeUtil.isName(lValue)) {
      partialName = lValue.getString();
    } else {
      
      
      return true;
    }

    CodingConvention codingConvention = compiler.getCodingConvention();
    if (codingConvention.isExported(partialName)) {
      return true;
    }

    return false;
  }

  static boolean isSimpleFunctionDeclaration(Node fn) {
    Node parent = fn.getParent();
    Node gramps = parent.getParent();

    
    
    
    
    
    

    
    if (NodeUtil.isFunctionDeclaration(fn)) {
      return true;
    }

    
    
    if (fn.getFirstChild().getString().isEmpty()
        && (NodeUtil.isExprAssign(gramps) || NodeUtil.isName(parent))) {
      return true;
    }

    return false;
  }

  


  private static boolean isValueUsed(Node node) {
    
    Node parent = node.getParent();
    switch (parent.getType()) {
      case Token.EXPR_RESULT:
        return false;
      case Token.HOOK:
      case Token.AND:
      case Token.OR:
        return (node == parent.getFirstChild()) ? true : isValueUsed(parent);
      case Token.COMMA:
        return (node == parent.getFirstChild()) ? false : isValueUsed(parent);
      case Token.FOR:
        if (NodeUtil.isForIn(parent)) {
          return true;
        } else {
          
          
          return (parent.getChildAtIndex(1) == node);
        }
      default:
        return true;
    }
  }

  






  private void rewriteReturns(Node fnNode) {
    Preconditions.checkState(NodeUtil.isFunction(fnNode));
    NodeUtil.visitPostOrder(
      fnNode.getLastChild(),
      new NodeUtil.Visitor() {
        @Override
        public void visit(Node node) {
          if (node.getType() == Token.RETURN && node.hasOneChild()) {
            Node result = node.removeFirstChild();
            if (NodeUtil.mayHaveSideEffects(result, compiler)) {
              node.getParent().addChildBefore(
                new Node(
                  Token.EXPR_RESULT, result).copyInformationFrom(result), node);
            }
            compiler.reportCodeChange();
          }
        }
      },
      new NodeUtil.MatchShallowStatement());
  }

  


  private static boolean isCall(UseSite site) {
    Node node = site.node;
    Node parent = node.getParent();
    return (parent.getFirstChild() == node) && NodeUtil.isCall(parent);
  }
}
