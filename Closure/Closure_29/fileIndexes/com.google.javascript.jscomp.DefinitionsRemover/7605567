















package com.google.javascript.jscomp;

import com.google.common.base.Preconditions;
import com.google.common.collect.ImmutableSet;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.Token;

import java.util.Set;






class DefinitionsRemover {

  



  static Definition getDefinition(Node n, Node parent) {
    
    
    if (parent == null) {
      return null;
    }

    if (NodeUtil.isVarDeclaration(n) && n.hasChildren()) {
      return new VarDefinition(n);
    } else if (NodeUtil.isFunction(parent) && parent.getFirstChild() == n) {
      if (!NodeUtil.isFunctionExpression(parent)) {
        return new NamedFunctionDefinition(parent);
      } else if (!n.getString().equals("")) {
        return new FunctionExpressionDefinition(parent);
      }
    } else if (NodeUtil.isAssign(parent) && parent.getFirstChild() == n) {
      return new AssignmentDefinition(parent);
    } else if (NodeUtil.isObjectLitKey(n, parent)) {
      return new ObjectLiteralPropertyDefinition(parent, n, n.getNext());
    } else if (parent.getType() == Token.LP) {
      Node function = parent.getParent();
      return new FunctionArgumentDefinition(function, n);
    }
    return null;
  }

  static interface Definition {
    void remove();

    








    Node getLValue();

    



    Node getRValue();
  }

  



  abstract static class IncompleteDefinition implements Definition {
    private static final Set<Integer> ALLOWED_TYPES =
        ImmutableSet.of(Token.NAME, Token.GETPROP, Token.GETELEM);
    private final Node lValue;

    IncompleteDefinition(Node lValue) {
      Preconditions.checkNotNull(lValue);
      Preconditions.checkArgument(
          ALLOWED_TYPES.contains(lValue.getType()),
          "Unexpected lValue type " + Token.name(lValue.getType()));
      this.lValue = lValue;
    }

    @Override
    public Node getLValue() {
      return lValue;
    }

    @Override
    public Node getRValue() {
      return null;
    }
  }


  


  static final class UnknownDefinition extends IncompleteDefinition {
    UnknownDefinition(Node lValue) {
      super(lValue);
    }

    @Override
    public void remove() {
      throw new IllegalArgumentException("Can't remove an UnknownDefinition");
    }
  }

  



  static final class ExternalNameOnlyDefinition extends IncompleteDefinition {

    ExternalNameOnlyDefinition(Node lValue) {
      super(lValue);
    }

    @Override
    public void remove() {
      throw new IllegalArgumentException(
          "Can't remove external name-only definition");
    }
  }

  



  static final class FunctionArgumentDefinition extends IncompleteDefinition {
    FunctionArgumentDefinition(Node function, Node argumentName) {
      super(argumentName);
      Preconditions.checkArgument(NodeUtil.isFunction(function));
      Preconditions.checkArgument(NodeUtil.isName(argumentName));
    }

    @Override
    public void remove() {
      throw new IllegalArgumentException(
          "Can't remove a FunctionArgumentDefinition");
    }
  }

  


  static abstract class FunctionDefinition implements Definition {

    protected final Node function;

    FunctionDefinition(Node node) {
      Preconditions.checkArgument(NodeUtil.isFunction(node));
      function = node;
    }

    @Override
    public Node getLValue() {
      return function.getFirstChild();
    }

    @Override
    public Node getRValue() {
      return function;
    }
  }

  



  static final class NamedFunctionDefinition extends FunctionDefinition {
    NamedFunctionDefinition(Node node) {
      super(node);
    }

    @Override
    public void remove() {
      function.detachFromParent();
    }
  }

  



  static final class FunctionExpressionDefinition extends FunctionDefinition {
    FunctionExpressionDefinition(Node node) {
      super(node);
      Preconditions.checkArgument(
          NodeUtil.isFunctionExpression(node));
    }

    @Override
    public void remove() {
      
      function.replaceChild(function.getFirstChild(),
                            Node.newString(Token.NAME, ""));
    }
  }

  


  static final class AssignmentDefinition implements Definition {
    private final Node assignment;

    AssignmentDefinition(Node node) {
      Preconditions.checkArgument(NodeUtil.isAssign(node));
      assignment = node;
    }

    @Override
    public void remove() {
      
      Node parent = assignment.getParent();
      Node last = assignment.getLastChild();
      assignment.removeChild(last);
      parent.replaceChild(assignment, last);
    }

    @Override
    public Node getLValue() {
      return assignment.getFirstChild();
    }

    @Override
    public Node getRValue() {
      return assignment.getLastChild();
    }
  }

  



  static final class ObjectLiteralPropertyDefinition implements Definition {

    private final Node literal;
    private final Node name;
    private final Node value;


    ObjectLiteralPropertyDefinition(Node lit, Node name, Node value) {
      this.literal = lit;
      this.name = name;
      this.value = value;
    }

    @Override
    public void remove() {
      literal.removeChild(name);
      literal.removeChild(value);
    }

    @Override
    public Node getLValue() {
      
      
      
      
      
      return new Node(Token.GETPROP,
                      new Node(Token.OBJECTLIT),
                      name.cloneNode());
    }

    @Override
    public Node getRValue() {
      return value;
    }
  }

  


  static final class VarDefinition implements Definition {
    private final Node name;
    VarDefinition(Node node) {
      Preconditions.checkArgument(NodeUtil.isVarDeclaration(node));
      Preconditions.checkArgument(node.hasChildren(),
          "VAR Declaration of " + node.getString() +
          "should be assigned a value.");
      name = node;
    }

    @Override
    public void remove() {
      Node var = name.getParent();
      Preconditions.checkState(var.getFirstChild() == var.getLastChild(),
          "AST should be normalized first");
      Node parent = var.getParent();
      Node rValue = name.removeFirstChild();
      Preconditions.checkState(parent.getType() != Token.FOR);
      parent.replaceChild(var, NodeUtil.newExpr(rValue));
    }

    @Override
    public Node getLValue() {
      return name;
    }

    @Override
    public Node getRValue() {
      return name.getFirstChild();
    }
  }
}
