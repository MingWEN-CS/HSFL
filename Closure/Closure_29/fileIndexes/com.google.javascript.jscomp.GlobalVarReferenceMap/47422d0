















package com.google.javascript.jscomp;

import com.google.common.base.Preconditions;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.javascript.jscomp.ReferenceCollectingCallback.Reference;
import com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection;
import com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap;
import com.google.javascript.jscomp.Scope.Var;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.Token;

import java.util.List;
import java.util.Map;
import java.util.Map.Entry;











class GlobalVarReferenceMap implements ReferenceMap {

  private Map<String, ReferenceCollection> refMap = null;

  private final Map<String, Integer> inputOrder;

  


  GlobalVarReferenceMap(List<CompilerInput> inputs,
      List<CompilerInput> externs) {
    inputOrder = Maps.newHashMap();
    int ind = 0;
    for (CompilerInput extern : externs) {
      inputOrder.put(extern.getName(), ind);
      ind++;
    }
    for (CompilerInput input : inputs) {
      inputOrder.put(input.getName(), ind);
      ind++;
    }
  }

  @Override
  public ReferenceCollection getReferences(Var var) {
    if (!var.isGlobal()) {
      return null;
    }
    return refMap.get(var.getName());
  }

  





  private void resetGlobalVarReferences(
      Map<Var, ReferenceCollection> globalRefMap) {
    refMap = Maps.newHashMap();
    for (Entry<Var, ReferenceCollection> entry : globalRefMap.entrySet()) {
      Var var = entry.getKey();
      if (var.isGlobal()) {
        refMap.put(var.getName(), entry.getValue());
      }
    }
  }

  










  void updateGlobalVarReferences(Map<Var, ReferenceCollection>
      refMapPatch, Node root) {
    if (refMap == null || root.getType() != Token.SCRIPT) {
      resetGlobalVarReferences(refMapPatch);
      return;
    }
    String sourceName = NodeUtil.getSourceName(root);
    Preconditions.checkNotNull(sourceName);
    
    
    
    removeScriptReferences(sourceName);
    for (Entry<Var, ReferenceCollection> entry : refMapPatch.entrySet()) {
      Var var = entry.getKey();
      if (var.isGlobal()) {
        replaceReferences(var.getName(), sourceName, entry.getValue());
      }
    }
  }

  private void removeScriptReferences(String sourceName) {
    
    
    for (ReferenceCollection collection : refMap.values()) {
      if (collection == null) {
        continue;
      }
      List<Reference> oldRefs = collection.references;
      SourceRefRange range = findSourceRefRange(oldRefs, sourceName);
      List<Reference> newRefs = Lists.newArrayList(range.refsBefore());
      newRefs.addAll(range.refsAfter());
      collection.references = newRefs;
    }
  }

  private void replaceReferences(String varName, String sourceName,
      ReferenceCollection newSourceCollection) {
    ReferenceCollection combined = new ReferenceCollection();
    List<Reference> combinedRefs = combined.references;
    ReferenceCollection oldCollection = refMap.get(varName);
    refMap.put(varName, combined);
    if (oldCollection == null) {
      combinedRefs.addAll(newSourceCollection.references);
      return;
    }
    
    SourceRefRange range = findSourceRefRange(oldCollection.references,
        sourceName);
    combinedRefs.addAll(range.refsBefore());
    combinedRefs.addAll(newSourceCollection.references);
    combinedRefs.addAll(range.refsAfter());
  }

  




  private SourceRefRange findSourceRefRange(List<Reference> refList,
      String sourceName) {
    
    
    int lastBefore = -1;
    int firstAfter = refList.size();
    int index = 0;
    int sourceInputOrder = inputOrder.get(sourceName);
    for (Reference ref : refList) {
      int order = inputOrder.get(ref.getSourceFile().getName());
      if (order < sourceInputOrder) {
        lastBefore = index;
      } else if (order > sourceInputOrder) {
        firstAfter = index;
        break;
      }
      index++;
    }
    return new SourceRefRange(refList, lastBefore, firstAfter);
  }

  private static class SourceRefRange {
    private final int lastBefore;
    private final int firstAfter;
    private final List<Reference> refList;

    SourceRefRange(List<Reference> refList, int lastBefore,
        int firstAfter) {
      this.lastBefore = Math.max(lastBefore, -1);
      this.firstAfter = Math.min(firstAfter, refList.size());
      this.refList = refList;
    }

    
    List<Reference> refsBefore() {
      return refList.subList(0, lastBefore + 1);
    }

    
    List<Reference> refsAfter() {
      return refList.subList(firstAfter, refList.size());
    }
  }
}
