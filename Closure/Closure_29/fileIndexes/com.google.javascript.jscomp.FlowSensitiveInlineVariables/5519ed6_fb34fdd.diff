279,298d278
<       
<       
<       if (NodeUtil.isStatementBlock(defCfgNode.getParent()) &&
<           defCfgNode.getNext() != useCfgNode) {
<         
<         
<         
<         CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>
<           pathCheck = new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>(
<                  cfg,
<                  cfg.getDirectedGraphNode(defCfgNode),
<                  cfg.getDirectedGraphNode(useCfgNode),
<                  SIDE_EFFECT_PREDICATE,
<                  Predicates.
<                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),
<                  false);
<         if (pathCheck.somePathsSatisfyPredicate()) {
<           return false;
<         }
<       }
320a301,307
> 
>       Collection<Node> uses = reachingUses.getUses(varName, defCfgNode);
> 
>       if (uses.size() != 1) {
>         return false;
>       }
> 
354,357c341,359
<       Collection<Node> uses = reachingUses.getUses(varName, defCfgNode);
< 
<       if (uses.size() != 1) {
<         return false;
---
>       
>       
>       if (NodeUtil.isStatementBlock(defCfgNode.getParent()) &&
>           defCfgNode.getNext() != useCfgNode) {
>         
>         
>         
>         CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>
>           pathCheck = new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>(
>                  cfg,
>                  cfg.getDirectedGraphNode(defCfgNode),
>                  cfg.getDirectedGraphNode(useCfgNode),
>                  SIDE_EFFECT_PREDICATE,
>                  Predicates.
>                      <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),
>                  false);
>         if (pathCheck.somePathsSatisfyPredicate()) {
>           return false;
>         }
