831,906d830
<   List<ObjectType> keepAssignableInterfaces() {
<     return visit(keepAssignableInterfacesVisitor);
<   }
< 
<   
< 
< 
<   private static final Visitor<List<ObjectType>>
<       keepAssignableInterfacesVisitor =
<       new Visitor<List<ObjectType>>() {
<         public List<ObjectType> caseEnumElementType(EnumElementType type) {
<           return ImmutableList.of();
<         }
< 
<         public List<ObjectType> caseAllType() {
<           return ImmutableList.of();
<         }
< 
<         public List<ObjectType> caseNoObjectType() {
<           return ImmutableList.of();
<         }
< 
<         public List<ObjectType> caseNoType() {
<           return ImmutableList.of();
<         }
< 
<         public List<ObjectType> caseBooleanType() {
<           return ImmutableList.of();
<         }
< 
<         public List<ObjectType> caseFunctionType(FunctionType type) {
<           return ImmutableList.of();
<         }
< 
<         public List<ObjectType> caseNullType() {
<           return ImmutableList.of();
<         }
< 
<         public List<ObjectType> caseNumberType() {
<           return ImmutableList.of();
<         }
< 
<         public List<ObjectType> caseObjectType(ObjectType type) {
<           if (type.getConstructor() != null &&
<               type.getConstructor().isInterface()) {
<             return ImmutableList.of(type);
<           } else {
<             return ImmutableList.of();
<           }
<         }
< 
<         public List<ObjectType> caseStringType() {
<           return ImmutableList.of();
<         }
< 
<         public List<ObjectType> caseUnionType(UnionType type) {
<           List<ObjectType> lst = Lists.newArrayList();
<           for (JSType alternate : type.getAlternates()) {
<             lst.addAll(alternate.keepAssignableInterfaces());
<           }
<           return lst;
<         }
< 
<         public List<ObjectType> caseUnknownType() {
<           return ImmutableList.of();
<         }
< 
<         public List<ObjectType> caseVoidType() {
<           return ImmutableList.of();
<         }
<       };
< 
<   
< 
< 
< 
