














package com.google.javascript.jscomp;

import com.google.common.base.Preconditions;
import com.google.common.base.Predicate;
import com.google.common.base.Supplier;
import com.google.common.collect.Maps;
import com.google.common.collect.Sets;
import com.google.javascript.jscomp.NodeUtil.Visitor;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.Token;

import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;







class FunctionArgumentInjector {

  private FunctionArgumentInjector() {
    
  }

  








  static Node inject(Node node, Node parent,
      Map<String, Node> replacements) {
    if (node.getType() == Token.NAME) {
      Node replacementTemplate = replacements.get(node.getString());
      if (replacementTemplate != null) {
        
        Preconditions.checkState(parent.getType() != Token.FUNCTION
            || parent.getType() != Token.VAR
            || parent.getType() != Token.CATCH);
        
        
        Node replacement = replacementTemplate.cloneTree();
        parent.replaceChild(node, replacement);
        return replacement;
      }
    }

    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
      
      
      c = inject(c, node, replacements);
    }

    return node;
  }

  


  static LinkedHashMap<String, Node> getFunctionCallParameterMap(
      Node fnNode, Node callNode, Supplier<String> safeNameIdSupplier) {
    
    
    LinkedHashMap<String, Node> argMap = Maps.newLinkedHashMap();

    
    Node cArg = callNode.getFirstChild().getNext();
    if (callNode.getFirstChild().getType() != Token.NAME) {
      if (NodeUtil.isFunctionObjectCall(callNode)) {
        
        Preconditions.checkNotNull(cArg);
        Preconditions.checkState(cArg.getType() == Token.THIS);
        cArg = cArg.getNext();
      } else {
        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
      }
    }

    for (Node fnArg : NodeUtil.getFnParameters(fnNode).children()) {
      if (cArg != null) {
        argMap.put(fnArg.getString(), cArg);
        cArg = cArg.getNext();
      } else {
        Node srcLocation = callNode;
        argMap.put(fnArg.getString(), NodeUtil.newUndefinedNode(srcLocation));
      }
    }

    
    
    int anonArg = 0;
    while (cArg != null) {
      String uniquePlaceholder =
        getUniqueAnonymousParameterName(safeNameIdSupplier);
      argMap.put(uniquePlaceholder, cArg);
      cArg = cArg.getNext();
    }

    return argMap;
  }

  


  private static String getUniqueAnonymousParameterName(
      Supplier<String> safeNameIdSupplier) {
    return "JSCompiler_inline_anon_param_" + safeNameIdSupplier.get();
  }

  








  static Set<String> findModifiedParameters(Node fnNode) {
    Set<String> names = getFunctionParameterSet(fnNode);
    Set<String> unsafeNames = Sets.newHashSet();
    return findModifiedParameters(
        fnNode, null, names, unsafeNames);
  }

  















  private static Set<String> findModifiedParameters(
      Node n, Node parent, Set<String> names, Set<String> unsafe) {
    Preconditions.checkArgument(unsafe != null);
    if (n.getType() == Token.NAME) {
      if (names.contains(n.getString())) {
        if (canNameValueChange(n, parent)) {
          unsafe.add(n.getString());
        }
      }
    }

    for (Node c : n.children()) {
      findModifiedParameters(c, n, names, unsafe);
    }

    return unsafe;
  }

  










  private static boolean canNameValueChange(Node n, Node parent) {
    int type = parent.getType();
    return (type == Token.VAR || type == Token.INC || type == Token.DEC ||
        (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n));
  }

  






  static void maybeAddTempsForCallArguments(
      Node fnNode, Map<String, Node> argMap, Set<String> namesNeedingTemps,
      CodingConvention convention) {
    if (argMap.isEmpty()) {
      
      return;
    }

    Preconditions.checkArgument(fnNode.getType() == Token.FUNCTION);
    Node block = fnNode.getLastChild();

    Set<String> parameters = argMap.keySet();

    
    
    Set<String> namesAfterSideEffects = findParametersReferencedAfterSideEffect(
        parameters, block);

    
    for (Map.Entry<String, Node> entry : argMap.entrySet()) {
      String argName = entry.getKey();
      if (namesNeedingTemps.contains(argName)) {
        continue;
      }
      Node cArg = entry.getValue();
      boolean safe = true;
      int references = NodeUtil.getNameReferenceCount(block, argName);

      if (NodeUtil.mayEffectMutableState(cArg) && references > 0) {
        
        
        
        
        
        
        
        
        
        safe = false;
      } else if (NodeUtil.mayHaveSideEffects(cArg)) {
        
        
        safe = false;
      } else if (NodeUtil.canBeSideEffected(cArg)
          && namesAfterSideEffects.contains(argName)) {
        safe = false;
      } else if (references > 1) {
        
        switch (cArg.getType()) {
          case Token.NAME:
            String name = cArg.getString();
            safe = !(convention.isExported(name));
            break;
          case Token.NULL:
          case Token.VOID:
          case Token.THIS:
          case Token.FALSE:
          case Token.TRUE:
          case Token.NUMBER:
            safe = true;
            break;
          case Token.STRING:
            safe = (cArg.getString().length() < 2);
            break;
          default:
            safe = false;
            break;
        }
      }

      if (!safe) {
        namesNeedingTemps.add(argName);
      }
    }
  }

  








  private static Set<String> findParametersReferencedAfterSideEffect(
      Set<String> parameters, Node root) {

    
    Set<String> locals = Sets.newHashSet(parameters);
    gatherLocalNames(root, locals);

    ReferencedAfterSideEffect collector = new ReferencedAfterSideEffect(
        parameters, locals);
    NodeUtil.visitPostOrder(
        root,
        collector,
        collector);
    return collector.getResults();
  }

  



















  private static class ReferencedAfterSideEffect
      implements Visitor, Predicate<Node> {
    private final Set<String> parameters;
    private final Set<String> locals;
    private boolean sideEffectSeen = false;
    private Set<String> parametersReferenced = Sets.newHashSet();
    private int loopsEntered = 0;

    ReferencedAfterSideEffect(Set<String> parameters, Set<String> locals) {
      this.parameters = parameters;
      this.locals = locals;
    }

    Set<String> getResults() {
      return parametersReferenced;
    }

    @Override
    public boolean apply(Node node) {
      
      if (NodeUtil.isLoopStructure(node)) {
        loopsEntered++;
      }

      
      
      return !(sideEffectSeen
          && parameters.size() == parametersReferenced.size());
    }

    boolean inLoop() {
      return loopsEntered != 0;
    }

    public void visit(Node n) {
      
      if (NodeUtil.isLoopStructure(n)) {
        loopsEntered--;
        if (!inLoop() && !sideEffectSeen) {
          
          
          
          parametersReferenced.clear();
        }
      }

      if (!sideEffectSeen) {
        
        if (hasNonLocalSideEffect(n)) {
          sideEffectSeen = true;
        }
      }

      
      
      if (inLoop() || sideEffectSeen) {
        
        if (n.getType() == Token.NAME) {
          String name = n.getString();
          if (parameters.contains(name)) {
            parametersReferenced.add(name);
          }
        }
      }
    }

    


    private boolean hasNonLocalSideEffect(Node n) {
      boolean sideEffect = false;
      int type = n.getType();
      
      
      if (NodeUtil.isAssignmentOp(n)
          || type == Token.INC
          || type == Token.DEC) {
        Node lhs = n.getFirstChild();
        
        if (!isLocalName(lhs)) {
          sideEffect = true;
        }
      } else if (type == Token.CALL) {
        sideEffect = NodeUtil.functionCallHasSideEffects(n);
      } else if (type == Token.NEW) {
        sideEffect = NodeUtil.constructorCallHasSideEffects(n);
      } else if (type == Token.DELPROP) {
        sideEffect = true;
      }

      return sideEffect;
    }

    


    private boolean isLocalName(Node node) {
      if (NodeUtil.isName(node)) {
        String name = node.getString();
        return locals.contains(name);
      }
      return false;
    }
  }

  


  private static void gatherLocalNames(Node n, Set<String> names) {
    Preconditions.checkState(n.getType() != Token.FUNCTION);
    if (n.getType() == Token.NAME) {
      switch (n.getParent().getType()) {
        case Token.VAR:
        case Token.CATCH:
          names.add(n.getString());
      }
    }

    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
      gatherLocalNames(c, names);
    }
  }

  


  private static Set<String> getFunctionParameterSet(Node fnNode) {
    Set<String> set = Sets.newHashSet();
    for (Node n : NodeUtil.getFnParameters(fnNode).children()) {
      set.add(n.getString());
    }
    return set;
  }

}
