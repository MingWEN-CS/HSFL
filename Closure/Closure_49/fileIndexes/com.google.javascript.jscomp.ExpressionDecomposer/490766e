














package com.google.javascript.jscomp;

import com.google.common.annotations.VisibleForTesting;
import com.google.common.base.Preconditions;
import com.google.common.base.Supplier;
import com.google.javascript.jscomp.MakeDeclaredNamesUnique.ContextualRenamer;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.Token;

import java.util.Set;
















class ExpressionDecomposer {

  


  enum DecompositionType {
    UNDECOMPOSABLE,
    MOVABLE,
    DECOMPOSABLE
  }

  private final AbstractCompiler compiler;
  private final Supplier<String> safeNameIdSupplier;
  private final Set<String> knownConstants;

  public ExpressionDecomposer(
      AbstractCompiler compiler,
      Supplier<String> safeNameIdSupplier,
      Set<String> constNames) {
    Preconditions.checkNotNull(compiler);
    Preconditions.checkNotNull(safeNameIdSupplier);
    Preconditions.checkNotNull(constNames);
    this.compiler = compiler;
    this.safeNameIdSupplier = safeNameIdSupplier;
    this.knownConstants = constNames;
  }

  
  private static final int MAX_INTERATIONS = 100;

  




  void maybeDecomposeExpression(Node expression) {
    
    int i = 0;
    while (DecompositionType.DECOMPOSABLE == canExposeExpression(expression)) {
      exposeExpression(expression);
      i++;
      if (i > MAX_INTERATIONS) {
        throw new IllegalStateException(
            "DecomposeExpression depth exceeded on :\n" +
            expression.toStringTree());
      }
    }
  }

  




  void exposeExpression(Node expression) {
    Node expressionRoot = findExpressionRoot(expression);
    Preconditions.checkState(expressionRoot != null);
    exposeExpression(expressionRoot, expression);
    compiler.reportCodeChange();
  }

  
  
  
  
  



  void moveExpression(Node expression) {
    String resultName = getTempValueName();  
    Node injectionPoint = findInjectionPoint(expression);
    Preconditions.checkNotNull(injectionPoint);
    Node injectionPointParent = injectionPoint.getParent();
    Preconditions.checkNotNull(injectionPointParent);
    Preconditions.checkState(NodeUtil.isStatementBlock(injectionPointParent));

    
    Node expressionParent = expression.getParent();
    expressionParent.replaceChild(
        expression, Node.newString(Token.NAME, resultName));

    
    Node newExpressionRoot = NodeUtil.newVarNode(resultName, expression);
    injectionPointParent.addChildBefore(newExpressionRoot, injectionPoint);
    compiler.reportCodeChange();
  }

  














  private void exposeExpression(Node expressionRoot, Node subExpression) {
    Node nonconditionalExpr = findNonconditionalParent(
        subExpression, expressionRoot);
    
    boolean hasFollowingSideEffects = NodeUtil.mayHaveSideEffects(
        nonconditionalExpr);

    Node exprInjectionPoint = findInjectionPoint(nonconditionalExpr);
    DecompositionState state = new DecompositionState();
    state.sideEffects = hasFollowingSideEffects;
    state.extractBeforeStatement = exprInjectionPoint;

    
    for (Node grandchild = null,
            child = nonconditionalExpr,
            parent = child.getParent();
         parent != expressionRoot;
         grandchild = child,
             child = parent,
             parent = child.getParent()) {
      int parentType = parent.getType();
      Preconditions.checkState(
          !isConditionalOp(parent) || child == parent.getFirstChild());
      if (parentType == Token.ASSIGN) {
          if (isSafeAssign(parent, state.sideEffects)) {
            
            
            
            
            
            
            
            
            
            
          } else {
            
            Node left = parent.getFirstChild();
            int type = left.getType();
            if (left != child) {
              Preconditions.checkState(NodeUtil.isGet(left));
              if (type == Token.GETELEM) {
                decomposeSubExpressions(left.getLastChild(), null, state);
              }
              decomposeSubExpressions(left.getFirstChild(), null, state);
            }
          }
      } else if (parentType == Token.CALL
          && NodeUtil.isGet(parent.getFirstChild())) {
        Node functionExpression = parent.getFirstChild();
        decomposeSubExpressions(functionExpression.getNext(), child, state);
        
        if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)
            && functionExpression.getFirstChild() != grandchild) {
          
          
          if (true) {
            throw new IllegalStateException(
                "Object method calls can not be decomposed.");
          } else {
            
            
            state.sideEffects = true;

            
            Node replacement = rewriteCallExpression(parent, state);
            
            parent = replacement;
          }
        }
      } else if (parentType == Token.OBJECTLIT) {
        decomposeObjectLiteralKeys(parent.getFirstChild(), child, state);
      } else {
        decomposeSubExpressions(parent.getFirstChild(), child, state);
      }
    }

    
    
    
    
    
    if (nonconditionalExpr == subExpression) {
      
      
      
      
    } else {
      Node parent = nonconditionalExpr.getParent();
      boolean needResult = parent.getType() != Token.EXPR_RESULT;
      Node extractedConditional = extractConditional(
          nonconditionalExpr, exprInjectionPoint, needResult);
    }
  }

  


  private boolean maybeExternMethod(Node node) {
    
    return true;
  }

  



  private static Node findNonconditionalParent(
      Node subExpression, Node expressionRoot) {
     Node result = subExpression;

     for (Node child = subExpression, parent = child.getParent();
          parent != expressionRoot;
          child = parent, parent = child.getParent()) {
       if (isConditionalOp(parent)) {
         
         
         if (child != parent.getFirstChild()) {
           result = parent;
         }
       }
     }

     return result;
  }

  




  private static class DecompositionState {
    boolean sideEffects;
    Node extractBeforeStatement;
  }

  




  private void decomposeObjectLiteralKeys(
      Node key, Node stopNode, DecompositionState state) {
    if (key == null || key == stopNode) {
      return;
    }
    decomposeObjectLiteralKeys(key.getNext(), stopNode, state);
    decomposeSubExpressions(key.getFirstChild(), stopNode, state);
  }

  



  private void decomposeSubExpressions(
      Node n, Node stopNode, DecompositionState state) {
    if (n == null || n == stopNode) {
      return;
    }

    
    Preconditions.checkState(!NodeUtil.isObjectLitKey(n, n.getParent()));

    
    
    
    
    decomposeSubExpressions(
        n.getNext(), stopNode, state);

    
    
    if (isExpressionTreeUnsafe(n, state.sideEffects)) {
      
      
      state.sideEffects = true;
      state.extractBeforeStatement = extractExpression(
          n, state.extractBeforeStatement);
    }
  }

  








  private Node extractConditional(
      Node expr, Node injectionPoint, boolean needResult) {
    Node parent = expr.getParent();
    String tempName = getTempValueName();

    
    Node first = expr.getFirstChild();
    Node second = first.getNext();
    Node last = expr.getLastChild();

    
    expr.detachChildren();

    
    Node cond = null;
    Node trueExpr = new Node(Token.BLOCK).copyInformationFrom(expr);
    Node falseExpr = new Node(Token.BLOCK).copyInformationFrom(expr);
    switch (expr.getType()) {
      case Token.HOOK:
        
        cond = first;
        trueExpr.addChildToFront(NodeUtil.newExpr(
            buildResultExpression(second, needResult, tempName)));
        falseExpr.addChildToFront(NodeUtil.newExpr(
            buildResultExpression(last, needResult, tempName)));
        break;
      case Token.AND:
        
        cond = buildResultExpression(first, needResult, tempName);
        trueExpr.addChildToFront(NodeUtil.newExpr(
            buildResultExpression(last, needResult, tempName)));
        break;
      case Token.OR:
        
        cond = buildResultExpression(first, needResult, tempName);
        falseExpr.addChildToFront(NodeUtil.newExpr(
            buildResultExpression(last, needResult, tempName)));
        break;
      default:
        
        throw new IllegalStateException("Unexpected.");
    }

    Node ifNode;
    if (falseExpr.hasChildren()) {
      ifNode = new Node(Token.IF, cond, trueExpr, falseExpr);
    } else {
      ifNode = new Node(Token.IF, cond, trueExpr);
    }
    ifNode.copyInformationFrom(expr);

    if (needResult) {
      Node tempVarNode = NodeUtil.newVarNode(tempName, null)
          .copyInformationFromForTree(expr);
      Node injectionPointParent = injectionPoint.getParent();
      injectionPointParent.addChildBefore(tempVarNode, injectionPoint);
      injectionPointParent.addChildAfter(ifNode, tempVarNode);

      
      Node replacementValueNode = Node.newString(Token.NAME, tempName);
      parent.replaceChild(expr, replacementValueNode);
    } else {
      
      
      Preconditions.checkArgument(parent.getType() == Token.EXPR_RESULT);
      Node gramps = parent.getParent();
      gramps.replaceChild(parent, ifNode);
    }

    return ifNode;
  }

  








  private static Node buildResultExpression(
      Node expr, boolean needResult, String tempName) {
    if (needResult) {
      return new Node(Token.ASSIGN,
          Node.newString(Token.NAME, tempName),
          expr).copyInformationFromForTree(expr);
    } else {
      return expr;
    }
  }

  private boolean isConstantName(Node n, Set<String> knownConstants) {
    
    return NodeUtil.isName(n) && (NodeUtil.isConstantName(n)
        || knownConstants.contains(n.getString()));
  }

  





  private Node extractExpression(Node expr, Node injectionPoint) {
    Node parent = expr.getParent();

    boolean isLhsOfAssignOp = NodeUtil.isAssignmentOp(parent)
        && !NodeUtil.isAssign(parent)
        && parent.getFirstChild() == expr;

    Node firstExtractedNode = null;

    
    
    
    
    
    
    if (isLhsOfAssignOp && NodeUtil.isGet(expr)) {
      for (Node n : expr.children()) {
        if (n.getType() != Token.STRING && !isConstantName(n, knownConstants)) {
          Node extractedNode = extractExpression(n, injectionPoint);
          if (firstExtractedNode == null) {
            firstExtractedNode = extractedNode;
          }
        }
      }
    }

    
    String tempName = getTempConstantValueName();
    Node replacementValueNode = Node.newString(Token.NAME, tempName)
        .copyInformationFrom(expr);

    Node tempNameValue;

    
    
    if (isLhsOfAssignOp) {
      Preconditions.checkState(NodeUtil.isName(expr) || NodeUtil.isGet(expr));
      
      Node opNode = new Node(NodeUtil.getOpFromAssignmentOp(parent))
          .copyInformationFrom(parent);

      Node rightOperand = parent.getLastChild();

      parent.setType(Token.ASSIGN);
      parent.replaceChild(rightOperand, opNode);
      opNode.addChildToFront(replacementValueNode);
      opNode.addChildToBack(rightOperand);

      
      tempNameValue = expr.cloneTree();
    } else {
      
      parent.replaceChild(expr, replacementValueNode);

      
      
      tempNameValue = expr;
    }

    
    Node tempVarNode = NodeUtil.newVarNode(tempName, tempNameValue);

    Node injectionPointParent = injectionPoint.getParent();
    injectionPointParent.addChildBefore(tempVarNode, injectionPoint);

    if (firstExtractedNode == null) {
      firstExtractedNode = tempVarNode;
    }
    return firstExtractedNode;
  }

  









  private Node rewriteCallExpression(Node call, DecompositionState state) {
    Preconditions.checkArgument(call.getType() == Token.CALL);
    Node first = call.getFirstChild();
    Preconditions.checkArgument(NodeUtil.isGet(first));

    
    
    Node getVarNode = extractExpression(
        first, state.extractBeforeStatement);
    state.extractBeforeStatement = getVarNode;

    
    
    Node getExprNode = getVarNode.getFirstChild().getFirstChild();
    Preconditions.checkArgument(NodeUtil.isGet(getExprNode));
    Node thisVarNode = extractExpression(
        getExprNode.getFirstChild(), state.extractBeforeStatement);
    state.extractBeforeStatement = thisVarNode;

    
    Node thisNameNode = thisVarNode.getFirstChild();
    Node functionNameNode = getVarNode.getFirstChild();

    
    
    
    
    
    
    
    
    Node newCall = new Node(Token.CALL,
        new Node(Token.GETPROP,
            functionNameNode.cloneNode(),
            Node.newString("call")),
        thisNameNode.cloneNode(), call.getLineno(), call.getCharno());

    
    call.removeFirstChild();
    if (call.hasChildren()) {
      
      newCall.addChildrenToBack(call.removeChildren());
    }

    
    Node callParent = call.getParent();
    callParent.replaceChild(call, newCall);

    return newCall;
  }

  private String tempNamePrefix = "JSCompiler_temp";

  


  @VisibleForTesting
  public void setTempNamePrefix(String tempNamePrefix) {
    this.tempNamePrefix = tempNamePrefix;
  }

  


  private String getTempValueName(){
    return tempNamePrefix + ContextualRenamer.UNIQUE_ID_SEPARATOR
        + safeNameIdSupplier.get();
  }

  


  private String getTempConstantValueName(){
    String name = tempNamePrefix + "_const"
        + ContextualRenamer.UNIQUE_ID_SEPARATOR
        + safeNameIdSupplier.get();
    this.knownConstants.add(name);
    return name;
  }

  



  static Node findInjectionPoint(Node subExpression) {
    Node expressionRoot = findExpressionRoot(subExpression);
    Preconditions.checkNotNull(expressionRoot);

    Node injectionPoint = expressionRoot;

    Node parent = injectionPoint.getParent();
    while (parent.getType() == Token.LABEL) {
      injectionPoint = parent;
      parent = injectionPoint.getParent();
    }

    Preconditions.checkState(
        NodeUtil.isStatementBlock(injectionPoint.getParent()));
    return injectionPoint;
  }

  


  private static boolean isConditionalOp(Node n) {
    switch(n.getType()) {
      case Token.HOOK:
      case Token.AND:
      case Token.OR:
        return true;
      default:
        return false;
    }
  }

  




  static Node findExpressionRoot(Node subExpression) {
    Node child = subExpression;
    for (Node parent : child.getAncestors()) {
      int parentType = parent.getType();
      switch (parentType) {
        
        
        
        
        case Token.EXPR_RESULT:
        case Token.IF:
        case Token.SWITCH:
        case Token.RETURN:
        case Token.VAR:
          Preconditions.checkState(child == parent.getFirstChild());
          return parent;
        
        case Token.SCRIPT:
        case Token.BLOCK:
        case Token.LABEL:
        case Token.CASE:
        case Token.DEFAULT:
          return null;
      }
      child = parent;
    }

    throw new IllegalStateException("Unexpected AST structure.");
  }

  
























  DecompositionType canExposeExpression(Node subExpression) {
    Node expressionRoot = findExpressionRoot(subExpression);
    if (expressionRoot != null) {
      return isSubexpressionMovable(expressionRoot, subExpression);
    }
    return DecompositionType.UNDECOMPOSABLE;
  }

  

























  private DecompositionType isSubexpressionMovable(
      Node expressionRoot, Node subExpression) {
    boolean requiresDecomposition = false;
    boolean seenSideEffects = NodeUtil.mayHaveSideEffects(subExpression);

    Node child = subExpression;
    for (Node parent : child.getAncestors()) {
      if (parent == expressionRoot) {
        
        
        return requiresDecomposition
            ? DecompositionType.DECOMPOSABLE
            : DecompositionType.MOVABLE;
      }

      int parentType = parent.getType();

      if (isConditionalOp(parent)) {
        
        
        if (child != parent.getFirstChild()) {
          requiresDecomposition = true;
        }
      } else {
        
        
        
        
        

        
        if (isSafeAssign(parent, seenSideEffects)) {
          
          
          
          
          
          
          
          
          
          
        } else {
          
          for (Node n : parent.children()) {
            if (n == child) {
              
              
              break;
            }

            if (isExpressionTreeUnsafe(
                n, seenSideEffects)) {
              seenSideEffects = true;
              requiresDecomposition = true;
            }
          }

          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          Node first = parent.getFirstChild();
          if (requiresDecomposition
              && parent.getType() == Token.CALL
              && NodeUtil.isGet(first)) {
            if (maybeExternMethod(first)) {
              return DecompositionType.UNDECOMPOSABLE;
            } else {
              return DecompositionType.DECOMPOSABLE;
            }
          }
        }
      }
      
      child = parent;
    }

    
    throw new IllegalStateException("Unexpected.");
  }

  




















  private boolean isSafeAssign(Node n, boolean seenSideEffects) {
    if (n.getType() == Token.ASSIGN) {
      Node lhs = n.getFirstChild();
      switch (lhs.getType()) {
        case Token.NAME:
          return true;
        case Token.GETPROP:
          return !isExpressionTreeUnsafe(lhs.getFirstChild(), seenSideEffects);
        case Token.GETELEM:
          return !isExpressionTreeUnsafe(lhs.getFirstChild(), seenSideEffects)
              && !isExpressionTreeUnsafe(lhs.getLastChild(), seenSideEffects);
      }
    }
    return false;
  }

  



  private boolean isExpressionTreeUnsafe(
      Node n, boolean followingSideEffectsExist) {
    if (followingSideEffectsExist) {
      
      

      
      return NodeUtil.canBeSideEffected(n, this.knownConstants);
    } else {
      
      
      return NodeUtil.mayHaveSideEffects(n);
    }
  }
}
