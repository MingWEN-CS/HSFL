1a2,64
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> package com.google.javascript.jscomp;
> 
> import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;
> import com.google.javascript.jscomp.mozilla.rhino.Token;
> import com.google.javascript.rhino.Node;
> 
> 
> 
> 
> 
> 
> 
> class CheckRegExp extends AbstractPostOrderCallback implements CompilerPass {
> 
>   
>   static final DiagnosticType REGEXP_REFERENCE =
>     DiagnosticType.disabled("JSC_REGEXP_REFERENCE",
>         "References to the global RegExp object prevents " +
>         "optimization of regular expressions.");
> 
>   private final AbstractCompiler compiler;
>   private boolean globalRegExpPropertiesUsed = false;
> 
>   public boolean isGlobalRegExpPropertiesUsed() {
>     return globalRegExpPropertiesUsed;
>   }
> 
>   public CheckRegExp(AbstractCompiler compiler) {
>     this.compiler = compiler;
>   }
> 
>   @Override
>   public void process(Node externs, Node root) {
>     NodeTraversal.traverse(compiler, root, this);
>   }
> 
>   @Override
>   public void visit(NodeTraversal t, Node n, Node parent) {
>     if (NodeUtil.isReferenceName(n)) {
>       String name = n.getString();
>       if (name.equals("RegExp") && t.getScope().getVar(name) == null) {
>         if (parent.getType() != Token.NEW || n != parent.getFirstChild()) {
>           t.report(n, REGEXP_REFERENCE);
>           globalRegExpPropertiesUsed = true;
>         }
>       }
>     }
>   }
> }
