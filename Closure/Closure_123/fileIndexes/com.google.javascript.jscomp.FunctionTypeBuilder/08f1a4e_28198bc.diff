24a25
> import com.google.common.base.Predicate;
91a93,96
>   static final DiagnosticType RESOLVED_TAG_EMPTY = DiagnosticType.warning(
>       "JSC_RESOLVED_TAG_EMPTY",
>       "Could not resolve type in {0} tag of {1}");
> 
122a128,167
>   private class ExtendedTypeValidator implements Predicate<JSType> {
>     @Override
>     public boolean apply(JSType type) {
>       ObjectType objectType = ObjectType.cast(type);
>       if (objectType == null) {
>         reportWarning(EXTENDS_NON_OBJECT, fnName, type.toString());
>       } else if (objectType.isUnknownType() &&
>           
>           
>           
>           (objectType.getImplicitPrototype() == null ||
>            objectType.getImplicitPrototype().isResolved())) {
>         reportWarning(RESOLVED_TAG_EMPTY, "@extends", fnName);
>       } else {
>         return true;
>       }
>       return false;
>     }
>   };
> 
>   private class ImplementedTypeValidator implements Predicate<JSType> {
>     @Override
>     public boolean apply(JSType type) {
>       ObjectType objectType = ObjectType.cast(type);
>       if (objectType == null) {
>         reportError(BAD_IMPLEMENTED_TYPE, fnName);
>       } else if (objectType.isUnknownType() &&
>           
>           
>           
>           (objectType.getImplicitPrototype() == null ||
>            objectType.getImplicitPrototype().isResolved())) {
>         reportWarning(RESOLVED_TAG_EMPTY, "@implements", fnName);
>       } else {
>         return true;
>       }
>       return false;
>     }
>   };
> 
281,283c326,330
<           baseType = ObjectType.cast(info.getBaseType().evaluate(scope, typeRegistry));
<           if (baseType == null) {
<             reportWarning(EXTENDS_NON_OBJECT, fnName, baseType.toString());
---
>           JSType maybeBaseType =
>               info.getBaseType().evaluate(scope, typeRegistry);
>           if (maybeBaseType != null &&
>               maybeBaseType.setValidator(new ExtendedTypeValidator())) {
>             baseType = (ObjectType) maybeBaseType;
294,298c341,344
<           ObjectType interType = ObjectType.cast(t.evaluate(scope, typeRegistry));
<           if (interType != null) {
<             implementedInterfaces.add(interType);
<           } else {
<             reportError(BAD_IMPLEMENTED_TYPE, fnName);
---
>           JSType maybeInterType = t.evaluate(scope, typeRegistry);
>           if (maybeInterType != null &&
>               maybeInterType.setValidator(new ImplementedTypeValidator())) {
>             implementedInterfaces.add((ObjectType) maybeInterType);
