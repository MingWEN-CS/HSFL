833,844d832
<   public JSType getForgivingType(StaticScope<JSType> scope, String jsTypeName,
<       String sourceName, int lineno, int charno) {
<     JSType type = getType(
<         scope, jsTypeName, sourceName, lineno, charno);
<     type.forgiveUnknownNames();
<     return type;
<   }
< 
<   
< 
< 
< 
1350,1362d1337
<     return createFromTypeNodes(n, sourceName, scope, false);
<   }
< 
<   
< 
< 
< 
< 
< 
< 
< 
<   public JSType createFromTypeNodes(Node n, String sourceName,
<       StaticScope<JSType> scope, boolean forgiving) {
1368c1343
<         return new UnresolvedTypeExpression(this, n, sourceName, forgiving);
---
>         return new UnresolvedTypeExpression(this, n, sourceName);
1371c1346
<     return createFromTypeNodesInternal(n, sourceName, scope, forgiving);
---
>     return createFromTypeNodesInternal(n, sourceName, scope);
1391c1366
<       StaticScope<JSType> scope, boolean forgiving) {
---
>       StaticScope<JSType> scope) {
1399c1374
<             n.getFirstChild(), sourceName, scope, forgiving)
---
>             n.getFirstChild(), sourceName, scope)
1409c1384
<                 firstChild, sourceName, scope, forgiving));
---
>                 firstChild, sourceName, scope));
1414c1389
<                 n.getFirstChild(), sourceName, scope, false));
---
>                 n.getFirstChild(), sourceName, scope));
1419c1394
<                 n.getFirstChild(), sourceName, scope, false));
---
>                 n.getFirstChild(), sourceName, scope));
1433c1408
<               createFromTypeNodesInternal(child, sourceName, scope, false));
---
>               createFromTypeNodesInternal(child, sourceName, scope));
1446,1448d1420
<         if (forgiving) {
<           namedType.forgiveUnknownNames();
<         }
1460c1432
<                     typeList.getLastChild(), sourceName, scope, false);
---
>                     typeList.getLastChild(), sourceName, scope);
1466c1438
<                       typeList.getFirstChild(), sourceName, scope, false);
---
>                       typeList.getFirstChild(), sourceName, scope);
1486c1458
<                       contextNode, sourceName, scope, false)
---
>                       contextNode, sourceName, scope)
1514c1486
<                         arg.getFirstChild(), sourceName, scope, false));
---
>                         arg.getFirstChild(), sourceName, scope));
1518c1490
<                   arg, sourceName, scope, false);
---
>                   arg, sourceName, scope);
1535c1507
<             createFromTypeNodesInternal(current, sourceName, scope, false);
---
>             createFromTypeNodesInternal(current, sourceName, scope);
1589c1561
<             fieldTypeNode.getLastChild(), sourceName, scope, false);
---
>             fieldTypeNode.getLastChild(), sourceName, scope);
