30a31
> import static com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE;
31a33
> import static com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE;
36a39
> import static com.google.javascript.rhino.jstype.JSTypeNative.REGEXP_TYPE;
37a41
> import static com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE;
299a304,347
>   private void attachLiteralTypes(Node n) {
>     switch (n.getType()) {
>       case Token.NULL:
>         n.setJSType(getNativeType(NULL_TYPE));
>         break;
> 
>       case Token.VOID:
>         n.setJSType(getNativeType(VOID_TYPE));
>         break;
> 
>       case Token.STRING:
>         n.setJSType(getNativeType(STRING_TYPE));
>         break;
> 
>       case Token.NUMBER:
>         n.setJSType(getNativeType(NUMBER_TYPE));
>         break;
> 
>       case Token.TRUE:
>       case Token.FALSE:
>         n.setJSType(getNativeType(BOOLEAN_TYPE));
>         break;
> 
>       case Token.REGEXP:
>         n.setJSType(getNativeType(REGEXP_TYPE));
>         break;
> 
>       case Token.REF_SPECIAL:
>         n.setJSType(getNativeType(UNKNOWN_TYPE));
>         break;
> 
>       case Token.OBJECTLIT:
>         n.setJSType(typeRegistry.createAnonymousObjectType());
>         break;
> 
>       
>       
>     }
>   }
> 
>   private JSType getNativeType(JSTypeNative nativeType) {
>     return typeRegistry.getNativeType(nativeType);
>   }
> 
539c587
<               typeRegistry.getNativeType(UNKNOWN_TYPE) : null;
---
>               getNativeType(UNKNOWN_TYPE) : null;
792c840
<                     typeRegistry.getNativeType(JSTypeNative.NO_TYPE) :
---
>                     getNativeType(JSTypeNative.NO_TYPE) :
811c859
<                     typeRegistry.getNativeType(OBJECT_TYPE)));
---
>                     getNativeType(OBJECT_TYPE)));
850a899,900
>       attachLiteralTypes(n);
> 
1000c1050
<               typeRegistry.getNativeType(U2U_CONSTRUCTOR_TYPE));
---
>               getNativeType(U2U_CONSTRUCTOR_TYPE));
1050c1100
<             typeRegistry.getNativeType(NO_TYPE), false);
---
>             getNativeType(NO_TYPE), false);
1145,1159d1194
<         } else if (rhsValue != null &&
<                    rhsValue.getType() == Token.TRUE) {
<           
<           ObjectType ownerType = getObjectSlot(ownerName);
<           if (ownerType instanceof FunctionType) {
<             JSType ownerTypeOfThis = ((FunctionType) ownerType).getTypeOfThis();
<             String delegateName = codingConvention.getDelegateSuperclassName();
<             JSType delegateType = delegateName == null ?
<                 null : typeRegistry.getType(delegateName);
<             if (delegateType != null &&
<                 ownerTypeOfThis.isSubtype(delegateType)) {
<               defineSlot(n, parent, typeRegistry.getNativeType(BOOLEAN_TYPE),
<                          true);
<             }
<           }
1196a1232,1246
>       } else if (rhsValue != null &&
>           rhsValue.getType() == Token.TRUE) {
>         
>         ObjectType ownerType = getObjectSlot(ownerName);
>         if (ownerType instanceof FunctionType) {
>           JSType ownerTypeOfThis = ((FunctionType) ownerType).getTypeOfThis();
>           String delegateName = codingConvention.getDelegateSuperclassName();
>           JSType delegateType = delegateName == null ?
>               null : typeRegistry.getType(delegateName);
>           if (delegateType != null &&
>               ownerTypeOfThis.isSubtype(delegateType)) {
>             defineSlot(n, parent, getNativeType(BOOLEAN_TYPE),
>                 true);
>           }
>         }
1375a1426
>       attachLiteralTypes(n);
