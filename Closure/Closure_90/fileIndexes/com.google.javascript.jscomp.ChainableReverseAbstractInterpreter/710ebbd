















package com.google.javascript.jscomp;

import com.google.common.base.Preconditions;

import static com.google.javascript.rhino.jstype.JSTypeNative.ALL_TYPE;
import static com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE;
import static com.google.javascript.rhino.jstype.JSTypeNative.NO_OBJECT_TYPE;
import static com.google.javascript.rhino.jstype.JSTypeNative.NO_TYPE;
import static com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE;
import static com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE;
import static com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE;
import static com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE;
import static com.google.javascript.rhino.jstype.JSTypeNative.U2U_CONSTRUCTOR_TYPE;
import static com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE;
import static com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE;

import com.google.javascript.rhino.jstype.EnumElementType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.StaticSlot;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.Visitor;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.Token;






abstract class ChainableReverseAbstractInterpreter
    implements ReverseAbstractInterpreter {
  protected final CodingConvention convention;
  final JSTypeRegistry typeRegistry;
  private ChainableReverseAbstractInterpreter firstLink;
  private ChainableReverseAbstractInterpreter nextLink;

  



  ChainableReverseAbstractInterpreter(CodingConvention convention,
      JSTypeRegistry typeRegistry) {
    Preconditions.checkNotNull(convention);
    this.convention = convention;
    this.typeRegistry = typeRegistry;
    firstLink = this;
    nextLink = null;
  }

  







  ChainableReverseAbstractInterpreter append(
      ChainableReverseAbstractInterpreter lastLink) {
    Preconditions.checkArgument(lastLink.nextLink == null);
    this.nextLink = lastLink;
    lastLink.firstLink = this.firstLink;
    return lastLink;
  }

  


  ChainableReverseAbstractInterpreter getFirst() {
    return firstLink;
  }

  


  protected FlowScope firstPreciserScopeKnowingConditionOutcome(Node condition,
      FlowScope blindScope, boolean outcome) {
    return firstLink.getPreciserScopeKnowingConditionOutcome(
        condition, blindScope, outcome);
  }

  



  protected FlowScope nextPreciserScopeKnowingConditionOutcome(Node condition,
      FlowScope blindScope, boolean outcome) {
    return nextLink != null ? nextLink.getPreciserScopeKnowingConditionOutcome(
        condition, blindScope, outcome) : blindScope;
  }

  




  JSType getTypeIfRefinable(Node node, FlowScope scope) {
    switch (node.getType()) {
      case Token.NAME:
        StaticSlot<JSType> nameVar = scope.getSlot(node.getString());
        if (nameVar != null) {
          JSType nameVarType = nameVar.getType();
          if (nameVarType == null) {
            nameVarType = node.getJSType();
          }
          return nameVarType;
        }
        return null;

      case Token.GETPROP:
        String qualifiedName = node.getQualifiedName();
        if (qualifiedName == null) {
          return null;
        }
        StaticSlot<JSType> propVar = scope.getSlot(qualifiedName);
        JSType propVarType = null;
        if (propVar != null) {
          propVarType = propVar.getType();
        }
        if (propVarType == null) {
          propVarType = node.getJSType();
        }
        if (propVarType == null) {
          propVarType = getNativeType(UNKNOWN_TYPE);
        }
        return propVarType;
    }
    return null;
  }

  




  protected void declareNameInScope(FlowScope scope, Node node, JSType type) {
    switch (node.getType()) {
      case Token.NAME:
        scope.inferSlotType(node.getString(), type);
        break;

      case Token.GETPROP:
        String qualifiedName = node.getQualifiedName();
        Preconditions.checkNotNull(qualifiedName);

        JSType origType = node.getJSType();
        origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
        scope.inferQualifiedSlot(qualifiedName, origType, type);
        break;

      default:
        throw new IllegalArgumentException("Node cannot be refined. \n" +
            node.toStringTree());
    }
  }

  


  private final Visitor<JSType> restrictUndefinedVisitor =
    new Visitor<JSType>() {
      public JSType caseEnumElementType(EnumElementType enumElementType) {
        JSType type = enumElementType.getPrimitiveType().visit(this);
        if (type != null && enumElementType.getPrimitiveType().equals(type)) {
          return enumElementType;
        } else {
          return type;
        }
      }

      public JSType caseAllType() {
        return typeRegistry.createUnionType(OBJECT_TYPE, NUMBER_TYPE,
            STRING_TYPE, BOOLEAN_TYPE, NULL_TYPE);
      }

      public JSType caseNoObjectType() {
        return getNativeType(NO_OBJECT_TYPE);
      }

      public JSType caseNoType() {
        return getNativeType(NO_TYPE);
      }

      public JSType caseBooleanType() {
        return getNativeType(BOOLEAN_TYPE);
      }

      public JSType caseFunctionType(FunctionType type) {
        return type;
      }

      public JSType caseNullType() {
        return getNativeType(NULL_TYPE);
      }

      public JSType caseNumberType() {
        return getNativeType(NUMBER_TYPE);
      }

      public JSType caseObjectType(ObjectType type) {
        return type;
      }

      public JSType caseStringType() {
        return getNativeType(STRING_TYPE);
      }

      public JSType caseUnionType(UnionType type) {
        return type.getRestrictedUnion(getNativeType(VOID_TYPE));
      }

      public JSType caseUnknownType() {
        return getNativeType(UNKNOWN_TYPE);
      }

      public JSType caseVoidType() {
        return null;
      }
    };


  


  private final Visitor<JSType> restrictNullVisitor =
    new Visitor<JSType>() {
      public JSType caseEnumElementType(EnumElementType enumElementType) {
        JSType type = enumElementType.getPrimitiveType().visit(this);
        if (type != null && enumElementType.getPrimitiveType().equals(type)) {
          return enumElementType;
        } else {
          return type;
        }
      }

      public JSType caseAllType() {
        return typeRegistry.createUnionType(OBJECT_TYPE, NUMBER_TYPE,
            STRING_TYPE, BOOLEAN_TYPE, VOID_TYPE);
      }

      public JSType caseNoObjectType() {
        return getNativeType(NO_OBJECT_TYPE);
      }

      public JSType caseNoType() {
        return getNativeType(NO_TYPE);
      }

      public JSType caseBooleanType() {
        return getNativeType(BOOLEAN_TYPE);
      }

      public JSType caseFunctionType(FunctionType type) {
        return type;
      }

      public JSType caseNullType() {
        return null;
      }

      public JSType caseNumberType() {
        return getNativeType(NUMBER_TYPE);
      }

      public JSType caseObjectType(ObjectType type) {
        return type;
      }

      public JSType caseStringType() {
        return getNativeType(STRING_TYPE);
      }

      public JSType caseUnionType(UnionType type) {
        return type.getRestrictedUnion(getNativeType(NULL_TYPE));
      }

      public JSType caseUnknownType() {
        return getNativeType(UNKNOWN_TYPE);
      }

      public JSType caseVoidType() {
        return getNativeType(VOID_TYPE);
      }
    };

  



  abstract class RestrictByTypeOfResultVisitor
      implements Visitor<JSType> {

    







    protected abstract JSType caseTopType(JSType topType);

    public JSType caseAllType() {
      return caseTopType(getNativeType(ALL_TYPE));
    }

    public JSType caseUnknownType() {
      return caseTopType(getNativeType(UNKNOWN_TYPE));
    }

    public JSType caseUnionType(UnionType type) {
      JSType restricted = null;
      for (JSType alternate : type.getAlternates()) {
        JSType restrictedAlternate = alternate.visit(this);
        if (restrictedAlternate != null) {
          if (restricted == null) {
            restricted = restrictedAlternate;
          } else {
            restricted = restrictedAlternate.getLeastSupertype(restricted);
          }
        }
      }
      return restricted;
    }

    public JSType caseNoType() {
      return getNativeType(NO_TYPE);
    }

    public JSType caseEnumElementType(EnumElementType enumElementType) {
      
      
      
      
      
      
      
      
      
      JSType type = enumElementType.getPrimitiveType().visit(this);
      if (type != null && enumElementType.getPrimitiveType().equals(type)) {
        return enumElementType;
      } else {
        return type;
      }
    }
  }

  




  abstract class RestrictByTrueTypeOfResultVisitor
      extends RestrictByTypeOfResultVisitor {
    public JSType caseNoObjectType() {
      return null;
    }

    public JSType caseBooleanType() {
      return null;
    }

    public JSType caseFunctionType(FunctionType type) {
      return null;
    }

    public JSType caseNullType() {
      return null;
    }

    public JSType caseNumberType() {
      return null;
    }

    public JSType caseObjectType(ObjectType type) {
      return null;
    }

    public JSType caseStringType() {
      return null;
    }

    public JSType caseVoidType() {
      return null;
    }
  }

  




  abstract class RestrictByFalseTypeOfResultVisitor
      extends RestrictByTypeOfResultVisitor {
    @Override
    protected JSType caseTopType(JSType topType) {
      return topType;
    }

    public JSType caseNoObjectType() {
      return getNativeType(NO_OBJECT_TYPE);
    }

    public JSType caseBooleanType() {
      return getNativeType(BOOLEAN_TYPE);
    }

    public JSType caseFunctionType(FunctionType type) {
      return type;
    }

    public JSType caseNullType() {
      return getNativeType(NULL_TYPE);
    }

    public JSType caseNumberType() {
      return getNativeType(NUMBER_TYPE);
    }

    public JSType caseObjectType(ObjectType type) {
      return type;
    }

    public JSType caseStringType() {
      return getNativeType(STRING_TYPE);
    }

    public JSType caseVoidType() {
      return getNativeType(VOID_TYPE);
    }
  }

  


  private class RestrictByOneTypeOfResultVisitor
      extends RestrictByTypeOfResultVisitor {
    



    private final String value;

    




    private final boolean resultEqualsValue;

    RestrictByOneTypeOfResultVisitor(String value, boolean resultEqualsValue) {
      this.value = value;
      this.resultEqualsValue = resultEqualsValue;
    }

    




    private boolean matchesExpectation(String result) {
      return result.equals(value) == resultEqualsValue;
    }

    @Override
    protected JSType caseTopType(JSType topType) {
      JSType result = topType;
      if (resultEqualsValue) {
        JSType typeByName = getNativeTypeForTypeOf(value);
        if (typeByName != null) {
          result = typeByName;
        }
      }
      return result;
    }

    public JSType caseNoObjectType() {
      return (value.equals("object") || value.equals("function")) ==
          resultEqualsValue ? getNativeType(NO_OBJECT_TYPE) : null;
    }

    public JSType caseBooleanType() {
      return matchesExpectation("boolean") ? getNativeType(BOOLEAN_TYPE) : null;
    }

    public JSType caseFunctionType(FunctionType type) {
      return matchesExpectation("function") ? type : null;
    }

    public JSType caseNullType() {
      return matchesExpectation("object") ? getNativeType(NULL_TYPE) : null;
    }

    public JSType caseNumberType() {
      return matchesExpectation("number") ? getNativeType(NUMBER_TYPE) : null;
    }

    public JSType caseObjectType(ObjectType type) {
      if (value.equals("function")) {
        JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);
        return resultEqualsValue && ctorType.isSubtype(type) ? ctorType : null;
      }
      return matchesExpectation("object") ? type : null;
    }

    public JSType caseStringType() {
      return matchesExpectation("string") ? getNativeType(STRING_TYPE) : null;
    }

    public JSType caseVoidType() {
      return matchesExpectation("undefined") ? getNativeType(VOID_TYPE) : null;
    }
  }

  


  final JSType getRestrictedWithoutUndefined(JSType type) {
    return type == null ? null : type.visit(restrictUndefinedVisitor);
  }

  


  final JSType getRestrictedWithoutNull(JSType type) {
    return type == null ? null : type.visit(restrictNullVisitor);
  }

  


























  JSType getRestrictedByTypeOfResult(JSType type, String value,
                                     boolean resultEqualsValue) {
    if (type == null) {
      if (resultEqualsValue) {
        JSType result = getNativeTypeForTypeOf(value);
        return result == null ? getNativeType(UNKNOWN_TYPE) : result;
      } else {
        return null;
      }
    }
    return type.visit(
        new RestrictByOneTypeOfResultVisitor(value, resultEqualsValue));
  }

  JSType getNativeType(JSTypeNative typeId) {
    return typeRegistry.getNativeType(typeId);
  }

  








  private JSType getNativeTypeForTypeOf(String value) {
    if (value.equals("number")) {
      return getNativeType(NUMBER_TYPE);
    } else if (value.equals("boolean")) {
      return getNativeType(BOOLEAN_TYPE);
    } else if (value.equals("string")) {
      return getNativeType(STRING_TYPE);
    } else if (value.equals("undefined")) {
      return getNativeType(VOID_TYPE);
    } else if (value.equals("function")) {
      return getNativeType(U2U_CONSTRUCTOR_TYPE);
    } else {
      return null;
    }
  }
}
