1a2,158
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> package com.google.javascript.jscomp;
> 
> import com.google.javascript.jscomp.CheckLevel;
> import com.google.javascript.jscomp.NodeTraversal.Callback;
> import com.google.javascript.rhino.JSDocInfo;
> import com.google.javascript.rhino.Node;
> import com.google.javascript.rhino.Token;
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> final class CheckGlobalThis implements Callback {
> 
>   static final DiagnosticType GLOBAL_THIS = DiagnosticType.warning(
>       "JSC_USED_GLOBAL_THIS",
>       "dangerous use of the global 'this' object");
> 
>   private final AbstractCompiler compiler;
>   private final CheckLevel level;
> 
>   
> 
> 
> 
> 
>   private Node assignLhsChild = null;
> 
>   CheckGlobalThis(AbstractCompiler compiler, CheckLevel level) {
>     this.compiler = compiler;
>     this.level = level;
>   }
> 
>   
> 
> 
> 
>   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
>     
>     if (n.getType() == Token.FUNCTION) {
>       
>       
>       JSDocInfo jsDoc = getFunctionJsDocInfo(n);
>       if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType())) {
>         return false;
>       }
>     }
>     
>     if (parent != null && parent.getType() == Token.ASSIGN) {
>       Node lhs = parent.getFirstChild();
>       Node rhs = lhs.getNext();
>       
>       if (n == lhs) {
>         
>         
>         
>         if (assignLhsChild == null) {
>           assignLhsChild = lhs;
>         }
>       } else {
>         
>         
>         if (lhs.getType() == Token.GETPROP) {
>           if (lhs.getLastChild().getString().equals("prototype")) {
>             return false;
>           }
>           String leftName = lhs.getQualifiedName();
>           if (leftName != null && leftName.contains(".prototype.")) {
>             return false;
>           }
>         }
>       }
>     }
>     
>     return true;
>   }
> 
>   public void visit(NodeTraversal t, Node n, Node parent) {
>     if (assignLhsChild != null && n.getType() == Token.THIS) {
>       compiler.report(JSError.make(t, n, level, GLOBAL_THIS));
>     }
>     if (n == assignLhsChild) {
>       assignLhsChild = null;
>     }
>   }
> 
>   
> 
> 
> 
> 
> 
> 
> 
> 
> 
>   private JSDocInfo getFunctionJsDocInfo(Node n) {
>     JSDocInfo jsDoc = n.getJSDocInfo();
>     Node parent = n.getParent();
>     if (jsDoc == null) {
>       int parentType = parent.getType();
>       if (parentType == Token.NAME || parentType == Token.ASSIGN) {
>         jsDoc = parent.getJSDocInfo();
>         if (jsDoc == null && parentType == Token.NAME) {
>           Node gramps = parent.getParent();
>           if (gramps.getType() == Token.VAR) {
>             jsDoc = gramps.getJSDocInfo();
>           }
>         }
>       }
>     }
>     return jsDoc;
>   }
> }
