




















































package org.joda.time.format;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Locale;

import org.joda.time.DateTimeField;
import org.joda.time.DateTimeZone;







public class DateTimeParserBucket {

    final long iMillis;

    
    DateTimeZone iZone;
    int iOffset;

    ArrayList iSavedFields = new ArrayList();

    


    public DateTimeParserBucket(long millis) {
        iMillis = millis;
    }

    



    public DateTimeZone getDateTimeZone() {
        return iZone;
    }

    





    public void setDateTimeZone(DateTimeZone zone) {
        iZone = zone == DateTimeZone.UTC ? null : zone;
        iOffset = 0;
    }

    



    public long getOffset() {
        return iOffset;
    }

    



    public void setOffset(int offset) {
        iOffset = offset;
        iZone = null;
    }

    


    public void saveField(DateTimeField field, int value) {
        iSavedFields.add(new SavedField(field, value));
    }

    


    public void saveField(DateTimeField field, String text, Locale locale) {
        iSavedFields.add(new SavedField(field, text, locale));
    }

    






    public Object saveState() {
        Object state = new SavedState();
        iSavedFields = (ArrayList)iSavedFields.clone();
        return state;
    }

    










    public boolean undoChanges(Object savedState) {
        if (savedState instanceof SavedState) {
            return ((SavedState)savedState).revertState(this);
        }
        return false;
    }

    






    public long computeMillis() {
        int length = iSavedFields.size();
        SavedField[] savedFields = new SavedField[length];
        iSavedFields.toArray(savedFields);

        Arrays.sort(savedFields);

        long millis = iMillis;
        for (int i=0; i<length; i++) {
            millis = savedFields[i].set(millis);
        }

        if (iZone == null) {
            millis -= iOffset;
        } else {
            int offset = iZone.getOffsetFromLocal(millis);
            millis -= offset;
            if (offset != iZone.getOffset(millis)) {
                throw new IllegalArgumentException
                    ("Illegal instant due to time zone offset transition");
            }
        }

        return millis;
    }

    private static class SavedField implements Comparable {
        final DateTimeField iField;
        final int iValue;
        final String iText;
        final Locale iLocale;

        SavedField(DateTimeField field, int value) {
            iField = field;
            iValue = value;
            iText = null;
            iLocale = null;
        }

        SavedField(DateTimeField field, String text, Locale locale) {
            iField = field;
            iValue = 0;
            iText = text;
            iLocale = locale;
        }

        long set(long millis) {
            if (iText == null) {
                return iField.set(millis, iValue);
            } else {
                return iField.set(millis, iText, iLocale);
            }
        }

        





        public int compareTo(Object obj) {
            DateTimeField other = ((SavedField)obj).iField;
            long a = iField.getRangeMillis();
            long b = other.getRangeMillis();
            if (a > b) {
                return -1;
            } else if (a < b) {
                return 1;
            }
            a = iField.getUnitMillis();
            b = other.getUnitMillis();
            if (a > b) {
                return -1;
            } else if (a < b) {
                return 1;
            }
            return 0;
        }
    }

    private class SavedState {
        final DateTimeZone iZone;
        final int iOffset;
        final ArrayList iSavedFields;

        SavedState() {
            this.iZone = DateTimeParserBucket.this.iZone;
            this.iOffset = DateTimeParserBucket.this.iOffset;
            this.iSavedFields = DateTimeParserBucket.this.iSavedFields;
        }

        boolean revertState(DateTimeParserBucket enclosing) {
            if (enclosing != DateTimeParserBucket.this) {
                return false;
            }
            DateTimeParserBucket.this.iZone = this.iZone;
            DateTimeParserBucket.this.iOffset = this.iOffset;
            DateTimeParserBucket.this.iSavedFields = this.iSavedFields;
            return true;
        }
    }
}
