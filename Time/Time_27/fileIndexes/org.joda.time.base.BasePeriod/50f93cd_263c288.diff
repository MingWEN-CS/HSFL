57a58
> import org.joda.time.Chronology;
59a61
> import org.joda.time.DurationFieldType;
91c93
<     private static final int STATE_UNKNOWN = 0;
---
>     private PeriodType iType;
93,95c95
<     private static final int STATE_NOT_CALCULABLE = 1;
<     
<     private static final int STATE_CALCULATED = 2;
---
>     private int[] iValues;
98,108d97
<     private final PeriodType iType;
<     
<     private transient int iState;
<     
<     private transient long iDuration;
<     
<     private int iYears;
<     
<     private int iMonths;
<     
<     private int iWeeks;
110,118d98
<     private int iDays;
<     
<     private int iHours;
<     
<     private int iMinutes;
<     
<     private int iSeconds;
<     
<     private int iMillis;
120,121d99
<     
<     
131c109
<     protected BasePeriod(long duration, PeriodType type) {
---
>     protected BasePeriod(long duration, PeriodType type, Chronology chrono) {
135,136c113
<         
<         setPeriod(type, duration);
---
>         setPeriodInternal(duration, chrono); 
160,161c137
<         
<         setPeriod(type, years, months, weeks, days, hours, minutes, seconds, millis);
---
>         setPeriodInternal(years, months, weeks, days, hours, minutes, seconds, millis); 
172c148,149
<     protected BasePeriod(long startInstant, long endInstant, PeriodType type) {
---
> 
>     protected BasePeriod(long startInstant, long endInstant, PeriodType type, Chronology chrono) {
176,177c153
<         
<         setPeriod(type, startInstant, endInstant);
---
>         setPeriodInternal(startInstant, endInstant, chrono); 
188,189c164
<     protected BasePeriod(
<             ReadableInstant startInstant, ReadableInstant  endInstant, PeriodType type) {
---
>     protected BasePeriod(ReadableInstant startInstant, ReadableInstant  endInstant, PeriodType type) {
193a169
>             iValues = new int[size()];
195,196c171,173
<             long start = (startInstant == null ? DateTimeUtils.currentTimeMillis() : startInstant.getMillis());
<             long end = (endInstant == null ? DateTimeUtils.currentTimeMillis() : endInstant.getMillis());
---
>             long start = DateTimeUtils.getInstantMillis(startInstant);
>             long end = DateTimeUtils.getInstantMillis(endInstant);
>             Chronology chrono = (startInstant != null ? startInstant.getChronology() : endInstant.getChronology());
198,199c175
<             
<             setPeriod(type, start, end);
---
>             setPeriodInternal(start, end, chrono); 
211c187,188
<     protected BasePeriod(Object period, PeriodType type) {
---
> 
>     protected BasePeriod(Object period, PeriodType type, Chronology chrono) {
214c191
<         type = (type == null ? converter.getPeriodType(period, false) : type);
---
>         type = (type == null ? converter.getPeriodType(period) : type);
218c195,197
<             converter.setInto((ReadWritablePeriod) this, period);
---
>             iValues = new int[size()];
>             chrono = DateTimeUtils.getChronology(chrono);
>             converter.setInto((ReadWritablePeriod) this, period, chrono);
220,221c199
<             
<             setPeriod(type, new MutablePeriod(period, type));
---
>             setPeriodInternal(new MutablePeriod(period, type, chrono));
242,251d219
<     public PeriodType getPeriodType() {
<         return iType;
<     }
< 
<     
< 
< 
< 
< 
< 
254,293c222,223
< 
< 
< 
< 
<     public boolean isPrecise() {
<         int state = iState;
<         if (state == STATE_UNKNOWN) {
<             state = updateTotalMillis();
<         }
<         return (state == STATE_CALCULATED);
<     }
< 
<     
<     
< 
< 
< 
< 
<     public int getYears() {
<         return iYears;
<     }
< 
<     
<     
< 
< 
< 
< 
<     public int getMonths() {
<         return iMonths;
<     }
< 
<     
<     
< 
< 
< 
< 
<     public int getWeeks() {
<         return iWeeks;
---
>     public PeriodType getPeriodType() {
>         return iType;
302,303c232,233
<     public int getDays() {
<         return iDays;
---
>     public int size() {
>         return iType.size();
307d236
<     
312,314d240
<     public int getHours() {
<         return iHours;
<     }
316,317d241
<     
<     
319,323c243,244
< 
< 
< 
<     public int getMinutes() {
<         return iMinutes;
---
>     public DurationFieldType getFieldType(int index) {
>         return iType.getFieldType(index);
327d247
<     
332,338d251
<     public int getSeconds() {
<         return iSeconds;
<     }
< 
<     
<     
< 
341,343c254,255
< 
<     public int getMillis() {
<         return iMillis;
---
>     public int getValue(int index) {
>         return iValues[index];
355,361c267,275
<     public long toDurationMillis() {
<         int state = iState;
<         if (state == STATE_UNKNOWN) {
<             state = updateTotalMillis();
<         }
<         if (state != STATE_CALCULATED) {
<             throw new IllegalStateException("Duration is imprecise");
---
>     private void checkAndUpdate(DurationFieldType type, int[] values, int newValue) {
>         int index = indexOf(type);
>         if (index == -1) {
>             if (newValue != 0) {
>                 throw new IllegalArgumentException(
>                     "Period does not support field '" + type.getName() + "'");
>             }
>         } else {
>             values[index] = newValue;
363d276
<         return iDuration;
370,375d282
<     private static void checkArgument(DurationField field) {
<         if (!field.isSupported()) {
<             throw new IllegalArgumentException
<                 ("Time period does not support field '" + field.getName() + "'");
<         }
<     }
377d283
<     
380,383c286,290
<     private static void checkSupport(DurationField field) {
<         if (!field.isSupported()) {
<             throw new UnsupportedOperationException
<                 ("Time period does not support field '" + field.getName() + "'");
---
>     protected void setPeriod(ReadablePeriod period) {
>         if (period == null) {
>             setPeriodInternal(0L, null);
>         } else {
>             setPeriodInternal(period);
390,395c297,304
<     private void setPeriod(PeriodType type, ReadablePeriod period) {
<         setPeriod(type,
<             period.getYears(), period.getMonths(),
<             period.getWeeks(), period.getDays(),
<             period.getHours(), period.getMinutes(),
<             period.getSeconds(), period.getMillis());
---
>     private void setPeriodInternal(ReadablePeriod period) {
>         int[] newValues = new int[size()];
>         for (int i = 0, isize = period.size(); i < isize; i++) {
>             DurationFieldType type = period.getFieldType(i);
>             int value = period.getValue(i);
>             checkAndUpdate(type, newValues, value);
>         }
>         iValues = newValues;
412,420d320
<                                int hours, int minutes, int seconds, int millis) {
<         setPeriod(iType, years, months, weeks, days, hours, minutes, seconds, millis);
<     }
< 
<     
< 
< 
<     private void setPeriod(PeriodType type,
<                              int years, int months, int weeks, int days,
422,466c322
<         if (years != 0) {
<             checkArgument(type.years());
<         }
<         if (months != 0) {
<             checkArgument(type.months());
<         }
<         if (weeks != 0) {
<             checkArgument(type.weeks());
<         }
<         if (days != 0) {
<             checkArgument(type.days());
<         }
<         if (hours != 0) {
<             checkArgument(type.hours());
<         }
<         if (minutes != 0) {
<             checkArgument(type.minutes());
<         }
<         if (seconds != 0) {
<             checkArgument(type.seconds());
<         }
<         if (millis != 0) {
<             checkArgument(type.millis());
<         }
<         
<         
<         iYears = years;
<         iMonths = months;
<         iWeeks = weeks;
<         iDays = days;
<         iHours = hours;
<         iMinutes = minutes;
<         iSeconds = seconds;
<         iMillis = millis;
<         iState = STATE_UNKNOWN;
<     }
< 
<     
< 
< 
< 
< 
< 
<     protected void setPeriod(long startInstant, long endInstant) {
<         setPeriod(iType, startInstant, endInstant);
---
>         setPeriodInternal(years, months, weeks, days, hours, minutes, seconds, millis);
472,530c328,339
< 
< 
< 
<     private void setPeriod(PeriodType type, long startInstant, long endInstant) {
<         long baseTotalMillis = (endInstant - startInstant);
<         int years = 0, months = 0, weeks = 0, days = 0;
<         int hours = 0, minutes = 0, seconds = 0, millis = 0;
<         DurationField field;
<         field = type.years();
<         if (field.isSupported()) {
<             years = field.getDifference(endInstant, startInstant);
<             startInstant = field.add(startInstant, years);
<         }
<         field = type.months();
<         if (field.isSupported()) {
<             months = field.getDifference(endInstant, startInstant);
<             startInstant = field.add(startInstant, months);
<         }
<         field = type.weeks();
<         if (field.isSupported()) {
<             weeks = field.getDifference(endInstant, startInstant);
<             startInstant = field.add(startInstant, weeks);
<         }
<         field = type.days();
<         if (field.isSupported()) {
<             days = field.getDifference(endInstant, startInstant);
<             startInstant = field.add(startInstant, days);
<         }
<         field = type.hours();
<         if (field.isSupported()) {
<             hours = field.getDifference(endInstant, startInstant);
<             startInstant = field.add(startInstant, hours);
<         }
<         field = type.minutes();
<         if (field.isSupported()) {
<             minutes = field.getDifference(endInstant, startInstant);
<             startInstant = field.add(startInstant, minutes);
<         }
<         field = type.seconds();
<         if (field.isSupported()) {
<             seconds = field.getDifference(endInstant, startInstant);
<             startInstant = field.add(startInstant, seconds);
<         }
<         field = type.millis();
<         if (field.isSupported()) {
<             millis = field.getDifference(endInstant, startInstant);
<             startInstant = field.add(startInstant, millis);
<         }
<         
<         
<         iYears = years;
<         iMonths = months;
<         iWeeks = weeks;
<         iDays = days;
<         iHours = hours;
<         iMinutes = minutes;
<         iSeconds = seconds;
<         iMillis = millis;
<         iState = STATE_UNKNOWN;
---
>     private void setPeriodInternal(int years, int months, int weeks, int days,
>                                    int hours, int minutes, int seconds, int millis) {
>         int[] newValues = new int[size()];
>         checkAndUpdate(DurationFieldType.years(), newValues, years);
>         checkAndUpdate(DurationFieldType.months(), newValues, months);
>         checkAndUpdate(DurationFieldType.weeks(), newValues, weeks);
>         checkAndUpdate(DurationFieldType.days(), newValues, days);
>         checkAndUpdate(DurationFieldType.hours(), newValues, hours);
>         checkAndUpdate(DurationFieldType.minutes(), newValues, minutes);
>         checkAndUpdate(DurationFieldType.seconds(), newValues, seconds);
>         checkAndUpdate(DurationFieldType.millis(), newValues, millis);
>         iValues = newValues;
539,545d347
<     protected void setPeriod(long duration) {
<         setPeriod(iType, duration);
<     }
< 
<     
< 
< 
547,618c349,350
< 
<     private void setPeriod(PeriodType type, long duration) {
<         if (duration == 0) {
<             iDuration = duration;
<             iYears = 0;
<             iMonths = 0;
<             iWeeks = 0;
<             iDays = 0;
<             iHours = 0;
<             iMinutes = 0;
<             iSeconds = 0;
<             iMillis = 0;
<             iState = STATE_CALCULATED;
<             return;
<         }
<         
<         long startInstant = 0;
<         int years = 0, months = 0, weeks = 0, days = 0;
<         int hours = 0, minutes = 0, seconds = 0, millis = 0;
<         DurationField field;
<         
<         field = type.years();
<         if (field.isSupported() && field.isPrecise()) {
<             years = field.getDifference(duration, startInstant);
<             startInstant = field.add(startInstant, years);
<         }
<         field = type.months();
<         if (field.isSupported() && field.isPrecise()) {
<             months = field.getDifference(duration, startInstant);
<             startInstant = field.add(startInstant, months);
<         }
<         field = type.weeks();
<         if (field.isSupported() && field.isPrecise()) {
<             weeks = field.getDifference(duration, startInstant);
<             startInstant = field.add(startInstant, weeks);
<         }
<         field = type.days();
<         if (field.isSupported() && field.isPrecise()) {
<             days = field.getDifference(duration, startInstant);
<             startInstant = field.add(startInstant, days);
<         }
<         field = type.hours();
<         if (field.isSupported() && field.isPrecise()) {
<             hours = field.getDifference(duration, startInstant);
<             startInstant = field.add(startInstant, hours);
<         }
<         field = type.minutes();
<         if (field.isSupported() && field.isPrecise()) {
<             minutes = field.getDifference(duration, startInstant);
<             startInstant = field.add(startInstant, minutes);
<         }
<         field = type.seconds();
<         if (field.isSupported() && field.isPrecise()) {
<             seconds = field.getDifference(duration, startInstant);
<             startInstant = field.add(startInstant, seconds);
<         }
<         field = type.millis();
<         if (field.isSupported() && field.isPrecise()) {
<             millis = field.getDifference(duration, startInstant);
<             startInstant = field.add(startInstant, millis);
<         }
<         
<         
<         iYears = years;
<         iMonths = months;
<         iWeeks = weeks;
<         iDays = days;
<         iHours = hours;
<         iMinutes = minutes;
<         iSeconds = seconds;
<         iMillis = millis;
<         iState = STATE_UNKNOWN;
---
>     protected void setPeriod(long startInstant, long endInstant, Chronology chrono) {
>         setPeriodInternal(startInstant, endInstant, chrono);
622,625d353
<     
< 
< 
< 
628,689c356,359
< 
<     private int updateTotalMillis() {
<         PeriodType type = iType;
< 
<         boolean isPrecise = true;
<         long totalMillis = 0;
< 
<         DurationField field;
<         int years = iYears, months = iMonths, weeks = iWeeks, days = iDays;
<         int hours = iHours, minutes = iMinutes, seconds = iSeconds, millis = iMillis;
<         if (years != 0) {
<             field = type.years();
<             if (isPrecise &= field.isPrecise()) {
<                 totalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(years));
<             }
<         }
<         if (months != 0) {
<             field = type.months();
<             if (isPrecise &= field.isPrecise()) {
<                 totalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(months));
<             }
<         }
<         if (weeks != 0) {
<             field = type.weeks();
<             if (isPrecise &= field.isPrecise()) {
<                 totalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(weeks));
<             }
<         }
<         if (days != 0) {
<             field = type.days();
<             if (isPrecise &= field.isPrecise()) {
<                 totalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(days));
<             }
<         }
<         if (hours != 0) {
<             field = type.hours();
<             if (isPrecise &= field.isPrecise()) {
<                 totalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(hours));
<             }
<         }
<         if (minutes != 0) {
<             field = type.minutes();
<             if (isPrecise &= field.isPrecise()) {
<                 totalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(minutes));
<             }
<         }
<         if (seconds != 0) {
<             field = type.seconds();
<             if (isPrecise &= field.isPrecise()) {
<                 totalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(seconds));
<             }
<         }
<         if (millis != 0) {
<             field = type.millis();
<             if (isPrecise &= field.isPrecise()) {
<                 totalMillis = FieldUtils.safeAdd(totalMillis, field.getMillis(millis));
<             }
<         }
<         
<         iDuration = totalMillis;
<         if (isPrecise) {
<             return iState = STATE_CALCULATED;
---
>     private void setPeriodInternal(long startInstant, long endInstant, Chronology chrono) {
>         int[] newValues = new int[size()];
>         if (startInstant == endInstant) {
>             iValues = newValues;
691,705c361,365
<             return iState = STATE_NOT_CALCULABLE;
<         }
<     }
< 
<     
<     
< 
< 
< 
< 
< 
<     protected void setYears(int years) {
<         if (years != iYears) {
<             if (years != 0) {
<                 checkSupport(iType.years());
---
>             for (int i = 0, isize = size(); i < isize; i++) {
>                 DurationField field = getFieldType(i).getField(chrono);
>                 int value = field.getDifference(endInstant, startInstant);
>                 startInstant = field.add(startInstant, value);
>                 newValues[i] = value;
707,708c367
<             iYears = years;
<             iState = STATE_UNKNOWN;
---
>             iValues = newValues;
713,715d371
<     
< 
< 
719,727d374
<     protected void setMonths(int months) {
<         if (months != iMonths) {
<             if (months != 0) {
<                 checkSupport(iType.months());
<             }
<             iMonths = months;
<             iState = STATE_UNKNOWN;
<         }
<     }
729,730d375
<     
<     
736,743c381,382
<     protected void setWeeks(int weeks) {
<         if (weeks != iWeeks) {
<             if (weeks != 0) {
<                 checkSupport(iType.weeks());
<             }
<             iWeeks = weeks;
<             iState = STATE_UNKNOWN;
<         }
---
>     protected void setPeriod(long duration, Chronology chrono) {
>         setPeriodInternal(duration, chrono);
747d385
<     
750,756c388,400
< 
< 
< 
<     protected void setDays(int days) {
<         if (days != iDays) {
<             if (days != 0) {
<                 checkSupport(iType.days());
---
>     private void setPeriodInternal(long duration, Chronology chrono) {
>         int[] newValues = new int[size()];
>         if (duration == 0) {
>             iValues = newValues;
>         } else {
>             long current = 0;
>             for (int i = 0, isize = size(); i < isize; i++) {
>                 DurationField field = getFieldType(i).getField(chrono);
>                 if (field.isPrecise()) {
>                     int value = field.getDifference(duration, current);
>                     current = field.add(current, value);
>                     newValues[i] = value;
>                 }
758,759c402
<             iDays = days;
<             iState = STATE_UNKNOWN;
---
>             iValues = newValues;
764d406
<     
770,773c412,418
<     protected void setHours(int hours) {
<         if (hours != iHours) {
<             if (hours != 0) {
<                 checkSupport(iType.hours());
---
> 
>     protected void setField(DurationFieldType field, int value) {
>         int index = indexOf(field);
>         if (index == -1) {
>             if (value != 0) {
>                 throw new UnsupportedOperationException(
>                     "Period does not support field '" + field.getName() + "'");
775,776c420,421
<             iHours = hours;
<             iState = STATE_UNKNOWN;
---
>         } else {
>             setValue(index, value);
781d425
<     
787,794c431,446
<     protected void setMinutes(int minutes) {
<         if (minutes != iMinutes) {
<             if (minutes != 0) {
<                 checkSupport(iType.minutes());
<             }
<             iMinutes = minutes;
<             iState = STATE_UNKNOWN;
<         }
---
>     protected void addPeriod(ReadablePeriod period) {
>          int[] newValues = getValues(); 
>          for (int i = 0, isize = period.size(); i < isize; i++) {
>              DurationFieldType type = period.getFieldType(i);
>              int value = period.getValue(i);
>              int index = indexOf(type);
>              if (index == -1) {
>                  if (value != 0) {
>                      throw new IllegalArgumentException(
>                          "Period does not support field '" + type.getName() + "'");
>                  }
>              } else {
>                  newValues[index] = FieldUtils.safeAdd(getValue(index), value);
>              }
>          }
>          setValues(newValues);
804,810c456,459
<     protected void setSeconds(int seconds) {
<         if (seconds != iSeconds) {
<             if (seconds != 0) {
<                 checkSupport(iType.seconds());
<             }
<             iSeconds = seconds;
<             iState = STATE_UNKNOWN;
---
> 
>     protected void setValue(int index, int value) {
>         if (value != getValue(index)) {
>             iValues[index] = value;
815,816d463
<     
< 
821,828c468,469
<     protected void setMillis(int millis) {
<         if (millis != iMillis) {
<             if (millis != 0) {
<                 checkSupport(iType.millis());
<             }
<             iMillis = millis;
<             iState = STATE_UNKNOWN;
<         }
---
>     protected void setValues(int[] values) {
>         iValues = values;
