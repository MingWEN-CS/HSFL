




















































package org.joda.time.base;

import java.io.Serializable;

import org.joda.time.Chronology;
import org.joda.time.DateTimeUtils;
import org.joda.time.Duration;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.MutablePeriod;
import org.joda.time.PeriodType;
import org.joda.time.ReadWritablePeriod;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePeriod;
import org.joda.time.convert.ConverterManager;
import org.joda.time.convert.PeriodConverter;
import org.joda.time.field.FieldUtils;















public abstract class BasePeriod
        extends AbstractPeriod
        implements ReadablePeriod, Serializable {

    
    private static final long serialVersionUID = -2110953284060001145L;

    
    private PeriodType iType;
    
    private int[] iValues;

    
    














    protected BasePeriod(int years, int months, int weeks, int days,
                            int hours, int minutes, int seconds, int millis,
                            PeriodType type) {
        super();
        type = checkPeriodType(type);
        iType = type;
        setPeriodInternal(years, months, weeks, days, hours, minutes, seconds, millis); 
    }

    








    protected BasePeriod(long startInstant, long endInstant, PeriodType type, Chronology chrono) {
        super();
        type = checkPeriodType(type);
        iType = type;
        setPeriodInternal(startInstant, endInstant, chrono); 
    }

    







    protected BasePeriod(ReadableInstant startInstant, ReadableInstant  endInstant, PeriodType type) {
        super();
        type = checkPeriodType(type);
        if (startInstant == null && endInstant == null) {
            iType = type;
            iValues = new int[size()];
        } else {
            long start = DateTimeUtils.getInstantMillis(startInstant);
            long end = DateTimeUtils.getInstantMillis(endInstant);
            Chronology chrono = (startInstant != null ? startInstant.getChronology() : endInstant.getChronology());
            iType = type;
            setPeriodInternal(start, end, chrono); 
        }
    }

    











    protected BasePeriod(long duration, PeriodType type, Chronology chrono) {
        super();
        type = checkPeriodType(type);
        iType = type;
        setPeriodInternal(duration, chrono); 
    }

    








    protected BasePeriod(Object period, PeriodType type, Chronology chrono) {
        super();
        PeriodConverter converter = ConverterManager.getInstance().getPeriodConverter(period);
        type = (type == null ? converter.getPeriodType(period) : type);
        type = checkPeriodType(type);
        iType = type;
        if (this instanceof ReadWritablePeriod) {
            iValues = new int[size()];
            chrono = DateTimeUtils.getChronology(chrono);
            converter.setInto((ReadWritablePeriod) this, period, chrono);
        } else {
            setPeriodInternal(new MutablePeriod(period, type, chrono));
        }
    }

    






    protected BasePeriod(int[] values, PeriodType type) {
        super();
        iType = type;
        iValues = values;
    }

    
    







    protected PeriodType checkPeriodType(PeriodType type) {
        return DateTimeUtils.getPeriodType(type);
    }

    
    




    public PeriodType getPeriodType() {
        return iType;
    }

    
    




    public int size() {
        return iType.size();
    }

    






    public DurationFieldType getFieldType(int index) {
        return iType.getFieldType(index);
    }

    






    public int getValue(int index) {
        return iValues[index];
    }

    
    









    public Duration toDurationFrom(ReadableInstant startInstant) {
        long startMillis = DateTimeUtils.getInstantMillis(startInstant);
        Chronology chrono = DateTimeUtils.getInstantChronology(startInstant);
        long endMillis = chrono.add(startMillis, this, 1);
        return new Duration(startMillis, endMillis);
    }

    
    







    private void checkAndUpdate(DurationFieldType type, int[] values, int newValue) {
        int index = indexOf(type);
        if (index == -1) {
            if (newValue != 0) {
                throw new IllegalArgumentException(
                    "Period does not support field '" + type.getName() + "'");
            }
        } else {
            values[index] = newValue;
        }
    }

    
    





    protected void setPeriod(ReadablePeriod period) {
        if (period == null) {
            setPeriodInternal(0L, null);
        } else {
            setPeriodInternal(period);
        }
    }

    


    private void setPeriodInternal(ReadablePeriod period) {
        int[] newValues = new int[size()];
        for (int i = 0, isize = period.size(); i < isize; i++) {
            DurationFieldType type = period.getFieldType(i);
            int value = period.getValue(i);
            checkAndUpdate(type, newValues, value);
        }
        iValues = newValues;
    }

    












    protected void setPeriod(int years, int months, int weeks, int days,
                             int hours, int minutes, int seconds, int millis) {
        setPeriodInternal(years, months, weeks, days, hours, minutes, seconds, millis);
    }

    


    private void setPeriodInternal(int years, int months, int weeks, int days,
                                   int hours, int minutes, int seconds, int millis) {
        int[] newValues = new int[size()];
        checkAndUpdate(DurationFieldType.years(), newValues, years);
        checkAndUpdate(DurationFieldType.months(), newValues, months);
        checkAndUpdate(DurationFieldType.weeks(), newValues, weeks);
        checkAndUpdate(DurationFieldType.days(), newValues, days);
        checkAndUpdate(DurationFieldType.hours(), newValues, hours);
        checkAndUpdate(DurationFieldType.minutes(), newValues, minutes);
        checkAndUpdate(DurationFieldType.seconds(), newValues, seconds);
        checkAndUpdate(DurationFieldType.millis(), newValues, millis);
        iValues = newValues;
    }

    






    protected void setPeriod(long startInstant, long endInstant, Chronology chrono) {
        setPeriodInternal(startInstant, endInstant, chrono);
    }

    


    private void setPeriodInternal(long startInstant, long endInstant, Chronology chrono) {
        int[] newValues = new int[size()];
        if (startInstant == endInstant) {
            iValues = newValues;
        } else {
            for (int i = 0, isize = size(); i < isize; i++) {
                DurationField field = getFieldType(i).getField(chrono);
                int value = field.getDifference(endInstant, startInstant);
                startInstant = field.add(startInstant, value);
                newValues[i] = value;
            }
            iValues = newValues;
        }
    }

    









    protected void setPeriod(long duration, Chronology chrono) {
        setPeriodInternal(duration, chrono);
    }

    


    private void setPeriodInternal(long duration, Chronology chrono) {
        int[] newValues = new int[size()];
        if (duration == 0) {
            iValues = newValues;
        } else {
            long current = 0;
            for (int i = 0, isize = size(); i < isize; i++) {
                DurationField field = getFieldType(i).getField(chrono);
                if (field.isPrecise()) {
                    int value = field.getDifference(duration, current);
                    current = field.add(current, value);
                    newValues[i] = value;
                }
            }
            iValues = newValues;
        }
    }

    






    protected void setField(DurationFieldType field, int value) {
        int index = indexOf(field);
        if (index == -1) {
            if (value != 0) {
                throw new UnsupportedOperationException(
                    "Period does not support field '" + field.getName() + "'");
            }
        } else {
            setValue(index, value);
        }
    }

    





    protected void addPeriod(ReadablePeriod period) {
         int[] newValues = getValues(); 
         for (int i = 0, isize = period.size(); i < isize; i++) {
             DurationFieldType type = period.getFieldType(i);
             int value = period.getValue(i);
             int index = indexOf(type);
             if (index == -1) {
                 if (value != 0) {
                     throw new IllegalArgumentException(
                         "Period does not support field '" + type.getName() + "'");
                 }
             } else {
                 newValues[index] = FieldUtils.safeAdd(getValue(index), value);
             }
         }
         setValues(newValues);
    }

    
    






    protected void setValue(int index, int value) {
        if (value != getValue(index)) {
            iValues[index] = value;
        }
    }

    




    protected void setValues(int[] values) {
        iValues = values;
    }

}
