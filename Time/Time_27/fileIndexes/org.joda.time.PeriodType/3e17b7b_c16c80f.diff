96,111c96,111
<     private static final PeriodType MILLIS_TYPE;
<     private static final PeriodType DAY_HOUR_TYPE;
<     private static final PeriodType YEAR_DAY_TYPE;
<     private static final PeriodType YEAR_WEEK_TYPE;
<     private static final PeriodType YEAR_MONTH_TYPE;
<     private static final PeriodType ALL_TYPE;
<     private static final PeriodType UTC_DAY_HOUR_TYPE;
<     private static final PeriodType UTC_YEAR_DAY_TYPE;
<     private static final PeriodType UTC_YEAR_WEEK_TYPE;
<     private static final PeriodType UTC_YEAR_MONTH_TYPE;
<     private static final PeriodType UTC_ALL_TYPE;
<     private static final PeriodType PRECISE_DAY_HOUR_TYPE;
<     private static final PeriodType PRECISE_YEAR_DAY_TYPE;
<     private static final PeriodType PRECISE_YEAR_WEEK_TYPE;
<     private static final PeriodType PRECISE_YEAR_MONTH_TYPE;
<     private static final PeriodType PRECISE_ALL_TYPE;
---
>     private static final PeriodType MILLIS;
>     private static final PeriodType DAY_HOUR;
>     private static final PeriodType YEAR_DAY;
>     private static final PeriodType YEAR_WEEK;
>     private static final PeriodType YEAR_MONTH;
>     private static final PeriodType ALL;
>     private static final PeriodType DAY_HOUR_UTC;
>     private static final PeriodType YEAR_DAY_UTC;
>     private static final PeriodType YEAR_WEEK_UTC;
>     private static final PeriodType YEAR_MONTH_UTC;
>     private static final PeriodType ALL_UTC;
>     private static final PeriodType PRECISE_DAY_HOUR;
>     private static final PeriodType PRECISE_YEAR_DAY;
>     private static final PeriodType PRECISE_YEAR_WEEK;
>     private static final PeriodType PRECISE_YEAR_MONTH;
>     private static final PeriodType PRECISE_ALL;
114,129c114,129
<         MILLIS_TYPE = new MillisType();
<         DAY_HOUR_TYPE = new DayHourType(ISOChronology.getInstance());
<         YEAR_DAY_TYPE = new YearDayType(ISOChronology.getInstance());
<         YEAR_WEEK_TYPE = new YearWeekType(ISOChronology.getInstance());
<         YEAR_MONTH_TYPE = new YearMonthType(ISOChronology.getInstance());
<         ALL_TYPE = new AllType(ISOChronology.getInstance());
<         UTC_DAY_HOUR_TYPE = new DayHourType(ISOChronology.getInstanceUTC());
<         UTC_YEAR_DAY_TYPE = new YearDayType(ISOChronology.getInstanceUTC());
<         UTC_YEAR_WEEK_TYPE = new YearWeekType(ISOChronology.getInstanceUTC());
<         UTC_YEAR_MONTH_TYPE = new YearMonthType(ISOChronology.getInstanceUTC());
<         UTC_ALL_TYPE = new AllType(ISOChronology.getInstanceUTC());
<         PRECISE_DAY_HOUR_TYPE = new PreciseDayHourType(ISOChronology.getInstanceUTC());
<         PRECISE_YEAR_DAY_TYPE = new PreciseYearDayType(ISOChronology.getInstanceUTC());
<         PRECISE_YEAR_WEEK_TYPE = new PreciseYearWeekType(ISOChronology.getInstanceUTC());
<         PRECISE_YEAR_MONTH_TYPE = new PreciseYearMonthType(ISOChronology.getInstanceUTC());
<         PRECISE_ALL_TYPE = new PreciseAllType(ISOChronology.getInstanceUTC());
---
>         MILLIS = new MillisType();
>         DAY_HOUR = new DayHourType(ISOChronology.getInstance());
>         YEAR_DAY = new YearDayType(ISOChronology.getInstance());
>         YEAR_WEEK = new YearWeekType(ISOChronology.getInstance());
>         YEAR_MONTH = new YearMonthType(ISOChronology.getInstance());
>         ALL = new AllType(ISOChronology.getInstance());
>         DAY_HOUR_UTC = new DayHourType(ISOChronology.getInstanceUTC());
>         YEAR_DAY_UTC = new YearDayType(ISOChronology.getInstanceUTC());
>         YEAR_WEEK_UTC = new YearWeekType(ISOChronology.getInstanceUTC());
>         YEAR_MONTH_UTC = new YearMonthType(ISOChronology.getInstanceUTC());
>         ALL_UTC = new AllType(ISOChronology.getInstanceUTC());
>         PRECISE_DAY_HOUR = new PreciseDayHourType(ISOChronology.getInstanceUTC());
>         PRECISE_YEAR_DAY = new PreciseYearDayType(ISOChronology.getInstanceUTC());
>         PRECISE_YEAR_WEEK = new PreciseYearWeekType(ISOChronology.getInstanceUTC());
>         PRECISE_YEAR_MONTH = new PreciseYearMonthType(ISOChronology.getInstanceUTC());
>         PRECISE_ALL = new PreciseAllType(ISOChronology.getInstanceUTC());
138c138
<         return MILLIS_TYPE;
---
>         return MILLIS;
153c153
<         return DAY_HOUR_TYPE;
---
>         return DAY_HOUR;
167,178c167,168
< 
< 
< 
< 
<     public static PeriodType getDayHourType(Chronology chrono) {
<         if (chrono == null || chrono.equals(ISOChronology.getInstance())) {
<             return getDayHourType();
<         }
<         if (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {
<             return getUTCDayHourType();
<         }
<         return new DayHourType(chrono);
---
>     public static PeriodType getDayHourTypeUTC() {
>         return DAY_HOUR_UTC;
195,196c185,193
<     public static PeriodType getAllType() {
<         return ALL_TYPE;
---
> 
>     public static PeriodType getDayHourType(Chronology chrono) {
>         if (chrono == null || chrono.equals(ISOChronology.getInstance())) {
>             return getDayHourType();
>         }
>         if (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {
>             return getDayHourTypeUTC();
>         }
>         return new DayHourType(chrono);
199a197
>     
211,224c209,210
< 
< 
< 
< 
< 
< 
<     public static PeriodType getAllType(Chronology chrono) {
<         if (chrono == null || chrono.equals(ISOChronology.getInstance())) {
<             return getAllType();
<         }
<         if (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {
<             return getUTCAllType();
<         }
<         return new AllType(chrono);
---
>     public static PeriodType getYearDayType() {
>         return YEAR_DAY;
239,240c225,226
<     public static PeriodType getYearDayType() {
<         return YEAR_DAY_TYPE;
---
>     public static PeriodType getYearDayTypeUTC() {
>         return YEAR_DAY_UTC;
264c250
<             return getUTCYearDayType();
---
>             return getYearDayTypeUTC();
269a256
>     
282,283c269,270
<     public static PeriodType getYearMonthType() {
<         return YEAR_MONTH_TYPE;
---
>     public static PeriodType getYearWeekType() {
>         return YEAR_WEEK;
299,310c286,287
< 
< 
< 
< 
<     public static PeriodType getYearMonthType(Chronology chrono) {
<         if (chrono == null || chrono.equals(ISOChronology.getInstance())) {
<             return getYearMonthType();
<         }
<         if (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {
<             return getUTCYearMonthType();
<         }
<         return new YearMonthType(chrono);
---
>     public static PeriodType getYearWeekTypeUTC() {
>         return YEAR_WEEK_UTC;
326,328d302
<     public static PeriodType getYearWeekType() {
<         return YEAR_WEEK_TYPE;
<     }
330d303
<     
333a307,315
>     public static PeriodType getYearWeekType(Chronology chrono) {
>         if (chrono == null || chrono.equals(ISOChronology.getInstance())) {
>             return getYearWeekType();
>         }
>         if (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {
>             return getYearWeekTypeUTC();
>         }
>         return new YearWeekType(chrono);
>     }
334a317,318
>     
>     
347,354c331,332
<     public static PeriodType getYearWeekType(Chronology chrono) {
<         if (chrono == null || chrono.equals(ISOChronology.getInstance())) {
<             return getYearWeekType();
<         }
<         if (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {
<             return getUTCYearWeekType();
<         }
<         return new YearWeekType(chrono);
---
>     public static PeriodType getYearMonthType() {
>         return YEAR_MONTH;
358d335
<     
369,370c346,349
<     public static PeriodType getUTCDayHourType() {
<         return UTC_DAY_HOUR_TYPE;
---
> 
> 
>     public static PeriodType getYearMonthTypeUTC() {
>         return YEAR_MONTH_UTC;
385,386c364,376
<     public static PeriodType getUTCYearDayType() {
<         return UTC_YEAR_DAY_TYPE;
---
> 
> 
> 
> 
> 
>     public static PeriodType getYearMonthType(Chronology chrono) {
>         if (chrono == null || chrono.equals(ISOChronology.getInstance())) {
>             return getYearMonthType();
>         }
>         if (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {
>             return getYearMonthTypeUTC();
>         }
>         return new YearMonthType(chrono);
389a380,381
>     
> 
402,403c394,395
<     public static PeriodType getUTCYearMonthType() {
<         return UTC_YEAR_MONTH_TYPE;
---
>     public static PeriodType getAllType() {
>         return ALL;
419,420c411,413
<     public static PeriodType getUTCYearWeekType() {
<         return UTC_YEAR_WEEK_TYPE;
---
> 
>     public static PeriodType getAllTypeUTC() {
>         return ALL_UTC;
437,438c430,441
<     public static PeriodType getUTCAllType() {
<         return UTC_ALL_TYPE;
---
> 
> 
> 
> 
>     public static PeriodType getAllType(Chronology chrono) {
>         if (chrono == null || chrono.equals(ISOChronology.getInstance())) {
>             return getAllType();
>         }
>         if (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {
>             return getAllTypeUTC();
>         }
>         return new AllType(chrono);
454c457
<         return PRECISE_DAY_HOUR_TYPE;
---
>         return PRECISE_DAY_HOUR;
470c473
<         return PRECISE_YEAR_DAY_TYPE;
---
>         return PRECISE_YEAR_DAY;
487c490
<         return PRECISE_YEAR_MONTH_TYPE;
---
>         return PRECISE_YEAR_MONTH;
504c507
<         return PRECISE_YEAR_WEEK_TYPE;
---
>         return PRECISE_YEAR_WEEK;
522c525
<         return PRECISE_ALL_TYPE;
---
>         return PRECISE_ALL;
894c897
<             return PeriodType.getYearWeekType(chrono);
---
>             return PeriodType.getYearDayType(chrono);
