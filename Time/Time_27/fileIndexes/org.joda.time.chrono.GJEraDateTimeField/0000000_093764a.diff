1a2,188
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> package org.joda.time.chrono;
> 
> import java.util.Locale;
> 
> import org.joda.time.DateTimeConstants;
> import org.joda.time.DurationField;
> import org.joda.time.field.AbstractDateTimeField;
> import org.joda.time.field.UnsupportedDurationField;
> import org.joda.time.field.FieldUtils;
> 
> 
> 
> 
> 
> 
> 
> 
> 
> final class GJEraDateTimeField extends AbstractDateTimeField {
>     
>     static final long serialVersionUID = 4240986525305515528L;
> 
>     private final AbstractGJChronology iChronology;
> 
>     
> 
> 
>     GJEraDateTimeField(AbstractGJChronology chronology) {
>         super("era");
>         iChronology = chronology;
>     }
> 
>     public boolean isLenient() {
>         return false;
>     }
> 
>     
> 
> 
> 
> 
>     public int get(long instant) {
>         if (iChronology.getYear(instant) <= 0) {
>             return DateTimeConstants.BCE;
>         } else {
>             return DateTimeConstants.CE;
>         }
>     }
> 
>     public String getAsText(long instant, Locale locale) {
>         return GJLocaleSymbols.forLocale(locale).eraValueToText(get(instant));
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     public long set(long instant, int era) {
>         FieldUtils.verifyValueBounds(this, era, DateTimeConstants.BCE, DateTimeConstants.CE);
>             
>         int oldEra = get(instant);
>         if (oldEra != era) {
>             int year = iChronology.getYear(instant);
>             return iChronology.setYear(instant, -year);
>         } else {
>             return instant;
>         }
>     }
> 
>     public long set(long instant, String text, Locale locale) {
>         return set(instant, GJLocaleSymbols.forLocale(locale).eraTextToValue(text));
>     }
> 
>     public long roundFloor(long instant) {
>         if (get(instant) == DateTimeConstants.CE) {
>             return iChronology.setYear(0, 1);
>         } else {
>             return Long.MIN_VALUE;
>         }
>     }
> 
>     public long roundCeiling(long instant) {
>         if (get(instant) == DateTimeConstants.BCE) {
>             return iChronology.setYear(0, 1);
>         } else {
>             return Long.MAX_VALUE;
>         }
>     }
> 
>     public long roundHalfFloor(long instant) {
>         
>         return roundFloor(instant);
>     }
> 
>     public long roundHalfCeiling(long instant) {
>         
>         return roundFloor(instant);
>     }
> 
>     public long roundHalfEven(long instant) {
>         
>         return roundFloor(instant);
>     }
> 
>     public DurationField getDurationField() {
>         return UnsupportedDurationField.INSTANCE;
>     }
> 
>     public DurationField getRangeDurationField() {
>         return null;
>     }
> 
>     public int getMinimumValue() {
>         return DateTimeConstants.BCE;
>     }
> 
>     public int getMaximumValue() {
>         return DateTimeConstants.CE;
>     }
> 
>     public int getMaximumTextLength(Locale locale) {
>         return GJLocaleSymbols.forLocale(locale).getEraMaxTextLength();
>     }
> 
>     
> 
> 
>     private Object readResolve() {
>         return iChronology.era();
>     }
> }
