56,58d55
< import java.io.IOException;
< import java.io.ObjectInputStream;
< 
66a64,65
> import org.joda.time.field.AbstractDateTimeField;
> import org.joda.time.field.AbstractDurationField;
77,125c76
< public class ZonedChronology extends Chronology {
< 
<     static final long serialVersionUID = -1079258847191166848L;
< 
<     static boolean useTimeArithmetic(DurationField field) {
<         
<         
<         return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;
<     }
< 
<     private final Chronology iChronology;
<     private final DateTimeZone iZone;
< 
<     private transient DurationField iErasField;
<     private transient DurationField iCenturiesField;
<     private transient DurationField iYearsField;
<     private transient DurationField iMonthsField;
<     private transient DurationField iWeekyearsField;
<     private transient DurationField iWeeksField;
<     private transient DurationField iDaysField;
< 
<     private transient DurationField iHoursField;
<     private transient DurationField iMinutesField;
<     private transient DurationField iSecondsField;
<     private transient DurationField iMillisField;
< 
<     private transient DateTimeField iYearField;
<     private transient DateTimeField iYearOfEraField;
<     private transient DateTimeField iYearOfCenturyField;
<     private transient DateTimeField iCenturyOfEraField;
<     private transient DateTimeField iEraField;
<     private transient DateTimeField iDayOfWeekField;
<     private transient DateTimeField iDayOfMonthField;
<     private transient DateTimeField iDayOfYearField;
<     private transient DateTimeField iMonthOfYearField;
<     private transient DateTimeField iWeekOfWeekyearField;
<     private transient DateTimeField iWeekyearField;
< 
<     private transient DateTimeField iMillisOfSecondField;
<     private transient DateTimeField iMillisOfDayField;
<     private transient DateTimeField iSecondOfMinuteField;
<     private transient DateTimeField iSecondOfDayField;
<     private transient DateTimeField iMinuteOfHourField;
<     private transient DateTimeField iMinuteOfDayField;
<     private transient DateTimeField iHourOfDayField;
<     private transient DateTimeField iHourOfHalfdayField;
<     private transient DateTimeField iClockhourOfDayField;
<     private transient DateTimeField iClockhourOfHalfdayField;
<     private transient DateTimeField iHalfdayOfDayField;
---
> public final class ZonedChronology extends AssembledChronology {
135,136c86,87
<     public ZonedChronology(Chronology chrono, DateTimeZone zone) {
<         if (chrono == null) {
---
>     public static ZonedChronology getInstance(Chronology base, DateTimeZone zone) {
>         if (base == null) {
139,140c90,91
<         chrono = chrono.withUTC();
<         if (chrono == null) {
---
>         base = base.withUTC();
>         if (base == null) {
146,149c97
< 
<         iChronology = chrono;
<         iZone = zone;
<         setFields();
---
>         return new ZonedChronology(base, zone);
152,153c100
<     private void setFields() {
<         Chronology c = iChronology;
---
>     static final long serialVersionUID = -1079258847191166848L;
154a102
>     static boolean useTimeArithmetic(DurationField field) {
157c105,106
<         HashMap converted = new HashMap();
---
>         return field != null && field.getUnitMillis() < DateTimeConstants.MILLIS_PER_HOUR * 12;
>     }
159c108
<         
---
>     
161,172d109
<         iErasField = convertField(c.eras(), converted);
<         iCenturiesField = convertField(c.centuries(), converted);
<         iYearsField = convertField(c.years(), converted);
<         iMonthsField = convertField(c.months(), converted);
<         iWeekyearsField = convertField(c.weekyears(), converted);
<         iWeeksField = convertField(c.weeks(), converted);
<         iDaysField = convertField(c.days(), converted);
< 
<         iHoursField = convertField(c.hours(), converted);
<         iMinutesField = convertField(c.minutes(), converted);
<         iSecondsField = convertField(c.seconds(), converted);
<         iMillisField = convertField(c.millis(), converted);
174d110
<         
176,199d111
<         iYearField = convertField(c.year(), converted);
<         iYearOfEraField = convertField(c.yearOfEra(), converted);
<         iYearOfCenturyField = convertField(c.yearOfCentury(), converted);
<         iCenturyOfEraField = convertField(c.centuryOfEra(), converted);
<         iEraField = convertField(c.era(), converted);
<         iDayOfWeekField = convertField(c.dayOfWeek(), converted);
<         iDayOfMonthField = convertField(c.dayOfMonth(), converted);
<         iDayOfYearField = convertField(c.dayOfYear(), converted);
<         iMonthOfYearField = convertField(c.monthOfYear(), converted);
<         iWeekOfWeekyearField = convertField(c.weekOfWeekyear(), converted);
<         iWeekyearField = convertField(c.weekyear(), converted);
< 
<         iMillisOfSecondField = convertField(c.millisOfSecond(), converted);
<         iMillisOfDayField = convertField(c.millisOfDay(), converted);
<         iSecondOfMinuteField = convertField(c.secondOfMinute(), converted);
<         iSecondOfDayField = convertField(c.secondOfDay(), converted);
<         iMinuteOfHourField = convertField(c.minuteOfHour(), converted);
<         iMinuteOfDayField = convertField(c.minuteOfDay(), converted);
<         iHourOfDayField = convertField(c.hourOfDay(), converted);
<         iHourOfHalfdayField = convertField(c.hourOfHalfday(), converted);
<         iClockhourOfDayField = convertField(c.clockhourOfDay(), converted);
<         iClockhourOfHalfdayField = convertField(c.clockhourOfHalfday(), converted);
<         iHalfdayOfDayField = convertField(c.halfdayOfDay(), converted);
<     }
201,211d112
<     private DurationField convertField(DurationField field, HashMap converted) {
<         if (field == null || !field.isSupported()) {
<             return field;
<         }
<         if (converted.containsKey(field)) {
<             return (DurationField)converted.get(field);
<         }
<         ZonedDurationField zonedField = new ZonedDurationField(field, iZone);
<         converted.put(field, zonedField);
<         return zonedField;
<     }
213,226c114,115
<     private DateTimeField convertField(DateTimeField field, HashMap converted) {
<         if (field == null || !field.isSupported()) {
<             return field;
<         }
<         if (converted.containsKey(field)) {
<             return (DateTimeField)converted.get(field);
<         }
<         ZonedDateTimeField zonedField =
<             new ZonedDateTimeField(field, iZone,
<                                    convertField(field.getDurationField(), converted),
<                                    convertField(field.getRangeDurationField(), converted),
<                                    convertField(field.getLeapDurationField(), converted));
<         converted.put(field, zonedField);
<         return zonedField;
---
>     private ZonedChronology(Chronology base, DateTimeZone zone) {
>         super(base, zone);
230c119
<         return iZone;
---
>         return (DateTimeZone)getParam();
234c123
<         return iChronology;
---
>         return getBase();
241c130
<         if (zone == iZone) {
---
>         if (zone == getParam()) {
245c134
<             return iChronology;
---
>             return getBase();
247c136
<         return new ZonedChronology(iChronology, zone);
---
>         return new ZonedChronology(getBase(), zone);
253c142
<         return localToUTC(iChronology.getDateOnlyMillis
---
>         return localToUTC(getBase().getDateOnlyMillis
261c150
<         return localToUTC(iChronology.getTimeOnlyMillis
---
>         return localToUTC(getBase().getTimeOnlyMillis
269c158
<         return localToUTC(iChronology.getDateTimeMillis
---
>         return localToUTC(getBase().getDateTimeMillis
278,279c167,168
<         return localToUTC(iChronology.getDateTimeMillis
<                           (instant + iZone.getOffset(instant),
---
>         return localToUTC(getBase().getDateTimeMillis
>                           (instant + getDateTimeZone().getOffset(instant),
288c177
<         return localToUTC(iChronology.getDateTimeMillis
---
>         return localToUTC(getBase().getDateTimeMillis
297c186,187
<         int offset = iZone.getOffsetFromLocal(instant);
---
>         DateTimeZone zone = getDateTimeZone();
>         int offset = zone.getOffsetFromLocal(instant);
299c189
<         if (offset != iZone.getOffset(instant)) {
---
>         if (offset != zone.getOffset(instant)) {
306,432c196,199
<     
<     
< 
<     public DurationField millis() {
<         return iMillisField;
<     }
< 
<     public DateTimeField millisOfSecond() {
<         return iMillisOfSecondField;
<     }
< 
<     public DateTimeField millisOfDay() {
<         return iMillisOfDayField;
<     }
< 
<     
<     
< 
<     public DurationField seconds() {
<         return iSecondsField;
<     }
< 
<     public DateTimeField secondOfMinute() {
<         return iSecondOfMinuteField;
<     }
< 
<     public DateTimeField secondOfDay() {
<         return iSecondOfDayField;
<     }
< 
<     
<     
< 
<     public DurationField minutes() {
<         return iMinutesField;
<     }
< 
<     public DateTimeField minuteOfHour() {
<         return iMinuteOfHourField;
<     }
< 
<     public DateTimeField minuteOfDay() {
<         return iMinuteOfDayField;
<     }
< 
<     
<     
< 
<     public DurationField hours() {
<         return iHoursField;
<     }
< 
<     public DateTimeField hourOfDay() {
<         return iHourOfDayField;
<     }
< 
<     public DateTimeField clockhourOfDay() {
<         return iClockhourOfDayField;
<     }
< 
<     public DateTimeField hourOfHalfday() {
<         return iHourOfHalfdayField;
<     }
< 
<     public DateTimeField clockhourOfHalfday() {
<         return iClockhourOfHalfdayField;
<     }
< 
<     public DateTimeField halfdayOfDay() {
<         return iHalfdayOfDayField;
<     }
< 
<     
<     
< 
<     public DurationField days() {
<         return iDaysField;
<     }
< 
<     public DateTimeField dayOfWeek() {
<         return iDayOfWeekField;
<     }
< 
<     public DateTimeField dayOfMonth() {
<         return iDayOfMonthField;
<     }
< 
<     public DateTimeField dayOfYear() {
<         return iDayOfYearField;
<     }
< 
<     
<     
< 
<     public DurationField weeks() {
<         return iWeeksField;
<     }
< 
<     public DateTimeField weekOfWeekyear() {
<         return iWeekOfWeekyearField;
<     }
< 
<     public DurationField weekyears() {
<         return iWeekyearsField;
<     }
< 
<     public DateTimeField weekyear() {
<         return iWeekyearField;
<     }
< 
<     
<     
< 
<     public DurationField months() {
<         return iMonthsField;
<     }
< 
<     public DateTimeField monthOfYear() {
<         return iMonthOfYearField;
<     }
< 
<     
<     
< 
<     public DurationField years() {
<         return iYearsField;
<     }
---
>     protected void assemble(Fields fields) {
>         
>         
>         HashMap converted = new HashMap();
434,436c201
<     public DateTimeField year() {
<         return iYearField;
<     }
---
>         
438,440c203,214
<     public DateTimeField yearOfEra() {
<         return iYearOfEraField;
<     }
---
>         fields.eras = convertField(fields.eras, converted);
>         fields.centuries = convertField(fields.centuries, converted);
>         fields.years = convertField(fields.years, converted);
>         fields.months = convertField(fields.months, converted);
>         fields.weekyears = convertField(fields.weekyears, converted);
>         fields.weeks = convertField(fields.weeks, converted);
>         fields.days = convertField(fields.days, converted);
> 
>         fields.hours = convertField(fields.hours, converted);
>         fields.minutes = convertField(fields.minutes, converted);
>         fields.seconds = convertField(fields.seconds, converted);
>         fields.millis = convertField(fields.millis, converted);
442,448c216
<     public DateTimeField yearOfCentury() {
<         return iYearOfCenturyField;
<     }
< 
<     public DurationField centuries() {
<         return iCenturiesField;
<     }
---
>         
450,451c218,240
<     public DateTimeField centuryOfEra() {
<         return iCenturyOfEraField;
---
>         fields.year = convertField(fields.year, converted);
>         fields.yearOfEra = convertField(fields.yearOfEra, converted);
>         fields.yearOfCentury = convertField(fields.yearOfCentury, converted);
>         fields.centuryOfEra = convertField(fields.centuryOfEra, converted);
>         fields.era = convertField(fields.era, converted);
>         fields.dayOfWeek = convertField(fields.dayOfWeek, converted);
>         fields.dayOfMonth = convertField(fields.dayOfMonth, converted);
>         fields.dayOfYear = convertField(fields.dayOfYear, converted);
>         fields.monthOfYear = convertField(fields.monthOfYear, converted);
>         fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);
>         fields.weekyear = convertField(fields.weekyear, converted);
> 
>         fields.millisOfSecond = convertField(fields.millisOfSecond, converted);
>         fields.millisOfDay = convertField(fields.millisOfDay, converted);
>         fields.secondOfMinute = convertField(fields.secondOfMinute, converted);
>         fields.secondOfDay = convertField(fields.secondOfDay, converted);
>         fields.minuteOfHour = convertField(fields.minuteOfHour, converted);
>         fields.minuteOfDay = convertField(fields.minuteOfDay, converted);
>         fields.hourOfDay = convertField(fields.hourOfDay, converted);
>         fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);
>         fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);
>         fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);
>         fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);
454,455c243,252
<     public DurationField eras() {
<         return iErasField;
---
>     private DurationField convertField(DurationField field, HashMap converted) {
>         if (field == null || !field.isSupported()) {
>             return field;
>         }
>         if (converted.containsKey(field)) {
>             return (DurationField)converted.get(field);
>         }
>         ZonedDurationField zonedField = new ZonedDurationField(field, getDateTimeZone());
>         converted.put(field, zonedField);
>         return zonedField;
458,459c255,268
<     public DateTimeField era() {
<         return iEraField;
---
>     private DateTimeField convertField(DateTimeField field, HashMap converted) {
>         if (field == null || !field.isSupported()) {
>             return field;
>         }
>         if (converted.containsKey(field)) {
>             return (DateTimeField)converted.get(field);
>         }
>         ZonedDateTimeField zonedField =
>             new ZonedDateTimeField(field, getDateTimeZone(),
>                                    convertField(field.getDurationField(), converted),
>                                    convertField(field.getRangeDurationField(), converted),
>                                    convertField(field.getLeapDurationField(), converted));
>         converted.put(field, zonedField);
>         return zonedField;
463,470c272
<         return iChronology.toString();
<     }
< 
<     private void readObject(ObjectInputStream in)
<         throws IOException, ClassNotFoundException
<     {
<         in.defaultReadObject();
<         setFields();
---
>         return "ZonedChronology[" + getBase() + ", " + getDateTimeZone().getID() + ']';
