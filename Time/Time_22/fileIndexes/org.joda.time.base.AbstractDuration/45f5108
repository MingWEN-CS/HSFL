














package org.joda.time.base;

import org.joda.time.Duration;
import org.joda.time.Period;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.format.FormatUtils;














public abstract class AbstractDuration implements ReadableDuration {

    


    protected AbstractDuration() {
        super();
    }

    
    




    public Duration toDuration() {
        return new Duration(getMillis());
    }

    
    




















    public Period toPeriod() {
        return new Period(getMillis());
    }

    
    







    public int compareTo(ReadableDuration other) {
        long thisMillis = this.getMillis();
        long otherMillis = other.getMillis();
        
        
        if (thisMillis < otherMillis) {
            return -1;
        }
        if (thisMillis > otherMillis) {
            return 1;
        }
        return 0;
    }

    





    public boolean isEqual(ReadableDuration duration) {
        if (duration == null) {
            duration = Duration.ZERO;
        }
        return compareTo(duration) == 0;
    }

    





    public boolean isLongerThan(ReadableDuration duration) {
        if (duration == null) {
            duration = Duration.ZERO;
        }
        return compareTo(duration) > 0;
    }

    





    public boolean isShorterThan(ReadableDuration duration) {
        if (duration == null) {
            duration = Duration.ZERO;
        }
        return compareTo(duration) < 0;
    }

    
    






    public boolean equals(Object duration) {
        if (this == duration) {
            return true;
        }
        if (duration instanceof ReadableDuration == false) {
            return false;
        }
        ReadableDuration other = (ReadableDuration) duration;
        return (getMillis() == other.getMillis());
    }

    





    public int hashCode() {
        long len = getMillis();
        return (int) (len ^ (len >>> 32));
    }

    
    










    public String toString() {
        long millis = getMillis();
        StringBuffer buf = new StringBuffer();
        buf.append("PT");
        FormatUtils.appendUnpaddedInteger(buf, millis / 1000);
        long part = Math.abs(millis % 1000);
        if (part > 0) {
            buf.append('.');
            FormatUtils.appendPaddedInteger(buf, part, 3);
        }
        buf.append('S');
        return buf.toString();
    }

}
