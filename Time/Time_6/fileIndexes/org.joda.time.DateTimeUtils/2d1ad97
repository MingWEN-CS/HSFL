




















































package org.joda.time;

import org.joda.time.chrono.ISOChronology;









public class DateTimeUtils {

    
    private static final SystemMillisProvider SYSTEM_MILLIS_PROVIDER = new SystemMillisProvider();
    
    
    private static MillisProvider cMillisProvider = SYSTEM_MILLIS_PROVIDER;

    


    protected DateTimeUtils() {
        super();
    }

    
    







    public static final long currentTimeMillis() {
        return cMillisProvider.getMillis();
    }

    





    public static final void setCurrentMillisSystem() throws SecurityException {
        checkPermission();
        cMillisProvider = SYSTEM_MILLIS_PROVIDER;
    }

    







    public static final void setCurrentMillisFixed(long fixedMillis) throws SecurityException {
        checkPermission();
        cMillisProvider = new FixedMillisProvider(fixedMillis);
    }

    








    public static final void setCurrentMillisOffset(long offsetMillis) throws SecurityException {
        checkPermission();
        cMillisProvider = new OffsetMillisProvider(offsetMillis);
    }

    




    private static void checkPermission() throws SecurityException {
        SecurityManager sm = System.getSecurityManager();
        if (sm != null) {
            sm.checkPermission(new JodaTimePermission("CurrentTime.setProvider"));
        }
    }

    
    








    public static final long getInstantMillis(ReadableInstant instant) {
        if (instant == null) {
            return DateTimeUtils.currentTimeMillis();
        }
        return instant.getMillis();
    }

    









    public static final long getInstantMillis(ReadableInstant instant, long nullMillis) {
        if (instant == null) {
            return nullMillis;
        }
        return instant.getMillis();
    }

    
    








    public static final Chronology getInstantChronology(ReadableInstant instant) {
        if (instant == null) {
            return ISOChronology.getInstance();
        }
        return instant.getChronology();
    }

    









    public static final Chronology getInstantChronology(ReadableInstant instant, Chronology nullChrono) {
        if (instant == null) {
            return nullChrono;
        }
        return instant.getChronology();
    }

    
    








    public static final long getDurationMillis(ReadableDuration duration) {
        if (duration == null) {
            return 0L;
        }
        return duration.getMillis();
    }

    








    public static final long getDurationMillis(ReadableDuration duration, long nullDuration) {
        if (duration == null) {
            return nullDuration;
        }
        return duration.getMillis();
    }

    
    


    static abstract class MillisProvider {
        abstract long getMillis();
    }

    


    static class SystemMillisProvider extends MillisProvider {
        long getMillis() {
            return System.currentTimeMillis();
        }
    }

    


    static class FixedMillisProvider extends MillisProvider {
        private final long iMillis;
        FixedMillisProvider(long fixedMillis) {
            iMillis = fixedMillis;
        }
        long getMillis() {
            return iMillis;
        }
    }

    


    static class OffsetMillisProvider extends MillisProvider {
        private final long iMillis;
        OffsetMillisProvider(long offsetMillis) {
            iMillis = offsetMillis;
        }
        long getMillis() {
            return System.currentTimeMillis() + iMillis;
        }
    }

}
