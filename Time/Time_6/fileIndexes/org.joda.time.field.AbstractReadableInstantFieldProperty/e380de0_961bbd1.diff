82c82
<     
---
> 
124c124
<     public abstract ReadableInstant getReadableInstant();
---
>     protected abstract long getMillis();
134c134
<         return getField().get(getReadableInstant().getMillis());
---
>         return getField().get(getMillis());
145c145
<         return getField().getAsText(getReadableInstant().getMillis(), locale);
---
>         return getField().getAsText(getMillis(), locale);
166c166
<         return getField().getAsShortText(getReadableInstant().getMillis(), locale);
---
>         return getField().getAsShortText(getMillis(), locale);
192c192
<             return getField().getDifference(getReadableInstant().getMillis(), DateTimeUtils.currentTimeMillis());
---
>             return getField().getDifference(getMillis(), DateTimeUtils.currentTimeMillis());
194c194
<         return getField().getDifference(getReadableInstant().getMillis(), instant.getMillis());
---
>         return getField().getDifference(getMillis(), instant.getMillis());
209c209
<             return getField().getDifferenceAsLong(getReadableInstant().getMillis(), DateTimeUtils.currentTimeMillis());
---
>             return getField().getDifferenceAsLong(getMillis(), DateTimeUtils.currentTimeMillis());
211c211
<         return getField().getDifferenceAsLong(getReadableInstant().getMillis(), instant.getMillis());
---
>         return getField().getDifferenceAsLong(getMillis(), instant.getMillis());
242c242
<         return getField().isLeap(getReadableInstant().getMillis());
---
>         return getField().isLeap(getMillis());
252c252
<         return getField().getLeapAmount(getReadableInstant().getMillis());
---
>         return getField().getLeapAmount(getMillis());
281c281
<         return getField().getMinimumValue(getReadableInstant().getMillis());
---
>         return getField().getMinimumValue(getMillis());
301c301
<         return getField().getMaximumValue(getReadableInstant().getMillis());
---
>         return getField().getMaximumValue(getMillis());
334c334
<         return getField().remainder(getReadableInstant().getMillis());
---
>         return getField().remainder(getMillis());
366c366
< 
---
>     
381c381
<             throw new IllegalArgumentException("The instant must not be null");
---
>             throw new IllegalArgumentException("The partial must not be null");
408,409c408
<                 getFieldType() == other.getFieldType() &&
<                 getReadableInstant().getChronology() == other.getReadableInstant().getChronology()) {
---
>                 getField().equals(other.getField())) {
413a413,421
>     }
> 
>     
> 
> 
> 
> 
>     public int hashCode() {
>         return get() * 17 + getField().hashCode();
