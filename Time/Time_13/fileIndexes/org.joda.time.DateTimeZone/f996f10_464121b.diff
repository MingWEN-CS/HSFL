24a25,27
> import java.lang.reflect.InvocationTargetException;
> import java.lang.reflect.Method;
> import java.util.Date;
28a32
> import java.util.SimpleTimeZone;
134a139,160
>     private static final Method OFFSET_METHOD;
>     static {
>         Method m = null;
>         try {
>             m = TimeZone.class.getDeclaredMethod("getOffset", new Class[] {Long.TYPE});
>         } catch (SecurityException ex) {
>             
>         } catch (NoSuchMethodException ex) {
>             try {
>                 Method[] ms = TimeZone.class.getDeclaredMethods();
>                 m = TimeZone.class.getDeclaredMethod("getOffsets", new Class[] {Long.TYPE, int[].class});
>                 m.setAccessible(true);
>             } catch (SecurityException e) {
>                 
>             } catch (NoSuchMethodException e) {
>                 
>             }
>         }
>         OFFSET_METHOD = m;
>     }
> 
>     
843a870,936
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public long getMillisJDKKeepLocal(long instant) {
>         return getMillisJDKKeepLocal(toTimeZone(), instant);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public long getMillisJDKKeepLocal(TimeZone jdkZone, long instant) {
>         if (jdkZone == null) {
>             jdkZone = toTimeZone();
>         }
>         Integer val;
>         if (OFFSET_METHOD == null) {
>             if (jdkZone instanceof SimpleTimeZone) {
>                 SimpleTimeZone zone = (SimpleTimeZone) jdkZone;
>                 long offset = zone.getRawOffset();
>                 if (zone.inDaylightTime(new Date(instant)))  {
>                     offset += zone.getDSTSavings();
>                 }
>                 long millisLocal = instant - offset;
>                 return millisLocal + getOffsetFromLocal(millisLocal);
>             }
>             return instant;
>         } else {
>             try {
>                 val = (Integer) OFFSET_METHOD.invoke(
>                         jdkZone, new Object[] {new Long(instant)});
>             } catch (IllegalAccessException ex) {
>                 return instant;
>             } catch (InvocationTargetException ex) {
>                 return instant;
>             }
>         }
>         long millisLocal = instant - val.intValue();
>         return millisLocal + getOffsetFromLocal(millisLocal);
>     }
> 
>     
