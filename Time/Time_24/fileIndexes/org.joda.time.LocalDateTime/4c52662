














package org.joda.time;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;

import org.joda.time.base.AbstractPartial;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.convert.ConverterManager;
import org.joda.time.convert.InstantConverter;
import org.joda.time.field.AbstractReadableInstantFieldProperty;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.ISODateTimeFormat;











































public final class LocalDateTime
        extends AbstractPartial
        implements ReadablePartial, Serializable {

    
    private static final long serialVersionUID = -268716875315837168L;

    
    private static final int YEAR = 0;
    
    private static final int DAY_OF_YEAR = 1;
    
    private static final int MILLIS_OF_DAY = 2;

    
    private long iLocalMillis;
    
    private Chronology iChronology;

    
    





    public static LocalDateTime nowDefaultZone() {
        return forInstant(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());
    }

    








    public static LocalDateTime now(DateTimeZone zone) {
        return forInstant(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));
    }

    








    public static LocalDateTime now(Chronology chronology) {
        return forInstant(DateTimeUtils.currentTimeMillis(), chronology);
    }

    
    

















    public static LocalDateTime forFields(Calendar calendar) {
        if (calendar == null) {
            throw new IllegalArgumentException("The calendar must not be null");
        }
        return new LocalDateTime(
            calendar.get(Calendar.YEAR),
            calendar.get(Calendar.MONTH) + 1,
            calendar.get(Calendar.DAY_OF_MONTH),
            calendar.get(Calendar.HOUR_OF_DAY),
            calendar.get(Calendar.MINUTE),
            calendar.get(Calendar.SECOND),
            calendar.get(Calendar.MILLISECOND)
        );
    }

    














    public static LocalDateTime forFields(Date date) {
        if (date == null) {
            throw new IllegalArgumentException("The date must not be null");
        }
        return new LocalDateTime(
            date.getYear() + 1900,
            date.getMonth() + 1,
            date.getDate(),
            date.getHours(),
            date.getMinutes(),
            date.getSeconds(),
            (int) (date.getTime() % 1000)
        );
    }

    
    







    public static LocalDateTime forInstantDefaultZone(long instant) {
        return forInstant(instant, ISOChronology.getInstance());
    }

    









    public static LocalDateTime forInstant(long instant, DateTimeZone zone) {
        return forInstant(instant, ISOChronology.getInstance(zone));
    }

    









    public static LocalDateTime forInstant(long instant, Chronology chronology) {
        chronology = DateTimeUtils.getChronology(chronology);
        long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);
        return new LocalDateTime(localMillis, chronology.withUTC());
    }

    
    













    public static LocalDateTime forInstant(Object instant) {
        return forInstant(instant, (Chronology) null);
    }

    















    public static LocalDateTime forInstant(Object instant, DateTimeZone zone) {
        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
        Chronology chrono = converter.getChronology(instant, zone);
        long millis = converter.getInstantMillis(instant, chrono);
        chrono = DateTimeUtils.getChronology(chrono);
        return forInstant(millis, chrono);
    }

    














    public static LocalDateTime forInstant(Object instant, Chronology chronology) {
        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
        Chronology chrono = DateTimeUtils.getChronology(converter.getChronology(instant, chronology));
        long millis = converter.getInstantMillis(instant, chronology);
        return forInstant(millis, chrono);
    }

    






    LocalDateTime(long localMillis, Chronology chronology) {
        super();
        iLocalMillis = localMillis;
        iChronology = chronology;
    }

    
    









    public LocalDateTime(
            int year,
            int monthOfYear,
            int dayOfMonth,
            int hourOfDay,
            int minuteOfHour) {
        this(year, monthOfYear, dayOfMonth, hourOfDay,
            minuteOfHour, 0, 0, ISOChronology.getInstanceUTC());
    }

    










    public LocalDateTime(
            int year,
            int monthOfYear,
            int dayOfMonth,
            int hourOfDay,
            int minuteOfHour,
            int secondOfMinute) {
        this(year, monthOfYear, dayOfMonth, hourOfDay,
            minuteOfHour, secondOfMinute, 0, ISOChronology.getInstanceUTC());
    }

    











    public LocalDateTime(
            int year,
            int monthOfYear,
            int dayOfMonth,
            int hourOfDay,
            int minuteOfHour,
            int secondOfMinute,
            int millisOfSecond) {
        this(year, monthOfYear, dayOfMonth, hourOfDay,
            minuteOfHour, secondOfMinute, millisOfSecond, ISOChronology.getInstanceUTC());
    }

    














    public LocalDateTime(
            int year,
            int monthOfYear,
            int dayOfMonth,
            int hourOfDay,
            int minuteOfHour,
            int secondOfMinute,
            int millisOfSecond,
            Chronology chronology) {
        super();
        chronology = DateTimeUtils.getChronology(chronology).withUTC();
        long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
            hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
        iChronology = chronology;
        iLocalMillis = instant;
    }

    
    





    public int size() {
        return 3;
    }

    








    protected DateTimeField getField(int index, Chronology chrono) {
        switch (index) {
            case YEAR:
                return chrono.year();
            case DAY_OF_YEAR:
                return chrono.dayOfYear();
            case MILLIS_OF_DAY:
                return chrono.millisOfDay();
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + index);
        }
    }

    









    public int getValue(int index) {
        switch (index) {
            case YEAR:
                return getChronology().year().get(getLocalMillis());
            case DAY_OF_YEAR:
                return getChronology().dayOfYear().get(getLocalMillis());
            case MILLIS_OF_DAY:
                return getChronology().millisOfDay().get(getLocalMillis());
            default:
                throw new IndexOutOfBoundsException("Invalid index: " + index);
        }
    }

    
    













    public int get(DateTimeFieldType type) {
        if (type == null) {
            throw new IllegalArgumentException("The DateTimeFieldType must not be null");
        }
        return type.getField(getChronology()).get(getLocalMillis());
    }

    







    public boolean isSupported(DateTimeFieldType type) {
        if (type == null) {
            return false;
        }
        return type.getField(getChronology()).isSupported();
    }

    
    





    long getLocalMillis() {
        return iLocalMillis;
    }

    




    public Chronology getChronology() {
        return iChronology;
    }

    
    




    public DateTime toDateTimeDefaultZone() {
        return toDateTime((DateTimeZone) null);
    }

    





    public DateTime toDateTime(DateTimeZone zone) {
        zone = DateTimeUtils.getZone(zone);
        Chronology chrono = iChronology.withZone(zone);
        return new DateTime(getLocalMillis(), chrono);
    }

    
    




    public LocalDate getDate() {
        return new LocalDate(getLocalMillis(), getChronology());
    }

    




    public LocalTime getTime() {
        return new LocalTime(getLocalMillis(), getChronology());
    }

    
    









    LocalDateTime withLocalMillis(long newMillis) {
        return (newMillis == getLocalMillis() ? this : new LocalDateTime(newMillis, getChronology()));
    }

    
    















    public LocalDateTime withDate(int year, int monthOfYear, int dayOfMonth) {
        Chronology chrono = getChronology();
        long instant = getLocalMillis();
        instant = chrono.year().set(instant, year);
        instant = chrono.monthOfYear().set(instant, monthOfYear);
        instant = chrono.dayOfMonth().set(instant, dayOfMonth);
        return withLocalMillis(instant);
    }

    
















    public LocalDateTime withTime(int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) {
        Chronology chrono = getChronology();
        long instant = getLocalMillis();
        instant = chrono.hourOfDay().set(instant, hourOfDay);
        instant = chrono.minuteOfHour().set(instant, minuteOfHour);
        instant = chrono.secondOfMinute().set(instant, secondOfMinute);
        instant = chrono.millisOfSecond().set(instant, millisOfSecond);
        return withLocalMillis(instant);
    }

    
    











    public LocalDateTime withFields(ReadablePartial partial) {
        if (partial == null) {
            return this;
        }
        return withLocalMillis(getChronology().set(partial, getLocalMillis()));
    }

    


















    public LocalDateTime withField(DateTimeFieldType fieldType, int value) {
        if (fieldType == null) {
            throw new IllegalArgumentException("Field must not be null");
        }
        long instant = fieldType.getField(getChronology()).set(getLocalMillis(), value);
        return withLocalMillis(instant);
    }

    

















    public LocalDateTime withFieldAdded(DurationFieldType fieldType, int amount) {
        if (fieldType == null) {
            throw new IllegalArgumentException("Field must not be null");
        }
        if (amount == 0) {
            return this;
        }
        long instant = fieldType.getField(getChronology()).add(getLocalMillis(), amount);
        return withLocalMillis(instant);
    }

    
    









    public LocalDateTime withDurationAdded(ReadableDuration durationToAdd, int scalar) {
        if (durationToAdd == null || scalar == 0) {
            return this;
        }
        long instant = getChronology().add(getLocalMillis(), durationToAdd.getMillis(), scalar);
        return withLocalMillis(instant);
    }

    














    public LocalDateTime withPeriodAdded(ReadablePeriod period, int scalar) {
        if (period == null || scalar == 0) {
            return this;
        }
        long instant = getChronology().add(period, getLocalMillis(), scalar);
        return withLocalMillis(instant);
    }

    
    








    public LocalDateTime plus(ReadableDuration duration) {
        return withDurationAdded(duration, 1);
    }

    












    public LocalDateTime plus(ReadablePeriod period) {
        return withPeriodAdded(period, 1);
    }

    
    














    public LocalDateTime plusYears(int years) {
        if (years == 0) {
            return this;
        }
        long instant = getChronology().years().add(getLocalMillis(), years);
        return withLocalMillis(instant);
    }

    














    public LocalDateTime plusMonths(int months) {
        if (months == 0) {
            return this;
        }
        long instant = getChronology().months().add(getLocalMillis(), months);
        return withLocalMillis(instant);
    }

    














    public LocalDateTime plusWeeks(int weeks) {
        if (weeks == 0) {
            return this;
        }
        long instant = getChronology().weeks().add(getLocalMillis(), weeks);
        return withLocalMillis(instant);
    }

    














    public LocalDateTime plusDays(int days) {
        if (days == 0) {
            return this;
        }
        long instant = getChronology().days().add(getLocalMillis(), days);
        return withLocalMillis(instant);
    }

    














    public LocalDateTime plusHours(int hours) {
        if (hours == 0) {
            return this;
        }
        long instant = getChronology().hours().add(getLocalMillis(), hours);
        return withLocalMillis(instant);
    }

    














    public LocalDateTime plusMinutes(int minutes) {
        if (minutes == 0) {
            return this;
        }
        long instant = getChronology().minutes().add(getLocalMillis(), minutes);
        return withLocalMillis(instant);
    }

    














    public LocalDateTime plusSeconds(int seconds) {
        if (seconds == 0) {
            return this;
        }
        long instant = getChronology().seconds().add(getLocalMillis(), seconds);
        return withLocalMillis(instant);
    }

    














    public LocalDateTime plusMillis(int millis) {
        if (millis == 0) {
            return this;
        }
        long instant = getChronology().millis().add(getLocalMillis(), millis);
        return withLocalMillis(instant);
    }

    
    








    public LocalDateTime minus(ReadableDuration duration) {
        return withDurationAdded(duration, -1);
    }

    












    public LocalDateTime minus(ReadablePeriod period) {
        return withPeriodAdded(period, -1);
    }

    
    














    public LocalDateTime minusYears(int years) {
        if (years == 0) {
            return this;
        }
        long instant = getChronology().years().subtract(getLocalMillis(), years);
        return withLocalMillis(instant);
    }

    














    public LocalDateTime minusMonths(int months) {
        if (months == 0) {
            return this;
        }
        long instant = getChronology().months().subtract(getLocalMillis(), months);
        return withLocalMillis(instant);
    }

    














    public LocalDateTime minusWeeks(int weeks) {
        if (weeks == 0) {
            return this;
        }
        long instant = getChronology().weeks().subtract(getLocalMillis(), weeks);
        return withLocalMillis(instant);
    }

    














    public LocalDateTime minusDays(int days) {
        if (days == 0) {
            return this;
        }
        long instant = getChronology().days().subtract(getLocalMillis(), days);
        return withLocalMillis(instant);
    }

    














    public LocalDateTime minusHours(int hours) {
        if (hours == 0) {
            return this;
        }
        long instant = getChronology().hours().subtract(getLocalMillis(), hours);
        return withLocalMillis(instant);
    }

    














    public LocalDateTime minusMinutes(int minutes) {
        if (minutes == 0) {
            return this;
        }
        long instant = getChronology().minutes().subtract(getLocalMillis(), minutes);
        return withLocalMillis(instant);
    }

    














    public LocalDateTime minusSeconds(int seconds) {
        if (seconds == 0) {
            return this;
        }
        long instant = getChronology().seconds().subtract(getLocalMillis(), seconds);
        return withLocalMillis(instant);
    }

    














    public LocalDateTime minusMillis(int millis) {
        if (millis == 0) {
            return this;
        }
        long instant = getChronology().millis().subtract(getLocalMillis(), millis);
        return withLocalMillis(instant);
    }

    
    






    public Property property(DateTimeFieldType type) {
        if (type == null) {
            throw new IllegalArgumentException("The DateTimeFieldType must not be null");
        }
        DateTimeField field = type.getField(getChronology());
        if (field.isSupported() == false) {
            throw new IllegalArgumentException("Field '" + type + "' is not supported");
        }
        return new Property(this, field);
    }

    
    




    public int getEra() {
        return getChronology().era().get(getLocalMillis());
    }

    




    public int getCenturyOfEra() {
        return getChronology().centuryOfEra().get(getLocalMillis());
    }

    




    public int getYearOfEra() {
        return getChronology().yearOfEra().get(getLocalMillis());
    }

    




    public int getYearOfCentury() {
        return getChronology().yearOfCentury().get(getLocalMillis());
    }

    




    public int getYear() {
        return getChronology().year().get(getLocalMillis());
    }

    




    public int getWeekyear() {
        return getChronology().weekyear().get(getLocalMillis());
    }

    




    public int getMonthOfYear() {
        return getChronology().monthOfYear().get(getLocalMillis());
    }

    




    public int getWeekOfWeekyear() {
        return getChronology().weekOfWeekyear().get(getLocalMillis());
    }

    




    public int getDayOfYear() {
        return getChronology().dayOfYear().get(getLocalMillis());
    }

    






    public int getDayOfMonth() {
        return getChronology().dayOfMonth().get(getLocalMillis());
    }

    






    public int getDayOfWeek() {
        return getChronology().dayOfWeek().get(getLocalMillis());
    }

    
    




    public int getHourOfDay() {
        return getChronology().hourOfDay().get(getLocalMillis());
    }

    




    public int getMinuteOfHour() {
        return getChronology().minuteOfHour().get(getLocalMillis());
    }

    




    public int getSecondOfMinute() {
        return getChronology().secondOfMinute().get(getLocalMillis());
    }

    




    public int getMillisOfSecond() {
        return getChronology().millisOfSecond().get(getLocalMillis());
    }

    
    




    public Property era() {
        return new Property(this, getChronology().era());
    }

    




    public Property centuryOfEra() {
        return new Property(this, getChronology().centuryOfEra());
    }

    




    public Property yearOfCentury() {
        return new Property(this, getChronology().yearOfCentury());
    }

    




    public Property yearOfEra() {
        return new Property(this, getChronology().yearOfEra());
    }

    




    public Property year() {
        return new Property(this, getChronology().year());
    }

    




    public Property weekyear() {
        return new Property(this, getChronology().weekyear());
    }

    




    public Property monthOfYear() {
        return new Property(this, getChronology().monthOfYear());
    }

    




    public Property weekOfWeekyear() {
        return new Property(this, getChronology().weekOfWeekyear());
    }

    




    public Property dayOfYear() {
        return new Property(this, getChronology().dayOfYear());
    }

    




    public Property dayOfMonth() {
        return new Property(this, getChronology().dayOfMonth());
    }

    




    public Property dayOfWeek() {
        return new Property(this, getChronology().dayOfWeek());
    }

    
    




    public Property hourOfDay() {
        return new Property(this, getChronology().hourOfDay());
    }

    




    public Property minuteOfHour() {
        return new Property(this, getChronology().minuteOfHour());
    }

    




    public Property secondOfMinute() {
        return new Property(this, getChronology().secondOfMinute());
    }

    




    public Property millisOfSecond() {
        return new Property(this, getChronology().millisOfSecond());
    }

    
    




    public String toString() {
        return ISODateTimeFormat.dateTime().print(this);
    }

    





    public String toString(String pattern) {
        if (pattern == null) {
            return toString();
        }
        return DateTimeFormat.forPattern(pattern).print(this);
    }

    






    public String toString(String pattern, Locale locale) throws IllegalArgumentException {
        if (pattern == null) {
            return toString();
        }
        return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);
    }

    
    

























    public static final class Property extends AbstractReadableInstantFieldProperty {
        
        
        private static final long serialVersionUID = -358138762846288L;
        
        
        private transient LocalDateTime iInstant;
        
        private transient DateTimeField iField;
        
        





        Property(LocalDateTime instant, DateTimeField field) {
            super();
            iInstant = instant;
            iField = field;
        }
        
        


        private void writeObject(ObjectOutputStream oos) throws IOException {
            oos.writeObject(iInstant);
            oos.writeObject(iField.getType());
        }

        


        private void readObject(ObjectInputStream oos) throws IOException, ClassNotFoundException {
            iInstant = (LocalDateTime) oos.readObject();
            DateTimeFieldType type = (DateTimeFieldType) oos.readObject();
            iField = type.getField(iInstant.getChronology());
        }

        
        




        public DateTimeField getField() {
            return iField;
        }
        
        




        protected long getMillis() {
            return iInstant.getLocalMillis();
        }
        
        




        public LocalDateTime getLocalDateTime() {
            return iInstant;
        }
        
        
        








        public LocalDateTime plus(int value) {
            return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));
        }
        
        








        public LocalDateTime plus(long value) {
            return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));
        }
        
        










        public LocalDateTime plusWrapField(int value) {
            return iInstant.withLocalMillis(iField.addWrapField(iInstant.getLocalMillis(), value));
        }
        
        
        








        public LocalDateTime withValue(int value) {
            return iInstant.withLocalMillis(iField.set(iInstant.getLocalMillis(), value));
        }
        
        









        public LocalDateTime withValue(String text, Locale locale) {
            return iInstant.withLocalMillis(iField.set(iInstant.getLocalMillis(), text, locale));
        }
        
        








        public LocalDateTime withValue(String text) {
            return withValue(text, null);
        }
        
        
        













        public LocalDateTime withMaximumValue() {
            return withValue(getMaximumValue());
        }
        
        







        public LocalDateTime withMinimumValue() {
            return withValue(getMinimumValue());
        }
        
        
        









        public LocalDateTime withRoundedFloor() {
            return iInstant.withLocalMillis(iField.roundFloor(iInstant.getLocalMillis()));
        }
        
        









        public LocalDateTime withRoundedCeiling() {
            return iInstant.withLocalMillis(iField.roundCeiling(iInstant.getLocalMillis()));
        }
        
        





        public LocalDateTime withRoundedHalfFloor() {
            return iInstant.withLocalMillis(iField.roundHalfFloor(iInstant.getLocalMillis()));
        }
        
        





        public LocalDateTime withRoundedHalfCeiling() {
            return iInstant.withLocalMillis(iField.roundHalfCeiling(iInstant.getLocalMillis()));
        }
        
        






        public LocalDateTime withRoundedHalfEven() {
            return iInstant.withLocalMillis(iField.roundHalfEven(iInstant.getLocalMillis()));
        }
    }

}
