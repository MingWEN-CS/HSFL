69a70,71
> import org.joda.time.field.DecoratedDateTimeField;
> import org.joda.time.field.DecoratedDurationField;
88c90
< public class LimitChronology extends Chronology {
---
> public final class LimitChronology extends AssembledChronology {
92,135d93
<     private final Chronology iChronology;
< 
<     final DateTime iLowerLimit;
<     final DateTime iUpperLimit;
< 
<     private transient LimitChronology iWithUTC;
< 
<     private transient DurationField iErasField;
<     private transient DurationField iCenturiesField;
<     private transient DurationField iYearsField;
<     private transient DurationField iMonthsField;
<     private transient DurationField iWeekyearsField;
<     private transient DurationField iWeeksField;
<     private transient DurationField iDaysField;
< 
<     private transient DurationField iHoursField;
<     private transient DurationField iMinutesField;
<     private transient DurationField iSecondsField;
<     private transient DurationField iMillisField;
< 
<     private transient DateTimeField iYearField;
<     private transient DateTimeField iYearOfEraField;
<     private transient DateTimeField iYearOfCenturyField;
<     private transient DateTimeField iCenturyOfEraField;
<     private transient DateTimeField iEraField;
<     private transient DateTimeField iDayOfWeekField;
<     private transient DateTimeField iDayOfMonthField;
<     private transient DateTimeField iDayOfYearField;
<     private transient DateTimeField iMonthOfYearField;
<     private transient DateTimeField iWeekOfWeekyearField;
<     private transient DateTimeField iWeekyearField;
< 
<     private transient DateTimeField iMillisOfSecondField;
<     private transient DateTimeField iMillisOfDayField;
<     private transient DateTimeField iSecondOfMinuteField;
<     private transient DateTimeField iSecondOfDayField;
<     private transient DateTimeField iMinuteOfHourField;
<     private transient DateTimeField iMinuteOfDayField;
<     private transient DateTimeField iHourOfDayField;
<     private transient DateTimeField iHourOfHalfdayField;
<     private transient DateTimeField iClockhourOfDayField;
<     private transient DateTimeField iClockhourOfHalfdayField;
<     private transient DateTimeField iHalfdayOfDayField;
< 
145,147c103,107
<     public LimitChronology(Chronology chrono,
<                            ReadableDateTime lowerLimit, ReadableDateTime upperLimit) {
<         if (chrono == null) {
---
> 
>     public static LimitChronology getInstance(Chronology base,
>                                               ReadableDateTime lowerLimit,
>                                               ReadableDateTime upperLimit) {
>         if (base == null) {
151,154c111,112
<         iChronology = chrono;
< 
<         iLowerLimit = lowerLimit == null ? null : lowerLimit.toDateTime();
<         iUpperLimit = upperLimit == null ? null : upperLimit.toDateTime();
---
>         lowerLimit = lowerLimit == null ? null : lowerLimit.toDateTime();
>         upperLimit = upperLimit == null ? null : upperLimit.toDateTime();
156,157c114,115
<         if (iLowerLimit != null && iUpperLimit != null) {
<             if (!iLowerLimit.isBefore(iUpperLimit)) {
---
>         if (lowerLimit != null && upperLimit != null) {
>             if (!lowerLimit.isBefore(upperLimit)) {
163c121
<         setFields();
---
>         return new LimitChronology(base, (DateTime)lowerLimit, (DateTime)upperLimit);
166,167c124,125
<     private void setFields() {
<         Chronology c = iChronology;
---
>     final DateTime iLowerLimit;
>     final DateTime iUpperLimit;
169,171c127
<         
<         
<         HashMap converted = new HashMap();
---
>     private transient LimitChronology iWithUTC;
173c129
<         
---
>     
175,186d130
<         iErasField = convertField(c.eras(), converted);
<         iCenturiesField = convertField(c.centuries(), converted);
<         iYearsField = convertField(c.years(), converted);
<         iMonthsField = convertField(c.months(), converted);
<         iWeekyearsField = convertField(c.weekyears(), converted);
<         iWeeksField = convertField(c.weeks(), converted);
<         iDaysField = convertField(c.days(), converted);
< 
<         iHoursField = convertField(c.hours(), converted);
<         iMinutesField = convertField(c.minutes(), converted);
<         iSecondsField = convertField(c.seconds(), converted);
<         iMillisField = convertField(c.millis(), converted);
188d131
<         
190,213d132
<         iYearField = convertField(c.year(), converted);
<         iYearOfEraField = convertField(c.yearOfEra(), converted);
<         iYearOfCenturyField = convertField(c.yearOfCentury(), converted);
<         iCenturyOfEraField = convertField(c.centuryOfEra(), converted);
<         iEraField = convertField(c.era(), converted);
<         iDayOfWeekField = convertField(c.dayOfWeek(), converted);
<         iDayOfMonthField = convertField(c.dayOfMonth(), converted);
<         iDayOfYearField = convertField(c.dayOfYear(), converted);
<         iMonthOfYearField = convertField(c.monthOfYear(), converted);
<         iWeekOfWeekyearField = convertField(c.weekOfWeekyear(), converted);
<         iWeekyearField = convertField(c.weekyear(), converted);
< 
<         iMillisOfSecondField = convertField(c.millisOfSecond(), converted);
<         iMillisOfDayField = convertField(c.millisOfDay(), converted);
<         iSecondOfMinuteField = convertField(c.secondOfMinute(), converted);
<         iSecondOfDayField = convertField(c.secondOfDay(), converted);
<         iMinuteOfHourField = convertField(c.minuteOfHour(), converted);
<         iMinuteOfDayField = convertField(c.minuteOfDay(), converted);
<         iHourOfDayField = convertField(c.hourOfDay(), converted);
<         iHourOfHalfdayField = convertField(c.hourOfHalfday(), converted);
<         iClockhourOfDayField = convertField(c.clockhourOfDay(), converted);
<         iClockhourOfHalfdayField = convertField(c.clockhourOfHalfday(), converted);
<         iHalfdayOfDayField = convertField(c.halfdayOfDay(), converted);
<     }
215,225d133
<     private DurationField convertField(DurationField field, HashMap converted) {
<         if (field == null || !field.isSupported()) {
<             return field;
<         }
<         if (converted.containsKey(field)) {
<             return (DurationField)converted.get(field);
<         }
<         LimitDurationField limitField = new LimitDurationField(field);
<         converted.put(field, limitField);
<         return limitField;
<     }
227,240c135,142
<     private DateTimeField convertField(DateTimeField field, HashMap converted) {
<         if (field == null || !field.isSupported()) {
<             return field;
<         }
<         if (converted.containsKey(field)) {
<             return (DateTimeField)converted.get(field);
<         }
<         LimitDateTimeField limitField =
<             new LimitDateTimeField(field,
<                                    convertField(field.getDurationField(), converted),
<                                    convertField(field.getRangeDurationField(), converted),
<                                    convertField(field.getLeapDurationField(), converted));
<         converted.put(field, limitField);
<         return limitField;
---
> 
> 
>     private LimitChronology(Chronology base,
>                             DateTime lowerLimit, DateTime upperLimit) {
>         super(base, null);
>         
>         iLowerLimit = lowerLimit;
>         iUpperLimit = upperLimit;
257c159
<     public DateTime getUpperBound() {
---
>     public DateTime getUpperLimit() {
266,274d167
<     protected Chronology getWrappedChronology() {
<         return iChronology;
<     }
< 
<     
< 
< 
< 
< 
310,311c203,204
<         LimitChronology chrono = new LimitChronology
<             (iChronology.withDateTimeZone(zone), lowerLimit, upperLimit);
---
>         LimitChronology chrono = getInstance
>             (getBase().withDateTimeZone(zone), lowerLimit, upperLimit);
320,323d212
<     public DateTimeZone getDateTimeZone() {
<         return iChronology.getDateTimeZone();
<     }
< 
326c215
<         instant = iChronology.getDateOnlyMillis(instant);
---
>         instant = getBase().getDateOnlyMillis(instant);
334c223
<         long instant = iChronology.getDateOnlyMillis(year, monthOfYear, dayOfMonth);
---
>         long instant = getBase().getDateOnlyMillis(year, monthOfYear, dayOfMonth);
341c230
<         instant = iChronology.getTimeOnlyMillis(instant);
---
>         instant = getBase().getTimeOnlyMillis(instant);
350c239
<         long instant = iChronology.getTimeOnlyMillis
---
>         long instant = getBase().getTimeOnlyMillis
360c249
<         long instant = iChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);
---
>         long instant = getBase().getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);
371c260
<         instant = iChronology.getDateTimeMillis
---
>         instant = getBase().getDateTimeMillis
382c271
<         long instant = iChronology.getDateTimeMillis
---
>         long instant = getBase().getDateTimeMillis
389,519c278,281
<     
<     
< 
<     public DurationField millis() {
<         return iMillisField;
<     }
< 
<     public DateTimeField millisOfSecond() {
<         return iMillisOfSecondField;
<     }
< 
<     public DateTimeField millisOfDay() {
<         return iMillisOfDayField;
<     }
< 
<     
<     
< 
<     public DurationField seconds() {
<         return iSecondsField;
<     }
< 
<     public DateTimeField secondOfMinute() {
<         return iSecondOfMinuteField;
<     }
< 
<     public DateTimeField secondOfDay() {
<         return iSecondOfDayField;
<     }
< 
<     
<     
< 
<     public DurationField minutes() {
<         return iMinutesField;
<     }
< 
<     public DateTimeField minuteOfHour() {
<         return iMinuteOfHourField;
<     }
< 
<     public DateTimeField minuteOfDay() {
<         return iMinuteOfDayField;
<     }
< 
<     
<     
< 
<     public DurationField hours() {
<         return iHoursField;
<     }
< 
<     public DateTimeField hourOfDay() {
<         return iHourOfDayField;
<     }
< 
<     public DateTimeField clockhourOfDay() {
<         return iClockhourOfDayField;
<     }
< 
<     public DateTimeField hourOfHalfday() {
<         return iHourOfHalfdayField;
<     }
< 
<     public DateTimeField clockhourOfHalfday() {
<         return iClockhourOfHalfdayField;
<     }
< 
<     public DateTimeField halfdayOfDay() {
<         return iHalfdayOfDayField;
<     }
< 
<     
<     
< 
<     public DurationField days() {
<         return iDaysField;
<     }
< 
<     public DateTimeField dayOfWeek() {
<         return iDayOfWeekField;
<     }
< 
<     public DateTimeField dayOfMonth() {
<         return iDayOfMonthField;
<     }
< 
<     public DateTimeField dayOfYear() {
<         return iDayOfYearField;
<     }
< 
<     
<     
< 
<     public DurationField weeks() {
<         return iWeeksField;
<     }
< 
<     public DateTimeField weekOfWeekyear() {
<         return iWeekOfWeekyearField;
<     }
< 
<     public DurationField weekyears() {
<         return iWeekyearsField;
<     }
< 
<     public DateTimeField weekyear() {
<         return iWeekyearField;
<     }
< 
<     
<     
< 
<     public DurationField months() {
<         return iMonthsField;
<     }
< 
<     public DateTimeField monthOfYear() {
<         return iMonthOfYearField;
<     }
< 
<     
<     
< 
<     public DurationField years() {
<         return iYearsField;
<     }
< 
<     public DateTimeField year() {
<         return iYearField;
<     }
---
>     protected void assemble(Fields fields) {
>         
>         
>         HashMap converted = new HashMap();
521,523c283
<     public DateTimeField yearOfEra() {
<         return iYearOfEraField;
<     }
---
>         
525,527c285,296
<     public DateTimeField yearOfCentury() {
<         return iYearOfCenturyField;
<     }
---
>         fields.eras = convertField(fields.eras, converted);
>         fields.centuries = convertField(fields.centuries, converted);
>         fields.years = convertField(fields.years, converted);
>         fields.months = convertField(fields.months, converted);
>         fields.weekyears = convertField(fields.weekyears, converted);
>         fields.weeks = convertField(fields.weeks, converted);
>         fields.days = convertField(fields.days, converted);
> 
>         fields.hours = convertField(fields.hours, converted);
>         fields.minutes = convertField(fields.minutes, converted);
>         fields.seconds = convertField(fields.seconds, converted);
>         fields.millis = convertField(fields.millis, converted);
529,531c298
<     public DurationField centuries() {
<         return iCenturiesField;
<     }
---
>         
533,534c300,322
<     public DateTimeField centuryOfEra() {
<         return iCenturyOfEraField;
---
>         fields.year = convertField(fields.year, converted);
>         fields.yearOfEra = convertField(fields.yearOfEra, converted);
>         fields.yearOfCentury = convertField(fields.yearOfCentury, converted);
>         fields.centuryOfEra = convertField(fields.centuryOfEra, converted);
>         fields.era = convertField(fields.era, converted);
>         fields.dayOfWeek = convertField(fields.dayOfWeek, converted);
>         fields.dayOfMonth = convertField(fields.dayOfMonth, converted);
>         fields.dayOfYear = convertField(fields.dayOfYear, converted);
>         fields.monthOfYear = convertField(fields.monthOfYear, converted);
>         fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);
>         fields.weekyear = convertField(fields.weekyear, converted);
> 
>         fields.millisOfSecond = convertField(fields.millisOfSecond, converted);
>         fields.millisOfDay = convertField(fields.millisOfDay, converted);
>         fields.secondOfMinute = convertField(fields.secondOfMinute, converted);
>         fields.secondOfDay = convertField(fields.secondOfDay, converted);
>         fields.minuteOfHour = convertField(fields.minuteOfHour, converted);
>         fields.minuteOfDay = convertField(fields.minuteOfDay, converted);
>         fields.hourOfDay = convertField(fields.hourOfDay, converted);
>         fields.hourOfHalfday = convertField(fields.hourOfHalfday, converted);
>         fields.clockhourOfDay = convertField(fields.clockhourOfDay, converted);
>         fields.clockhourOfHalfday = convertField(fields.clockhourOfHalfday, converted);
>         fields.halfdayOfDay = convertField(fields.halfdayOfDay, converted);
537,538c325,334
<     public DurationField eras() {
<         return iErasField;
---
>     private DurationField convertField(DurationField field, HashMap converted) {
>         if (field == null || !field.isSupported()) {
>             return field;
>         }
>         if (converted.containsKey(field)) {
>             return (DurationField)converted.get(field);
>         }
>         LimitDurationField limitField = new LimitDurationField(field);
>         converted.put(field, limitField);
>         return limitField;
541,542c337,350
<     public DateTimeField era() {
<         return iEraField;
---
>     private DateTimeField convertField(DateTimeField field, HashMap converted) {
>         if (field == null || !field.isSupported()) {
>             return field;
>         }
>         if (converted.containsKey(field)) {
>             return (DateTimeField)converted.get(field);
>         }
>         LimitDateTimeField limitField =
>             new LimitDateTimeField(field,
>                                    convertField(field.getDurationField(), converted),
>                                    convertField(field.getRangeDurationField(), converted),
>                                    convertField(field.getLeapDurationField(), converted));
>         converted.put(field, limitField);
>         return limitField;
546,553c354
<         return iChronology.toString();
<     }
< 
<     private void readObject(ObjectInputStream in)
<         throws IOException, ClassNotFoundException
<     {
<         in.defaultReadObject();
<         setFields();
---
>         return getBase().toString();
590c391
<             DateTimePrinter p = ISODateTimeFormat.getInstance(getWrappedChronology()).dateTime();
---
>             DateTimePrinter p = ISODateTimeFormat.getInstance(getBase()).dateTime();
594c395
<                 p.printTo(buf, iLowerLimit);
---
>                 p.printTo(buf, getLowerLimit());
597c398
<                 p.printTo(buf, iUpperLimit);
---
>                 p.printTo(buf, getUpperLimit());
601c402
<             buf.append(getWrappedChronology());
---
>             buf.append(getBase());
