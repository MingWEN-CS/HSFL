




















































package org.joda.time.base;

import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;

import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.MutableDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.format.ISODateTimeFormat;





















public abstract class AbstractInstant implements ReadableInstant {

    


    protected AbstractInstant() {
        super();
    }

    
    
    





    public DateTimeZone getZone() {
        Chronology chrono = getChronology();
        return (chrono != null ? chrono.getZone() : null);
    }

    













    public int get(DateTimeField field) {
        if (field == null) {
            throw new IllegalArgumentException("The DateTimeField must not be null");
        }
        return field.get(getMillis());
    }

    
    
    




    public Instant toInstant() {
        if (this instanceof Instant) {
            return (Instant) this;
        }
        return new Instant(this);
    }

    




    public DateTime toDateTime() {
        if (this instanceof DateTime) {
            return (DateTime) this;
        }
        return new DateTime(this);
    }

    





    public DateTime toDateTime(DateTimeZone zone) {
        if (zone == null) {
            zone = DateTimeZone.getDefault();
        }
        if (this instanceof DateTime && getZone() == zone) {
            return (DateTime) this;
        }
        return new DateTime(this, zone);
    }

    





    public DateTime toDateTime(Chronology chronology) {
        if (chronology == null) {
            chronology = ISOChronology.getInstance();
        }
        if (this instanceof DateTime && getChronology() == chronology) {
            return (DateTime) this;
        }
        return new DateTime(this, chronology);
    }

    













    public DateTime toTrustedISODateTime() {
        DateTimeZone zone = getZone();
        if (zone == null) {
            return new DateTime(this, (Chronology)null);
        }

        DateTimeZone trusted = DateTimeZone.getInstance(zone.getID());
        
        if (zone == trusted &&
            getClass() == DateTime.class &&
            getChronology().getClass() == ISOChronology.class) {
            return (DateTime) this;
        }
        
        return new DateTime(this, ISOChronology.getInstance(trusted));
    }

    
    
    
    

    




    public MutableDateTime toMutableDateTime() {
        return new MutableDateTime(this);
    }

    





    public MutableDateTime toMutableDateTime(DateTimeZone zone) {
        if (zone == null) {
            zone = DateTimeZone.getDefault();
        }
        return new MutableDateTime(this, zone);
    }

    





    public MutableDateTime toMutableDateTime(Chronology chronology) {
        if (chronology == null) {
            chronology = ISOChronology.getInstance();
        }
        return new MutableDateTime(this, chronology);
    }

    




    public Date toDate() {
        return new Date(getMillis());
    }

    







    public Calendar toCalendar(Locale locale) {
        if (locale == null) {
            locale = Locale.getDefault();
        }
        DateTimeZone zone = getZone();
        Calendar cal;
        if (zone == null) {
            cal = Calendar.getInstance(locale);
        } else {
            cal = Calendar.getInstance(zone.toTimeZone(), locale);
        }
        cal.setTime(toDate());
        return cal;
    }

    




    public GregorianCalendar toGregorianCalendar() {
        DateTimeZone zone = getZone();
        GregorianCalendar cal;
        if (zone == null) {
            cal = new GregorianCalendar();
        } else {
            cal = new GregorianCalendar(zone.toTimeZone());
        }
        cal.setTime(toDate());
        return cal;
    }

    
    
    












    public boolean equals(Object readableInstant) {
        
        if (this == readableInstant) {
            return true;
        }
        if (readableInstant instanceof ReadableInstant) {
            ReadableInstant otherInstant = (ReadableInstant) readableInstant;
            if (getMillis() == otherInstant.getMillis()) {
                Chronology chrono = getChronology();
                if (chrono == otherInstant.getChronology()) {
                    return true;
                }
                if (chrono != null && chrono.equals(otherInstant.getChronology())) {
                    return true;
                }
            }
        }
        return false;
    }

    




    public int hashCode() {
        
        return
            ((int) (getMillis() ^ (getMillis() >>> 32))) +
            (getChronology() == null ? 0 : getChronology().hashCode());
    }

    











    public int compareTo(Object instant) {
        if (this == instant) {
            return 0;
        }

        ReadableInstant otherInstant = (ReadableInstant) instant;

        long otherMillis = otherInstant.getMillis();
        long thisMillis = getMillis();

        
        if (thisMillis == otherMillis) {
            return 0;
        }
        if (thisMillis < otherMillis) {
            return -1;
        } else {
            return 1;
        }
    }

    





    public boolean isAfter(ReadableInstant instant) {
        if (instant == null) {
            return false;
        }
        return (getMillis() > instant.getMillis());
    }

    





    public boolean isBefore(ReadableInstant instant) {
        if (instant == null) {
            return false;
        }
        return (getMillis() < instant.getMillis());
    }

    





    public boolean isEqual(ReadableInstant instant) {
        if (instant == null) {
            return false;
        }
        return (getMillis() == instant.getMillis());
    }

    
    
    




    public String toString() {
        return ISODateTimeFormat.getInstance(getChronology()).dateTime().print(this);
    }

}
