83a84,86
> 
> 
> 
541c544
<         public long next(long millis, int standardOffset, int saveMillis) {
---
>         public long next(long instant, int standardOffset, int saveMillis) {
552c555
<             millis += offset;
---
>             instant += offset;
555,556c558,561
<             long next = chrono.monthOfYear().set(millis, iMonthOfYear);
<             next = chrono.millisOfDay().set(next, iMillisOfDay);
---
>             long next = chrono.monthOfYear().set(instant, iMonthOfYear);
>             
>             next = chrono.millisOfDay().set(next, 0);
>             next = chrono.millisOfDay().add(next, iMillisOfDay);
560c565
<                 if (next <= millis) {
---
>                 if (next <= instant) {
566c571
<                 if (next <= millis) {
---
>                 if (next <= instant) {
581c586
<         public long previous(long millis, int standardOffset, int saveMillis) {
---
>         public long previous(long instant, int standardOffset, int saveMillis) {
592c597
<             millis += offset;
---
>             instant += offset;
595,596c600,603
<             long prev = chrono.monthOfYear().set(millis, iMonthOfYear);
<             prev = chrono.millisOfDay().set(prev, iMillisOfDay);
---
>             long prev = chrono.monthOfYear().set(instant, iMonthOfYear);
>             
>             prev = chrono.millisOfDay().set(prev, 0);
>             prev = chrono.millisOfDay().add(prev, iMillisOfDay);
600c607
<                 if (prev >= millis) {
---
>                 if (prev >= instant) {
606c613
<                 if (prev >= millis) {
---
>                 if (prev >= instant) {
695c702
<         private long setDayOfMonth(Chronology chrono, long millis) {
---
>         private long setDayOfMonth(Chronology chrono, long instant) {
697c704
<                 millis = chrono.dayOfMonth().set(millis, iDayOfMonth);
---
>                 instant = chrono.dayOfMonth().set(instant, iDayOfMonth);
699,701c706,708
<                 millis = chrono.dayOfMonth().set(millis, 1);
<                 millis = chrono.monthOfYear().add(millis, 1);
<                 millis = chrono.dayOfMonth().add(millis, iDayOfMonth);
---
>                 instant = chrono.dayOfMonth().set(instant, 1);
>                 instant = chrono.monthOfYear().add(instant, 1);
>                 instant = chrono.dayOfMonth().add(instant, iDayOfMonth);
703c710
<             return millis;
---
>             return instant;
706,707c713,714
<         private long setDayOfWeek(Chronology chrono, long millis) {
<             int dayOfWeek = chrono.dayOfWeek().get(millis);
---
>         private long setDayOfWeek(Chronology chrono, long instant) {
>             int dayOfWeek = chrono.dayOfWeek().get(instant);
719c726
<                 millis = chrono.dayOfWeek().add(millis, daysToAdd);
---
>                 instant = chrono.dayOfWeek().add(instant, daysToAdd);
721c728
<             return millis;
---
>             return instant;
750,751c757,758
<         public long next(long millis, int standardOffset, int saveMillis) {
<             return iOfYear.next(millis, standardOffset, saveMillis);
---
>         public long next(long instant, int standardOffset, int saveMillis) {
>             return iOfYear.next(instant, standardOffset, saveMillis);
757,758c764,765
<         public long previous(long millis, int standardOffset, int saveMillis) {
<             return iOfYear.previous(millis, standardOffset, saveMillis);
---
>         public long previous(long instant, int standardOffset, int saveMillis) {
>             return iOfYear.previous(instant, standardOffset, saveMillis);
824c831
<         public long next(final long millis, int standardOffset, int saveMillis) {
---
>         public long next(final long instant, int standardOffset, int saveMillis) {
828c835
<             long testMillis = millis;
---
>             long testInstant = instant;
831c838
<             if (millis == Long.MIN_VALUE) {
---
>             if (instant == Long.MIN_VALUE) {
834c841
<                 year = chrono.year().get(millis + wallOffset);
---
>                 year = chrono.year().get(instant + wallOffset);
839c846
<                 testMillis = chrono.year().set(0, iFromYear) - wallOffset;
---
>                 testInstant = chrono.year().set(0, iFromYear) - wallOffset;
842c849
<                 testMillis -= 1;
---
>                 testInstant -= 1;
845c852
<             long next = iRecurrence.next(testMillis, standardOffset, saveMillis);
---
>             long next = iRecurrence.next(testInstant, standardOffset, saveMillis);
847c854
<             if (next > millis) {
---
>             if (next > instant) {
851c858
<                     next = millis;
---
>                     next = instant;
1065c1072
<         public Transition nextTransition(final long millis, final int saveMillis) {
---
>         public Transition nextTransition(final long instant, final int saveMillis) {
1075,1076c1082,1083
<                 long next = rule.next(millis, iStandardOffset, saveMillis);
<                 if (next <= millis) {
---
>                 long next = rule.next(instant, iStandardOffset, saveMillis);
>                 if (next <= instant) {
1146a1154,1155
>         static final long serialVersionUID = 6941492635554961361L;
> 
1164,1165c1173,1174
<         public String getNameKey(long millis) {
<             return findMatchingRecurrence(millis).getNameKey();
---
>         public String getNameKey(long instant) {
>             return findMatchingRecurrence(instant).getNameKey();
1168,1169c1177,1178
<         public int getOffset(long millis) {
<             return iStandardOffset + findMatchingRecurrence(millis).getSaveMillis();
---
>         public int getOffset(long instant) {
>             return iStandardOffset + findMatchingRecurrence(instant).getSaveMillis();
1172c1181
<         public int getStandardOffset(long millis) {
---
>         public int getStandardOffset(long instant) {
1176c1185,1189
<         public long nextTransition(long millis) {
---
>         public boolean isFixed() {
>             return false;
>         }
> 
>         public long nextTransition(long instant) {
1181,1184c1194,1210
<             long start = startRecurrence.next
<                 (millis, standardOffset, endRecurrence.getSaveMillis());
<             long end = endRecurrence.next
<                 (millis, standardOffset, startRecurrence.getSaveMillis());
---
>             long start, end;
> 
>             try {
>                 start = startRecurrence.next
>                     (instant, standardOffset, endRecurrence.getSaveMillis());
>             } catch (IllegalArgumentException e) {
>                 
>                 start = instant;
>             }
> 
>             try {
>                 end = endRecurrence.next
>                     (instant, standardOffset, startRecurrence.getSaveMillis());
>             } catch (IllegalArgumentException e) {
>                 
>                 end = instant;
>             }
1189c1215
<         public long previousTransition(long millis) {
---
>         public long previousTransition(long instant) {
1192c1218
<             millis++;
---
>             instant++;
1198,1201c1224,1240
<             long start = startRecurrence.previous
<                 (millis, standardOffset, endRecurrence.getSaveMillis());
<             long end = endRecurrence.previous
<                 (millis, standardOffset, startRecurrence.getSaveMillis());
---
>             long start, end;
> 
>             try {
>                 start = startRecurrence.previous
>                     (instant, standardOffset, endRecurrence.getSaveMillis());
>             } catch (IllegalArgumentException e) {
>                 
>                 start = instant;
>             }
> 
>             try {
>                 end = endRecurrence.previous
>                     (instant, standardOffset, startRecurrence.getSaveMillis());
>             } catch (IllegalArgumentException e) {
>                 
>                 end = instant;
>             }
1227c1266
<         private Recurrence findMatchingRecurrence(long millis) {
---
>         private Recurrence findMatchingRecurrence(long instant) {
1232,1235c1271,1287
<             long start = startRecurrence.next
<                 (millis, standardOffset, endRecurrence.getSaveMillis());
<             long end = endRecurrence.next
<                 (millis, standardOffset, startRecurrence.getSaveMillis());
---
>             long start, end;
> 
>             try {
>                 start = startRecurrence.next
>                     (instant, standardOffset, endRecurrence.getSaveMillis());
>             } catch (IllegalArgumentException e) {
>                 
>                 start = instant;
>             }
> 
>             try {
>                 end = endRecurrence.next
>                     (instant, standardOffset, startRecurrence.getSaveMillis());
>             } catch (IllegalArgumentException e) {
>                 
>                 end = instant;
>             }
1241a1294,1295
>         static final long serialVersionUID = 7811976468055766265L;
> 
1339c1393
<         public String getNameKey(long millis) {
---
>         public String getNameKey(long instant) {
1341c1395
<             int i = Arrays.binarySearch(transitions, millis);
---
>             int i = Arrays.binarySearch(transitions, instant);
1355c1409
<             return iTailZone.getNameKey(millis);
---
>             return iTailZone.getNameKey(instant);
1358c1412
<         public int getOffset(long millis) {
---
>         public int getOffset(long instant) {
1360c1414
<             int i = Arrays.binarySearch(transitions, millis);
---
>             int i = Arrays.binarySearch(transitions, instant);
1374c1428
<             return iTailZone.getOffset(millis);
---
>             return iTailZone.getOffset(instant);
1377c1431
<         public int getStandardOffset(long millis) {
---
>         public int getStandardOffset(long instant) {
1379c1433
<             int i = Arrays.binarySearch(transitions, millis);
---
>             int i = Arrays.binarySearch(transitions, instant);
1393c1447,1451
<             return iTailZone.getStandardOffset(millis);
---
>             return iTailZone.getStandardOffset(instant);
>         }
> 
>         public boolean isFixed() {
>             return false;
1396c1454
<         public long nextTransition(long millis) {
---
>         public long nextTransition(long instant) {
1398c1456
<             int i = Arrays.binarySearch(transitions, millis);
---
>             int i = Arrays.binarySearch(transitions, instant);
1404c1462
<                 return millis;
---
>                 return instant;
1407,1408c1465,1466
<             if (millis < end) {
<                 millis = end;
---
>             if (instant < end) {
>                 instant = end;
1410c1468
<             return iTailZone.nextTransition(millis);
---
>             return iTailZone.nextTransition(instant);
1413c1471
<         public long previousTransition(long millis) {
---
>         public long previousTransition(long instant) {
1415c1473
<             int i = Arrays.binarySearch(transitions, millis);
---
>             int i = Arrays.binarySearch(transitions, instant);
1417,1418c1475,1476
<                 if (millis > Long.MIN_VALUE) {
<                     return millis - 1;
---
>                 if (instant > Long.MIN_VALUE) {
>                     return instant - 1;
1420c1478
<                 return millis;
---
>                 return instant;
1430c1488
<                 return millis;
---
>                 return instant;
1433,1434c1491,1492
<                 long prev = iTailZone.previousTransition(millis);
<                 if (prev < millis) {
---
>                 long prev = iTailZone.previousTransition(instant);
>                 if (prev < instant) {
1442c1500
<             return millis;
---
>             return instant;
