1a2,248
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> package org.joda.time.chrono;
> 
> import java.io.IOException;
> import java.io.ObjectInputStream;
> import java.io.ObjectOutputStream;
> import java.io.Serializable;
> import java.util.HashMap;
> import java.util.Map;
> 
> import org.joda.time.Chronology;
> import org.joda.time.DateTimeZone;
> import org.joda.time.field.DividedDateTimeField;
> import org.joda.time.field.RemainderDateTimeField;
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> public final class ISOChronology extends AssembledChronology {
>     
>     
>     private static final long serialVersionUID = -6212696554273812441L;
> 
>     
>     private static final ISOChronology INSTANCE_UTC =
>         new ISOChronology(GregorianChronology.getInstanceUTC());
>         
>     private static final int FAST_CACHE_SIZE = 64;
> 
>     
>     private static final ISOChronology[] cFastCache = new ISOChronology[FAST_CACHE_SIZE];
> 
>     
>     private static final Map cCache = new HashMap();
>     static {
>         cCache.put(DateTimeZone.UTC, INSTANCE_UTC);
>     }
> 
>     
> 
> 
> 
> 
> 
>     public static ISOChronology getInstanceUTC() {
>         return INSTANCE_UTC;
>     }
> 
>     
> 
> 
> 
> 
>     public static ISOChronology getInstance() {
>         return getInstance(DateTimeZone.getDefault());
>     }
> 
>     
> 
> 
> 
> 
> 
>     public static ISOChronology getInstance(DateTimeZone zone) {
>         if (zone == null) {
>             zone = DateTimeZone.getDefault();
>         }
>         int index = System.identityHashCode(zone) & (FAST_CACHE_SIZE - 1);
>         ISOChronology chrono = cFastCache[index];
>         if (chrono != null && chrono.getDateTimeZone() == zone) {
>             return chrono;
>         }
>         synchronized (cCache) {
>             chrono = (ISOChronology) cCache.get(zone);
>             if (chrono == null) {
>                 chrono = new ISOChronology(ZonedChronology.getInstance(INSTANCE_UTC, zone));
>                 cCache.put(zone, chrono);
>             }
>         }
>         cFastCache[index] = chrono;
>         return chrono;
>     }
> 
>     
>     
> 
>     
> 
> 
>     private ISOChronology(Chronology base) {
>         super(base, null);
>     }
> 
>     
>     
>     
> 
> 
> 
> 
>     public Chronology withUTC() {
>         return INSTANCE_UTC;
>     }
> 
>     
> 
> 
> 
> 
> 
>     public Chronology withDateTimeZone(DateTimeZone zone) {
>         if (zone == null) {
>             zone = DateTimeZone.getDefault();
>         }
>         if (zone == getDateTimeZone()) {
>             return this;
>         }
>         return getInstance(zone);
>     }
> 
>     
>     
>     
> 
> 
> 
> 
>     public String toString() {
>         String str = "ISOChronology";
>         DateTimeZone zone = getDateTimeZone();
>         if (zone != null) {
>             str = str + '[' + zone.getID() + ']';
>         }
>         return str;
>     }
> 
>     protected void assemble(Fields fields) {
>         if (getBase().getDateTimeZone() == DateTimeZone.UTC) {
>             
>             fields.centuryOfEra = new DividedDateTimeField
>                 (ISOYearOfEraDateTimeField.INSTANCE, "centuryOfEra", "centuries", 100);
>             fields.yearOfCentury = new RemainderDateTimeField
>                 ((DividedDateTimeField)fields.centuryOfEra, "yearOfCentury");
> 
>             fields.centuries = fields.centuryOfEra.getDurationField();
>         }
>     }
> 
>     
> 
> 
> 
>     private Object writeReplace() {
>         return new Stub(getDateTimeZone());
>     }
> 
>     private static final class Stub implements Serializable {
>         static final long serialVersionUID = -6212696554273812441L;
> 
>         private transient DateTimeZone iZone;
> 
>         Stub(DateTimeZone zone) {
>             iZone = zone;
>         }
> 
>         private Object readResolve() {
>             return ISOChronology.getInstance(iZone);
>         }
> 
>         private void writeObject(ObjectOutputStream out) throws IOException {
>             out.writeObject(iZone);
>         }
> 
>         private void readObject(ObjectInputStream in)
>             throws IOException, ClassNotFoundException
>         {
>             iZone = (DateTimeZone)in.readObject();
>         }
>     }
> 
> }
