1001c1001
<         return append0(new TimeZoneName(TimeZoneName.ID), null);
---
>         return append0(TimeZoneId.INSTANCE, TimeZoneId.INSTANCE);
2405d2404
<         static final int ID = 2;
2439,2440d2437
<                 case ID:
<                     return displayZone.getID();
2450a2448,2502
>         }
>     }
> 
>     
>     static enum TimeZoneId
>             implements DateTimePrinter, DateTimeParser {
> 
>         INSTANCE;
>         static final Set<String> ALL_IDS = DateTimeZone.getAvailableIDs();
>         static final int MAX_LENGTH;
>         static {
>             int max = 0;
>             for (String id : ALL_IDS) {
>                 max = Math.max(max, id.length());
>             }
>             MAX_LENGTH = max;
>         }
> 
>         public int estimatePrintedLength() {
>             return MAX_LENGTH;
>         }
> 
>         public void printTo(
>                 StringBuffer buf, long instant, Chronology chrono,
>                 int displayOffset, DateTimeZone displayZone, Locale locale) {
>             buf.append(displayZone != null ? displayZone.getID() : "");
>         }
> 
>         public void printTo(
>                 Writer out, long instant, Chronology chrono,
>                 int displayOffset, DateTimeZone displayZone, Locale locale) throws IOException {
>             out.write(displayZone != null ? displayZone.getID() : "");
>         }
> 
>         public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {
>             
>         }
> 
>         public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException {
>             
>         }
> 
>         public int estimateParsedLength() {
>             return MAX_LENGTH;
>         }
> 
>         public int parseInto(DateTimeParserBucket bucket, String text, int position) {
>             String str = text.substring(position);
>             for (String id : ALL_IDS) {
>                 if (str.startsWith(id)) {
>                     bucket.setZone(DateTimeZone.forID(id));
>                     return position + id.length();
>                 }
>             }
>             return ~position;
