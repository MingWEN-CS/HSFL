58a59
> import java.util.List;
63a65
> import org.joda.time.DateTimeFieldType;
64a67
> import org.joda.time.ReadablePartial;
114c117
<     public DateTimeFormatterBuilder(final DateTimeZone zone) {
---
>     public DateTimeFormatterBuilder(DateTimeZone zone) {
122c125
<     public DateTimeFormatterBuilder(final DateTimeZone zone, final Locale locale) {
---
>     public DateTimeFormatterBuilder(DateTimeZone zone, Locale locale) {
132c135
<     public DateTimeFormatterBuilder(final Chronology chrono) {
---
>     public DateTimeFormatterBuilder(Chronology chrono) {
144c147,156
<             chrono = ISOChronology.getInstance();
---
>             if (DateTimeZone.getDefault() == null) {
>                 
>                 
>                 iChrono = iChronoUTC = null;
>             } else {
>                 iChrono = iChronoUTC = ISOChronology.getInstance();
>             }
>         } else {
>             iChrono = chrono;
>             iChronoUTC = chrono.withUTC();
149,151d160
<         iChrono = chrono;
<         iChronoUTC = chrono.withUTC();
<         DateTimeZone zone = chrono.getDateTimeZone();
257c266
<     public DateTimeFormatterBuilder append(final DateTimeFormatter formatter)
---
>     public DateTimeFormatterBuilder append(DateTimeFormatter formatter)
273c282
<     public DateTimeFormatterBuilder append(final DateTimePrinter printer)
---
>     public DateTimeFormatterBuilder append(DateTimePrinter printer)
289c298
<     public DateTimeFormatterBuilder append(final DateTimeParser parser) {
---
>     public DateTimeFormatterBuilder append(DateTimeParser parser) {
302,303c311,312
<     public DateTimeFormatterBuilder append(final DateTimePrinter printer,
<                                            final DateTimeParser parser)
---
>     public DateTimeFormatterBuilder append(DateTimePrinter printer,
>                                            DateTimeParser parser)
329,330c338,339
<     public DateTimeFormatterBuilder append(final DateTimePrinter printer,
<                                            final DateTimeParser[] parsers)
---
>     public DateTimeFormatterBuilder append(DateTimePrinter printer,
>                                            DateTimeParser[] parsers)
363c372
<     public DateTimeFormatterBuilder appendOptional(final DateTimeParser parser) {
---
>     public DateTimeFormatterBuilder appendOptional(DateTimeParser parser) {
370c379
<     private DateTimeFormatterBuilder append0(final Object element) {
---
>     private DateTimeFormatterBuilder append0(Object element) {
379c388
<             final DateTimePrinter printer, final DateTimeParser parser) {
---
>             DateTimePrinter printer, DateTimeParser parser) {
392c401
<     public DateTimeFormatterBuilder appendLiteral(final char c) {
---
>     public DateTimeFormatterBuilder appendLiteral(char c) {
403c412
<     public DateTimeFormatterBuilder appendLiteral(final String text) {
---
>     public DateTimeFormatterBuilder appendLiteral(String text) {
422,424c431,433
<             DateTimeField field, int minDigits, int maxDigits) {
<         if (field == null) {
<             throw new IllegalArgumentException("Field must not be null");
---
>             DateTimeFieldType fieldType, int minDigits, int maxDigits) {
>         if (fieldType == null) {
>             throw new IllegalArgumentException("Field type must not be null");
431a441
>         DateTimeField field = fieldType.getField(iChronoUTC);
451,453c461,463
<             DateTimeField field, int minDigits, int maxDigits) {
<         if (field == null) {
<             throw new IllegalArgumentException("Field must not be null");
---
>             DateTimeFieldType fieldType, int minDigits, int maxDigits) {
>         if (fieldType == null) {
>             throw new IllegalArgumentException("Field type must not be null");
460a471
>         DateTimeField field = fieldType.getField(iChronoUTC);
475c486,491
<     public DateTimeFormatterBuilder appendText(final DateTimeField field) {
---
> 
>     public DateTimeFormatterBuilder appendText(DateTimeFieldType fieldType) {
>         if (fieldType == null) {
>             throw new IllegalArgumentException("Field type must not be null");
>         }
>         DateTimeField field = fieldType.getField(iChronoUTC);
486c502,507
<     public DateTimeFormatterBuilder appendShortText(final DateTimeField field) {
---
> 
>     public DateTimeFormatterBuilder appendShortText(DateTimeFieldType fieldType) {
>         if (fieldType == null) {
>             throw new IllegalArgumentException("Field type must not be null");
>         }
>         DateTimeField field = fieldType.getField(iChronoUTC);
504,506c525,527
<             DateTimeField field, int minDigits, int maxDigits) {
<         if (field.getDurationField().isPrecise() == false) {
<             throw new IllegalArgumentException("Field duration must be precise");
---
>             DateTimeFieldType fieldType, int minDigits, int maxDigits) {
>         if (fieldType == null) {
>             throw new IllegalArgumentException("Field type must not be null");
513a535
>         DateTimeField field = fieldType.getField(iChronoUTC);
522,523c544,545
<     public DateTimeFormatterBuilder appendFractionOfSecond(final int minDigits, final int maxDigits) {
<         return appendFraction(iChronoUTC.secondOfDay(), minDigits, maxDigits);
---
>     public DateTimeFormatterBuilder appendFractionOfSecond(int minDigits, int maxDigits) {
>         return appendFraction(DateTimeFieldType.secondOfDay(), minDigits, maxDigits);
531,532c553,554
<     public DateTimeFormatterBuilder appendFractionOfMinute(final int minDigits, final int maxDigits) {
<         return appendFraction(iChronoUTC.minuteOfDay(), minDigits, maxDigits);
---
>     public DateTimeFormatterBuilder appendFractionOfMinute(int minDigits, int maxDigits) {
>         return appendFraction(DateTimeFieldType.minuteOfDay(), minDigits, maxDigits);
540,541c562,563
<     public DateTimeFormatterBuilder appendFractionOfHour(final int minDigits, final int maxDigits) {
<         return appendFraction(iChronoUTC.hourOfDay(), minDigits, maxDigits);
---
>     public DateTimeFormatterBuilder appendFractionOfHour(int minDigits, int maxDigits) {
>         return appendFraction(DateTimeFieldType.hourOfDay(), minDigits, maxDigits);
549,550c571,572
<     public DateTimeFormatterBuilder appendFractionOfDay(final int minDigits, final int maxDigits) {
<         return appendFraction(iChronoUTC.dayOfYear(), minDigits, maxDigits);
---
>     public DateTimeFormatterBuilder appendFractionOfDay(int minDigits, int maxDigits) {
>         return appendFraction(DateTimeFieldType.dayOfYear(), minDigits, maxDigits);
559,560c581,582
<     public DateTimeFormatterBuilder appendMillisOfSecond(final int minDigits) {
<         return appendDecimal(iChronoUTC.millisOfSecond(), minDigits, 3);
---
>     public DateTimeFormatterBuilder appendMillisOfSecond(int minDigits) {
>         return appendDecimal(DateTimeFieldType.millisOfSecond(), minDigits, 3);
569,570c591,592
<     public DateTimeFormatterBuilder appendMillisOfDay(final int minDigits) {
<         return appendDecimal(iChronoUTC.millisOfDay(), minDigits, 8);
---
>     public DateTimeFormatterBuilder appendMillisOfDay(int minDigits) {
>         return appendDecimal(DateTimeFieldType.millisOfDay(), minDigits, 8);
579,580c601,602
<     public DateTimeFormatterBuilder appendSecondOfMinute(final int minDigits) {
<         return appendDecimal(iChronoUTC.secondOfMinute(), minDigits, 2);
---
>     public DateTimeFormatterBuilder appendSecondOfMinute(int minDigits) {
>         return appendDecimal(DateTimeFieldType.secondOfMinute(), minDigits, 2);
589,590c611,612
<     public DateTimeFormatterBuilder appendSecondOfDay(final int minDigits) {
<         return appendDecimal(iChronoUTC.secondOfDay(), minDigits, 5);
---
>     public DateTimeFormatterBuilder appendSecondOfDay(int minDigits) {
>         return appendDecimal(DateTimeFieldType.secondOfDay(), minDigits, 5);
599,600c621,622
<     public DateTimeFormatterBuilder appendMinuteOfHour(final int minDigits) {
<         return appendDecimal(iChronoUTC.minuteOfHour(), minDigits, 2);
---
>     public DateTimeFormatterBuilder appendMinuteOfHour(int minDigits) {
>         return appendDecimal(DateTimeFieldType.minuteOfHour(), minDigits, 2);
609,610c631,632
<     public DateTimeFormatterBuilder appendMinuteOfDay(final int minDigits) {
<         return appendDecimal(iChronoUTC.minuteOfDay(), minDigits, 4);
---
>     public DateTimeFormatterBuilder appendMinuteOfDay(int minDigits) {
>         return appendDecimal(DateTimeFieldType.minuteOfDay(), minDigits, 4);
619,620c641,642
<     public DateTimeFormatterBuilder appendHourOfDay(final int minDigits) {
<         return appendDecimal(iChronoUTC.hourOfDay(), minDigits, 2);
---
>     public DateTimeFormatterBuilder appendHourOfDay(int minDigits) {
>         return appendDecimal(DateTimeFieldType.hourOfDay(), minDigits, 2);
629,630c651,652
<     public DateTimeFormatterBuilder appendClockhourOfDay(final int minDigits) {
<         return appendDecimal(iChronoUTC.clockhourOfDay(), minDigits, 2);
---
>     public DateTimeFormatterBuilder appendClockhourOfDay(int minDigits) {
>         return appendDecimal(DateTimeFieldType.clockhourOfDay(), minDigits, 2);
639,640c661,662
<     public DateTimeFormatterBuilder appendHourOfHalfday(final int minDigits) {
<         return appendDecimal(iChronoUTC.hourOfHalfday(), minDigits, 2);
---
>     public DateTimeFormatterBuilder appendHourOfHalfday(int minDigits) {
>         return appendDecimal(DateTimeFieldType.hourOfHalfday(), minDigits, 2);
649,650c671,672
<     public DateTimeFormatterBuilder appendClockhourOfHalfday(final int minDigits) {
<         return appendDecimal(iChronoUTC.clockhourOfHalfday(), minDigits, 2);
---
>     public DateTimeFormatterBuilder appendClockhourOfHalfday(int minDigits) {
>         return appendDecimal(DateTimeFieldType.clockhourOfHalfday(), minDigits, 2);
659,660c681,682
<     public DateTimeFormatterBuilder appendDayOfWeek(final int minDigits) {
<         return appendDecimal(iChronoUTC.dayOfWeek(), minDigits, 1);
---
>     public DateTimeFormatterBuilder appendDayOfWeek(int minDigits) {
>         return appendDecimal(DateTimeFieldType.dayOfWeek(), minDigits, 1);
669,670c691,692
<     public DateTimeFormatterBuilder appendDayOfMonth(final int minDigits) {
<         return appendDecimal(iChronoUTC.dayOfMonth(), minDigits, 2);
---
>     public DateTimeFormatterBuilder appendDayOfMonth(int minDigits) {
>         return appendDecimal(DateTimeFieldType.dayOfMonth(), minDigits, 2);
679,680c701,702
<     public DateTimeFormatterBuilder appendDayOfYear(final int minDigits) {
<         return appendDecimal(iChronoUTC.dayOfYear(), minDigits, 3);
---
>     public DateTimeFormatterBuilder appendDayOfYear(int minDigits) {
>         return appendDecimal(DateTimeFieldType.dayOfYear(), minDigits, 3);
689,690c711,712
<     public DateTimeFormatterBuilder appendWeekOfWeekyear(final int minDigits) {
<         return appendDecimal(iChronoUTC.weekOfWeekyear(), minDigits, 2);
---
>     public DateTimeFormatterBuilder appendWeekOfWeekyear(int minDigits) {
>         return appendDecimal(DateTimeFieldType.weekOfWeekyear(), minDigits, 2);
701,702c723,734
<     public DateTimeFormatterBuilder appendWeekyear(final int minDigits, final int maxDigits) {
<         return appendSignedDecimal(iChronoUTC.weekyear(), minDigits, maxDigits);
---
>     public DateTimeFormatterBuilder appendWeekyear(int minDigits, int maxDigits) {
>         return appendSignedDecimal(DateTimeFieldType.weekyear(), minDigits, maxDigits);
>     }
> 
>     
> 
> 
> 
> 
> 
>     public DateTimeFormatterBuilder appendMonthOfYear(int minDigits) {
>         return appendDecimal(DateTimeFieldType.monthOfYear(), minDigits, 2);
711,712c743,746
<     public DateTimeFormatterBuilder appendMonthOfYear(final int minDigits) {
<         return appendDecimal(iChronoUTC.monthOfYear(), minDigits, 2);
---
> 
> 
>     public DateTimeFormatterBuilder appendYear(int minDigits, int maxDigits) {
>         return appendSignedDecimal(DateTimeFieldType.year(), minDigits, maxDigits);
723,724c757,769
<     public DateTimeFormatterBuilder appendYear(final int minDigits, final int maxDigits) {
<         return appendSignedDecimal(iChronoUTC.year(), minDigits, maxDigits);
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public DateTimeFormatterBuilder appendTwoDigitYear(int pivot) {
>         DateTimeField field = DateTimeFieldType.year().getField(iChronoUTC);
>         return append0(new TwoDigitYear(iChrono, field, pivot));
735,736c780,781
<     public DateTimeFormatterBuilder appendYearOfEra(final int minDigits, final int maxDigits) {
<         return appendDecimal(iChronoUTC.yearOfEra(), minDigits, maxDigits);
---
>     public DateTimeFormatterBuilder appendYearOfEra(int minDigits, int maxDigits) {
>         return appendDecimal(DateTimeFieldType.yearOfEra(), minDigits, maxDigits);
747,748c792,793
<     public DateTimeFormatterBuilder appendYearOfCentury(final int minDigits, final int maxDigits) {
<         return appendDecimal(iChronoUTC.yearOfCentury(), minDigits, maxDigits);
---
>     public DateTimeFormatterBuilder appendYearOfCentury(int minDigits, int maxDigits) {
>         return appendDecimal(DateTimeFieldType.yearOfCentury(), minDigits, maxDigits);
759,760c804,805
<     public DateTimeFormatterBuilder appendCenturyOfEra(final int minDigits, final int maxDigits) {
<         return appendSignedDecimal(iChronoUTC.centuryOfEra(), minDigits, maxDigits);
---
>     public DateTimeFormatterBuilder appendCenturyOfEra(int minDigits, int maxDigits) {
>         return appendSignedDecimal(DateTimeFieldType.centuryOfEra(), minDigits, maxDigits);
770c815
<         return appendText(iChronoUTC.halfdayOfDay());
---
>         return appendText(DateTimeFieldType.halfdayOfDay());
780c825
<         return appendText(iChronoUTC.dayOfWeek());
---
>         return appendText(DateTimeFieldType.dayOfWeek());
791c836
<         return appendShortText(iChronoUTC.dayOfWeek());
---
>         return appendShortText(DateTimeFieldType.dayOfWeek());
802c847
<         return appendText(iChronoUTC.monthOfYear());
---
>         return appendText(DateTimeFieldType.monthOfYear());
812c857
<         return appendShortText(iChronoUTC.monthOfYear());
---
>         return appendShortText(DateTimeFieldType.monthOfYear());
822c867
<         return appendText(iChronoUTC.era());
---
>         return appendText(DateTimeFieldType.era());
862,863c907,908
<             final String zeroOffsetText, final boolean showSeparators,
<             final int minFields, final int maxFields) {
---
>             String zeroOffsetText, boolean showSeparators,
>             int minFields, int maxFields) {
908c953
<     private boolean isPrinter(final Object f) {
---
>     private boolean isPrinter(Object f) {
918c963
<     private boolean isParser(final Object f) {
---
>     private boolean isParser(Object f) {
928c973
<     private boolean isFormatter(final Object f) {
---
>     private boolean isFormatter(Object f) {
948a994,1005
> 
>         protected void appendUnknownString(StringBuffer buf, int len) {
>             for (int i = len; --i >= 0;) {
>                 buf.append('\ufffd');
>             }
>         }
> 
>         protected void printUnknownString(Writer out, int len) throws IOException {
>             for (int i = len; --i >= 0;) {
>                 out.write('\ufffd');
>             }
>         }
974a1032,1039
>         public void printTo(StringBuffer buf, ReadablePartial partial) {
>             buf.append(iValue);
>         }
> 
>         public void printTo(Writer out, ReadablePartial partial) throws IOException {
>             out.write(iValue);
>         }
> 
978a1044,1047
>         public String print(ReadablePartial partial) {
>             return String.valueOf(iValue);
>         }
> 
1030a1100,1107
>         public void printTo(StringBuffer buf, ReadablePartial partial) {
>             buf.append(iValue);
>         }
> 
>         public void printTo(Writer out, ReadablePartial partial) throws IOException {
>             out.write(iValue);
>         }
> 
1034a1112,1115
>         public String print(ReadablePartial partial) {
>             return iValue;
>         }
> 
1149a1231,1254
> 
>         public void printTo(StringBuffer buf, ReadablePartial partial) {
>             if (partial.isSupported(iField.getType())) {
>                 try {
>                     FormatUtils.appendUnpaddedInteger(buf, partial.get(iField.getType()));
>                 } catch (RuntimeException e) {
>                     buf.append('\ufffd');
>                 }
>             } else {
>                 buf.append('\ufffd');
>             }
>         }
> 
>         public void printTo(Writer out, ReadablePartial partial) throws IOException {
>             if (partial.isSupported(iField.getType())) {
>                 try {
>                     FormatUtils.writeUnpaddedInteger(out, partial.get(iField.getType()));
>                 } catch (RuntimeException e) {
>                     out.write('\ufffd');
>                 }
>             } else {
>                 out.write('\ufffd');
>             }
>         }
1170,1171c1275
<                 FormatUtils.appendPaddedInteger
<                     (buf, iField.get(instantLocal), iMinPrintedDigits);
---
>                 FormatUtils.appendPaddedInteger(buf, iField.get(instantLocal), iMinPrintedDigits);
1173,1175c1277
<                 for (int i=iMinPrintedDigits; --i>=0; ) {
<                     buf.append('\ufffd');
<                 }
---
>                 appendUnknownString(buf, iMinPrintedDigits);
1182,1183c1284
<                 FormatUtils.writePaddedInteger
<                     (out, iField.get(instantLocal), iMinPrintedDigits);
---
>                 FormatUtils.writePaddedInteger(out, iField.get(instantLocal), iMinPrintedDigits);
1185,1186c1286,1307
<                 for (int i=iMinPrintedDigits; --i>=0; ) {
<                     out.write('\ufffd');
---
>                 printUnknownString(out, iMinPrintedDigits);
>             }
>         }
> 
>         public void printTo(StringBuffer buf, ReadablePartial partial) {
>             if (partial.isSupported(iField.getType())) {
>                 try {
>                     FormatUtils.appendPaddedInteger(buf, partial.get(iField.getType()), iMinPrintedDigits);
>                 } catch (RuntimeException e) {
>                     appendUnknownString(buf, iMinPrintedDigits);
>                 }
>             } else {
>                 appendUnknownString(buf, iMinPrintedDigits);
>             }
>         }
> 
>         public void printTo(Writer out, ReadablePartial partial) throws IOException {
>             if (partial.isSupported(iField.getType())) {
>                 try {
>                     FormatUtils.writePaddedInteger(out, partial.get(iField.getType()), iMinPrintedDigits);
>                 } catch (RuntimeException e) {
>                     printUnknownString(out, iMinPrintedDigits);
1187a1309,1310
>             } else {
>                 printUnknownString(out, iMinPrintedDigits);
1191a1315,1435
>     private static class TwoDigitYear extends AbstractFormatter
>         implements DateTimeFormatter
>     {
>         private final DateTimeField iField;
>         private final int iPivot;
> 
>         TwoDigitYear(Chronology chrono, DateTimeField field, int pivot) {
>             super(chrono);
>             iField = field;
>             iPivot = pivot;
>         }
> 
>         public int estimateParsedLength() {
>             return 2;
>         }
> 
>         public int parseInto(DateTimeParserBucket bucket, String text, int position) {
>             int limit = Math.min(2, text.length() - position);
>             if (limit < 2) {
>                 return ~position;
>             }
> 
>             int year;
>             char c = text.charAt(position);
>             if (c < '0' || c > '9') {
>                 return ~position;
>             }
>             year = c - '0';
>             c = text.charAt(position + 1);
>             if (c < '0' || c > '9') {
>                 return ~position;
>             }
>             year = ((year << 3) + (year << 1)) + c - '0';
> 
>             int low = iPivot - 50;
> 
>             int t;
>             if (low >= 0) {
>                 t = low % 100;
>             } else {
>                 t = 99 + ((low + 1) % 100);
>             }
> 
>             year += low + ((year < t) ? 100 : 0) - t;
> 
>             bucket.saveField(iField, year);
>             return position + 2;
>         }
>         
>         public int estimatePrintedLength() {
>             return 2;
>         }
> 
>         public void printTo(StringBuffer buf, long instant,
>                             DateTimeZone zone, long instantLocal) {
>             int year = getTwoDigitYear(instantLocal);
>             if (year < 0) {
>                 buf.append('\ufffd');
>                 buf.append('\ufffd');
>             } else {
>                 FormatUtils.appendPaddedInteger(buf, year, 2);
>             }
>         }
> 
>         public void printTo(Writer out, long instant,
>                             DateTimeZone zone, long instantLocal) throws IOException {
>             int year = getTwoDigitYear(instantLocal);
>             if (year < 0) {
>                 out.write('\ufffd');
>                 out.write('\ufffd');
>             } else {
>                 FormatUtils.writePaddedInteger(out, year, 2);
>             }
>         }
> 
>         private int getTwoDigitYear(long instantLocal) {
>             try {
>                 int year = iField.get(instantLocal);
>                 if (year < 0) {
>                     year = -year;
>                 }
>                 return year % 100;
>             } catch (RuntimeException e) {
>                 return -1;
>             }
>         }
> 
>         public void printTo(StringBuffer buf, ReadablePartial partial) {
>             int year = getTwoDigitYear(partial);
>             if (year < 0) {
>                 buf.append('\ufffd');
>                 buf.append('\ufffd');
>             } else {
>                 FormatUtils.appendPaddedInteger(buf, year, 2);
>             }
>         }
> 
>         public void printTo(Writer out, ReadablePartial partial) throws IOException {
>             int year = getTwoDigitYear(partial);
>             if (year < 0) {
>                 out.write('\ufffd');
>                 out.write('\ufffd');
>             } else {
>                 FormatUtils.writePaddedInteger(out, year, 2);
>             }
>         }
> 
>         private int getTwoDigitYear(ReadablePartial partial) {
>             if (partial.isSupported(iField.getType())) {
>                 try {
>                     int year = partial.get(iField.getType());
>                     if (year < 0) {
>                         year = -year;
>                     }
>                     return year % 100;
>                 } catch (RuntimeException e) {}
>             } 
>             return -1;
>         }
>     }
> 
1236a1481,1496
>         public void printTo(StringBuffer buf, ReadablePartial partial) {
>             try {
>                 buf.append(print(partial));
>             } catch (RuntimeException e) {
>                 buf.append('\ufffd');
>             }
>         }
> 
>         public void printTo(Writer out, ReadablePartial partial) throws IOException {
>             try {
>                 out.write(print(partial));
>             } catch (RuntimeException e) {
>                 out.write('\ufffd');
>             }
>         }
> 
1244a1505,1516
>         public final String print(ReadablePartial partial) {
>             if (partial.isSupported(iField.getType())) {
>                 if (iShort) {
>                     return iField.getAsShortText(partial, iLocale);
>                 } else {
>                     return iField.getAsText(partial, iLocale);
>                 }
>             } else {
>                 return "\ufffd";
>             }
>         }
> 
1349a1622,1643
>         public void printTo(StringBuffer buf, ReadablePartial partial) {
>             if (partial.isSupported(iField.getType())) {
>                 long millis = this.iChrono.withUTC().set(partial, 0L);
>                 try {
>                     printTo(buf, null, millis);
>                 } catch (IOException e) {
>                     
>                 }
>             } else {
>                 buf.append('\ufffd');
>             }
>         }
> 
>         public void printTo(Writer out, ReadablePartial partial) throws IOException {
>             if (partial.isSupported(iField.getType())) {
>                 long millis = this.iChrono.withUTC().set(partial, 0L);
>                 printTo(null, out, millis);
>             } else {
>                 out.write('\ufffd');
>             }
>         }
> 
1468c1762
<                     ("", MillisDurationField.INSTANCE, iField.getDurationField());
---
>                     (DateTimeFieldType.millisOfSecond(), MillisDurationField.INSTANCE, iField.getDurationField());
1628a1923,1930
>         public void printTo(StringBuffer buf, ReadablePartial partial) {
>             
>         }
> 
>         public void printTo(Writer out, ReadablePartial partial) throws IOException {
>             
>         }
> 
1633a1936,1938
>             int limit = text.length() - position;
> 
>             zeroOffset:
1634a1940,1950
>                 if (iZeroOffsetText.length() == 0) {
>                     
>                     if (limit > 0) {
>                         char c = text.charAt(position);
>                         if (c == '-' || c == '+') {
>                             break zeroOffset;
>                         }
>                     }
>                     bucket.setOffset(0);
>                     return position;
>                 }
1644d1959
<             int limit = text.length() - position;
1829c2144
<                 zone = getDateTimeZone();
---
>                 zone = getZone();
1841c2156
<                 zone = getDateTimeZone();
---
>                 zone = getZone();
1852c2167
<                 zone = getDateTimeZone();
---
>                 zone = getZone();
1859a2175,2182
> 
>         public void printTo(StringBuffer buf, ReadablePartial partial) {
>             
>         }
> 
>         public void printTo(Writer out, ReadablePartial partial) throws IOException {
>             
>         }
1871c2194
<         Composite(Chronology chrono, ArrayList elementPairs) {
---
>         Composite(Chronology chrono, List elementPairs) {
1874c2197,2198
<             int len = elementPairs.size() / 2;
---
>             List printerList = new ArrayList();
>             List parserList = new ArrayList();
1876,1877c2200
<             boolean isPrinter = true;
<             boolean isParser = true;
---
>             decompose(elementPairs, printerList, parserList);
1879,1889c2202,2210
<             int printEst = 0;
<             int parseEst = 0;
< 
<             DateTimePrinter[] printers = new DateTimePrinter[len];
<             DateTimeParser[] parsers = new DateTimeParser[len];
<             for (int i=0; i<len; i++) {
<                 Object element = elementPairs.get(i * 2);
<                 if (element == null || !(element instanceof DateTimePrinter)) {
<                     isPrinter = false;
<                 } else {
<                     DateTimePrinter printer = (DateTimePrinter)element;
---
>             if (printerList.size() <= 0) {
>                 iPrinters = null;
>                 iPrintedLengthEstimate = 0;
>             } else {
>                 int size = printerList.size();
>                 iPrinters = new DateTimePrinter[size];
>                 int printEst = 0;
>                 for (int i=0; i<size; i++) {
>                     DateTimePrinter printer = (DateTimePrinter)printerList.get(i);
1891c2212
<                     printers[i] = printer;
---
>                     iPrinters[i] = printer;
1892a2214,2215
>                 iPrintedLengthEstimate = printEst;
>             }
1894,1898c2217,2225
<                 element = elementPairs.get(i * 2 + 1);
<                 if (element == null || !(element instanceof DateTimeParser)) {
<                     isParser = false;
<                 } else {
<                     DateTimeParser parser = (DateTimeParser)element;
---
>             if (parserList.size() <= 0) {
>                 iParsers = null;
>                 iParsedLengthEstimate = 0;
>             } else {
>                 int size = parserList.size();
>                 iParsers = new DateTimeParser[size];
>                 int parseEst = 0;
>                 for (int i=0; i<size; i++) {
>                     DateTimeParser parser = (DateTimeParser)parserList.get(i);
1900c2227
<                     parsers[i] = parser;
---
>                     iParsers[i] = parser;
1901a2229
>                 iParsedLengthEstimate = parseEst;
1903,1914d2230
< 
<             if (!isPrinter) {
<                 printers = null;
<             }
<             if (!isParser) {
<                 parsers = null;
<             }
< 
<             iPrinters = printers;
<             iParsers = parsers;
<             iPrintedLengthEstimate = printEst;
<             iParsedLengthEstimate = parseEst;
1924d2239
< 
1938d2252
< 
1948a2263,2286
>         public void printTo(StringBuffer buf, ReadablePartial partial) {
>             DateTimePrinter[] elements = iPrinters;
>             if (elements == null) {
>                 throw new UnsupportedOperationException();
>             }
> 
>             int len = elements.length;
>             for (int i=0; i<len; i++) {
>                 elements[i].printTo(buf, partial);
>             }
>         }
> 
>         public void printTo(Writer out, ReadablePartial partial) throws IOException {
>             DateTimePrinter[] elements = iPrinters;
>             if (elements == null) {
>                 throw new UnsupportedOperationException();
>             }
> 
>             int len = elements.length;
>             for (int i=0; i<len; i++) {
>                 elements[i].printTo(out, partial);
>             }
>         }
> 
1973a2312,2346
> 
>         
> 
> 
> 
>         private void decompose(List elementPairs, List printerList, List parserList) {
>             int size = elementPairs.size();
>             for (int i=0; i<size; i+=2) {
>                 Object element = elementPairs.get(i);
>                 if (element != null && element instanceof DateTimePrinter) {
>                     if (element instanceof Composite) {
>                         addArrayToList(printerList, ((Composite)element).iPrinters);
>                     } else {
>                         printerList.add(element);
>                     }
>                 }
> 
>                 element = elementPairs.get(i + 1);
>                 if (element != null && element instanceof DateTimeParser) {
>                     if (element instanceof Composite) {
>                         addArrayToList(parserList, ((Composite)element).iParsers);
>                     } else {
>                         parserList.add(element);
>                     }
>                 }
>             }
>         }
> 
>         private void addArrayToList(List list, Object[] array) {
>             if (array != null) {
>                 for (int i=0; i<array.length; i++) {
>                     list.add(array[i]);
>                 }
>             }
>         }
2002c2375
<         public int parseInto(final DateTimeParserBucket bucket, final String text, final int position) {
---
>         public int parseInto(DateTimeParserBucket bucket, String text, int position) {
