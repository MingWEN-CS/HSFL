1a2,300
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> package org.joda.time.format;
> 
> import java.io.IOException;
> import java.io.Writer;
> import java.text.ParseException;
> 
> import org.joda.time.Chronology;
> import org.joda.time.DateTime;
> import org.joda.time.DateTimeZone;
> import org.joda.time.MutableDateTime;
> import org.joda.time.ReadWritableInstant;
> import org.joda.time.ReadableInstant;
> 
> 
> 
> 
> 
> 
> public interface DateTimeFormatter extends DateTimePrinter, DateTimeParser {
>     
>     
> 
> 
>     Chronology getChronology();
> 
>     
> 
> 
> 
>     int estimatePrintedLength();
> 
>     
> 
> 
> 
> 
> 
> 
>     void printTo(StringBuffer buf, ReadableInstant instant);
> 
>     
> 
> 
> 
> 
> 
> 
>     void printTo(Writer out, ReadableInstant instant) throws IOException;
> 
>     
> 
> 
> 
> 
> 
> 
>     void printTo(StringBuffer buf, long millisUTC);
> 
>     
> 
> 
> 
> 
> 
> 
>     void printTo(Writer out, long millisUTC) throws IOException;
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     void printTo(StringBuffer buf, long millisUTC, DateTimeZone zone);
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     void printTo(Writer out, long millisUTC, DateTimeZone zone) throws IOException;
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     void printTo(StringBuffer buf, long millisUTC,
>                  DateTimeZone zone, long millisLocal);
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     void printTo(Writer out, long millisUTC,
>                  DateTimeZone zone, long millisLocal) throws IOException;
> 
>     
> 
> 
> 
> 
> 
> 
>     String print(ReadableInstant instant);
> 
>     
> 
> 
> 
> 
> 
> 
>     String print(long millisUTC);
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     String print(long millisUTC, DateTimeZone zone);
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     String print(long millisUTC, DateTimeZone zone, long millisLocal);
> 
>     
> 
> 
> 
>     int estimateParsedLength();
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     int parseInto(DateTimeParserBucket bucket, String text, int position);
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     int parseInto(ReadWritableInstant instant, String text, int position);
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     long parseMillis(String text) throws ParseException;
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     long parseMillis(String text, long millis) throws ParseException;
> 
>     
> 
> 
> 
> 
> 
> 
>     DateTime parseDateTime(String text) throws ParseException;
> 
>     
> 
> 
> 
> 
> 
> 
>     MutableDateTime parseMutableDateTime(String text) throws ParseException;
>     
> }
