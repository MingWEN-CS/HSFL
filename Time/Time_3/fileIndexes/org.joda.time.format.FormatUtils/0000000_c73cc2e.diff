1a2,347
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> package org.joda.time.format;
> 
> import java.io.IOException;
> import java.io.Writer;
> 
> 
> 
> 
> 
> 
> public class FormatUtils {
>     private static final double LOG_10 = Math.log(10);
> 
>     private FormatUtils() {
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static void appendPaddedInteger(StringBuffer buf, int value, int size) {
>         if (value < 0) {
>             buf.append('-');
>             if (value != Integer.MIN_VALUE) {
>                 value = -value;
>             } else {
>                 for (; size > 10; size--) {
>                     buf.append('0');
>                 }
>                 buf.append("" + -(long)Integer.MIN_VALUE);
>                 return;
>             }
>         }
>         if (value < 10) {
>             for (; size > 1; size--) {
>                 buf.append('0');
>             }
>             buf.append((char)(value + '0'));
>         } else if (value < 100) {
>             for (; size > 2; size--) {
>                 buf.append('0');
>             }
>             buf.append((char)(value / 10 + '0'));
>             buf.append((char)(value % 10 + '0'));
>         } else {
>             int digits;
>             if (value < 1000) {
>                 digits = 3;
>             } else if (value < 10000) {
>                 digits = 4;
>             } else {
>                 digits = (int)(Math.log(value) / LOG_10) + 1;
>             }
>             for (; size > digits; size--) {
>                 buf.append('0');
>             }
>             buf.append(Integer.toString(value));
>         }
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static void appendPaddedInteger(StringBuffer buf, long value, int size) {
>         int intValue = (int)value;
>         if (intValue == value) {
>             appendPaddedInteger(buf, intValue, size);
>         } else if (size <= 19) {
>             buf.append(Long.toString(value));
>         } else {
>             if (value < 0) {
>                 buf.append('-');
>                 if (value != Long.MIN_VALUE) {
>                     value = -value;
>                 } else {
>                     for (; size > 19; size--) {
>                         buf.append('0');
>                     }
>                     buf.append("9223372036854775808");
>                     return;
>                 }
>             }
>             int digits = (int)(Math.log(value) / LOG_10) + 1;
>             for (; size > digits; size--) {
>                 buf.append('0');
>             }
>             buf.append(Long.toString(value));
>         }
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static void writePaddedInteger(Writer out, int value, int size)
>         throws IOException
>     {
>         if (value < 0) {
>             out.write('-');
>             if (value != Integer.MIN_VALUE) {
>                 value = -value;
>             } else {
>                 for (; size > 10; size--) {
>                     out.write('0');
>                 }
>                 out.write("" + -(long)Integer.MIN_VALUE);
>                 return;
>             }
>         }
>         if (value < 10) {
>             for (; size > 1; size--) {
>                 out.write('0');
>             }
>             out.write(value + '0');
>         } else if (value < 100) {
>             for (; size > 2; size--) {
>                 out.write('0');
>             }
>             out.write(value / 10 + '0');
>             out.write(value % 10 + '0');
>         } else {
>             int digits;
>             if (value < 1000) {
>                 digits = 3;
>             } else if (value < 10000) {
>                 digits = 4;
>             } else {
>                 digits = (int)(Math.log(value) / LOG_10) + 1;
>             }
>             for (; size > digits; size--) {
>                 out.write('0');
>             }
>             out.write(Integer.toString(value));
>         }
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static void writePaddedInteger(Writer out, long value, int size)
>         throws IOException
>     {
>         int intValue = (int)value;
>         if (intValue == value) {
>             writePaddedInteger(out, intValue, size);
>         } else if (size <= 19) {
>             out.write(Long.toString(value));
>         } else {
>             if (value < 0) {
>                 out.write('-');
>                 if (value != Long.MIN_VALUE) {
>                     value = -value;
>                 } else {
>                     for (; size > 19; size--) {
>                         out.write('0');
>                     }
>                     out.write("9223372036854775808");
>                     return;
>                 }
>             }
>             int digits = (int)(Math.log(value) / LOG_10) + 1;
>             for (; size > digits; size--) {
>                 out.write('0');
>             }
>             out.write(Long.toString(value));
>         }
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     public static void appendUnpaddedInteger(StringBuffer buf, int value) {
>         if (value < 0) {
>             buf.append('-');
>             if (value != Integer.MIN_VALUE) {
>                 value = -value;
>             } else {
>                 buf.append("" + -(long)Integer.MIN_VALUE);
>                 return;
>             }
>         }
>         if (value < 10) {
>             buf.append((char)(value + '0'));
>         } else if (value < 100) {
>             buf.append((char)(value / 10 + '0'));
>             buf.append((char)(value % 10 + '0'));
>         } else {
>             buf.append(Integer.toString(value));
>         }
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     public static void appendUnpaddedInteger(StringBuffer buf, long value) {
>         int intValue = (int)value;
>         if (intValue == value) {
>             appendUnpaddedInteger(buf, intValue);
>         } else {
>             buf.append(Long.toString(value));
>         }
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     public static void writeUnpaddedInteger(Writer out, int value)
>         throws IOException
>     {
>         if (value < 0) {
>             out.write('-');
>             if (value != Integer.MIN_VALUE) {
>                 value = -value;
>             } else {
>                 out.write("" + -(long)Integer.MIN_VALUE);
>                 return;
>             }
>         }
>         if (value < 10) {
>             out.write(value + '0');
>         } else if (value < 100) {
>             out.write(value / 10 + '0');
>             out.write(value % 10 + '0');
>         } else {
>             out.write(Integer.toString(value));
>         }
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     public static void writeUnpaddedInteger(Writer out, long value)
>         throws IOException
>     {
>         int intValue = (int)value;
>         if (intValue == value) {
>             writeUnpaddedInteger(out, intValue);
>         } else {
>             out.write(Long.toString(value));
>         }
>     }
> 
>     static int parseTwoDigits(String text, int position) {
>         int value = text.charAt(position) - '0';
>         return ((value << 3) + (value << 1)) + text.charAt(position + 1) - '0';
>     }
> }
