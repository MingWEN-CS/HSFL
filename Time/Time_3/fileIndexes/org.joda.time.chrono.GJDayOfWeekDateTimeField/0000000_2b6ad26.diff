1a2,177
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> package org.joda.time.chrono;
> 
> import java.util.Locale;
> 
> import org.joda.time.DateTimeConstants;
> import org.joda.time.DurationField;
> import org.joda.time.field.PreciseDurationDateTimeField;
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> final class GJDayOfWeekDateTimeField extends PreciseDurationDateTimeField {
>     
>     static final long serialVersionUID = -3857947176719041436L;
> 
>     private final AbstractGJChronology iChronology;
> 
>     
> 
> 
>     GJDayOfWeekDateTimeField(AbstractGJChronology chronology, DurationField days) {
>         super("dayOfWeek", days);
>         iChronology = chronology;
>     }
> 
>     
> 
> 
> 
> 
> 
>     public int get(long instant) {
>         return iChronology.getDayOfWeek(instant);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
>     public String getAsText(long instant, Locale locale) {
>         return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToText(get(instant));
>     }
> 
>     
> 
> 
> 
> 
> 
> 
>     public String getAsShortText(long instant, Locale locale) {
>         return GJLocaleSymbols.forLocale(locale).dayOfWeekValueToShortText(get(instant));
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     public long set(long instant, String text, Locale locale) {
>         return set(instant, GJLocaleSymbols.forLocale(locale).dayOfWeekTextToValue(text));
>     }
> 
>     public DurationField getRangeDurationField() {
>         return iChronology.weeks();
>     }
> 
>     
> 
> 
> 
> 
>     public int getMinimumValue() {
>         return DateTimeConstants.MONDAY;
>     }
> 
>     
> 
> 
> 
> 
>     public int getMaximumValue() {
>         return DateTimeConstants.SUNDAY;
>     }
> 
>     
> 
> 
> 
> 
> 
>     public int getMaximumTextLength(Locale locale) {
>         return GJLocaleSymbols.forLocale(locale).getDayOfWeekMaxTextLength();
>     }
> 
>     
> 
> 
> 
> 
> 
>     public int getMaximumShortTextLength(Locale locale) {
>         return GJLocaleSymbols.forLocale(locale).getDayOfWeekMaxShortTextLength();
>     }
> 
>     
> 
> 
>     private Object readResolve() {
>         return iChronology.dayOfWeek();
>     }
> }
