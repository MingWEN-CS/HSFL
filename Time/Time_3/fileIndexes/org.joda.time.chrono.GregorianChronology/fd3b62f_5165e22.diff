16,53d15
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
59a22
> import org.joda.time.ChronologyType;
83c46
< public final class GregorianChronology extends BaseGJChronology {
---
> public final class GregorianChronology extends CommonGJChronology {
93a57,67
>     private static final int DAYS_0000_TO_1970 = 719527;
> 
>     
>     private static final int MIN_YEAR = -292275054;
> 
>     
>     
>     
>     
>     private static final int MAX_YEAR = 292277023;
> 
190a165,175
> 
> 
> 
> 
> 
>     public ChronologyType getType() {
>         return ChronologyType.gregorian();
>     }
> 
>     
>     
226a212,218
>         if (year > MAX_YEAR) {
>             throw new ArithmeticException("Year is too large: " + year + " > " + MAX_YEAR);
>         }
>         if (year < MIN_YEAR) {
>             throw new ArithmeticException("Year is too small: " + year + " < " + MIN_YEAR);
>         }
> 
228,232c220,221
<         
<         int relativeYear = year - 2000;
<         
<         int leapYears = relativeYear / 100;
<         if (relativeYear <= 0) {
---
>         int leapYears = year / 100;
>         if (year < 0) {
238c227
<             leapYears = ((relativeYear + 3) >> 2) - leapYears + ((leapYears + 3) >> 2);
---
>             leapYears = ((year + 3) >> 2) - leapYears + ((leapYears + 3) >> 2) - 1;
240,243c229,231
<             leapYears = (relativeYear >> 2) - leapYears + (leapYears >> 2);
<             
<             if (!isLeapYear(year)) {
<                 leapYears++;
---
>             leapYears = (year >> 2) - leapYears + (leapYears >> 2);
>             if (isLeapYear(year)) {
>                 leapYears--;
246,254c234,235
<         
<         long millis = (relativeYear * 365L + leapYears)
<             * (long)DateTimeConstants.MILLIS_PER_DAY;
<         
<         
<         
<         
<         
<         return millis + MILLIS_1970_TO_2000;
---
> 
>         return (year * 365L + (leapYears - DAYS_0000_TO_1970)) * DateTimeConstants.MILLIS_PER_DAY;
258,259c239
<         
<         return -292275054;
---
>         return MIN_YEAR;
263,264c243
<         
<         return 292277023;
---
>         return MAX_YEAR;
