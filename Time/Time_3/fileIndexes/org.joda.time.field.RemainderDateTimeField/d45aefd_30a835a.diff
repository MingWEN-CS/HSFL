40a41
>     final DurationField iDurationField;
65a67,75
>         iDurationField = field.getDurationField();
>         iDivisor = divisor;
>     }
> 
>     
> 
> 
> 
> 
66a77,87
> 
> 
> 
>     public RemainderDateTimeField(DateTimeField field, DurationField rangeField,
>                                   DateTimeFieldType type, int divisor) {
>         super(field, type);
>         if (divisor < 2) {
>             throw new IllegalArgumentException("The divisor must be at least 2");
>         }
>         iRangeField = rangeField;
>         iDurationField = field.getDurationField();
87a109,121
>         this(dividedField, dividedField.getWrappedField().getDurationField(), type);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public RemainderDateTimeField(DividedDateTimeField dividedField, DurationField durationField, DateTimeFieldType type) {
89a124
>         iDurationField = durationField;
133a169,173
>     }
> 
>     @Override
>     public DurationField getDurationField() {
>         return iDurationField;
