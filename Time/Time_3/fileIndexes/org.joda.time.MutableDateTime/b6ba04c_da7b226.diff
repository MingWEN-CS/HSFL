56a57
> import java.util.Locale;
59a61
> import org.joda.time.field.AbstractReadableInstantFieldProperty;
62d63
< import org.joda.time.property.ReadWritableInstantFieldProperty;
972,973c973,974
<     public ReadWritableInstantFieldProperty era() {
<         return new ReadWritableInstantFieldProperty(this, getChronology().era());
---
>     public Property era() {
>         return new Property(this, getChronology().era());
981,982c982,983
<     public ReadWritableInstantFieldProperty centuryOfEra() {
<         return new ReadWritableInstantFieldProperty(this, getChronology().centuryOfEra());
---
>     public Property centuryOfEra() {
>         return new Property(this, getChronology().centuryOfEra());
990,991c991,992
<     public ReadWritableInstantFieldProperty yearOfCentury() {
<         return new ReadWritableInstantFieldProperty(this, getChronology().yearOfCentury());
---
>     public Property yearOfCentury() {
>         return new Property(this, getChronology().yearOfCentury());
999,1000c1000,1001
<     public ReadWritableInstantFieldProperty yearOfEra() {
<         return new ReadWritableInstantFieldProperty(this, getChronology().yearOfEra());
---
>     public Property yearOfEra() {
>         return new Property(this, getChronology().yearOfEra());
1008,1009c1009,1010
<     public ReadWritableInstantFieldProperty year() {
<         return new ReadWritableInstantFieldProperty(this, getChronology().year());
---
>     public Property year() {
>         return new Property(this, getChronology().year());
1017,1018c1018,1019
<     public ReadWritableInstantFieldProperty weekyear() {
<         return new ReadWritableInstantFieldProperty(this, getChronology().weekyear());
---
>     public Property weekyear() {
>         return new Property(this, getChronology().weekyear());
1026,1027c1027,1028
<     public ReadWritableInstantFieldProperty monthOfYear() {
<         return new ReadWritableInstantFieldProperty(this, getChronology().monthOfYear());
---
>     public Property monthOfYear() {
>         return new Property(this, getChronology().monthOfYear());
1035,1036c1036,1037
<     public ReadWritableInstantFieldProperty weekOfWeekyear() {
<         return new ReadWritableInstantFieldProperty(this, getChronology().weekOfWeekyear());
---
>     public Property weekOfWeekyear() {
>         return new Property(this, getChronology().weekOfWeekyear());
1044,1045c1045,1046
<     public ReadWritableInstantFieldProperty dayOfYear() {
<         return new ReadWritableInstantFieldProperty(this, getChronology().dayOfYear());
---
>     public Property dayOfYear() {
>         return new Property(this, getChronology().dayOfYear());
1055,1056c1056,1057
<     public ReadWritableInstantFieldProperty dayOfMonth() {
<         return new ReadWritableInstantFieldProperty(this, getChronology().dayOfMonth());
---
>     public Property dayOfMonth() {
>         return new Property(this, getChronology().dayOfMonth());
1066,1067c1067,1068
<     public ReadWritableInstantFieldProperty dayOfWeek() {
<         return new ReadWritableInstantFieldProperty(this, getChronology().dayOfWeek());
---
>     public Property dayOfWeek() {
>         return new Property(this, getChronology().dayOfWeek());
1076,1077c1077,1078
<     public ReadWritableInstantFieldProperty hourOfDay() {
<         return new ReadWritableInstantFieldProperty(this, getChronology().hourOfDay());
---
>     public Property hourOfDay() {
>         return new Property(this, getChronology().hourOfDay());
1085,1086c1086,1087
<     public ReadWritableInstantFieldProperty minuteOfDay() {
<         return new ReadWritableInstantFieldProperty(this, getChronology().minuteOfDay());
---
>     public Property minuteOfDay() {
>         return new Property(this, getChronology().minuteOfDay());
1094,1095c1095,1096
<     public ReadWritableInstantFieldProperty minuteOfHour() {
<         return new ReadWritableInstantFieldProperty(this, getChronology().minuteOfHour());
---
>     public Property minuteOfHour() {
>         return new Property(this, getChronology().minuteOfHour());
1103,1104c1104,1105
<     public ReadWritableInstantFieldProperty secondOfDay() {
<         return new ReadWritableInstantFieldProperty(this, getChronology().secondOfDay());
---
>     public Property secondOfDay() {
>         return new Property(this, getChronology().secondOfDay());
1112,1113c1113,1114
<     public ReadWritableInstantFieldProperty secondOfMinute() {
<         return new ReadWritableInstantFieldProperty(this, getChronology().secondOfMinute());
---
>     public Property secondOfMinute() {
>         return new Property(this, getChronology().secondOfMinute());
1121,1122c1122,1123
<     public ReadWritableInstantFieldProperty millisOfDay() {
<         return new ReadWritableInstantFieldProperty(this, getChronology().millisOfDay());
---
>     public Property millisOfDay() {
>         return new Property(this, getChronology().millisOfDay());
1130,1131c1131,1132
<     public ReadWritableInstantFieldProperty millisOfSecond() {
<         return new ReadWritableInstantFieldProperty(this, getChronology().millisOfSecond());
---
>     public Property millisOfSecond() {
>         return new Property(this, getChronology().millisOfSecond());
1164a1166,1372
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static final class Property extends AbstractReadableInstantFieldProperty {
>         
>         
>         private static final long serialVersionUID = -4481126543819298617L;
>         
>         
>         private final MutableDateTime iInstant;
>         
>         private final DateTimeField iField;
>         
>         
> 
> 
> 
> 
> 
>         Property(MutableDateTime instant, DateTimeField field) {
>             super();
>             iInstant = instant;
>             iField = field;
>         }
>         
>         
>         
> 
> 
> 
> 
>         public DateTimeField getField() {
>             return iField;
>         }
>         
>         
> 
> 
> 
> 
>         public ReadableInstant getReadableInstant() {
>             return iInstant;
>         }
>         
>         
> 
> 
> 
> 
>         public MutableDateTime getMutableDateTime() {
>             return iInstant;
>         }
>         
>         
>         
> 
> 
> 
> 
> 
> 
>         public MutableDateTime add(int value) {
>             iInstant.setMillis(getField().add(iInstant.getMillis(), value));
>             return iInstant;
>         }
>         
>         
> 
> 
> 
> 
> 
> 
>         public MutableDateTime add(long value) {
>             iInstant.setMillis(getField().add(iInstant.getMillis(), value));
>             return iInstant;
>         }
>         
>         
> 
> 
> 
> 
> 
> 
>         public MutableDateTime addWrapField(int value) {
>             iInstant.setMillis(getField().addWrapField(iInstant.getMillis(), value));
>             return iInstant;
>         }
>         
>         
>         
> 
> 
> 
> 
> 
> 
>         public MutableDateTime set(int value) {
>             iInstant.setMillis(getField().set(iInstant.getMillis(), value));
>             return iInstant;
>         }
>         
>         
> 
> 
> 
> 
> 
> 
> 
> 
>         public MutableDateTime set(String text, Locale locale) {
>             iInstant.setMillis(getField().set(iInstant.getMillis(), text, locale));
>             return iInstant;
>         }
>         
>         
> 
> 
> 
> 
> 
> 
> 
>         public MutableDateTime set(String text) {
>             set(text, null);
>             return iInstant;
>         }
>         
>         
>         
> 
> 
> 
> 
> 
>         public MutableDateTime roundFloor() {
>             iInstant.setMillis(getField().roundFloor(iInstant.getMillis()));
>             return iInstant;
>         }
> 
>         
> 
> 
> 
> 
> 
>         public MutableDateTime roundCeiling() {
>             iInstant.setMillis(getField().roundCeiling(iInstant.getMillis()));
>             return iInstant;
>         }
>         
>         
> 
> 
> 
> 
> 
> 
>         public MutableDateTime roundHalfFloor() {
>             iInstant.setMillis(getField().roundHalfFloor(iInstant.getMillis()));
>             return iInstant;
>         }
>         
>         
> 
> 
> 
> 
> 
> 
>         public MutableDateTime roundHalfCeiling() {
>             iInstant.setMillis(getField().roundHalfCeiling(iInstant.getMillis()));
>             return iInstant;
>         }
> 
>         
> 
> 
> 
> 
> 
> 
>         public MutableDateTime roundHalfEven() {
>             iInstant.setMillis(getField().roundHalfEven(iInstant.getMillis()));
>             return iInstant;
>         }
