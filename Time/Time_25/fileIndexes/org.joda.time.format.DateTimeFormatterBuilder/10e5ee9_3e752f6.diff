66d65
< import org.joda.time.DateTimeUtils;
1004c1003
<             implements DateTimeFormatter, BoundDateTimePrinter {
---
>             implements DateTimeFormatter {
1077c1076
<             implements DateTimeFormatter, BoundDateTimePrinter {
---
>             implements DateTimeFormatter {
1215,1220d1213
<         public BoundDateTimePrinter bindPrinter(Chronology chrono) {
<             chrono = DateTimeUtils.getChronology(chrono);
<             DateTimeField field = iFieldType.getField(chrono.withUTC());
<             return new BoundUnpaddedNumber(field, iMaxParsedDigits, iSigned);
<         }
< 
1273,1305d1265
<     static class BoundUnpaddedNumber
<             extends UnpaddedNumber
<             implements BoundDateTimePrinter {
< 
<         private final DateTimeField iField;
< 
<         BoundUnpaddedNumber(DateTimeField field, int maxParsedDigits, boolean signed) {
<             super(field.getType(), maxParsedDigits, signed);
<             iField = field;
<         }
< 
<         protected void printTo(StringBuffer buf,
<                                long instantLocal, Chronology chronoLocal,
<                                long instant, Chronology chrono) {
<             try {
<                 FormatUtils.appendUnpaddedInteger(buf, iField.get(instantLocal));
<             } catch (RuntimeException e) {
<                 buf.append('\ufffd');
<             }
<         }
< 
<         protected void printTo(Writer out,
<                                long instantLocal, Chronology chronoLocal,
<                                long instant, Chronology chrono) throws IOException {
<             try {
<                 FormatUtils.writeUnpaddedInteger(out, iField.get(instantLocal));
<             } catch (RuntimeException e) {
<                 out.write('\ufffd');
<             }
<         }
<     }
< 
<     
1317,1322d1276
<         public BoundDateTimePrinter bindPrinter(Chronology chrono) {
<             chrono = DateTimeUtils.getChronology(chrono);
<             DateTimeField field = iFieldType.getField(chrono.withUTC());
<             return new BoundPaddedNumber(field, iMaxParsedDigits, iSigned, iMinPrintedDigits);
<         }
< 
1375,1409d1328
<     static class BoundPaddedNumber
<             extends PaddedNumber
<             implements BoundDateTimePrinter {
< 
<         private final DateTimeField iField;
< 
<         BoundPaddedNumber(DateTimeField field, int maxParsedDigits,
<                           boolean signed, int minPrintedDigits)
<         {
<             super(field.getType(), maxParsedDigits, signed, minPrintedDigits);
<             iField = field;
<         }
< 
<         protected void printTo(StringBuffer buf,
<                                long instantLocal, Chronology chronoLocal,
<                                long instant, Chronology chrono) {
<             try {
<                 FormatUtils.appendPaddedInteger(buf, iField.get(instantLocal), iMinPrintedDigits);
<             } catch (RuntimeException e) {
<                 appendUnknownString(buf, iMinPrintedDigits);
<             }
<         }
< 
<         protected void printTo(Writer out,
<                                long instantLocal, Chronology chronoLocal,
<                                long instant, Chronology chrono) throws IOException {
<             try {
<                 FormatUtils.writePaddedInteger(out, iField.get(instantLocal), iMinPrintedDigits);
<             } catch (RuntimeException e) {
<                 printUnknownString(out, iMinPrintedDigits);
<             }
<         }
<     }
< 
<     
1412c1331
<             implements DateTimeFormatter, BoundDateTimePrinter {
---
>             implements DateTimeFormatter {
1535c1454
<             implements DateTimeFormatter, BoundDateTimePrinter {
---
>             implements DateTimeFormatter {
1659,1664d1577
<         public BoundDateTimePrinter bindPrinter(Chronology chrono) {
<             chrono = DateTimeUtils.getChronology(chrono);
<             DateTimeField field = iFieldType.getField(chrono.withUTC());
<             return new BoundFraction(field, iMinDigits, iMaxDigits);
<         }
< 
1872,2004d1784
<     static class BoundFraction
<             extends Fraction
<             implements BoundDateTimePrinter {
< 
<         private final DateTimeField iField;
<         private final long iScalar;
<         private final long iRangeMillis;
< 
<         BoundFraction(DateTimeField field, int minDigits, int maxDigits) {
<             super(field.getType(), minDigits, maxDigits);
<             iField = field;
<             iMinDigits = minDigits;
<             
<             long rangeMillis = field.getDurationField().getUnitMillis();
<             long scalar;
<             while (true) {
<                 switch (maxDigits) {  
<                 default: scalar = 1L; break;
<                 case 1:  scalar = 10L; break;
<                 case 2:  scalar = 100L; break;
<                 case 3:  scalar = 1000L; break;
<                 case 4:  scalar = 10000L; break;
<                 case 5:  scalar = 100000L; break;
<                 case 6:  scalar = 1000000L; break;
<                 case 7:  scalar = 10000000L; break;
<                 case 8:  scalar = 100000000L; break;
<                 case 9:  scalar = 1000000000L; break;
<                 case 10: scalar = 10000000000L; break;
<                 case 11: scalar = 100000000000L; break;
<                 case 12: scalar = 1000000000000L; break;
<                 case 13: scalar = 10000000000000L; break;
<                 case 14: scalar = 100000000000000L; break;
<                 case 15: scalar = 1000000000000000L; break;
<                 case 16: scalar = 10000000000000000L; break;
<                 case 17: scalar = 100000000000000000L; break;
<                 case 18: scalar = 1000000000000000000L; break;
<                 }
<                 if (((rangeMillis * scalar) / scalar) == rangeMillis) {
<                     break;
<                 }
<                 
<                 maxDigits--;
<             }
<             iMaxDigits = maxDigits;
<             iScalar = scalar;
<             iRangeMillis = rangeMillis;
<         }
< 
<         protected void printTo(StringBuffer buf, Writer out, long instantLocal, Chronology chronoLocal)
<             throws IOException
<         {
<             DateTimeField field = iField;
<             int minDigits = iMinDigits;
< 
<             long fraction;
<             try {
<                 fraction = field.remainder(instantLocal);
<             } catch (RuntimeException e) {
<                 if (buf != null) {
<                     appendUnknownString(buf, minDigits);
<                 } else {
<                     printUnknownString(out, minDigits);
<                 }
<                 return;
<             }
< 
<             if (fraction == 0) {
<                 if (buf != null) {
<                     while (--minDigits >= 0) {
<                         buf.append('0');
<                     }
<                 } else {
<                     while (--minDigits >= 0) {
<                         out.write('0');
<                     }
<                 }
<                 return;
<             }
< 
<             String str;
<             long scaled = fraction * iScalar / iRangeMillis;
<             int maxDigits = iMaxDigits;
<             
<             if ((scaled & 0x7fffffff) == scaled) {
<                 str = Integer.toString((int) scaled);
<             } else {
<                 str = Long.toString(scaled);
<             }
< 
<             int length = str.length();
<             int digits = maxDigits;
<             while (length < digits) {
<                 if (buf != null) {
<                     buf.append('0');
<                 } else {
<                     out.write('0');
<                 }
<                 minDigits--;
<                 digits--;
<             }
< 
<             if (minDigits < digits) {
<                 
<                 while (minDigits < digits) {
<                     if (length <= 1 || str.charAt(length - 1) != '0') {
<                         break;
<                     }
<                     digits--;
<                     length--;
<                 }
<                 if (length < str.length()) {
<                     if (buf != null) {
<                         for (int i=0; i<length; i++) {
<                             buf.append(str.charAt(i));
<                         }
<                     } else {
<                         for (int i=0; i<length; i++) {
<                             out.write(str.charAt(i));
<                         }
<                     }
<                     return;
<                 }
<             }
< 
<             if (buf != null) {
<                 buf.append(str);
<             } else {
<                 out.write(str);
<             }
<         }
<     }
< 
<     
2007c1787
<             implements DateTimeFormatter, BoundDateTimePrinter {
---
>             implements DateTimeFormatter {
2364c2144
<             implements DateTimePrinter, BoundDateTimePrinter {
---
>             implements DateTimePrinter {
2413c2193
<             implements DateTimeFormatter, BoundDateTimePrinter {
---
>             implements DateTimeFormatter {
2467,2481d2246
<         public BoundDateTimePrinter bindPrinter(Chronology chrono) {
<             BaseDateTimeFormatter[] elements = iPrinters;
<             if (elements == null) {
<                 throw new UnsupportedOperationException();
<             }
< 
<             int len = elements.length;
<             BaseDateTimeFormatter[] array = new BaseDateTimeFormatter[len];
<             for (int i = 0; i < len; i++) {
<                 BoundDateTimePrinter bound = ((DateTimePrinter) elements[i]).bindPrinter(chrono);
<                 array[i] = (BaseDateTimeFormatter) bound;
<             }
<             return new Composite(this, array);
<         }
< 
2485c2250
<     
---
> 
