1268c1268
<         private final long iScaler;
---
>         private final long iScalar;
1285c1285
<             long scaler;
---
>             long scalar;
1288,1306c1288,1306
<                 default: scaler = 1L; break;
<                 case 1:  scaler = 10L; break;
<                 case 2:  scaler = 100L; break;
<                 case 3:  scaler = 1000L; break;
<                 case 4:  scaler = 10000L; break;
<                 case 5:  scaler = 100000L; break;
<                 case 6:  scaler = 1000000L; break;
<                 case 7:  scaler = 10000000L; break;
<                 case 8:  scaler = 100000000L; break;
<                 case 9:  scaler = 1000000000L; break;
<                 case 10: scaler = 10000000000L; break;
<                 case 11: scaler = 100000000000L; break;
<                 case 12: scaler = 1000000000000L; break;
<                 case 13: scaler = 10000000000000L; break;
<                 case 14: scaler = 100000000000000L; break;
<                 case 15: scaler = 1000000000000000L; break;
<                 case 16: scaler = 10000000000000000L; break;
<                 case 17: scaler = 100000000000000000L; break;
<                 case 18: scaler = 1000000000000000000L; break;
---
>                 default: scalar = 1L; break;
>                 case 1:  scalar = 10L; break;
>                 case 2:  scalar = 100L; break;
>                 case 3:  scalar = 1000L; break;
>                 case 4:  scalar = 10000L; break;
>                 case 5:  scalar = 100000L; break;
>                 case 6:  scalar = 1000000L; break;
>                 case 7:  scalar = 10000000L; break;
>                 case 8:  scalar = 100000000L; break;
>                 case 9:  scalar = 1000000000L; break;
>                 case 10: scalar = 10000000000L; break;
>                 case 11: scalar = 100000000000L; break;
>                 case 12: scalar = 1000000000000L; break;
>                 case 13: scalar = 10000000000000L; break;
>                 case 14: scalar = 100000000000000L; break;
>                 case 15: scalar = 1000000000000000L; break;
>                 case 16: scalar = 10000000000000000L; break;
>                 case 17: scalar = 100000000000000000L; break;
>                 case 18: scalar = 1000000000000000000L; break;
1308c1308
<                 if (((iRangeMillis * scaler) / scaler) == iRangeMillis) {
---
>                 if (((iRangeMillis * scalar) / scalar) == iRangeMillis) {
1316c1316
<             iScaler = scaler;
---
>             iScalar = scalar;
1372c1372
<             long scaled = fraction * iScaler / iRangeMillis;
---
>             long scaled = fraction * iScalar / iRangeMillis;
1430c1430
<             long n = iRangeMillis;
---
>             long n = iRangeMillis * 10;
1438,1441c1438,1440
<                 if (c != '0') {
<                     value += (c - '0') * n / 10;
<                 }
<                 n /= 10;
---
>                 long nn = n / 10;
>                 value += (c - '0') * nn;
>                 n = nn;
1442a1442,1443
> 
>             value /= 10;
