1a2,698
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> package org.joda.time;
> 
> import java.io.Serializable;
> import java.util.Locale;
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> public abstract class DateTimeField implements Serializable {
> 
>     
>     private final String iName;
> 
>     
> 
> 
> 
> 
> 
>     protected DateTimeField(String name) {
>         super();
>         
>         iName = name;
>     }
>     
>     
> 
> 
> 
> 
>     public String getName() {
>         return iName;
>     }
> 
>     
>     
>     
> 
> 
> 
> 
> 
>     public abstract int get(long millis);
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public String getAsText(long millis, Locale locale) {
>         return Integer.toString(get(millis));
>     }
> 
>     
> 
> 
> 
> 
> 
> 
>     public final String getAsText(long millis) {
>         return getAsText(millis, null);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public String getAsShortText(long millis, Locale locale) {
>         return getAsText(millis, locale);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
>     public final String getAsShortText(long millis) {
>         return getAsShortText(millis, null);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public abstract long add(long millis, int value);
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public abstract long add(long millis, long value);
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public long addWrapped(long millis, int value) {
>         int current = get(millis);
>         int wrapped = getWrappedValue
>             (current, value, getMinimumValue(millis), getMaximumValue(millis));
>         return set(millis, wrapped);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public long getDifference(long minuendMillis, long subtrahendMillis) {
>         if (minuendMillis < subtrahendMillis) {
>             return -getDifference(subtrahendMillis, minuendMillis);
>         }
> 
>         long difference = (minuendMillis - subtrahendMillis) / getUnitMillis();
>         if (add(subtrahendMillis, difference) < minuendMillis) {
>             do {
>                 difference++;
>             } while (add(subtrahendMillis, difference) <= minuendMillis);
>             difference--;
>         } else if (add(subtrahendMillis, difference) > minuendMillis) {
>             do {
>                 difference--;
>             } while (add(subtrahendMillis, difference) > minuendMillis);
>         }
>         return difference;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public abstract long set(long millis, int value);
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public long set(long millis, String text, Locale locale) {
>         try {
>             return set(millis, Integer.parseInt(text));
>         } catch (NumberFormatException ex) {
>             throw new IllegalArgumentException("Invalid " + getName() + " text: " + text);
>         }
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public final long set(long millis, String text) {
>         return set(millis, text, null);
>     }
> 
>     
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public boolean isLeap(long millis) {
>         return false;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     public int getLeapAmount(long millis) {
>         return 0;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public abstract long getUnitMillis();
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public abstract long getRangeMillis();
> 
>     
> 
> 
> 
> 
> 
>     public abstract int getMinimumValue();
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     public int getMinimumValue(long millis) {
>         return getMinimumValue();
>     }
> 
>     
> 
> 
> 
> 
> 
>     public abstract int getMaximumValue();
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     public int getMaximumValue(long millis) {
>         return getMaximumValue();
>     }
> 
>     
> 
> 
> 
> 
> 
> 
>     public int getMaximumTextLength(Locale locale) {
>         int max = getMaximumValue();
>         if (max >= 0) {
>             if (max < 10) {
>                 return 1;
>             } else if (max < 100) {
>                 return 2;
>             } else if (max < 1000) {
>                 return 3;
>             }
>         }
>         return Integer.toString(max).length();
>     }
> 
>     
> 
> 
> 
> 
> 
> 
>     public int getMaximumShortTextLength(Locale locale) {
>         return getMaximumTextLength(locale);
>     }
> 
>     
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public abstract long roundFloor(long millis);
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public long roundCeiling(long millis) {
>         long newMillis = roundFloor(millis);
>         if (newMillis != millis) {
>             millis = add(newMillis, 1);
>         }
>         return millis;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public long roundHalfFloor(long millis) {
>         long floor = roundFloor(millis);
>         long ceiling = roundCeiling(millis);
> 
>         long diffFromFloor = millis - floor;
>         long diffToCeiling = ceiling - millis;
> 
>         if (diffFromFloor <= diffToCeiling) {
>             
>             return floor;
>         } else {
>             return ceiling;
>         }
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public long roundHalfCeiling(long millis) {
>         long floor = roundFloor(millis);
>         long ceiling = roundCeiling(millis);
> 
>         long diffFromFloor = millis - floor;
>         long diffToCeiling = ceiling - millis;
> 
>         if (diffToCeiling <= diffFromFloor) {
>             
>             return ceiling;
>         } else {
>             return floor;
>         }
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public long roundHalfEven(long millis) {
>         long floor = roundFloor(millis);
>         long ceiling = roundCeiling(millis);
> 
>         long diffFromFloor = millis - floor;
>         long diffToCeiling = ceiling - millis;
> 
>         if (diffFromFloor < diffToCeiling) {
>             
>             return floor;
>         } else if (diffToCeiling < diffFromFloor) {
>             
>             return ceiling;
>         } else {
>             
>             
>             if ((get(ceiling) & 1) == 0) {
>                 return ceiling;
>             }
>             return floor;
>         }
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public long remainder(long millis) {
>         return millis - roundFloor(millis);
>     }
> 
>     
>     
>     
> 
> 
> 
> 
> 
> 
> 
>     protected void verifyValueBounds(int value, int lowerBound, int upperBound) {
>         if ((value < lowerBound) || (value > upperBound)) {
>             throw new IllegalArgumentException(
>                 "Value: "
>                     + value
>                     + " for "
>                     + iName
>                     + " must be in the range ("
>                     + lowerBound
>                     + ','
>                     + upperBound
>                     + ')');
>         }
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     protected final int getWrappedValue(int currentValue, int wrapValue,
>                                         int minValue, int maxValue) {
>         return getWrappedValue(currentValue + wrapValue, minValue, maxValue);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     protected final int getWrappedValue(int value, int minValue, int maxValue) {
>         if (minValue >= maxValue) {
>             throw new IllegalArgumentException("MIN > MAX");
>         }
> 
>         int wrapRange = maxValue - minValue + 1;
>         value -= minValue;
> 
>         if (value >= 0) {
>             return (value % wrapRange) + minValue;
>         }
> 
>         int remByRange = (-value) % wrapRange;
> 
>         if (remByRange == 0) {
>             return 0 + minValue;
>         }
>         return (wrapRange - remByRange) + minValue;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     protected long addLong(long millis, long value) {
>         int i_value = (int)value;
>         if (i_value == value) {
>             return add(millis, i_value);
>         }
>         throw new IllegalArgumentException
>             ("Magnitude of add amount is too large: " + value);
>     }
> 
>     
> 
> 
> 
> 
>     public String toString() {
>         return "DateTimeField[" + iName + ']';
>     }
>     
> }
