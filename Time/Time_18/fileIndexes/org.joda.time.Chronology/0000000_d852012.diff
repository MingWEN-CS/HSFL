1a2,372
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> package org.joda.time;
> 
> import java.io.Serializable;
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> public abstract class Chronology implements Serializable {
>     
>     
> 
> 
>     protected Chronology() {
>         super();
>     }
> 
>     
> 
> 
> 
> 
> 
>     public abstract DateTimeZone getDateTimeZone();
> 
>     
> 
> 
> 
> 
> 
> 
>     public abstract Chronology withUTC();
>     
>     
> 
> 
> 
> 
> 
> 
>     public abstract Chronology withDateTimeZone(DateTimeZone zone);
> 
>     
> 
> 
> 
> 
> 
> 
>     public long getTimeOnlyMillis(long millis) {
>         return dayOfYear().remainder(millis);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
>     public long getDateOnlyMillis(long millis) {
>         return dayOfYear().roundFloor(millis);
>     }
> 
>     
>     
>     
> 
> 
> 
> 
> 
>     public DateTimeField millisOfSecond() {
>         throw new UnsupportedOperationException("millisOfSecond is unsupported for " + getClass().getName());
>     }
> 
>     
> 
> 
> 
> 
> 
>     public DateTimeField millisOfDay() {
>         throw new UnsupportedOperationException("millisOfDay is unsupported for " + getClass().getName());
>     }
> 
>     
>     
>     
> 
> 
> 
> 
> 
>     public DateTimeField secondOfMinute() {
>         throw new UnsupportedOperationException("secondOfMinute is unsupported for " + getClass().getName());
>     }
> 
>     
> 
> 
> 
> 
> 
>     public DateTimeField secondOfDay() {
>         throw new UnsupportedOperationException("secondOfDay is unsupported for " + getClass().getName());
>     }
> 
>     
>     
>     
> 
> 
> 
> 
> 
>     public DateTimeField minuteOfHour() {
>         throw new UnsupportedOperationException("minuteOfHour is unsupported for " + getClass().getName());
>     }
> 
>     
> 
> 
> 
> 
> 
>     public DateTimeField minuteOfDay() {
>         throw new UnsupportedOperationException("minuteOfDay is unsupported for " + getClass().getName());
>     }
> 
>     
>     
>     
> 
> 
> 
> 
> 
>     public DateTimeField hourOfDay() {
>         throw new UnsupportedOperationException("hourOfDay is unsupported for " + getClass().getName());
>     }
> 
>     
> 
> 
> 
> 
> 
>     public DateTimeField clockhourOfDay() {
>         throw new UnsupportedOperationException("clockhourOfDay is unsupported for " + getClass().getName());
>     }
> 
>     
> 
> 
> 
> 
> 
>     public DateTimeField hourOfHalfday() {
>         throw new UnsupportedOperationException("hourOfHalfday is unsupported for " + getClass().getName());
>     }
> 
>     
> 
> 
> 
> 
> 
>     public DateTimeField clockhourOfHalfday() {
>         throw new UnsupportedOperationException("clockhourOfHalfday is unsupported for " + getClass().getName());
>     }
> 
>     
> 
> 
> 
> 
> 
>     public DateTimeField halfdayOfDay() {
>         throw new UnsupportedOperationException("halfdayOfDay is unsupported for " + getClass().getName());
>     }
> 
>     
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public DateTimeField dayOfWeek() {
>         throw new UnsupportedOperationException("dayOfWeek is unsupported for " + getClass().getName());
>     }
> 
>     
> 
> 
> 
> 
> 
>     public DateTimeField dayOfMonth() {
>         throw new UnsupportedOperationException("dayOfMonth is unsupported for " + getClass().getName());
>     }
> 
>     
> 
> 
> 
> 
> 
>     public DateTimeField dayOfYear() {
>         throw new UnsupportedOperationException("dayOfYear is unsupported for " + getClass().getName());
>     }
> 
>     
>     
>     
> 
> 
> 
> 
> 
>     public DateTimeField weekOfWeekyear() {
>         throw new UnsupportedOperationException("weekOfWeekyear is unsupported for " + getClass().getName());
>     }
> 
>     
> 
> 
> 
> 
> 
>     public DateTimeField weekyear() {
>         throw new UnsupportedOperationException("weekyear is unsupported for " + getClass().getName());
>     }
> 
>     
>     
>     
> 
> 
> 
> 
> 
>     public DateTimeField monthOfYear() {
>         throw new UnsupportedOperationException("monthOfYear is unsupported for " + getClass().getName());
>     }
> 
>     
>     
>     
> 
> 
> 
> 
> 
>     public DateTimeField year() {
>         throw new UnsupportedOperationException("year is unsupported for " + getClass().getName());
>     }
> 
>     
> 
> 
> 
> 
> 
>     public DateTimeField yearOfEra() {
>         throw new UnsupportedOperationException("yearOfEra is unsupported for " + getClass().getName());
>     }
> 
>     
> 
> 
> 
> 
> 
>     public DateTimeField yearOfCentury() {
>         throw new UnsupportedOperationException("yearOfCentury is unsupported for " + getClass().getName());
>     }
> 
>     
> 
> 
> 
> 
> 
>     public DateTimeField centuryOfEra() {
>         throw new UnsupportedOperationException("centuryOfEra is unsupported for " + getClass().getName());
>     }
> 
>     
> 
> 
> 
> 
> 
>     public DateTimeField era() {
>         throw new UnsupportedOperationException("era is unsupported for " + getClass().getName());
>     }
> 
> }
