1a2,243
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> package org.joda.time.tz;
> 
> import java.io.File;
> import java.io.FileInputStream;
> import java.io.IOException;
> import java.io.InputStream;
> import java.io.ObjectInputStream;
> import java.lang.ref.SoftReference;
> import java.util.Collections;
> import java.util.Map;
> import java.util.Set;
> 
> import org.joda.time.DateTimeZone;
> 
> 
> 
> 
> 
> 
> 
> public class ZoneInfoProvider implements Provider {
>     private static Map loadZoneInfoMap(InputStream in) throws IOException {
>         ObjectInputStream oin = new ObjectInputStream(in);
>         Map map;
>         try {
>             map = (Map)oin.readObject();
>         } catch (ClassNotFoundException e) {
>             throw new IOException(e.toString());
>         } finally {
>             try {
>                 oin.close();
>             } catch (IOException e) {
>             }
>         }
>         map.put("UTC", new SoftReference(DateTimeZone.UTC));
>         return map;
>     }
> 
>     private final File iFileDir;
>     private final String iResourcePath;
>     private ClassLoader iLoader;
> 
>     
>     private final Map iZoneInfoMap;
> 
>     
> 
> 
> 
> 
>     public ZoneInfoProvider(File fileDir) throws IOException {
>         if (fileDir == null) {
>             throw new IllegalArgumentException("No file directory provided");
>         }
>         if (!fileDir.exists()) {
>             throw new IOException("File directory doesn't exist: " + fileDir);
>         }
>         if (!fileDir.isDirectory()) {
>             throw new IOException("File doesn't refer to a directory: " + fileDir);
>         }
> 
>         iFileDir = fileDir;
>         iResourcePath = null;
> 
>         iZoneInfoMap = loadZoneInfoMap(openResource("ZoneInfoMap"));
>     }
> 
>     
> 
> 
> 
> 
> 
> 
>     public ZoneInfoProvider(String resourcePath) throws IOException {
>         this(resourcePath, null);
>         iLoader = getClass().getClassLoader();
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     public ZoneInfoProvider(String resourcePath, ClassLoader loader)
>         throws IOException
>     {
>         if (resourcePath == null) {
>             throw new IllegalArgumentException("No resource path provided");
>         }
>         if (!resourcePath.endsWith("/")) {
>             resourcePath += '/';
>         }
> 
>         iFileDir = null;
>         iResourcePath = resourcePath;
>         iLoader = loader;
> 
>         iZoneInfoMap = loadZoneInfoMap(openResource("ZoneInfoMap"));
>     }
> 
>     
> 
> 
> 
> 
>     public synchronized DateTimeZone getDateTimeZone(String id) {
>         if (id == null) {
>             return null;
>         }
> 
>         Object obj = iZoneInfoMap.get(id);
>         if (obj == null) {
>             return null;
>         }
> 
>         if (id.equals(obj)) {
>             
>             return loadZoneData(id);
>         }
> 
>         if (obj instanceof SoftReference) {
>             DateTimeZone tz = (DateTimeZone)((SoftReference)obj).get();
>             if (tz != null) {
>                 return tz;
>             }
>             
>             return loadZoneData(id);
>         }
> 
>         
>         return getDateTimeZone((String)obj);
>     }
> 
>     public synchronized Set getAvailableIDs() {
>         return Collections.unmodifiableSet(iZoneInfoMap.keySet());
>     }
> 
>     
> 
> 
> 
>     protected void uncaughtException(Exception e) {
>         Thread t = Thread.currentThread();
>         t.getThreadGroup().uncaughtException(t, e);
>     }
> 
>     private InputStream openResource(String name) throws IOException {
>         InputStream in;
>         if (iFileDir != null) {
>             in = new FileInputStream(new File(iFileDir, name));
>         } else {
>             String path = iResourcePath.concat(name);
>             if (iLoader != null) {
>                 in = iLoader.getResourceAsStream(path);
>             } else {
>                 in = ClassLoader.getSystemResourceAsStream(path);
>             }
>             if (in == null) {
>                 throw new IOException("Resource not found: " + path);
>             }
>         }
>         return in;
>     }
> 
>     private DateTimeZone loadZoneData(String id) {
>         InputStream in = null;
>         try {
>             in = openResource(id);
>             DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);
>             iZoneInfoMap.put(id, new SoftReference(tz));
>             return tz;
>         } catch (IOException e) {
>             uncaughtException(e);
>             iZoneInfoMap.remove(id);
>             return null;
>         } finally {
>             try {
>                 if (in != null) {
>                     in.close();
>                 }
>             } catch (IOException e) {
>             }
>         }
>     }
> }
