




















































package org.joda.time.field;

import java.io.Serializable;
import java.util.Locale;

import org.joda.time.DateTimeField;
import org.joda.time.DurationField;
import org.joda.time.partial.PartialInstant;
















public abstract class BaseDateTimeField extends DateTimeField implements Serializable {

    
    private static final long serialVersionUID = -4388055220581798589L;

    
    private final String iName;

    


    protected BaseDateTimeField(String name) {
        super();
        if (name == null) {
            throw new IllegalArgumentException("The name must not be null");
        }
        iName = name;
    }
    
    public final String getName() {
        return iName;
    }

    


    public final boolean isSupported() {
        return true;
    }

    
    
    





    public abstract int get(long instant);

    
    










    public String getAsText(long instant, Locale locale) {
        return getAsText(get(instant), locale);
    }

    










    public String getAsText(PartialInstant partial, int fieldValue, Locale locale) {
        return getAsText(fieldValue, locale);
    }

    












    protected String getAsText(int fieldValue, Locale locale) {
        return Integer.toString(fieldValue);
    }

    
    









    public String getAsShortText(long instant, Locale locale) {
        return getAsShortText(get(instant), locale);
    }

    










    public String getAsShortText(PartialInstant partial, int fieldValue, Locale locale) {
        return getAsShortText(fieldValue, locale);
    }

    












    protected String getAsShortText(int fieldValue, Locale locale) {
        return getAsText(fieldValue, locale);
    }

    
    




















    public long add(long instant, int value) {
        return getDurationField().add(instant, value);
    }

    









    public long add(long instant, long value) {
        return getDurationField().add(instant, value);
    }

    























    public long addWrapped(long instant, int value) {
        int current = get(instant);
        int wrapped = FieldUtils.getWrappedValue
            (current, value, getMinimumValue(instant), getMaximumValue(instant));
        return set(instant, wrapped);
    }

    
    


















    public int getDifference(long minuendInstant, long subtrahendInstant) {
        return getDurationField().getDifference(minuendInstant, subtrahendInstant);
    }

    


















    public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {
        return getDurationField().getDifferenceAsLong(minuendInstant, subtrahendInstant);
    }

    















    public abstract long set(long instant, int value);

    
















    public int[] set(PartialInstant instant, int fieldIndex, int value) {
        FieldUtils.verifyValueBounds(this, value, getMinimumValue(instant), getMaximumValue(instant));
        int[] array = instant.getValues();
        array[fieldIndex] = value;
        return array;
    }

    
















    public long set(long instant, String text, Locale locale) {
        try {
            return set(instant, Integer.parseInt(text));
        } catch (NumberFormatException ex) {
            throw new IllegalArgumentException("Invalid " + getName() + " text: " + text);
        }
    }

    
    
    






    public abstract DurationField getDurationField();

    





    public abstract DurationField getRangeDurationField();

    









    public boolean isLeap(long instant) {
        return false;
    }

    







    public int getLeapAmount(long instant) {
        return 0;
    }

    





    public DurationField getLeapDurationField() {
        return null;
    }

    





    public abstract int getMinimumValue();

    







    public int getMinimumValue(long instant) {
        return getMinimumValue();
    }

    







    public int getMinimumValue(PartialInstant instant) {
        return getMinimumValue();
    }

    





    public abstract int getMaximumValue();

    







    public int getMaximumValue(long instant) {
        return getMaximumValue();
    }

    







    public int getMaximumValue(PartialInstant instant) {
        return getMaximumValue();
    }

    






    public int getMaximumTextLength(Locale locale) {
        int max = getMaximumValue();
        if (max >= 0) {
            if (max < 10) {
                return 1;
            } else if (max < 100) {
                return 2;
            } else if (max < 1000) {
                return 3;
            }
        }
        return Integer.toString(max).length();
    }

    






    public int getMaximumShortTextLength(Locale locale) {
        return getMaximumTextLength(locale);
    }

    
    
    











    public abstract long roundFloor(long instant);

    















    public long roundCeiling(long instant) {
        long newInstant = roundFloor(instant);
        if (newInstant != instant) {
            instant = add(newInstant, 1);
        }
        return instant;
    }

    








    public long roundHalfFloor(long instant) {
        long floor = roundFloor(instant);
        long ceiling = roundCeiling(instant);

        long diffFromFloor = instant - floor;
        long diffToCeiling = ceiling - instant;

        if (diffFromFloor <= diffToCeiling) {
            
            return floor;
        } else {
            return ceiling;
        }
    }

    








    public long roundHalfCeiling(long instant) {
        long floor = roundFloor(instant);
        long ceiling = roundCeiling(instant);

        long diffFromFloor = instant - floor;
        long diffToCeiling = ceiling - instant;

        if (diffToCeiling <= diffFromFloor) {
            
            return ceiling;
        } else {
            return floor;
        }
    }

    












    public long roundHalfEven(long instant) {
        long floor = roundFloor(instant);
        long ceiling = roundCeiling(instant);

        long diffFromFloor = instant - floor;
        long diffToCeiling = ceiling - instant;

        if (diffFromFloor < diffToCeiling) {
            
            return floor;
        } else if (diffToCeiling < diffFromFloor) {
            
            return ceiling;
        } else {
            
            
            if ((get(ceiling) & 1) == 0) {
                return ceiling;
            }
            return floor;
        }
    }

    















    public long remainder(long instant) {
        return instant - roundFloor(instant);
    }

    




    public String toString() {
        return "DateTimeField[" + getName() + ']';
    }

}
