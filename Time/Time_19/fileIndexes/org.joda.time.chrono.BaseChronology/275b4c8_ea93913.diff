58a59
> import org.joda.time.DateTimeFieldType;
235a237,297
>         }
>     }
> 
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public DateTimeField getField(DateTimeFieldType type) {
>         if (type == DateTimeFieldType.millisOfSecond()) {
>             return millisOfSecond();
>         } else if (type == DateTimeFieldType.millisOfDay()) {
>             return millisOfDay();
>         } else if (type == DateTimeFieldType.secondOfMinute()) {
>             return secondOfMinute();
>         } else if (type == DateTimeFieldType.secondOfDay()) {
>             return secondOfDay();
>         } else if (type == DateTimeFieldType.minuteOfHour()) {
>             return minuteOfHour();
>         } else if (type == DateTimeFieldType.minuteOfDay()) {
>             return minuteOfDay();
>         } else if (type == DateTimeFieldType.hourOfDay()) {
>             return hourOfDay();
>         } else if (type == DateTimeFieldType.hourOfHalfday()) {
>             return hourOfHalfday();
>         } else if (type == DateTimeFieldType.clockhourOfDay()) {
>             return clockhourOfDay();
>         } else if (type == DateTimeFieldType.halfdayOfDay()) {
>             return halfdayOfDay();
>         } else if (type == DateTimeFieldType.clockhourOfHalfday()) {
>             return clockhourOfHalfday();
>         } else if (type == DateTimeFieldType.dayOfWeek()) {
>             return dayOfWeek();
>         } else if (type == DateTimeFieldType.dayOfMonth()) {
>             return dayOfMonth();
>         } else if (type == DateTimeFieldType.dayOfYear()) {
>             return dayOfYear();
>         } else if (type == DateTimeFieldType.weekOfWeekyear()) {
>             return weekOfWeekyear();
>         } else if (type == DateTimeFieldType.weekyear()) {
>             return weekyear();
>         } else if (type == DateTimeFieldType.monthOfYear()) {
>             return monthOfYear();
>         } else if (type == DateTimeFieldType.year()) {
>             return year();
>         } else if (type == DateTimeFieldType.yearOfEra()) {
>             return yearOfEra();
>         } else if (type == DateTimeFieldType.yearOfCentury()) {
>             return yearOfCentury();
>         } else if (type == DateTimeFieldType.centuryOfEra()) {
>             return centuryOfEra();
>         } else if (type == DateTimeFieldType.era()) {
>             return era();
>         } else {
>             throw new IllegalArgumentException("Unrecognised field: " + type);
