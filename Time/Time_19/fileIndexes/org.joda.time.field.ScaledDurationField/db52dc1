




















































package org.joda.time.field;

import org.joda.time.DurationField;











public class ScaledDurationField extends DecoratedDurationField {

    static final long serialVersionUID = -3205227092378684157L;

    private final int iScalar;

    







    public ScaledDurationField(DurationField field, String name, int scalar) {
        super(field, name);
        if (scalar == 0 || scalar == 1) {
            throw new IllegalArgumentException("The scalar must not be 0 or 1");
        }
        iScalar = scalar;
    }

    public int getValue(long duration) {
        return getWrappedField().getValue(duration) / iScalar;
    }

    public long getValueAsLong(long duration) {
        return getWrappedField().getValueAsLong(duration) / iScalar;
    }

    public int getValue(long duration, long instant) {
        return getWrappedField().getValue(duration, instant) / iScalar;
    }

    public long getValueAsLong(long duration, long instant) {
        return getWrappedField().getValueAsLong(duration, instant) / iScalar;
    }

    public long getMillis(int value) {
        return getWrappedField().getMillis(value * iScalar);
    }

    public long getMillis(long value) {
        return getWrappedField().getMillis(value * iScalar);
    }

    public long getMillis(int value, long instant) {
        return getWrappedField().getMillis(value * iScalar, instant);
    }

    public long getMillis(long value, long instant) {
        return getWrappedField().getMillis(value * iScalar, instant);
    }

    public long add(long instant, int value) {
        return getWrappedField().add(instant, value * iScalar);
    }

    public long add(long instant, long value) {
        return getWrappedField().add(instant, value * iScalar);
    }

    public int getDifference(long minuendInstant, long subtrahendInstant) {
        return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iScalar;
    }

    public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {
        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iScalar;
    }

    public long getUnitMillis() {
        return getWrappedField().getUnitMillis() * iScalar;
    }

    




    public int getScalar() {
        return iScalar;
    }
}
