45c45,46
< public abstract class AbstractPartial implements ReadablePartial {
---
> public abstract class AbstractPartial
>         implements ReadablePartial, Comparable {
284a286,402
>     }
> 
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public int compareTo(Object partial) {
>         if (this == partial) {
>             return 0;
>         }
>         ReadablePartial other = (ReadablePartial) partial;
>         if (size() != other.size()) {
>             throw new ClassCastException("ReadablePartial objects must have matching field types");
>         }
>         for (int i = 0, isize = size(); i < isize; i++) {
>             if (getFieldType(i) != other.getFieldType(i)) {
>                 throw new ClassCastException("ReadablePartial objects must have matching field types");
>             }
>         }
>         
>         for (int i = 0, isize = size(); i < isize; i++) {
>             if (getValue(i) > other.getValue(i)) {
>                 return 1;
>             }
>             if (getValue(i) < other.getValue(i)) {
>                 return -1;
>             }
>         }
>         return 0;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public boolean isAfter(ReadablePartial partial) {
>         if (partial == null) {
>             throw new IllegalArgumentException("Partial cannot be null");
>         }
>         return compareTo(partial) > 0;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public boolean isBefore(ReadablePartial partial) {
>         if (partial == null) {
>             throw new IllegalArgumentException("Partial cannot be null");
>         }
>         return compareTo(partial) < 0;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public boolean isEqual(ReadablePartial partial) {
>         if (partial == null) {
>             throw new IllegalArgumentException("Partial cannot be null");
>         }
>         return compareTo(partial) == 0;
