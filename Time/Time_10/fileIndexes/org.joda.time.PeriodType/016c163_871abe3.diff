56a57
> import java.util.Arrays;
58,61d58
< import org.joda.time.chrono.ISOChronology;
< import org.joda.time.field.MillisDurationField;
< import org.joda.time.field.ScaledDurationField;
< import org.joda.time.field.UnsupportedDurationField;
83,93c80,81
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< public abstract class PeriodType implements Serializable {
---
> public class PeriodType implements Serializable {
>     
96,131c84,89
<     private static final PeriodType MILLIS;
<     private static final PeriodType DAY_HOUR;
<     private static final PeriodType YEAR_DAY;
<     private static final PeriodType YEAR_WEEK;
<     private static final PeriodType YEAR_MONTH;
<     private static final PeriodType ALL;
<     private static final PeriodType DAY_HOUR_UTC;
<     private static final PeriodType YEAR_DAY_UTC;
<     private static final PeriodType YEAR_WEEK_UTC;
<     private static final PeriodType YEAR_MONTH_UTC;
<     private static final PeriodType ALL_UTC;
<     private static final PeriodType PRECISE_DAY_HOUR;
<     private static final PeriodType PRECISE_YEAR_DAY;
<     private static final PeriodType PRECISE_YEAR_WEEK;
<     private static final PeriodType PRECISE_YEAR_MONTH;
<     private static final PeriodType PRECISE_ALL;
< 
<     static {
<         MILLIS = new MillisType();
<         DAY_HOUR = new DayHourType(ISOChronology.getInstance());
<         YEAR_DAY = new YearDayType(ISOChronology.getInstance());
<         YEAR_WEEK = new YearWeekType(ISOChronology.getInstance());
<         YEAR_MONTH = new YearMonthType(ISOChronology.getInstance());
<         ALL = new AllType(ISOChronology.getInstance());
<         DAY_HOUR_UTC = new DayHourType(ISOChronology.getInstanceUTC());
<         YEAR_DAY_UTC = new YearDayType(ISOChronology.getInstanceUTC());
<         YEAR_WEEK_UTC = new YearWeekType(ISOChronology.getInstanceUTC());
<         YEAR_MONTH_UTC = new YearMonthType(ISOChronology.getInstanceUTC());
<         ALL_UTC = new AllType(ISOChronology.getInstanceUTC());
<         PRECISE_DAY_HOUR = new PreciseDayHourType(ISOChronology.getInstanceUTC());
<         PRECISE_YEAR_DAY = new PreciseYearDayType(ISOChronology.getInstanceUTC());
<         PRECISE_YEAR_WEEK = new PreciseYearWeekType(ISOChronology.getInstanceUTC());
<         PRECISE_YEAR_MONTH = new PreciseYearMonthType(ISOChronology.getInstanceUTC());
<         PRECISE_ALL = new PreciseAllType(ISOChronology.getInstanceUTC());
<     }
< 
---
>     private static PeriodType cStandard;
>     private static PeriodType cYMDTime;
>     private static PeriodType cYWDTime;
>     private static PeriodType cYDTime;
>     private static PeriodType cDTime;
>     private static PeriodType cTime;
133,139c91,98
< 
< 
< 
< 
<     public static PeriodType getMillisType() {
<         return MILLIS;
<     }
---
>     private static PeriodType cYears;
>     private static PeriodType cMonths;
>     private static PeriodType cWeeks;
>     private static PeriodType cDays;
>     private static PeriodType cHours;
>     private static PeriodType cMinutes;
>     private static PeriodType cSeconds;
>     private static PeriodType cMillis;
152,157d110
<     public static PeriodType getDayHourType() {
<         return DAY_HOUR;
<     }
< 
<     
< 
162,168c115,130
< 
< 
< 
< 
< 
<     public static PeriodType getDayHourTypeUTC() {
<         return DAY_HOUR_UTC;
---
>     public static PeriodType standard() {
>         PeriodType type = cStandard;
>         if (type == null) {
>             type = new PeriodType(
>                 "Standard",
>                 new DurationFieldType[] {
>                     DurationFieldType.years(), DurationFieldType.months(),
>                     DurationFieldType.weeks(), DurationFieldType.days(),
>                     DurationFieldType.hours(), DurationFieldType.minutes(),
>                     DurationFieldType.seconds(), DurationFieldType.millis(),
>                 },
>                 new int[] { 0, 1, 2, 3, 4, 5, 6, 7, }
>             );
>             cStandard = type;
>         }
>         return type;
185,188c147,160
< 
<     public static PeriodType getDayHourType(Chronology chrono) {
<         if (chrono == null || chrono.equals(ISOChronology.getInstance())) {
<             return getDayHourType();
---
>     public static PeriodType yearMonthDayTime() {
>         PeriodType type = cYMDTime;
>         if (type == null) {
>             type = new PeriodType(
>                 "YearMonthDayTime",
>                 new DurationFieldType[] {
>                     DurationFieldType.years(), DurationFieldType.months(),
>                     DurationFieldType.days(),
>                     DurationFieldType.hours(), DurationFieldType.minutes(),
>                     DurationFieldType.seconds(), DurationFieldType.millis(),
>                 },
>                 new int[] { 0, 1, -1, 2, 3, 4, 5, 6, }
>             );
>             cYMDTime = type;
190,193c162
<         if (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {
<             return getDayHourTypeUTC();
<         }
<         return new DayHourType(chrono);
---
>         return type;
197,199d165
<     
< 
< 
209,214d174
<     public static PeriodType getYearDayType() {
<         return YEAR_DAY;
<     }
< 
<     
< 
219,226c179,194
< 
< 
< 
< 
< 
< 
<     public static PeriodType getYearDayTypeUTC() {
<         return YEAR_DAY_UTC;
---
>     public static PeriodType yearWeekDayTime() {
>         PeriodType type = cYWDTime;
>         if (type == null) {
>             type = new PeriodType(
>                 "YearWeekDayTime",
>                 new DurationFieldType[] {
>                     DurationFieldType.years(),
>                     DurationFieldType.weeks(), DurationFieldType.days(),
>                     DurationFieldType.hours(), DurationFieldType.minutes(),
>                     DurationFieldType.seconds(), DurationFieldType.millis(),
>                 },
>                 new int[] { 0, -1, 1, 2, 3, 4, 5, 6, }
>             );
>             cYWDTime = type;
>         }
>         return type;
242,250c210,222
< 
< 
< 
<     public static PeriodType getYearDayType(Chronology chrono) {
<         if (chrono == null || chrono.equals(ISOChronology.getInstance())) {
<             return getYearDayType();
<         }
<         if (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {
<             return getYearDayTypeUTC();
---
>     public static PeriodType yearDayTime() {
>         PeriodType type = cYDTime;
>         if (type == null) {
>             type = new PeriodType(
>                 "YearDayTime",
>                 new DurationFieldType[] {
>                     DurationFieldType.years(), DurationFieldType.days(),
>                     DurationFieldType.hours(), DurationFieldType.minutes(),
>                     DurationFieldType.seconds(), DurationFieldType.millis(),
>                 },
>                 new int[] { 0, -1, -1, 1, 2, 3, 4, 5, }
>             );
>             cYDTime = type;
252c224
<         return new YearDayType(chrono);
---
>         return type;
256,257d227
<     
< 
269,270c239,253
<     public static PeriodType getYearWeekType() {
<         return YEAR_WEEK;
---
>     public static PeriodType dayTime() {
>         PeriodType type = cDTime;
>         if (type == null) {
>             type = new PeriodType(
>                 "DayTime",
>                 new DurationFieldType[] {
>                     DurationFieldType.days(),
>                     DurationFieldType.hours(), DurationFieldType.minutes(),
>                     DurationFieldType.seconds(), DurationFieldType.millis(),
>                 },
>                 new int[] { -1, -1, -1, 0, 1, 2, 3, 4, }
>             );
>             cDTime = type;
>         }
>         return type;
284,287c267,280
< 
< 
<     public static PeriodType getYearWeekTypeUTC() {
<         return YEAR_WEEK_UTC;
---
>     public static PeriodType time() {
>         PeriodType type = cTime;
>         if (type == null) {
>             type = new PeriodType(
>                 "Time",
>                 new DurationFieldType[] {
>                     DurationFieldType.hours(), DurationFieldType.minutes(),
>                     DurationFieldType.seconds(), DurationFieldType.millis(),
>                 },
>                 new int[] { -1, -1, -1, -1, 0, 1, 2, 3, }
>             );
>             cTime = type;
>         }
>         return type;
295,312c288,296
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<     public static PeriodType getYearWeekType(Chronology chrono) {
<         if (chrono == null || chrono.equals(ISOChronology.getInstance())) {
<             return getYearWeekType();
<         }
<         if (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {
<             return getYearWeekTypeUTC();
---
>     public static PeriodType years() {
>         PeriodType type = cYears;
>         if (type == null) {
>             type = new PeriodType(
>                 "Years",
>                 new DurationFieldType[] { DurationFieldType.years() },
>                 new int[] { 0, -1, -1, -1, -1, -1, -1, -1, }
>             );
>             cYears = type;
314c298
<         return new YearWeekType(chrono);
---
>         return type;
318,324d301
<     
< 
< 
< 
< 
< 
< 
329,332c306,316
< 
< 
<     public static PeriodType getYearMonthType() {
<         return YEAR_MONTH;
---
>     public static PeriodType months() {
>         PeriodType type = cMonths;
>         if (type == null) {
>             type = new PeriodType(
>                 "Months",
>                 new DurationFieldType[] { DurationFieldType.months() },
>                 new int[] { -1, 0, -1, -1, -1, -1, -1, -1, }
>             );
>             cMonths = type;
>         }
>         return type;
340,349c324,334
< 
< 
< 
< 
< 
< 
< 
< 
<     public static PeriodType getYearMonthTypeUTC() {
<         return YEAR_MONTH_UTC;
---
>     public static PeriodType weeks() {
>         PeriodType type = cWeeks;
>         if (type == null) {
>             type = new PeriodType(
>                 "Weeks",
>                 new DurationFieldType[] { DurationFieldType.weeks() },
>                 new int[] { -1, -1, 0, -1, -1, -1, -1, -1, }
>             );
>             cWeeks = type;
>         }
>         return type;
357,374c342,350
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<     public static PeriodType getYearMonthType(Chronology chrono) {
<         if (chrono == null || chrono.equals(ISOChronology.getInstance())) {
<             return getYearMonthType();
<         }
<         if (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {
<             return getYearMonthTypeUTC();
---
>     public static PeriodType days() {
>         PeriodType type = cDays;
>         if (type == null) {
>             type = new PeriodType(
>                 "Days",
>                 new DurationFieldType[] { DurationFieldType.days() },
>                 new int[] { -1, -1, -1, 0, -1, -1, -1, -1, }
>             );
>             cDays = type;
376c352
<         return new YearMonthType(chrono);
---
>         return type;
380,384d355
<     
< 
< 
< 
< 
389,395c360,370
< 
< 
< 
< 
< 
<     public static PeriodType getAllType() {
<         return ALL;
---
>     public static PeriodType hours() {
>         PeriodType type = cHours;
>         if (type == null) {
>             type = new PeriodType(
>                 "Hours",
>                 new DurationFieldType[] { DurationFieldType.hours() },
>                 new int[] { -1, -1, -1, -1, 0, -1, -1, -1, }
>             );
>             cHours = type;
>         }
>         return type;
403,413c378,388
< 
< 
< 
< 
< 
< 
< 
< 
< 
<     public static PeriodType getAllTypeUTC() {
<         return ALL_UTC;
---
>     public static PeriodType minutes() {
>         PeriodType type = cMinutes;
>         if (type == null) {
>             type = new PeriodType(
>                 "Minutes",
>                 new DurationFieldType[] { DurationFieldType.minutes() },
>                 new int[] { -1, -1, -1, -1, -1, 0, -1, -1, }
>             );
>             cMinutes = type;
>         }
>         return type;
420a396,407
>     public static PeriodType seconds() {
>         PeriodType type = cSeconds;
>         if (type == null) {
>             type = new PeriodType(
>                 "Seconds",
>                 new DurationFieldType[] { DurationFieldType.seconds() },
>                 new int[] { -1, -1, -1, -1, -1, -1, 0, -1, }
>             );
>             cSeconds = type;
>         }
>         return type;
>     }
421a409
>     
426,436c414,422
< 
< 
< 
< 
< 
< 
< 
< 
<     public static PeriodType getAllType(Chronology chrono) {
<         if (chrono == null || chrono.equals(ISOChronology.getInstance())) {
<             return getAllType();
---
>     public static PeriodType millis() {
>         PeriodType type = cMillis;
>         if (type == null) {
>             type = new PeriodType(
>                 "Millis",
>                 new DurationFieldType[] { DurationFieldType.millis() },
>                 new int[] { -1, -1, -1, -1, -1, -1, -1, 0, }
>             );
>             cMillis = type;
438,441c424
<         if (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {
<             return getAllTypeUTC();
<         }
<         return new AllType(chrono);
---
>         return type;
445a429,433
>     private final String iName;
>     
>     private final DurationFieldType[] iTypes;
>     
>     private final int[] iIndices;
446a435
>     
453,457c442,446
< 
< 
< 
<     public static PeriodType getPreciseDayHourType() {
<         return PRECISE_DAY_HOUR;
---
>     protected PeriodType(String name, DurationFieldType[] types, int[] indices) {
>         super();
>         iName = name;
>         iTypes = types;
>         iIndices = indices;
460a450
>     
465,473c455,456
< 
< 
< 
< 
< 
< 
< 
<     public static PeriodType getPreciseYearDayType() {
<         return PRECISE_YEAR_DAY;
---
>     public String getName() {
>         return iName;
481,490c464,465
< 
< 
< 
< 
< 
< 
< 
< 
<     public static PeriodType getPreciseYearMonthType() {
<         return PRECISE_YEAR_MONTH;
---
>     public int size() {
>         return iTypes.length;
500,507c475,476
< 
< 
< 
< 
< 
< 
<     public static PeriodType getPreciseYearWeekType() {
<         return PRECISE_YEAR_WEEK;
---
>     public DurationFieldType getFieldType(int index) {
>         return iTypes[index];
516,525c485,486
< 
< 
< 
< 
< 
< 
< 
< 
<     public static PeriodType getPreciseAllType() {
<         return PRECISE_ALL;
---
>     public boolean isSupported(DurationFieldType type) {
>         return (indexOf(type) >= 0);
529,530d489
<     
< 
532,533d490
<     protected PeriodType() {
<     }
535d491
<     
539,540c495,502
< 
<     public abstract String getName();
---
>     public int indexOf(DurationFieldType type) {
>         for (int i = 0, isize = size(); i < isize; i++) {
>             if (iTypes[i] == type) {
>                 return i;
>             }
>         }
>         return -1;
>     }
547c509,512
<     public abstract Chronology getChronology();
---
>     public String toString() {
>         String name = getName();
>         return "PeriodType[" + getName() + "]";
>     }
550,556d514
< 
< 
< 
< 
< 
<     public abstract PeriodType withChronology(Chronology chrono);
< 
562d519
<     public abstract boolean isPrecise();
564,571c521,523
<     
<     
< 
< 
< 
< 
<     public DurationField years() {
<         return UnsupportedDurationField.getInstance(DurationFieldType.years());
---
>     public int getYears(ReadablePeriod period) {
>         int index = iIndices[0];
>         return (index == -1 ? 0 : period.getValue(index));
579,580c531,534
<     public DurationField months() {
<         return UnsupportedDurationField.getInstance(DurationFieldType.months());
---
> 
>     public int getMonths(ReadablePeriod period) {
>         int index = iIndices[1];
>         return (index == -1 ? 0 : period.getValue(index));
588,589c542,545
<     public DurationField weeks() {
<         return UnsupportedDurationField.getInstance(DurationFieldType.weeks());
---
> 
>     public int getWeeks(ReadablePeriod period) {
>         int index = iIndices[2];
>         return (index == -1 ? 0 : period.getValue(index));
597,598c553,556
<     public DurationField days() {
<         return UnsupportedDurationField.getInstance(DurationFieldType.days());
---
> 
>     public int getDays(ReadablePeriod period) {
>         int index = iIndices[3];
>         return (index == -1 ? 0 : period.getValue(index));
601a560,561
>     
> 
606,607c566,568
<     public DurationField hours() {
<         return UnsupportedDurationField.getInstance(DurationFieldType.hours());
---
>     public int getHours(ReadablePeriod period) {
>         int index = iIndices[4];
>         return (index == -1 ? 0 : period.getValue(index));
615,616c576,579
<     public DurationField minutes() {
<         return UnsupportedDurationField.getInstance(DurationFieldType.minutes());
---
> 
>     public int getMinutes(ReadablePeriod period) {
>         int index = iIndices[5];
>         return (index == -1 ? 0 : period.getValue(index));
624,625c587,590
<     public DurationField seconds() {
<         return UnsupportedDurationField.getInstance(DurationFieldType.seconds());
---
> 
>     public int getSeconds(ReadablePeriod period) {
>         int index = iIndices[6];
>         return (index == -1 ? 0 : period.getValue(index));
633,634c598,601
<     public DurationField millis() {
<         return UnsupportedDurationField.getInstance(DurationFieldType.millis());
---
> 
>     public int getMillis(ReadablePeriod period) {
>         int index = iIndices[7];
>         return (index == -1 ? 0 : period.getValue(index));
644,647c611
<         if (!years().isSupported()) {
<             return this;
<         }
<         return MaskedType.mask(this, 1 << 0);
---
>         return withFieldRemoved(0, "NoYears");
656,659c620
<         if (!months().isSupported()) {
<             return this;
<         }
<         return MaskedType.mask(this, 1 << 1);
---
>         return withFieldRemoved(1, "NoMonths");
668,671c629
<         if (!weeks().isSupported()) {
<             return this;
<         }
<         return MaskedType.mask(this, 1 << 2);
---
>         return withFieldRemoved(2, "NoWeeks");
680,683c638
<         if (!days().isSupported()) {
<             return this;
<         }
<         return MaskedType.mask(this, 1 << 3);
---
>         return withFieldRemoved(3, "NoDays");
692,695c647
<         if (!hours().isSupported()) {
<             return this;
<         }
<         return MaskedType.mask(this, 1 << 4);
---
>         return withFieldRemoved(4, "NoHours");
704,707c656
<         if (!minutes().isSupported()) {
<             return this;
<         }
<         return MaskedType.mask(this, 1 << 5);
---
>         return withFieldRemoved(5, "NoMinutes");
716,719c665
<         if (!seconds().isSupported()) {
<             return this;
<         }
<         return MaskedType.mask(this, 1 << 6);
---
>         return withFieldRemoved(6, "NoSeconds");
728,731c674
<         if (!millis().isSupported()) {
<             return this;
<         }
<         return MaskedType.mask(this, 1 << 7);
---
>         return withFieldRemoved(7, "NoMillis");
735,736d677
<     
< 
743,816c684,686
<     public boolean equals(Object obj) {
<         if (this == obj) {
<             return true;
<         }
<         if (!(obj instanceof PeriodType)) {
<             return false;
<         }
<         PeriodType other = (PeriodType)obj;
<         Chronology chrono = getChronology();
<         if (chrono == null) {
<             if (other.getChronology() != null) {
<                 return false;
<             }
<         } else if (!chrono.equals(other.getChronology())) {
<             return false;
<         }
<         return years().equals(other.years())
<             && months().equals(other.months())
<             && weeks().equals(other.weeks())
<             && days().equals(other.days())
<             && hours().equals(other.hours())
<             && minutes().equals(other.minutes())
<             && seconds().equals(other.seconds())
<             && millis().equals(other.millis());
<     }
< 
<     
< 
< 
< 
< 
<     public int hashCode() {
<         int hash = 0;
<         Chronology chrono = getChronology();
<         if (chrono != null) {
<             hash += chrono.hashCode();
<         }
<         hash = hash
<             + years().hashCode()
<             + months().hashCode()
<             + weeks().hashCode()
<             + days().hashCode()
<             + hours().hashCode()
<             + minutes().hashCode()
<             + seconds().hashCode()
<             + millis().hashCode();
<         return hash;
<     }
<     
<     public String toString() {
<         String name = getName();
<         return "PeriodType[" + (name == null ? "" : name) + "]";
<     }
< 
<     
<     private static class MillisType extends PeriodType {
<         private static final long serialVersionUID = -4314867016852780422L;
< 
<         MillisType() {
<         }
< 
<         public boolean isPrecise() {
<             return true;
<         }
< 
<         public final DurationField millis() {
<             return MillisDurationField.INSTANCE;
<         }
< 
<         public Chronology getChronology() {
<             return ISOChronology.getInstanceUTC();
<         }
< 
<         public PeriodType withChronology(Chronology chrono) {
---
>     private PeriodType withFieldRemoved(int indicesIndex, String name) {
>         int fieldIndex = iIndices[indicesIndex];
>         if (fieldIndex == -1) {
819,822d688
< 
<         private Object readResolve() {
<             return getMillisType();
<         }
824,844c690,695
<         public String getName() {
<             return "MillisType";
<         }
<     }
< 
<     private static class DayHourType extends PeriodType {
<         private static final long serialVersionUID = 1115025839896760481L;
< 
<         protected final Chronology iChronology;
< 
<         DayHourType(Chronology chrono) {
<             iChronology = chrono;
<         }
< 
<         public final Chronology getChronology() {
<             return iChronology;
<         }
< 
<         public PeriodType withChronology(Chronology chrono) {
<             if (chrono == iChronology) {
<                 return this;
---
>         DurationFieldType[] types = new DurationFieldType[size() - 1];
>         for (int i = 0; i < iTypes.length; i++) {
>             if (i < fieldIndex) {
>                 types[i] = iTypes[i];
>             } else if (i > fieldIndex) {
>                 types[i - 1] = iTypes[i];
846,878d696
<             return PeriodType.getDayHourType(chrono);
<         }
< 
<         public boolean isPrecise() {
<             return days().isPrecise()
<                 && hours().isPrecise()
<                 && minutes().isPrecise()
<                 && seconds().isPrecise()
<                 && minutes().isPrecise();
<         }
< 
<         public final DurationField days() {
<             return iChronology.days();
<         }
< 
<         public final DurationField hours() {
<             return iChronology.hours();
<         }
< 
<         public final DurationField minutes() {
<             return iChronology.minutes();
<         }
< 
<         public final DurationField seconds() {
<             return iChronology.seconds();
<         }
< 
<         public final DurationField millis() {
<             return iChronology.millis();
<         }
< 
<         private Object readResolve() {
<             return getDayHourType(iChronology);
881,895c699,706
<         public String getName() {
<             return "DayHourType";
<         }
<     }
< 
<     private static class YearDayType extends DayHourType {
<         private static final long serialVersionUID = 6567563546499L;
< 
<         YearDayType(Chronology chrono) {
<             super(chrono);
<         }
< 
<         public PeriodType withChronology(Chronology chrono) {
<             if (chrono == iChronology) {
<                 return this;
---
>         int[] indices = new int[8];
>         for (int i = 0; i < indices.length; i++) {
>             if (i < indicesIndex) {
>                 indices[i] = iIndices[i];
>             } else if (i > indicesIndex) {
>                 indices[i] = (iIndices[i] == -1 ? -1 : iIndices[i] - 1);
>             } else {
>                 indices[i] = -1;
897,1030d707
<             return PeriodType.getYearDayType(chrono);
<         }
< 
<         public boolean isPrecise() {
<             return years().isPrecise()
<                 && super.isPrecise();
<         }
< 
<         public DurationField years() {
<             return iChronology.weekyears();
<         }
< 
<         private Object readResolve() {
<             return getYearDayType(iChronology);
<         }
<         
<         public String getName() {
<             return "YearDayType";
<         }
<     }
< 
<     private static class YearWeekType extends DayHourType {
<         private static final long serialVersionUID = 1347170237843447098L;
< 
<         YearWeekType(Chronology chrono) {
<             super(chrono);
<         }
< 
<         public PeriodType withChronology(Chronology chrono) {
<             if (chrono == iChronology) {
<                 return this;
<             }
<             return PeriodType.getYearWeekType(chrono);
<         }
< 
<         public boolean isPrecise() {
<             return years().isPrecise()
<                 && weeks().isPrecise()
<                 && super.isPrecise();
<         }
< 
<         public DurationField years() {
<             return iChronology.years();
<         }
< 
<         public DurationField weeks() {
<             return iChronology.weeks();
<         }
< 
<         private Object readResolve() {
<             return getYearWeekType(iChronology);
<         }
<         
<         public String getName() {
<             return "YearWeekType";
<         }
<     }
< 
<     private static class YearMonthType extends DayHourType {
<         private static final long serialVersionUID = -1336767257680877683L;
< 
<         YearMonthType(Chronology chrono) {
<             super(chrono);
<         }
< 
<         public PeriodType withChronology(Chronology chrono) {
<             if (chrono == iChronology) {
<                 return this;
<             }
<             return PeriodType.getYearMonthType(chrono);
<         }
< 
<         public boolean isPrecise() {
<             return years().isPrecise()
<                 && months().isPrecise()
<                 && super.isPrecise();
<         }
< 
<         public DurationField years() {
<             return iChronology.years();
<         }
< 
<         public DurationField months() {
<             return iChronology.months();
<         }
< 
<         private Object readResolve() {
<             return getYearMonthType(iChronology);
<         }
<         
<         public String getName() {
<             return "YearMonthType";
<         }
<     }
< 
<     private static class AllType extends DayHourType {
<         private static final long serialVersionUID = -359769822629866L;
< 
<         AllType(Chronology chrono) {
<             super(chrono);
<         }
< 
<         public PeriodType withChronology(Chronology chrono) {
<             if (chrono == iChronology) {
<                 return this;
<             }
<             return PeriodType.getAllType(chrono);
<         }
< 
<         public boolean isPrecise() {
<             return years().isPrecise()
<                 && months().isPrecise()
<                 && weeks().isPrecise()
<                 && super.isPrecise();
<         }
< 
<         public DurationField years() {
<             return iChronology.years();
<         }
< 
<         public DurationField months() {
<             return iChronology.months();
<         }
< 
<         public DurationField weeks() {
<             return iChronology.weeks();
<         }
< 
<         private Object readResolve() {
<             return getAllType(iChronology);
<         }
<         
<         public String getName() {
<             return "AllType";
1031a709
>         return new PeriodType(getName() + name, types, indices);
1035,1177c713
<     private static class PreciseDayHourType extends PeriodType {
<         private static final long serialVersionUID = 216528691637527857L;
< 
<         protected final Chronology iChronology;
< 
<         PreciseDayHourType(Chronology chrono) {
<             iChronology = chrono;
<         }
< 
<         public final Chronology getChronology() {
<             return iChronology;
<         }
< 
<         public PeriodType withChronology(Chronology chrono) {
<             return this;
<         }
< 
<         public boolean isPrecise() {
<             return true;
<         }
< 
<         public final DurationField days() {
<             return iChronology.days();
<         }
< 
<         public final DurationField hours() {
<             return iChronology.hours();
<         }
< 
<         public final DurationField minutes() {
<             return iChronology.minutes();
<         }
< 
<         public final DurationField seconds() {
<             return iChronology.seconds();
<         }
< 
<         public final DurationField millis() {
<             return iChronology.millis();
<         }
< 
<         private Object readResolve() {
<             return getPreciseDayHourType();
<         }
<         
<         public String getName() {
<             return "PreciseDayHourType";
<         }
<     }
< 
<     private static class PreciseYearDayType extends PreciseDayHourType {
<         private static final long serialVersionUID = -2553285612358L;
< 
<         private final DurationField iYears;
<         
<         PreciseYearDayType(Chronology chrono) {
<             super(chrono);
<             iYears = new ScaledDurationField(chrono.days(), DurationFieldType.years(), 365);
<             
<         }
< 
<         public PeriodType withChronology(Chronology chrono) {
<             return this;
<         }
< 
<         public boolean isPrecise() {
<             return years().isPrecise()
<                 && super.isPrecise();
<         }
< 
<         public DurationField years() {
<             return iYears;
<         }
< 
<         private Object readResolve() {
<             return getPreciseYearDayType();
<         }
<         
<         public String getName() {
<             return "PreciseYearDayType";
<         }
<     }
< 
<     private static class PreciseYearWeekType extends PreciseYearDayType {
<         private static final long serialVersionUID = -2040324323318740267L;
< 
<         PreciseYearWeekType(Chronology chrono) {
<             super(chrono);
<         }
< 
<         public PeriodType withChronology(Chronology chrono) {
<             return this;
<         }
< 
<         public boolean isPrecise() {
<             return weeks().isPrecise()
<                 && super.isPrecise();
<         }
< 
<         public DurationField weeks() {
<             return iChronology.weeks();
<         }
< 
<         private Object readResolve() {
<             return getPreciseYearWeekType();
<         }
<         
<         public String getName() {
<             return "PreciseYearWeekType";
<         }
<     }
< 
<     private static class PreciseYearMonthType extends PreciseYearDayType {
<         private static final long serialVersionUID = 1203161678926193794L;
< 
<         private final DurationField iMonths;
<         
<         PreciseYearMonthType(Chronology chrono) {
<             super(chrono);
<             iMonths = new ScaledDurationField(chrono.days(), DurationFieldType.months(), 30);
<         }
< 
<         public PeriodType withChronology(Chronology chrono) {
<             return this;
<         }
< 
<         public boolean isPrecise() {
<             return months().isPrecise()
<                 && super.isPrecise();
<         }
< 
<         public DurationField months() {
<             return iMonths;
<         }
< 
<         private Object readResolve() {
<             return getPreciseYearMonthType();
<         }
<         
<         public String getName() {
<             return "PreciseYearMonthType";
<         }
<     }
---
>     
1179,1180d714
<     private static class PreciseAllType extends PreciseYearMonthType {
<         private static final long serialVersionUID = 43967269280186L;
1182,1184d715
<         PreciseAllType(Chronology chrono) {
<             super(chrono);
<         }
1186,1188d716
<         public PeriodType withChronology(Chronology chrono) {
<             return this;
<         }
1190,1193d717
<         public boolean isPrecise() {
<             return weeks().isPrecise()
<                 && super.isPrecise();
<         }
1195,1197d718
<         public DurationField weeks() {
<             return iChronology.weeks();
<         }
1199,1200c720,722
<         private Object readResolve() {
<             return getPreciseAllType();
---
>     public boolean equals(Object obj) {
>         if (this == obj) {
>             return true;
1202,1204c724,725
<         
<         public String getName() {
<             return "PreciseAllType";
---
>         if (obj instanceof PeriodType == false) {
>             return false;
1205a727,728
>         PeriodType other = (PeriodType) obj;
>         return (Arrays.equals(iTypes, other.iTypes));
1209,1219d731
<     private static class MaskedType extends PeriodType {
<         private static final long serialVersionUID = 940106774669244586L;
< 
<         public static PeriodType mask(PeriodType type, int mask) {
<             if (type instanceof MaskedType) {
<                 MaskedType masked = (MaskedType)type;
<                 mask |= masked.iMask;
<                 type = masked.iType;
<             }
<             return new MaskedType(type, mask);
<         }
1221d732
<         private final PeriodType iType;
1223,1235d733
<         
<         
<         
<         private final int iMask;
< 
<         private MaskedType(PeriodType type, int mask) {
<             iType = type;
<             iMask = mask;
<         }
< 
<         public Chronology getChronology() {
<             return iType.getChronology();
<         }
1237,1267d734
<         public PeriodType withChronology(Chronology chrono) {
<             if (chrono == getChronology()) {
<                 return this;
<             }
<             return MaskedType.mask(iType.withChronology(chrono), iMask);
<         }
< 
<         public boolean isPrecise() {
<             return years().isPrecise()
<                 && months().isPrecise()
<                 && weeks().isPrecise()
<                 && days().isPrecise()
<                 && hours().isPrecise()
<                 && minutes().isPrecise()
<                 && seconds().isPrecise()
<                 && minutes().isPrecise();
<         }
< 
<         public DurationField years() {
<             if ((iMask & (1 << 0)) != 0) {
<                 return UnsupportedDurationField.getInstance(DurationFieldType.years());
<             }
<             return iType.years();
<         }
< 
<         public DurationField months() {
<             if ((iMask & (1 << 1)) != 0) {
<                 return UnsupportedDurationField.getInstance(DurationFieldType.months());
<             }
<             return iType.months();
<         }
1269,1338c736,739
<         public DurationField weeks() {
<             if ((iMask & (1 << 2)) != 0) {
<                 return UnsupportedDurationField.getInstance(DurationFieldType.weeks());
<             }
<             return iType.weeks();
<         }
< 
<         public DurationField days() {
<             if ((iMask & (1 << 3)) != 0) {
<                 return UnsupportedDurationField.getInstance(DurationFieldType.days());
<             }
<             return iType.days();
<         }
< 
<         public DurationField hours() {
<             if ((iMask & (1 << 4)) != 0) {
<                 return UnsupportedDurationField.getInstance(DurationFieldType.hours());
<             }
<             return iType.hours();
<         }
< 
<         public DurationField minutes() {
<             if ((iMask & (1 << 5)) != 0) {
<                 return UnsupportedDurationField.getInstance(DurationFieldType.minutes());
<             }
<             return iType.minutes();
<         }
< 
<         public DurationField seconds() {
<             if ((iMask & (1 << 6)) != 0) {
<                 return UnsupportedDurationField.getInstance(DurationFieldType.seconds());
<             }
<             return iType.seconds();
<         }
< 
<         public DurationField millis() {
<             if ((iMask & (1 << 7)) != 0) {
<                 return UnsupportedDurationField.getInstance(DurationFieldType.millis());
<             }
<             return iType.millis();
<         }
<         
<         public String getName() {
<             String name = iType.getName();
<             String maskStr = "";
<             if ((iMask & (1 << 0)) != 0) {
<                 maskStr += "Years";
<             }
<             if ((iMask & (1 << 1)) != 0) {
<                 maskStr += "Months";
<             }
<             if ((iMask & (1 << 2)) != 0) {
<                 maskStr += "Weeks";
<             }
<             if ((iMask & (1 << 3)) != 0) {
<                 maskStr += "Days";
<             }
<             if ((iMask & (1 << 4)) != 0) {
<                 maskStr += "Hours";
<             }
<             if ((iMask & (1 << 5)) != 0) {
<                 maskStr += "Minutes";
<             }
<             if ((iMask & (1 << 6)) != 0) {
<                 maskStr += "Seconds";
<             }
<             if ((iMask & (1 << 7)) != 0) {
<                 maskStr += "Millis";
<             }
<             return "Masked" + maskStr + "[" + (name == null ? "" : name) + "]";
---
>     public int hashCode() {
>         int hash = 0;
>         for (int i = 0; i < iTypes.length; i++) {
>             hash += iTypes[i].hashCode();
1339a741
>         return hash;
