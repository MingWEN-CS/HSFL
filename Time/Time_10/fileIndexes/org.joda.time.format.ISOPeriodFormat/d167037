




















































package org.joda.time.format;











public class ISOPeriodFormat {
    private static final ISOPeriodFormat INSTANCE = new ISOPeriodFormat();

    


    public static ISOPeriodFormat getInstance() {
        return INSTANCE;
    }

    private transient PeriodFormatter
        iStandard,
        iAlternate,
        iAlternateExtended,
        iAlternateWithWeeks,
        iAlternateExtendedWihWeeks;

    private ISOPeriodFormat() {
    }

    



    public PeriodFormatter standard() {
        if (iStandard == null) {
            iStandard = new PeriodFormatterBuilder()
                .appendLiteral("P")
                .printZeroRarely()
                .appendYears()
                .appendSuffix("Y")
                .appendMonths()
                .appendSuffix("M")
                .appendWeeks()
                .appendSuffix("W")
                .appendDays()
                .appendSuffix("D")
                .appendSeparator("T")
                .appendHours()
                .appendSuffix("H")
                .appendMinutes()
                .appendSuffix("M")
                .appendSeconds()
                .appendSuffix("S")
                .toFormatter();
        }
        return iStandard;
    }

    


    public PeriodFormatter alternate() {
        if (iAlternate == null) {
            iAlternate = new PeriodFormatterBuilder()
                .appendLiteral("P")
                .printZeroAlways()
                .minimumPrintedDigits(4)
                .appendYears()
                .minimumPrintedDigits(2)
                .appendMonths()
                .appendDays()
                .appendSeparator("T")
                .appendHours()
                .appendMinutes()
                .appendSeconds()
                .toFormatter();
        }
        return iAlternate;
    }

    


    public PeriodFormatter alternateExtended() {
        if (iAlternateExtended == null) {
            iAlternateExtended = new PeriodFormatterBuilder()
                .appendLiteral("P")
                .printZeroAlways()
                .minimumPrintedDigits(4)
                .appendYears()
                .appendSeparator("-")
                .minimumPrintedDigits(2)
                .appendMonths()
                .appendSeparator("-")
                .appendDays()
                .appendSeparator("T")
                .appendHours()
                .appendSeparator(":")
                .appendMinutes()
                .appendSeparator(":")
                .appendSeconds()
                .toFormatter();
        }
        return iAlternateExtended;
    }

    


    public PeriodFormatter alternateWithWeeks() {
        if (iAlternateWithWeeks == null) {
            iAlternateWithWeeks = new PeriodFormatterBuilder()
                .appendLiteral("P")
                .printZeroAlways()
                .minimumPrintedDigits(4)
                .appendYears()
                .minimumPrintedDigits(2)
                .appendPrefix("W")
                .appendWeeks()
                .appendDays()
                .appendSeparator("T")
                .appendHours()
                .appendMinutes()
                .appendSeconds()
                .toFormatter();
        }
        return iAlternateWithWeeks;
    }

    


    public PeriodFormatter alternateExtendedWithWeeks() {
        if (iAlternateExtendedWihWeeks == null) {
            iAlternateExtendedWihWeeks = new PeriodFormatterBuilder()
                .appendLiteral("P")
                .printZeroAlways()
                .minimumPrintedDigits(4)
                .appendYears()
                .appendSeparator("-")
                .minimumPrintedDigits(2)
                .appendPrefix("W")
                .appendWeeks()
                .appendSeparator("-")
                .appendDays()
                .appendSeparator("T")
                .appendHours()
                .appendSeparator(":")
                .appendMinutes()
                .appendSeparator(":")
                .appendSeconds()
                .toFormatter();
        }
        return iAlternateExtendedWihWeeks;
    }

}
