




















































package org.joda.time;

import java.io.Serializable;
import org.joda.time.chrono.UnsupportedDateTimeField;
import org.joda.time.chrono.UnsupportedDurationField;























public abstract class Chronology implements Serializable {
    
    static final long serialVersionUID = -7310865996721419676L;

    


    protected Chronology() {
        super();
    }

    





    public abstract DateTimeZone getDateTimeZone();

    






    public abstract Chronology withUTC();
    
    






    public abstract Chronology withDateTimeZone(DateTimeZone zone);

    










    public long getDateOnlyMillis(long instant) {
        return dayOfYear().roundFloor(instant);
    }

    













    public long getDateOnlyMillis(int year, int monthOfYear, int dayOfMonth)
        throws IllegalArgumentException
    {
        return getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);
    }

    










    public long getTimeOnlyMillis(long instant) {
        return dayOfYear().remainder(instant);
    }

    















    public long getTimeOnlyMillis(int hourOfDay, int minuteOfHour,
                                  int secondOfMinute, int millisOfSecond)
        throws IllegalArgumentException
    {
        long instant = hourOfDay().set(0, hourOfDay);
        instant = minuteOfHour().set(instant, minuteOfHour);
        instant = secondOfMinute().set(instant, secondOfMinute);
        return millisOfSecond().set(instant, millisOfSecond);
    }

    














    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                  int millisOfDay)
        throws IllegalArgumentException
    {
        long instant = year().set(0, year);
        instant = monthOfYear().set(instant, monthOfYear);
        instant = dayOfMonth().set(instant, dayOfMonth);
        return millisOfDay().set(instant, millisOfDay);
    }

    
















    public long getDateTimeMillis(long instant,
                                  int hourOfDay, int minuteOfHour,
                                  int secondOfMinute, int millisOfSecond)
        throws IllegalArgumentException
    {
        instant = hourOfDay().set(instant, hourOfDay);
        instant = minuteOfHour().set(instant, minuteOfHour);
        instant = secondOfMinute().set(instant, secondOfMinute);
        return millisOfSecond().set(instant, millisOfSecond);
    }

    


















    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                  int hourOfDay, int minuteOfHour,
                                  int secondOfMinute, int millisOfSecond)
        throws IllegalArgumentException
    {
        long instant = year().set(0, year);
        instant = monthOfYear().set(instant, monthOfYear);
        instant = dayOfMonth().set(instant, dayOfMonth);
        instant = hourOfDay().set(instant, hourOfDay);
        instant = minuteOfHour().set(instant, minuteOfHour);
        instant = secondOfMinute().set(instant, secondOfMinute);
        return millisOfSecond().set(instant, millisOfSecond);
    }

    
    
    




    public DurationField millis() {
        return UnsupportedDurationField.getInstance("millis");
    }

    




    public DateTimeField millisOfSecond() {
        return UnsupportedDateTimeField.getInstance("millisOfSecond", millis());
    }

    




    public DateTimeField millisOfDay() {
        return UnsupportedDateTimeField.getInstance("millisOfDay", millis());
    }

    
    
    




    public DurationField seconds() {
        return UnsupportedDurationField.getInstance("seconds");
    }

    




    public DateTimeField secondOfMinute() {
        return UnsupportedDateTimeField.getInstance("secondOfMinute", seconds());
    }

    




    public DateTimeField secondOfDay() {
        return UnsupportedDateTimeField.getInstance("secondOfDay", seconds());
    }

    
    
    




    public DurationField minutes() {
        return UnsupportedDurationField.getInstance("minutes");
    }

    




    public DateTimeField minuteOfHour() {
        return UnsupportedDateTimeField.getInstance("minuteOfHour", minutes());
    }

    




    public DateTimeField minuteOfDay() {
        return UnsupportedDateTimeField.getInstance("minuteOfDay", minutes());
    }

    
    
    




    public DurationField hours() {
        return UnsupportedDurationField.getInstance("hours");
    }

    




    public DateTimeField hourOfDay() {
        return UnsupportedDateTimeField.getInstance("hourOfDay", hours());
    }

    




    public DateTimeField clockhourOfDay() {
        return UnsupportedDateTimeField.getInstance("clockhourOfDay", hours());
    }

    




    public DateTimeField hourOfHalfday() {
        return UnsupportedDateTimeField.getInstance("hourOfHalfday", hours());
    }

    




    public DateTimeField clockhourOfHalfday() {
        return UnsupportedDateTimeField.getInstance("clockhourOfHalfday", hours());
    }

    




    public DateTimeField halfdayOfDay() {
        return UnsupportedDateTimeField.getInstance
            ("halfdayOfDay", UnsupportedDurationField.getInstance("halfdays"));
    }

    
    
    




    public DurationField days() {
        return UnsupportedDurationField.getInstance("days");
    }

    







    public DateTimeField dayOfWeek() {
        return UnsupportedDateTimeField.getInstance("dayOfWeek", days());
    }

    




    public DateTimeField dayOfMonth() {
        return UnsupportedDateTimeField.getInstance("dayOfMonth", days());
    }

    




    public DateTimeField dayOfYear() {
        return UnsupportedDateTimeField.getInstance("dayOfYear", days());
    }

    
    
    




    public DurationField weeks() {
        return UnsupportedDurationField.getInstance("weeks");
    }

    




    public DateTimeField weekOfWeekyear() {
        return UnsupportedDateTimeField.getInstance("weekOfWeekyear", weeks());
    }

    




    public DurationField weekyears() {
        return UnsupportedDurationField.getInstance("weekyears");
    }

    




    public DateTimeField weekyear() {
        return UnsupportedDateTimeField.getInstance("weekyear", weekyears());
    }

    
    
    




    public DurationField months() {
        return UnsupportedDurationField.getInstance("months");
    }

    




    public DateTimeField monthOfYear() {
        return UnsupportedDateTimeField.getInstance("monthOfYear", months());
    }

    
    
    




    public DurationField years() {
        return UnsupportedDurationField.getInstance("years");
    }

    




    public DateTimeField year() {
        return UnsupportedDateTimeField.getInstance("year", years());
    }

    




    public DateTimeField yearOfEra() {
        return UnsupportedDateTimeField.getInstance("yearOfEra", years());
    }

    




    public DateTimeField yearOfCentury() {
        return UnsupportedDateTimeField.getInstance("yearOfCentury", years());
    }

    




    public DurationField centuries() {
        return UnsupportedDurationField.getInstance("centuries");
    }

    




    public DateTimeField centuryOfEra() {
        return UnsupportedDateTimeField.getInstance("centuryOfEra", centuries());
    }

    




    public DurationField eras() {
        return UnsupportedDurationField.getInstance("eras");
    }

    




    public DateTimeField era() {
        return UnsupportedDateTimeField.getInstance("era", eras());
    }

    




    public abstract String toString();

}
