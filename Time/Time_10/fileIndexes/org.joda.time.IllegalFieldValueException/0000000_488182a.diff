1a2,231
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> package org.joda.time;
> 
> 
> 
> 
> 
> 
> 
> public class IllegalFieldValueException extends IllegalArgumentException {
>     private static String createMessage(String fieldName, Number value,
>                                         Number lowerBound, Number upperBound) {
>         StringBuffer buf = new StringBuffer()
>             .append("Value ").append(value).append(" for ").append(fieldName).append(' ');
> 
>         if (lowerBound == null) {
>             if (upperBound == null) {
>                 buf.append("is not supported");
>             } else {
>                 buf.append("must not be larger than ").append(upperBound);
>             }
>         } else if (upperBound == null) {
>             buf.append("must not be smaller than ").append(lowerBound);
>         } else {
>             buf.append("must be in the range [")
>                 .append(lowerBound)
>                 .append(',')
>                 .append(upperBound)
>                 .append(']');
>         }
> 
>         return buf.toString();
>     }
> 
>     private static String createMessage(String fieldName, String value) {
>         StringBuffer buf = new StringBuffer().append("Value ");
> 
>         if (value == null) {
>             buf.append("null");
>         } else {
>             buf.append('"');
>             buf.append(value);
>             buf.append('"');
>         }
> 
>         buf.append(" for ").append(fieldName).append(' ').append("is not supported");
>         
>         return buf.toString();
>     }
>     
>     private final DateTimeFieldType iDateTimeFieldType;
>     private final DurationFieldType iDurationFieldType;
>     private final String iFieldName;
>     private final Number iNumberValue;
>     private final String iStringValue;
>     private final Number iLowerBound;
>     private final Number iUpperBound;
> 
>     
> 
> 
> 
> 
> 
>     public IllegalFieldValueException(DateTimeFieldType fieldType,
>                                       Number value, Number lowerBound, Number upperBound) {
>         super(createMessage(fieldType.getName(), value, lowerBound, upperBound));
>         iDateTimeFieldType = fieldType;
>         iDurationFieldType = null;
>         iFieldName = fieldType.getName();
>         iNumberValue = value;
>         iStringValue = null;
>         iLowerBound = lowerBound;
>         iUpperBound = upperBound;
>     }
> 
>     
> 
> 
> 
> 
> 
>     public IllegalFieldValueException(DurationFieldType fieldType,
>                                       Number value, Number lowerBound, Number upperBound) {
>         super(createMessage(fieldType.getName(), value, lowerBound, upperBound));
>         iDateTimeFieldType = null;
>         iDurationFieldType = fieldType;
>         iFieldName = fieldType.getName();
>         iNumberValue = value;
>         iStringValue = null;
>         iLowerBound = lowerBound;
>         iUpperBound = upperBound;
>     }
> 
>     
> 
> 
> 
> 
> 
>     public IllegalFieldValueException(String fieldName,
>                                       Number value, Number lowerBound, Number upperBound) {
>         super(createMessage(fieldName, value, lowerBound, upperBound));
>         iDateTimeFieldType = null;
>         iDurationFieldType = null;
>         iFieldName = fieldName;
>         iNumberValue = value;
>         iStringValue = null;
>         iLowerBound = lowerBound;
>         iUpperBound = upperBound;
>     }
> 
>     
> 
> 
> 
>     public IllegalFieldValueException(DateTimeFieldType fieldType, String value) {
>         super(createMessage(fieldType.getName(), value));
>         iDateTimeFieldType = fieldType;
>         iDurationFieldType = null;
>         iFieldName = fieldType.getName();
>         iStringValue = value;
>         iNumberValue = null;
>         iLowerBound = null;
>         iUpperBound = null;
>     }
> 
>     
> 
> 
> 
>     public IllegalFieldValueException(DurationFieldType fieldType, String value) {
>         super(createMessage(fieldType.getName(), value));
>         iDateTimeFieldType = null;
>         iDurationFieldType = fieldType;
>         iFieldName = fieldType.getName();
>         iStringValue = value;
>         iNumberValue = null;
>         iLowerBound = null;
>         iUpperBound = null;
>     }
> 
>     
> 
> 
> 
>     public IllegalFieldValueException(String fieldName, String value) {
>         super(createMessage(fieldName, value));
>         iDateTimeFieldType = null;
>         iDurationFieldType = null;
>         iFieldName = fieldName;
>         iStringValue = value;
>         iNumberValue = null;
>         iLowerBound = null;
>         iUpperBound = null;
>     }
> 
>     
> 
> 
>     public DateTimeFieldType getDateTimeFieldType() {
>         return iDateTimeFieldType;
>     }
> 
>     
> 
> 
>     public DurationFieldType getDurationFieldType() {
>         return iDurationFieldType;
>     }
> 
>     
> 
> 
>     public String getFieldName() {
>         return iFieldName;
>     }
> 
>     
> 
> 
>     public Number getIllegalNumberValue() {
>         return iNumberValue;
>     }
> 
>     
> 
> 
>     public String getIllegalStringValue() {
>         return iStringValue;
>     }
> 
>     
> 
> 
>     public String getIllegalValueAsString() {
>         String value = iStringValue;
>         if (value == null) {
>             value = String.valueOf(iNumberValue);
>         }
>         return value;
>     }
> 
>     
> 
> 
>     public Number getLowerBound() {
>         return iLowerBound;
>     }
> 
>     
> 
> 
>     public Number getUpperBound() {
>         return iUpperBound;
>     }
> }
