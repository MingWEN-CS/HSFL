




















































package org.joda.time.convert;

import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.ReadWritableDuration;
import org.joda.time.chrono.iso.ISOChronology;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DurationParser;
import org.joda.time.format.ISODateTimeFormat;
import org.joda.time.format.ISODurationFormat;








class StringConverter extends AbstractConverter implements InstantConverter, DurationConverter {
    
    


    static final StringConverter INSTANCE = new StringConverter();
    
    


    protected StringConverter() {
        super();
    }

    
    







    public long getInstantMillis(Object object, DateTimeZone zone) {
        String str = (String) object;
        Chronology chrono = ISOChronology.getInstance(zone);
        DateTimeParser p = ISODateTimeFormat.getInstance(chrono).dateTimeParser();
        return p.parseMillis(str);
    }
    
    







    public long getInstantMillis(Object object, Chronology chrono) {
        String str = (String) object;
        chrono = getChronology(object, chrono);
        DateTimeParser p = ISODateTimeFormat.getInstance(chrono).dateTimeParser();
        return p.parseMillis(str);
    }
    
    
    


    public boolean isPrecise(Object object) {
        return false;
    }

    


    public long getDurationMillis(Object object) {
        throw new UnsupportedOperationException();
    }

    








    public void setInto(ReadWritableDuration duration, Object object) {
        String str = (String) object;
        DurationParser parser = ISODurationFormat.getInstance().standard();
        int pos = parser.parseInto(duration, str, 0);
        if (pos < str.length()) {
            if (pos < 0) {
                
                parser.parseMutableDuration(duration.getDurationType(), str);
            }
            throw new IllegalArgumentException("Invalid format: \"" + str + '"');
        }
    }

    
    




    public Class getSupportedType() {
        return String.class;
    }
    
}
