58,59c58
< import org.joda.time.PeriodType;
< import org.joda.time.MutablePeriod;
---
> import org.joda.time.Period;
62d60
< import org.joda.time.Period;
63a62
> import org.joda.time.field.FieldUtils;
132,137c131,148
<         String str = (String) object;
<         MutablePeriod period = new MutablePeriod(PeriodType.getPreciseAllType());
<         PeriodParser parser = ISOPeriodFormat.getInstance().standard();
<         int pos = parser.parseInto(period, str, 0);
<         if (pos < str.length()) {
<             if (pos < 0) {
---
>         
>         
>         String original = (String) object;
>         String str = original;
>         int len = str.length();
>         if (len >= 4 &&
>             (str.charAt(0) == 'P' || str.charAt(0) == 'p') &&
>             (str.charAt(1) == 'T' || str.charAt(1) == 't') &&
>             (str.charAt(len - 1) == 'S' || str.charAt(len - 1) == 's')) {
>             
>         } else {
>             throw new IllegalArgumentException("Invalid format: \"" + original + '"');
>         }
>         str = str.substring(2, len - 1);
>         int dot = -1;
>         for (int i = 0; i < str.length(); i++) {
>             if ((str.charAt(i) >= '0' && str.charAt(i) <= '9') ||
>                 (i == 0 && str.charAt(0) == '-')) {
139c150,154
<                 parser.parseMutablePeriod(period.getPeriodType(), str);
---
>             } else if (i > 0 && str.charAt(i) == '.' && dot == -1) {
>                 
>                 dot = i;
>             } else {
>                 throw new IllegalArgumentException("Invalid format: \"" + original + '"');
141d155
<             throw new IllegalArgumentException("Invalid format: \"" + str + '"');
143c157,172
<         return period.toDurationMillis();
---
>         long millis = 0, seconds = 0;
>         if (dot > 0) {
>             seconds = Long.parseLong(str.substring(0, dot));
>             str = str.substring(dot + 1);
>             if (str.length() != 3) {
>                 str = (str + "000").substring(0, 3);
>             }
>             millis = Integer.parseInt(str);
>         } else {
>             seconds = Long.parseLong(str);
>         }
>         if (seconds < 0) {
>             return FieldUtils.safeAdd(FieldUtils.safeMultiply(seconds, 1000), -millis);
>         } else {
>             return FieldUtils.safeAdd(FieldUtils.safeMultiply(seconds, 1000), millis);
>         }
156c185,186
<     public void setInto(ReadWritablePeriod period, Object object) {
---
> 
>     public void setInto(ReadWritablePeriod period, Object object, Chronology chrono) {
224c254
<             period = periodParser.parsePeriod(getPeriodType(leftStr, false), leftStr);
---
>             period = periodParser.parsePeriod(getPeriodType(leftStr), leftStr);
236c266
<             period = periodParser.parsePeriod(getPeriodType(rightStr, false), rightStr);
---
>             period = periodParser.parsePeriod(getPeriodType(rightStr), rightStr);
