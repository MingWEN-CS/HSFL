




















































package org.joda.time.chrono;

import org.joda.time.DateTimeConstants;
import org.joda.time.DateTimeField;
import org.joda.time.field.DecoratedDateTimeField;
import org.joda.time.field.FieldUtils;






final class GJYearOfEraDateTimeField extends DecoratedDateTimeField {

    static final long serialVersionUID = -5961050944769862059L;

    private final AbstractGJChronology iChronology;

    


    GJYearOfEraDateTimeField(DateTimeField yearField, AbstractGJChronology chronology) {
        super(yearField, "yearOfEra");
        iChronology = chronology;
    }

    





    public int get(long instant) {
        int year = getWrappedField().get(instant);
        if (year <= 0) {
            year = 1 - year;
        }
        return year;
    }

    







    public long add(long instant, int years) {
        return getWrappedField().add(instant, years);
    }

    public long add(long instant, long years) {
        return getWrappedField().add(instant, years);
    }

    







    public long addWrapped(long instant, int years) {
        return getWrappedField().addWrapped(instant, years);
    }

    public int getDifference(long minuendInstant, long subtrahendInstant) {
        return getWrappedField().getDifference(minuendInstant, subtrahendInstant);
    }

    public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {
        return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant);
    }

    







    public long set(long instant, int year) {
        FieldUtils.verifyValueBounds(this, year, 1, getMaximumValue());
        if (iChronology.getYear(instant) <= 0) {
            year = 1 - year;
        }
        return super.set(instant, year);
    }

    public int getMinimumValue() {
        return 1;
    }

    public int getMaximumValue() {
        return getWrappedField().getMaximumValue();
    }

    public long roundFloor(long instant) {
        return getWrappedField().roundFloor(instant);
    }

    public long roundCeiling(long instant) {
        return getWrappedField().roundCeiling(instant);
    }

    public long remainder(long instant) {
        return getWrappedField().remainder(instant);
    }

    


    private Object readResolve() {
        return iChronology.yearOfEra();
    }
}
