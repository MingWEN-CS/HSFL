74c74
<     private ArrayList<Object> iElementPairs;
---
>     private ArrayList iElementPairs;
84c84
<         iElementPairs = new ArrayList<Object>();
---
>         iElementPairs = new ArrayList();
985,987d984
< 
< 
< 
992,1018c989
<                        (zeroOffsetText, zeroOffsetText, showSeparators, minFields, maxFields));
<     }
< 
<     
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<     public DateTimeFormatterBuilder appendTimeZoneOffset(
<             String zeroOffsetPrintText, String zeroOffsetParseText, boolean showSeparators,
<             int minFields, int maxFields) {
<         return append0(new TimeZoneOffset
<                        (zeroOffsetPrintText, zeroOffsetParseText, showSeparators, minFields, maxFields));
---
>                        (zeroOffsetText, showSeparators, minFields, maxFields));
1647,1648c1618
<         private static Map<Locale, Map<DateTimeFieldType, Object[]>> cParseCache =
<                     new HashMap<Locale, Map<DateTimeFieldType, Object[]>>();
---
>         private static Map cParseCache = new HashMap();
1724d1693
<         @SuppressWarnings("unchecked")
1729c1698
<             Set<String> validValues = null;
---
>             Set validValues = null;
1732c1701
<                 Map<DateTimeFieldType, Object[]> innerMap = cParseCache.get(locale);
---
>                 Map innerMap = (Map) cParseCache.get(locale);
1734c1703
<                     innerMap = new HashMap<DateTimeFieldType, Object[]>();
---
>                     innerMap = new HashMap();
1737c1706
<                 Object[] array = innerMap.get(iFieldType);
---
>                 Object[] array = (Object[]) innerMap.get(iFieldType);
1739c1708
<                     validValues = new HashSet<String>(32);
---
>                     validValues = new HashSet(32);
1768c1737
<                     validValues = (Set<String>) array[0];
---
>                     validValues = (Set) array[0];
2010,2011c1979
<         private final String iZeroOffsetPrintText;
<         private final String iZeroOffsetParseText;
---
>         private final String iZeroOffsetText;
2016c1984
<         TimeZoneOffset(String zeroOffsetPrintText, String zeroOffsetParseText,
---
>         TimeZoneOffset(String zeroOffsetText,
2021,2022c1989
<             iZeroOffsetPrintText = zeroOffsetPrintText;
<             iZeroOffsetParseText = zeroOffsetParseText;
---
>             iZeroOffsetText = zeroOffsetText;
2040,2041c2007,2008
<             if (iZeroOffsetPrintText != null && iZeroOffsetPrintText.length() > est) {
<                 est = iZeroOffsetPrintText.length();
---
>             if (iZeroOffsetText != null && iZeroOffsetText.length() > est) {
>                 est = iZeroOffsetText.length();
2052,2053c2019,2020
<             if (displayOffset == 0 && iZeroOffsetPrintText != null) {
<                 buf.append(iZeroOffsetPrintText);
---
>             if (displayOffset == 0 && iZeroOffsetText != null) {
>                 buf.append(iZeroOffsetText);
2111,2112c2078,2079
<             if (displayOffset == 0 && iZeroOffsetPrintText != null) {
<                 out.write(iZeroOffsetPrintText);
---
>             if (displayOffset == 0 && iZeroOffsetText != null) {
>                 out.write(iZeroOffsetText);
2180,2181c2147,2148
<             if (iZeroOffsetParseText != null) {
<                 if (iZeroOffsetParseText.length() == 0) {
---
>             if (iZeroOffsetText != null) {
>                 if (iZeroOffsetText.length() == 0) {
2192c2159,2160
<                 if (text.regionMatches(true, position, iZeroOffsetParseText, 0, iZeroOffsetParseText.length())) {
---
>                 if (text.regionMatches(true, position, iZeroOffsetText, 0,
>                                        iZeroOffsetText.length())) {
2194c2162
<                     return position + iZeroOffsetParseText.length();
---
>                     return position + iZeroOffsetText.length();
2430c2398
<         Composite(List<Object> elementPairs) {
---
>         Composite(List elementPairs) {
2433,2434c2401,2402
<             List<Object> printerList = new ArrayList<Object>();
<             List<Object> parserList = new ArrayList<Object>();
---
>             List printerList = new ArrayList();
>             List parserList = new ArrayList();
2574c2542
<         private void decompose(List<Object> elementPairs, List<Object> printerList, List<Object> parserList) {
---
>         private void decompose(List elementPairs, List printerList, List parserList) {
2597c2565
<         private void addArrayToList(List<Object> list, Object[] array) {
---
>         private void addArrayToList(List list, Object[] array) {
