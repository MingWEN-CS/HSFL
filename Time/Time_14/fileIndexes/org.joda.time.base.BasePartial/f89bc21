




















































package org.joda.time.base;

import java.io.Serializable;

import org.joda.time.Chronology;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeUtils;
import org.joda.time.ReadablePartial;
import org.joda.time.convert.ConverterManager;
import org.joda.time.convert.InstantConverter;














public abstract class BasePartial
        extends AbstractPartial
        implements ReadablePartial, Serializable {

    
    private static final long serialVersionUID = 2353678632973660L;

    
    private Chronology iChronology;
    
    private int[] iValues;
    
    private transient DateTimeField[] iFields;

    
    







    protected BasePartial() {
        this(DateTimeUtils.currentTimeMillis(), null);
    }

    









    protected BasePartial(Chronology chronology) {
        this(DateTimeUtils.currentTimeMillis(), chronology);
    }

    









    protected BasePartial(long instant) {
        this(instant, null);
    }

    










    protected BasePartial(long instant, Chronology chronology) {
        super();
        chronology = DateTimeUtils.getChronology(chronology);
        iChronology = chronology.withUTC();
        iValues = initValues(instant, chronology);
    }

    









    protected BasePartial(Object instant) {
        super();
        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
        long millis = converter.getInstantMillis(instant);
        Chronology chronology = converter.getChronology(instant);
        chronology = DateTimeUtils.getChronology(chronology);
        iChronology = chronology.withUTC();
        iValues = initValues(millis, chronology);
    }

    















    protected BasePartial(Object instant, Chronology chronology) {
        super();
        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);
        long millis = converter.getInstantMillis(instant, chronology);
        chronology = converter.getChronology(instant, chronology);
        chronology = DateTimeUtils.getChronology(chronology);
        iChronology = chronology.withUTC();
        iValues = initValues(millis, chronology);
    }

    











    protected BasePartial(int[] values, Chronology chronology) {
        super();
        chronology = DateTimeUtils.getChronology(chronology);
        iChronology = chronology.withUTC();
        chronology.validate(this, values);
        iValues = values;
    }

    








    protected BasePartial(BasePartial other, int[] values) {
        super();
        iChronology = other.iChronology;
        iValues = values;
        iFields = other.iFields;
    }

    
    






    protected int[] initValues(long instant, Chronology chrono) {
        int[] values = new int[size()];
        for (int i = 0; i < values.length; i++) {
            values[i] = getField(i, chrono).get(instant);
        }
        return values;
    }

    
    






    public DateTimeField getField(int index) {
        DateTimeField[] fields = iFields;
        if (fields != null) {
            return fields[index];
        } else {
            return getField(index, getChronology());
        }
    }

    






    public DateTimeField[] getFields() {
        DateTimeField[] fields = iFields;
        if (fields == null) {
            fields = super.getFields();
            iFields = fields;
        }
        return (DateTimeField[]) fields.clone();
    }

    






    public int getValue(int index) {
        return iValues[index];
    }

    







    public int[] getValues() {
        return (int[]) iValues.clone();
    }

    







    public Chronology getChronology() {
        return iChronology;
    }

    
    






    protected void setValue(int index, int value) {
        DateTimeField field = getField(index);
        iValues = field.set(this, index, iValues, value);
    }

    




    protected void setValues(int[] values) {
        getChronology().validate(this, values);
        iValues = values;
    }

}
