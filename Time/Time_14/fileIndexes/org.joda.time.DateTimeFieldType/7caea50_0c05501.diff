57,58d56
< import java.util.HashMap;
< import java.util.Map;
66c64,65
< public class DateTimeFieldType implements Serializable {
---
> 
> public abstract class DateTimeFieldType implements Serializable {
72c71,95
<     private static Map cCache = new HashMap();
---
>     static final byte
>         ERA = 1,
>         YEAR_OF_ERA = 2,
>         CENTURY_OF_ERA = 3,
>         YEAR_OF_CENTURY = 4,
>         YEAR = 5,
>         DAY_OF_YEAR = 6,
>         MONTH_OF_YEAR = 7,
>         DAY_OF_MONTH = 8,
>         WEEKYEAR_OF_CENTURY = 9,
>         WEEKYEAR = 10,
>         WEEK_OF_WEEKYEAR = 11,
>         DAY_OF_WEEK = 12,
>         HALFDAY_OF_DAY = 13,
>         HOUR_OF_HALFDAY = 14,
>         CLOCKHOUR_OF_HALFDAY = 15,
>         CLOCKHOUR_OF_DAY = 16,
>         HOUR_OF_DAY = 17,
>         MINUTE_OF_DAY = 18,
>         MINUTE_OF_HOUR = 19,
>         SECOND_OF_DAY = 20,
>         SECOND_OF_MINUTE = 21,
>         MILLIS_OF_DAY = 22,
>         MILLIS_OF_SECOND = 23;
> 
74,75c97,98
<     private static final DateTimeFieldType ERA = new DateTimeFieldType(
<         "era", DurationFieldType.eras(), null);
---
>     private static final DateTimeFieldType ERA_TYPE = new StandardDateTimeFieldType(
>         "era", ERA, DurationFieldType.eras(), null);
77,78c100,101
<     private static final DateTimeFieldType YEAR_OF_ERA = new DateTimeFieldType(
<         "yearOfEra", DurationFieldType.years(), DurationFieldType.eras());
---
>     private static final DateTimeFieldType YEAR_OF_ERA_TYPE = new StandardDateTimeFieldType(
>         "yearOfEra", YEAR_OF_ERA, DurationFieldType.years(), DurationFieldType.eras());
80,81c103,104
<     private static final DateTimeFieldType CENTURY_OF_ERA = new DateTimeFieldType(
<         "centuryOfEra", DurationFieldType.centuries(), DurationFieldType.eras());
---
>     private static final DateTimeFieldType CENTURY_OF_ERA_TYPE = new StandardDateTimeFieldType(
>         "centuryOfEra", CENTURY_OF_ERA, DurationFieldType.centuries(), DurationFieldType.eras());
83,84c106,107
<     private static final DateTimeFieldType YEAR_OF_CENTURY = new DateTimeFieldType(
<         "yearOfCentury", DurationFieldType.years(), DurationFieldType.centuries());
---
>     private static final DateTimeFieldType YEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(
>         "yearOfCentury", YEAR_OF_CENTURY, DurationFieldType.years(), DurationFieldType.centuries());
86,87c109,110
<     private static final DateTimeFieldType YEAR = new DateTimeFieldType(
<         "year", DurationFieldType.years(), null);
---
>     private static final DateTimeFieldType YEAR_TYPE = new StandardDateTimeFieldType(
>         "year", YEAR, DurationFieldType.years(), null);
89,90c112,113
<     private static final DateTimeFieldType DAY_OF_YEAR = new DateTimeFieldType(
<         "dayOfYear", DurationFieldType.days(), DurationFieldType.years());
---
>     private static final DateTimeFieldType DAY_OF_YEAR_TYPE = new StandardDateTimeFieldType(
>         "dayOfYear", DAY_OF_YEAR, DurationFieldType.days(), DurationFieldType.years());
92,93c115,116
<     private static final DateTimeFieldType MONTH_OF_YEAR = new DateTimeFieldType(
<         "monthOfYear", DurationFieldType.months(), DurationFieldType.years());
---
>     private static final DateTimeFieldType MONTH_OF_YEAR_TYPE = new StandardDateTimeFieldType(
>         "monthOfYear", MONTH_OF_YEAR, DurationFieldType.months(), DurationFieldType.years());
95,96c118,119
<     private static final DateTimeFieldType DAY_OF_MONTH = new DateTimeFieldType(
<         "dayOfMonth", DurationFieldType.days(), DurationFieldType.months());
---
>     private static final DateTimeFieldType DAY_OF_MONTH_TYPE = new StandardDateTimeFieldType(
>         "dayOfMonth", DAY_OF_MONTH, DurationFieldType.days(), DurationFieldType.months());
98,99c121,122
<     private static final DateTimeFieldType WEEKYEAR_OF_CENTURY = new DateTimeFieldType(
<         "weekyearOfCentury", DurationFieldType.weekyears(), DurationFieldType.centuries());
---
>     private static final DateTimeFieldType WEEKYEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(
>         "weekyearOfCentury", WEEKYEAR_OF_CENTURY, DurationFieldType.weekyears(), DurationFieldType.centuries());
101,102c124,125
<     private static final DateTimeFieldType WEEKYEAR = new DateTimeFieldType(
<         "weekyear", DurationFieldType.weekyears(), null);
---
>     private static final DateTimeFieldType WEEKYEAR_TYPE = new StandardDateTimeFieldType(
>         "weekyear", WEEKYEAR, DurationFieldType.weekyears(), null);
104,105c127,128
<     private static final DateTimeFieldType WEEK_OF_WEEKYEAR = new DateTimeFieldType(
<         "weekOfWeekyear", DurationFieldType.weeks(), DurationFieldType.weekyears());
---
>     private static final DateTimeFieldType WEEK_OF_WEEKYEAR_TYPE = new StandardDateTimeFieldType(
>         "weekOfWeekyear", WEEK_OF_WEEKYEAR, DurationFieldType.weeks(), DurationFieldType.weekyears());
107,108c130,131
<     private static final DateTimeFieldType DAY_OF_WEEK = new DateTimeFieldType(
<         "dayOfWeek", DurationFieldType.days(), DurationFieldType.weeks());
---
>     private static final DateTimeFieldType DAY_OF_WEEK_TYPE = new StandardDateTimeFieldType(
>         "dayOfWeek", DAY_OF_WEEK, DurationFieldType.days(), DurationFieldType.weeks());
111,112c134,135
<     private static final DateTimeFieldType HALFDAY_OF_DAY = new DateTimeFieldType(
<         "halfdayOfDay", DurationFieldType.halfdays(), DurationFieldType.days());
---
>     private static final DateTimeFieldType HALFDAY_OF_DAY_TYPE = new StandardDateTimeFieldType(
>         "halfdayOfDay", HALFDAY_OF_DAY, DurationFieldType.halfdays(), DurationFieldType.days());
114,115c137,138
<     private static final DateTimeFieldType HOUR_OF_HALFDAY = new DateTimeFieldType(
<         "hourOfHalfday", DurationFieldType.hours(), DurationFieldType.halfdays());
---
>     private static final DateTimeFieldType HOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(
>         "hourOfHalfday", HOUR_OF_HALFDAY, DurationFieldType.hours(), DurationFieldType.halfdays());
117,118c140,141
<     private static final DateTimeFieldType CLOCKHOUR_OF_HALFDAY = new DateTimeFieldType(
<         "clockhourOfHalfday", DurationFieldType.hours(), DurationFieldType.halfdays());
---
>     private static final DateTimeFieldType CLOCKHOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(
>         "clockhourOfHalfday", CLOCKHOUR_OF_HALFDAY, DurationFieldType.hours(), DurationFieldType.halfdays());
120,121c143,144
<     private static final DateTimeFieldType CLOCKHOUR_OF_DAY = new DateTimeFieldType(
<         "clockhourOfDay", DurationFieldType.hours(), DurationFieldType.days());
---
>     private static final DateTimeFieldType CLOCKHOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(
>         "clockhourOfDay", CLOCKHOUR_OF_DAY, DurationFieldType.hours(), DurationFieldType.days());
123,124c146,147
<     private static final DateTimeFieldType HOUR_OF_DAY = new DateTimeFieldType(
<         "hourOfDay", DurationFieldType.hours(), DurationFieldType.days());
---
>     private static final DateTimeFieldType HOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(
>         "hourOfDay", HOUR_OF_DAY, DurationFieldType.hours(), DurationFieldType.days());
126,127c149,150
<     private static final DateTimeFieldType MINUTE_OF_DAY = new DateTimeFieldType(
<         "minuteOfDay", DurationFieldType.minutes(), DurationFieldType.days());
---
>     private static final DateTimeFieldType MINUTE_OF_DAY_TYPE = new StandardDateTimeFieldType(
>         "minuteOfDay", MINUTE_OF_DAY, DurationFieldType.minutes(), DurationFieldType.days());
129,130c152,153
<     private static final DateTimeFieldType MINUTE_OF_HOUR = new DateTimeFieldType(
<         "minuteOfHour", DurationFieldType.minutes(), DurationFieldType.hours());
---
>     private static final DateTimeFieldType MINUTE_OF_HOUR_TYPE = new StandardDateTimeFieldType(
>         "minuteOfHour", MINUTE_OF_HOUR, DurationFieldType.minutes(), DurationFieldType.hours());
132,133c155,156
<     private static final DateTimeFieldType SECOND_OF_DAY = new DateTimeFieldType(
<         "secondOfDay", DurationFieldType.seconds(), DurationFieldType.days());
---
>     private static final DateTimeFieldType SECOND_OF_DAY_TYPE = new StandardDateTimeFieldType(
>         "secondOfDay", SECOND_OF_DAY, DurationFieldType.seconds(), DurationFieldType.days());
135,136c158,159
<     private static final DateTimeFieldType SECOND_OF_MINUTE = new DateTimeFieldType(
<         "secondOfMinute", DurationFieldType.seconds(), DurationFieldType.minutes());
---
>     private static final DateTimeFieldType SECOND_OF_MINUTE_TYPE = new StandardDateTimeFieldType(
>         "secondOfMinute", SECOND_OF_MINUTE, DurationFieldType.seconds(), DurationFieldType.minutes());
138,139c161,162
<     private static final DateTimeFieldType MILLIS_OF_DAY = new DateTimeFieldType(
<         "millisOfDay", DurationFieldType.millis(), DurationFieldType.days());
---
>     private static final DateTimeFieldType MILLIS_OF_DAY_TYPE = new StandardDateTimeFieldType(
>         "millisOfDay", MILLIS_OF_DAY, DurationFieldType.millis(), DurationFieldType.days());
141,142c164,165
<     private static final DateTimeFieldType MILLIS_OF_SECOND = new DateTimeFieldType(
<         "millisOfSecond", DurationFieldType.millis(), DurationFieldType.seconds());
---
>     private static final DateTimeFieldType MILLIS_OF_SECOND_TYPE = new StandardDateTimeFieldType(
>         "millisOfSecond", MILLIS_OF_SECOND, DurationFieldType.millis(), DurationFieldType.seconds());
146,149d168
<     
<     private transient final DurationFieldType iUnitType;
<     
<     private transient final DurationFieldType iRangeType;
157,206c176
< 
< 
< 
< 
<     public static synchronized DateTimeFieldType getInstance(String name) {
<         DateTimeFieldType type = (DateTimeFieldType) cCache.get(name);
<         if (type == null) {
<             throw new IllegalArgumentException("The field '" + name + "' is unknown");
<         }
<         return type;
<     }
< 
<     
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<     public static synchronized DateTimeFieldType define(
<             String name, DurationFieldType unitType, DurationFieldType rangeType) {
<         
<         DateTimeFieldType type = (DateTimeFieldType) cCache.get(name);
<         if (type == null) {
<             return new DateTimeFieldType(name, unitType, rangeType);
<         }
<         return type;
<     }
< 
<     
<     
< 
< 
< 
< 
< 
< 
<     private DateTimeFieldType(
<                 String name, DurationFieldType unitType, DurationFieldType rangeType) {
<         
---
>     protected DateTimeFieldType(String name) {
209,222d178
<         iUnitType = unitType;
<         iRangeType = rangeType;
<         cCache.put(name, this);
<     }
< 
<     
< 
< 
< 
< 
< 
< 
<     private Object readResolve() {
<         return getInstance(iName);
232c188
<         return MILLIS_OF_SECOND;
---
>         return MILLIS_OF_SECOND_TYPE;
241c197
<         return MILLIS_OF_DAY;
---
>         return MILLIS_OF_DAY_TYPE;
250c206
<         return SECOND_OF_MINUTE;
---
>         return SECOND_OF_MINUTE_TYPE;
259c215
<         return SECOND_OF_DAY;
---
>         return SECOND_OF_DAY_TYPE;
268c224
<         return MINUTE_OF_HOUR;
---
>         return MINUTE_OF_HOUR_TYPE;
277c233
<         return MINUTE_OF_DAY;
---
>         return MINUTE_OF_DAY_TYPE;
286c242
<         return HOUR_OF_DAY;
---
>         return HOUR_OF_DAY_TYPE;
295c251
<         return CLOCKHOUR_OF_DAY;
---
>         return CLOCKHOUR_OF_DAY_TYPE;
304c260
<         return HOUR_OF_HALFDAY;
---
>         return HOUR_OF_HALFDAY_TYPE;
313c269
<         return CLOCKHOUR_OF_HALFDAY;
---
>         return CLOCKHOUR_OF_HALFDAY_TYPE;
322c278
<         return HALFDAY_OF_DAY;
---
>         return HALFDAY_OF_DAY_TYPE;
332c288
<         return DAY_OF_WEEK;
---
>         return DAY_OF_WEEK_TYPE;
341c297
<         return DAY_OF_MONTH;
---
>         return DAY_OF_MONTH_TYPE;
350c306
<         return DAY_OF_YEAR;
---
>         return DAY_OF_YEAR_TYPE;
359c315
<         return WEEK_OF_WEEKYEAR;
---
>         return WEEK_OF_WEEKYEAR_TYPE;
368c324
<         return WEEKYEAR;
---
>         return WEEKYEAR_TYPE;
377c333
<         return WEEKYEAR_OF_CENTURY;
---
>         return WEEKYEAR_OF_CENTURY_TYPE;
386c342
<         return MONTH_OF_YEAR;
---
>         return MONTH_OF_YEAR_TYPE;
395c351
<         return YEAR;
---
>         return YEAR_TYPE;
404c360
<         return YEAR_OF_ERA;
---
>         return YEAR_OF_ERA_TYPE;
413c369
<         return YEAR_OF_CENTURY;
---
>         return YEAR_OF_CENTURY_TYPE;
422c378
<         return CENTURY_OF_ERA;
---
>         return CENTURY_OF_ERA_TYPE;
431c387
<         return ERA;
---
>         return ERA_TYPE;
454,456c410
<     public DurationFieldType getDurationType() {
<         return iUnitType;
<     }
---
>     public abstract DurationFieldType getDurationType();
463,465c417,426
<     public DurationFieldType getRangeDurationType() {
<         return iRangeType;
<     }
---
>     public abstract DurationFieldType getRangeDurationType();
> 
>     
> 
> 
> 
> 
> 
> 
>     public abstract DateTimeField getField(Chronology chronology);
473a435,584
>     }
> 
>     private static class StandardDateTimeFieldType extends DateTimeFieldType {
>         
>         private static final long serialVersionUID = -9937958251642L;
> 
>         
>         private final byte iOrdinal;
> 
>         
>         private transient final DurationFieldType iUnitType;
>         
>         private transient final DurationFieldType iRangeType;
> 
>         
> 
> 
> 
> 
>         StandardDateTimeFieldType(String name, byte ordinal,
>                                   DurationFieldType unitType, DurationFieldType rangeType) {
>             super(name);
>             iOrdinal = ordinal;
>             iUnitType = unitType;
>             iRangeType = rangeType;
>         }
> 
>         public DurationFieldType getDurationType() {
>             return iUnitType;
>         }
> 
>         public DurationFieldType getRangeDurationType() {
>             return iRangeType;
>         }
> 
>         public DateTimeField getField(Chronology chronology) {
>             chronology = DateTimeUtils.getChronology(chronology);
> 
>             switch (iOrdinal) {
>             case ERA:
>                 return chronology.era();
>             case YEAR_OF_ERA:
>                 return chronology.yearOfEra();
>             case CENTURY_OF_ERA:
>                 return chronology.centuryOfEra();
>             case YEAR_OF_CENTURY:
>                 return chronology.yearOfCentury();
>             case YEAR:
>                 return chronology.year();
>             case DAY_OF_YEAR:
>                 return chronology.dayOfYear();
>             case MONTH_OF_YEAR:
>                 return chronology.monthOfYear();
>             case DAY_OF_MONTH:
>                 return chronology.dayOfMonth();
>                 
>                 
>                 
>             case WEEKYEAR:
>                 return chronology.weekyear();
>             case WEEK_OF_WEEKYEAR:
>                 return chronology.weekOfWeekyear();
>             case DAY_OF_WEEK:
>                 return chronology.dayOfWeek();
>             case HALFDAY_OF_DAY:
>                 return chronology.halfdayOfDay();
>             case HOUR_OF_HALFDAY:
>                 return chronology.hourOfHalfday();
>             case CLOCKHOUR_OF_HALFDAY:
>                 return chronology.clockhourOfHalfday();
>             case CLOCKHOUR_OF_DAY:
>                 return chronology.clockhourOfDay();
>             case HOUR_OF_DAY:
>                 return chronology.hourOfDay();
>             case MINUTE_OF_DAY:
>                 return chronology.minuteOfDay();
>             case MINUTE_OF_HOUR:
>                 return chronology.minuteOfHour();
>             case SECOND_OF_DAY:
>                 return chronology.secondOfDay();
>             case SECOND_OF_MINUTE:
>                 return chronology.secondOfMinute();
>             case MILLIS_OF_DAY:
>                 return chronology.millisOfDay();
>             case MILLIS_OF_SECOND:
>                 return chronology.millisOfSecond();
>             default:
>                 
>                 throw new IllegalStateException();
>             }
>         }
> 
>         
> 
> 
> 
> 
>         private Object readResolve() {
>             switch (iOrdinal) {
>             case ERA:
>                 return ERA_TYPE;
>             case YEAR_OF_ERA:
>                 return YEAR_OF_ERA_TYPE;
>             case CENTURY_OF_ERA:
>                 return CENTURY_OF_ERA_TYPE;
>             case YEAR_OF_CENTURY:
>                 return YEAR_OF_CENTURY_TYPE;
>             case YEAR:
>                 return YEAR_TYPE;
>             case DAY_OF_YEAR:
>                 return DAY_OF_YEAR_TYPE;
>             case MONTH_OF_YEAR:
>                 return MONTH_OF_YEAR_TYPE;
>             case DAY_OF_MONTH:
>                 return DAY_OF_MONTH_TYPE;
>             case WEEKYEAR_OF_CENTURY:
>                 return WEEKYEAR_OF_CENTURY_TYPE;
>             case WEEKYEAR:
>                 return WEEKYEAR_TYPE;
>             case WEEK_OF_WEEKYEAR:
>                 return WEEK_OF_WEEKYEAR_TYPE;
>             case DAY_OF_WEEK:
>                 return DAY_OF_WEEK_TYPE;
>             case HALFDAY_OF_DAY:
>                 return HALFDAY_OF_DAY_TYPE;
>             case HOUR_OF_HALFDAY:
>                 return HOUR_OF_HALFDAY_TYPE;
>             case CLOCKHOUR_OF_HALFDAY:
>                 return CLOCKHOUR_OF_HALFDAY_TYPE;
>             case CLOCKHOUR_OF_DAY:
>                 return CLOCKHOUR_OF_DAY_TYPE;
>             case HOUR_OF_DAY:
>                 return HOUR_OF_DAY_TYPE;
>             case MINUTE_OF_DAY:
>                 return MINUTE_OF_DAY_TYPE;
>             case MINUTE_OF_HOUR:
>                 return MINUTE_OF_HOUR_TYPE;
>             case SECOND_OF_DAY:
>                 return SECOND_OF_DAY_TYPE;
>             case SECOND_OF_MINUTE:
>                 return SECOND_OF_MINUTE_TYPE;
>             case MILLIS_OF_DAY:
>                 return MILLIS_OF_DAY_TYPE;
>             case MILLIS_OF_SECOND:
>                 return MILLIS_OF_SECOND_TYPE;
>             default:
>                 
>                 return this;
>             }
>         }
