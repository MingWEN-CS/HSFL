1a2,266
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> package org.joda.time.field;
> 
> import org.joda.time.DateTimeField;
> import org.joda.time.DurationField;
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> public class DividedDateTimeField extends DecoratedDateTimeField {
> 
>     static final long serialVersionUID = 8318475124230605365L;
> 
>     
>     final int iDivisor;
>     final DurationField iDurationField;
> 
>     private final int iMin;
>     private final int iMax;
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public DividedDateTimeField(DateTimeField field,
>                                 String name, String durationName, int divisor) {
>         super(field, name);
>                 
>         if (divisor < 2) {
>             throw new IllegalArgumentException("The divisor must be at least 2");
>         }
> 
>         DurationField unitField = field.getDurationField();
>         if (unitField == null) {
>             iDurationField = null;
>         } else {
>             iDurationField = new ScaledDurationField(unitField, durationName, divisor);
>         }
> 
>         iDivisor = divisor;
> 
>         int i = field.getMinimumValue();
>         int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);
> 
>         int j = field.getMaximumValue();
>         int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);
> 
>         iMin = min;
>         iMax = max;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
>     public DividedDateTimeField(RemainderDateTimeField remainderField, String name) {
>         super(remainderField.getWrappedField(), name);
>         int divisor = iDivisor = remainderField.iDivisor;
>         iDurationField = remainderField.iRangeField;
> 
>         DateTimeField field = getWrappedField();
>         int i = field.getMinimumValue();
>         int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);
> 
>         int j = field.getMaximumValue();
>         int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);
> 
>         iMin = min;
>         iMax = max;
>     }
> 
>     
> 
> 
> 
> 
> 
>     public int get(long instant) {
>         int value = getWrappedField().get(instant);
>         if (value >= 0) {
>             return value / iDivisor;
>         } else {
>             return ((value + 1) / iDivisor) - 1;
>         }
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     public long add(long instant, int amount) {
>         return getWrappedField().add(instant, amount * iDivisor);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     public long add(long instant, long amount) {
>         return getWrappedField().add(instant, amount * iDivisor);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     public long addWrapped(long instant, int amount) {
>         return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));
>     }
> 
>     public int getDifference(long minuendInstant, long subtrahendInstant) {
>         return getWrappedField().getDifference(minuendInstant, subtrahendInstant) / iDivisor;
>     }
> 
>     public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {
>         return getWrappedField().getDifferenceAsLong(minuendInstant, subtrahendInstant) / iDivisor;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     public long set(long instant, int value) {
>         FieldUtils.verifyValueBounds(this, value, iMin, iMax);
>         int remainder = getRemainder(getWrappedField().get(instant));
>         return getWrappedField().set(instant, value * iDivisor + remainder);
>     }
> 
>     
> 
> 
>     public DurationField getDurationField() {
>         return iDurationField;
>     }
> 
>     
> 
> 
> 
> 
>     public int getMinimumValue() {
>         return iMin;
>     }
> 
>     
> 
> 
> 
> 
>     public int getMaximumValue() {
>         return iMax;
>     }
> 
>     public long roundFloor(long instant) {
>         DateTimeField field = getWrappedField();
>         return field.roundFloor(field.set(instant, get(instant) * iDivisor));
>     }
> 
>     public long remainder(long instant) {
>         return set(instant, get(getWrappedField().remainder(instant)));
>     }
> 
>     
> 
> 
> 
> 
>     public int getDivisor() {
>         return iDivisor;
>     }
> 
>     private int getRemainder(int value) {
>         if (value >= 0) {
>             return value % iDivisor;
>         } else {
>             return (iDivisor - 1) + ((value + 1) % iDivisor);
>         }
>     }
> 
> }
