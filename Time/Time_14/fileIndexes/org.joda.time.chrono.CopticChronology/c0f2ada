














package org.joda.time.chrono;

import java.util.HashMap;
import java.util.Map;

import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeConstants;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeZone;
import org.joda.time.field.SkipDateTimeField;
























public final class CopticChronology extends BasicFixedMonthChronology {

    
    private static final long serialVersionUID = -5972804258688333942L;

    



    public static final int AM = DateTimeConstants.CE;

    
    private static final DateTimeField ERA_FIELD = new BasicSingleEraDateTimeField("AM");

    
    private static final int MIN_YEAR = -292269337;

    





    private static final int MAX_YEAR = 292271022;

    
    private static final Map cCache = new HashMap();

    
    private static final CopticChronology INSTANCE_UTC;
    static {
        
        INSTANCE_UTC = getInstance(DateTimeZone.UTC);
    }

    
    





    public static CopticChronology getInstanceUTC() {
        return INSTANCE_UTC;
    }

    




    public static CopticChronology getInstance() {
        return getInstance(DateTimeZone.getDefault(), 4);
    }

    





    public static CopticChronology getInstance(DateTimeZone zone) {
        return getInstance(zone, 4);
    }

    






    public static CopticChronology getInstance(DateTimeZone zone, int minDaysInFirstWeek) {
        if (zone == null) {
            zone = DateTimeZone.getDefault();
        }
        CopticChronology chrono;
        synchronized (cCache) {
            CopticChronology[] chronos = (CopticChronology[]) cCache.get(zone);
            if (chronos == null) {
                chronos = new CopticChronology[7];
                cCache.put(zone, chronos);
            }
            try {
                chrono = chronos[minDaysInFirstWeek - 1];
            } catch (ArrayIndexOutOfBoundsException e) {
                throw new IllegalArgumentException
                    ("Invalid min days in first week: " + minDaysInFirstWeek);
            }
            if (chrono == null) {
                if (zone == DateTimeZone.UTC) {
                    
                    chrono = new CopticChronology(null, null, minDaysInFirstWeek);
                    
                    DateTime lowerLimit = new DateTime(1, 1, 1, 0, 0, 0, 0, chrono);
                    chrono = new CopticChronology
                        (LimitChronology.getInstance(chrono, lowerLimit, null),
                         null, minDaysInFirstWeek);
                } else {
                    chrono = getInstance(DateTimeZone.UTC, minDaysInFirstWeek);
                    chrono = new CopticChronology
                        (ZonedChronology.getInstance(chrono, zone), null, minDaysInFirstWeek);
                }
                chronos[minDaysInFirstWeek - 1] = chrono;
            }
        }
        return chrono;
    }

    
    
    


    CopticChronology(Chronology base, Object param, int minDaysInFirstWeek) {
        super(base, param, minDaysInFirstWeek);
    }

    


    private Object readResolve() {
        Chronology base = getBase();
        return base == null ? getInstanceUTC() : getInstance(base.getZone());
    }

    
    
    




    public Chronology withUTC() {
        return INSTANCE_UTC;
    }

    





    public Chronology withZone(DateTimeZone zone) {
        if (zone == null) {
            zone = DateTimeZone.getDefault();
        }
        if (zone == getZone()) {
            return this;
        }
        return getInstance(zone);
    }

    
    long calculateFirstDayOfYearMillis(int year) {
        if (year > MAX_YEAR) {
            throw new ArithmeticException("Year is too large: " + year + " > " + MAX_YEAR);
        }
        if (year < MIN_YEAR) {
            throw new ArithmeticException("Year is too small: " + year + " < " + MIN_YEAR);
        }

        
        
        

        int relativeYear = year - 1687;
        int leapYears;
        if (relativeYear <= 0) {
            
            
            leapYears = (relativeYear + 3) >> 2;
        } else {
            leapYears = relativeYear >> 2;
            
            if (!isLeapYear(year)) {
                leapYears++;
            }
        }
        
        long millis = (relativeYear * 365L + leapYears)
            * (long)DateTimeConstants.MILLIS_PER_DAY;

        

        return millis + (365L - 112) * DateTimeConstants.MILLIS_PER_DAY;
    }

    
    int getMinYear() {
        return MIN_YEAR;
    }

    
    int getMaxYear() {
        return MAX_YEAR;
    }

    
    long getApproxMillisAtEpoch() {
        return 1686L * MILLIS_PER_YEAR + 112L * DateTimeConstants.MILLIS_PER_DAY;
    }

    
    protected void assemble(Fields fields) {
        if (getBase() == null) {
            super.assemble(fields);

            
            fields.year = new SkipDateTimeField(this, fields.year);
            fields.weekyear = new SkipDateTimeField(this, fields.weekyear);
            
            fields.era = ERA_FIELD;
            fields.months = MONTH_DURATION_FIELD;
            fields.monthOfYear = new BasicFixedMonthOfYearDateTimeField(this, MONTH_DURATION_FIELD);
            fields.dayOfMonth = new BasicDayOfMonthDateTimeField(this, fields.days);
        }
    }

}
