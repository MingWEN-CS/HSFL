103a104
> 
117a119,121
> import java.util.ArrayList;
> import java.util.Iterator;
> import java.util.List;
120a125
> import org.jfree.chart.annotations.CategoryAnnotation;
142a148
> import org.jfree.chart.util.Layer;
195a202,217
> 
> 
> 
> 
> 
>     private List backgroundAnnotations;
> 
>     
> 
> 
> 
> 
> 
>     private List foregroundAnnotations;
> 
>     
213c235,237
<             = new StandardCategorySeriesLabelGenerator();
---
>                 = new StandardCategorySeriesLabelGenerator();
>         this.backgroundAnnotations = new ArrayList();
>         this.foregroundAnnotations = new ArrayList();
592a617,688
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public void addAnnotation(CategoryAnnotation annotation) {
>         
>         addAnnotation(annotation, Layer.FOREGROUND);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     public void addAnnotation(CategoryAnnotation annotation, Layer layer) {
>         if (annotation == null) {
>             throw new IllegalArgumentException("Null 'annotation' argument.");
>         }
>         if (layer.equals(Layer.FOREGROUND)) {
>             this.foregroundAnnotations.add(annotation);
>             notifyListeners(new RendererChangeEvent(this));
>         }
>         else if (layer.equals(Layer.BACKGROUND)) {
>             this.backgroundAnnotations.add(annotation);
>             notifyListeners(new RendererChangeEvent(this));
>         }
>         else {
>             
>             throw new RuntimeException("Unknown layer.");
>         }
>     }
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public boolean removeAnnotation(CategoryAnnotation annotation) {
>         boolean removed = this.foregroundAnnotations.remove(annotation);
>         removed = removed & this.backgroundAnnotations.remove(annotation);
>         notifyListeners(new RendererChangeEvent(this));
>         return removed;
>     }
> 
>     
> 
> 
> 
> 
> 
>     public void removeAnnotations() {
>         this.foregroundAnnotations.clear();
>         this.backgroundAnnotations.clear();
>         notifyListeners(new RendererChangeEvent(this));
>     }
> 
>     
1238a1335,1342
>         if (!ObjectUtilities.equal(this.backgroundAnnotations,
>                 that.backgroundAnnotations)) {
>             return false;
>         }
>         if (!ObjectUtilities.equal(this.foregroundAnnotations,
>                 that.foregroundAnnotations)) {
>             return false;
>         }
1306a1411,1445
>         }
> 
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public void drawAnnotations(Graphics2D g2, Rectangle2D dataArea,
>             CategoryAxis domainAxis, ValueAxis rangeAxis, Layer layer,
>             PlotRenderingInfo info) {
> 
>         Iterator iterator = null;
>         if (layer.equals(Layer.FOREGROUND)) {
>             iterator = this.foregroundAnnotations.iterator();
>         }
>         else if (layer.equals(Layer.BACKGROUND)) {
>             iterator = this.backgroundAnnotations.iterator();
>         }
>         else {
>             
>             throw new RuntimeException("Unknown layer.");
>         }
>         while (iterator.hasNext()) {
>             CategoryAnnotation annotation = (CategoryAnnotation) iterator.next();
>             annotation.draw(g2, this.plot, dataArea, domainAxis, rangeAxis,
>                     0, info);
