39a40,50
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
1037a1049,1515
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static long getFragmentInMilliseconds(Date date, int fragment) {
>         return getFragment(date, fragment, Calendar.MILLISECOND);    
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static long getFragmentInSeconds(Date date, int fragment) {
>         return getFragment(date, fragment, Calendar.SECOND);
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static long getFragmentInMinutes(Date date, int fragment) {
>         return getFragment(date, fragment, Calendar.MINUTE);
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static long getFragmentInHours(Date date, int fragment) {
>         return getFragment(date, fragment, Calendar.HOUR_OF_DAY);
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static long getFragmentInDays(Date date, int fragment) {
>         return getFragment(date, fragment, Calendar.DAY_OF_YEAR);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>   public static long getFragmentInMilliseconds(Calendar calendar, int fragment) {
>     return getFragment(calendar, fragment, Calendar.MILLISECOND);
>   }
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static long getFragmentInSeconds(Calendar calendar, int fragment) {
>         return getFragment(calendar, fragment, Calendar.SECOND);
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static long getFragmentInMinutes(Calendar calendar, int fragment) {
>         return getFragment(calendar, fragment, Calendar.MINUTE);
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static long getFragmentInHours(Calendar calendar, int fragment) {
>         return getFragment(calendar, fragment, Calendar.HOUR_OF_DAY);
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static long getFragmentInDays(Calendar calendar, int fragment) {
>         return getFragment(calendar, fragment, Calendar.DAY_OF_YEAR);
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     private static long getFragment(Date date, int fragment, int unit) {
>         if(date == null) {
>             throw  new IllegalArgumentException("The date must not be null");
>         }
>         Calendar calendar = Calendar.getInstance();
>         calendar.setTime(date);
>         return getFragment(calendar, fragment, unit);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     private static long getFragment(Calendar calendar, int fragment, int unit) {
>         if(calendar == null) {
>             throw  new IllegalArgumentException("The date must not be null"); 
>         }
>         long millisPerUnit = getMillisPerUnit(unit);
>         long result = 0;
>         
>         
>         switch (fragment) {
>             case Calendar.YEAR:
>                 result += (calendar.get(Calendar.DAY_OF_YEAR) * MILLIS_PER_DAY) / millisPerUnit;
>                 break;
>             case Calendar.MONTH:
>                 result += (calendar.get(Calendar.DAY_OF_MONTH) * MILLIS_PER_DAY) / millisPerUnit;
>                 break;
>         }
> 
>         switch (fragment) {
>             
>             case Calendar.YEAR:
>             case Calendar.MONTH:
>             
>             
>             case Calendar.DAY_OF_YEAR:
>             case Calendar.DATE:
>                 result += (calendar.get(Calendar.HOUR_OF_DAY) * MILLIS_PER_HOUR) / millisPerUnit;
>             case Calendar.HOUR_OF_DAY:
>                 result += (calendar.get(Calendar.MINUTE) * MILLIS_PER_MINUTE) / millisPerUnit;
>             case Calendar.MINUTE:
>                 result += (calendar.get(Calendar.SECOND) * MILLIS_PER_SECOND) / millisPerUnit;
>             case Calendar.SECOND:
>                 result += (calendar.get(Calendar.MILLISECOND) * 1) / millisPerUnit;
>                 break;
>             case Calendar.MILLISECOND: break;
>                 default: throw new IllegalArgumentException("The fragment " + fragment + " is not supported");
>         }
>         return result;
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
>     private static long getMillisPerUnit(int unit) {
>         long result = Long.MAX_VALUE;
>         switch (unit) {
>             case Calendar.DAY_OF_YEAR:
>             case Calendar.DATE:
>                 result = MILLIS_PER_DAY;
>                 break;
>             case Calendar.HOUR_OF_DAY:
>                 result = MILLIS_PER_HOUR;
>                 break;
>             case Calendar.MINUTE:
>                 result = MILLIS_PER_MINUTE;
>                 break;
>             case Calendar.SECOND:
>                 result = MILLIS_PER_SECOND;
>                 break;
>             case Calendar.MILLISECOND:
>                 result = 1;
>                 break;
>             default: throw new IllegalArgumentException("The unit " + unit + " cannot be represented is milleseconds");
>         }
>         return result;
