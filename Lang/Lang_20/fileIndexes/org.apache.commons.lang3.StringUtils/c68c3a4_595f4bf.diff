193,194c193,194
<     public static boolean isEmpty(CharSequence str) {
<         return str == null || str.length() == 0;
---
>     public static boolean isEmpty(CharSequence cs) {
>         return cs == null || cs.length() == 0;
211,212c211,212
<     public static boolean isNotEmpty(CharSequence str) {
<         return !StringUtils.isEmpty(str);
---
>     public static boolean isNotEmpty(CharSequence cs) {
>         return !StringUtils.isEmpty(cs);
230c230
<     public static boolean isBlank(CharSequence str) {
---
>     public static boolean isBlank(CharSequence cs) {
232c232
<         if (str == null || (strLen = str.length()) == 0) {
---
>         if (cs == null || (strLen = cs.length()) == 0) {
236c236
<             if ((Character.isWhitespace(str.charAt(i)) == false)) {
---
>             if ((Character.isWhitespace(cs.charAt(i)) == false)) {
259,260c259,260
<     public static boolean isNotBlank(CharSequence str) {
<         return !StringUtils.isBlank(str);
---
>     public static boolean isNotBlank(CharSequence cs) {
>         return !StringUtils.isBlank(cs);
699,700c699,700
<     public static boolean equals(String str1, String str2) {
<         return str1 == null ? str2 == null : str1.equals(str2);
---
>     public static boolean equals(CharSequence cs1, CharSequence cs2) {
>         return cs1 == null ? cs2 == null : cs1.equals(cs2);
1371,1372c1371,1372
<     public static int indexOfAny(String str, char[] searchChars) {
<         if (isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {
---
>     public static int indexOfAny(CharSequence cs, char[] searchChars) {
>         if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
1375,1376c1375,1376
<         for (int i = 0; i < str.length(); i++) {
<             char ch = str.charAt(i);
---
>         for (int i = 0; i < cs.length(); i++) {
>             char ch = cs.charAt(i);
1408,1409c1408,1409
<     public static int indexOfAny(String str, String searchChars) {
<         if (isEmpty(str) || isEmpty(searchChars)) {
---
>     public static int indexOfAny(CharSequence cs, String searchChars) {
>         if (isEmpty(cs) || isEmpty(searchChars)) {
1412c1412
<         return indexOfAny(str, searchChars.toCharArray());
---
>         return indexOfAny(cs, searchChars.toCharArray());
1440,1441c1440,1441
<     public static boolean containsAny(String str, char[] searchChars) {
<         if (str == null || str.length() == 0 || searchChars == null || searchChars.length == 0) {
---
>     public static boolean containsAny(CharSequence cs, char[] searchChars) {
>         if (cs == null || cs.length() == 0 || searchChars == null || searchChars.length == 0) {
1444,1445c1444,1445
<         for (int i = 0; i < str.length(); i++) {
<             char ch = str.charAt(i);
---
>         for (int i = 0; i < cs.length(); i++) {
>             char ch = cs.charAt(i);
1482c1482
<     public static boolean containsAny(String str, String searchChars) {
---
>     public static boolean containsAny(CharSequence cs, String searchChars) {
1486c1486
<         return containsAny(str, searchChars.toCharArray());
---
>         return containsAny(cs, searchChars.toCharArray());
1513,1514c1513,1514
<     public static int indexOfAnyBut(String str, char[] searchChars) {
<         if (isEmpty(str) || ArrayUtils.isEmpty(searchChars)) {
---
>     public static int indexOfAnyBut(CharSequence cs, char[] searchChars) {
>         if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {
1517,1518c1517,1518
<         outer : for (int i = 0; i < str.length(); i++) {
<             char ch = str.charAt(i);
---
>         outer : for (int i = 0; i < cs.length(); i++) {
>             char ch = cs.charAt(i);
1586c1586
<     public static boolean containsOnly(String str, char[] valid) {
---
>     public static boolean containsOnly(CharSequence cs, char[] valid) {
1588c1588
<         if ((valid == null) || (str == null)) {
---
>         if (valid == null || cs == null) {
1591c1591
<         if (str.length() == 0) {
---
>         if (cs.length() == 0) {
1597c1597
<         return indexOfAnyBut(str, valid) == -1;
---
>         return indexOfAnyBut(cs, valid) == -1;
1622,1623c1622,1623
<     public static boolean containsOnly(String str, String validChars) {
<         if (str == null || validChars == null) {
---
>     public static boolean containsOnly(CharSequence cs, String validChars) {
>         if (cs == null || validChars == null) {
1626c1626
<         return containsOnly(str, validChars.toCharArray());
---
>         return containsOnly(cs, validChars.toCharArray());
1653,1654c1653,1654
<     public static boolean containsNone(String str, char[] invalidChars) {
<         if (str == null || invalidChars == null) {
---
>     public static boolean containsNone(CharSequence cs, char[] invalidChars) {
>         if (cs == null || invalidChars == null) {
1657c1657
<         int strSize = str.length();
---
>         int strSize = cs.length();
1660c1660
<             char ch = str.charAt(i);
---
>             char ch = cs.charAt(i);
1692,1693c1692,1693
<     public static boolean containsNone(String str, String invalidChars) {
<         if (str == null || invalidChars == null) {
---
>     public static boolean containsNone(CharSequence cs, String invalidChars) {
>         if (cs == null || invalidChars == null) {
1696c1696
<         return containsNone(str, invalidChars.toCharArray());
---
>         return containsNone(cs, invalidChars.toCharArray());
1728c1728
<         if ((str == null) || (searchStrs == null)) {
---
>         if (str == null || searchStrs == null) {
4609c4609
<     
---
> 	
4617,4619c4617,4622
<     public static int length(CharSequence str) {
<         return str == null ? 0 : str.length();
<     }
---
> 
> 
> 
> 	public static int length(CharSequence cs) {
> 		return CharSequenceUtils.length(cs);
> 	}
4851c4854,4857
<     public static String capitalize(String str) {
---
>     public static String capitalize(CharSequence cs) {
>         if (cs == null ) {
>             return null;
>         }
4853,4854c4859,4860
<         if (str == null || (strLen = str.length()) == 0) {
<             return str;
---
>         if ((strLen = cs.length()) == 0) {
>             return cs.toString();
4857,4858c4863,4864
<             .append(Character.toTitleCase(str.charAt(0)))
<             .append(str.substring(1))
---
>             .append(Character.toTitleCase(cs.charAt(0)))
>             .append(CharSequenceUtils.subSequence(cs, 1))
4882c4888,4891
<     public static String uncapitalize(String str) {
---
>     public static String uncapitalize(CharSequence cs) {
>         if (cs == null ) {
>             return null;
>         }
4884,4885c4893,4894
<         if (str == null || (strLen = str.length()) == 0) {
<             return str;
---
>         if ((strLen = cs.length()) == 0) {
>             return cs.toString();
4888,4889c4897,4898
<             .append(Character.toLowerCase(str.charAt(0)))
<             .append(str.substring(1))
---
>             .append(Character.toLowerCase(cs.charAt(0)))
>             .append(CharSequenceUtils.subSequence(cs, 1))
4996,4997c5005,5006
<     public static boolean isAlpha(String str) {
<         if (str == null) {
---
>     public static boolean isAlpha(CharSequence cs) {
>         if (cs == null) {
5000c5009
<         int sz = str.length();
---
>         int sz = cs.length();
5002c5011
<             if (Character.isLetter(str.charAt(i)) == false) {
---
>             if (Character.isLetter(cs.charAt(i)) == false) {
5030,5031c5039,5040
<     public static boolean isAlphaSpace(String str) {
<         if (str == null) {
---
>     public static boolean isAlphaSpace(CharSequence cs) {
>         if (cs == null) {
5034c5043
<         int sz = str.length();
---
>         int sz = cs.length();
5036c5045
<             if ((Character.isLetter(str.charAt(i)) == false) && (str.charAt(i) != ' ')) {
---
>             if ((Character.isLetter(cs.charAt(i)) == false) && (cs.charAt(i) != ' ')) {
5063,5064c5072,5073
<     public static boolean isAlphanumeric(String str) {
<         if (str == null) {
---
>     public static boolean isAlphanumeric(CharSequence cs) {
>         if (cs == null) {
5067c5076
<         int sz = str.length();
---
>         int sz = cs.length();
5069c5078
<             if (Character.isLetterOrDigit(str.charAt(i)) == false) {
---
>             if (Character.isLetterOrDigit(cs.charAt(i)) == false) {
5097,5098c5106,5107
<     public static boolean isAlphanumericSpace(String str) {
<         if (str == null) {
---
>     public static boolean isAlphanumericSpace(CharSequence cs) {
>         if (cs == null) {
5101c5110
<         int sz = str.length();
---
>         int sz = cs.length();
5103c5112
<             if ((Character.isLetterOrDigit(str.charAt(i)) == false) && (str.charAt(i) != ' ')) {
---
>             if ((Character.isLetterOrDigit(cs.charAt(i)) == false) && (cs.charAt(i) != ' ')) {
5135,5136c5144,5145
<     public static boolean isAsciiPrintable(String str) {
<         if (str == null) {
---
>     public static boolean isAsciiPrintable(CharSequence cs) {
>         if (cs == null) {
5139c5148
<         int sz = str.length();
---
>         int sz = cs.length();
5141c5150
<             if (CharUtils.isAsciiPrintable(str.charAt(i)) == false) {
---
>             if (CharUtils.isAsciiPrintable(cs.charAt(i)) == false) {
5169,5170c5178,5179
<     public static boolean isNumeric(String str) {
<         if (str == null) {
---
>     public static boolean isNumeric(CharSequence cs) {
>         if (cs == null) {
5173c5182
<         int sz = str.length();
---
>         int sz = cs.length();
5175c5184
<             if (Character.isDigit(str.charAt(i)) == false) {
---
>             if (Character.isDigit(cs.charAt(i)) == false) {
5205,5206c5214,5215
<     public static boolean isNumericSpace(String str) {
<         if (str == null) {
---
>     public static boolean isNumericSpace(CharSequence cs) {
>         if (cs == null) {
5209c5218
<         int sz = str.length();
---
>         int sz = cs.length();
5211c5220
<             if ((Character.isDigit(str.charAt(i)) == false) && (str.charAt(i) != ' ')) {
---
>             if ((Character.isDigit(cs.charAt(i)) == false) && (cs.charAt(i) != ' ')) {
5237,5238c5246,5247
<     public static boolean isWhitespace(String str) {
<         if (str == null) {
---
>     public static boolean isWhitespace(CharSequence cs) {
>         if (cs == null) {
5241c5250
<         int sz = str.length();
---
>         int sz = cs.length();
5243c5252
<             if ((Character.isWhitespace(str.charAt(i)) == false)) {
---
>             if ((Character.isWhitespace(cs.charAt(i)) == false)) {
5268,5269c5277,5278
<     public static boolean isAllLowerCase(String str) {
<         if (str == null || isEmpty(str)) {
---
>     public static boolean isAllLowerCase(CharSequence cs) {
>         if (cs == null || isEmpty(cs)) {
5272c5281
<         int sz = str.length();
---
>         int sz = cs.length();
5274c5283
<             if (Character.isLowerCase(str.charAt(i)) == false) {
---
>             if (Character.isLowerCase(cs.charAt(i)) == false) {
5299,5300c5308,5309
<     public static boolean isAllUpperCase(String str) {
<         if (str == null || isEmpty(str)) {
---
>     public static boolean isAllUpperCase(CharSequence cs) {
>         if (cs == null || isEmpty(cs)) {
5303c5312
<         int sz = str.length();
---
>         int sz = cs.length();
5305c5314
<             if (Character.isUpperCase(str.charAt(i)) == false) {
---
>             if (Character.isUpperCase(cs.charAt(i)) == false) {
5396c5405
<         return new StringBuilder(str).reverse().toString();
---
>         return CharSequenceUtils.reverse(str).toString();
5644,5645c5653,5654
<     public static int indexOfDifference(String str1, String str2) {
<         if (str1 == str2) {
---
>     public static int indexOfDifference(CharSequence cs1, CharSequence cs2) {
>         if (cs1 == cs2) {
5648c5657
<         if (str1 == null || str2 == null) {
---
>         if (cs1 == null || cs2 == null) {
5652,5653c5661,5662
<         for (i = 0; i < str1.length() && i < str2.length(); ++i) {
<             if (str1.charAt(i) != str2.charAt(i)) {
---
>         for (i = 0; i < cs1.length() && i < cs2.length(); ++i) {
>             if (cs1.charAt(i) != cs2.charAt(i)) {
5657c5666
<         if (i < str2.length() || i < str1.length()) {
---
>         if (i < cs2.length() || i < cs1.length()) {
5694,5695c5703,5704
<     public static int indexOfDifference(String[] strs) {
<         if (strs == null || strs.length <= 1) {
---
>     public static int indexOfDifference(CharSequence[] css) {
>         if (css == null || css.length <= 1) {
5700c5709
<         int arrayLen = strs.length;
---
>         int arrayLen = css.length;
5708c5717
<             if (strs[i] == null) {
---
>             if (css[i] == null) {
5713,5714c5722,5723
<                 shortestStrLen = Math.min(strs[i].length(), shortestStrLen);
<                 longestStrLen = Math.max(strs[i].length(), longestStrLen);
---
>                 shortestStrLen = Math.min(css[i].length(), shortestStrLen);
>                 longestStrLen = Math.max(css[i].length(), longestStrLen);
5731c5740
<             char comparisonChar = strs[0].charAt(stringPos);
---
>             char comparisonChar = css[0].charAt(stringPos);
5733c5742
<                 if (strs[arrayPos].charAt(stringPos) != comparisonChar) {
---
>                 if (css[arrayPos].charAt(stringPos) != comparisonChar) {
5841c5850
<     public static int getLevenshteinDistance(String s, String t) {
---
>     public static int getLevenshteinDistance(CharSequence s, CharSequence t) {
5874c5883
<             String tmp = s;
---
>         	CharSequence tmp = s;
6112c6121
<             return (str == null && suffix == null);
---
>             return str == null && suffix == null;
