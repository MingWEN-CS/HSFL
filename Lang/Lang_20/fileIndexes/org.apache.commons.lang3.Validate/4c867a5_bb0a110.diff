21a22
> import java.util.regex.Pattern;
50a52,54
>     private static final String DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE = "The value %s is not in the specified exclusive range of %s to %s";
>     private static final String DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE = "The value %s is not in the specified inclusive range of %s to %s";
>     private static final String DEFAULT_MATCHES_PATTERN_EX = "The string %s does not match the pattern %s";
783a788,882
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static void matchesPattern(CharSequence input, String pattern)
>     {
>         if (Pattern.matches(pattern, input) == false)
>         {
>             throw new IllegalArgumentException(String.format(DEFAULT_MATCHES_PATTERN_EX, input, pattern));
>         }
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static void matchesPattern(CharSequence input, String pattern, String message, Object... values)
>     {
>         if (Pattern.matches(pattern, input) == false)
>         {
>             throw new IllegalArgumentException(String.format(message, values));
>         }
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static <T> void inclusiveBetween(T start, T end, Comparable<T> value)
>     {
>         if (value.compareTo(start) < 0 || value.compareTo(end) > 0)
>         {
>             throw new IllegalArgumentException(String.format(DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE, value, start, end));
>         }
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static <T> void inclusiveBetween(T start, T end, Comparable<T> value, String message, Object... values)
>     {
>         if (value.compareTo(start) < 0 || value.compareTo(end) > 0)
>         {
>             throw new IllegalArgumentException(String.format(message, values));
>         }
>     }
>     
>     
> 
> 
> 
> 
> 
> 
784a884,917
> 
> 
> 
> 
>     public static <T> void exclusiveBetween(T start, T end, Comparable<T> value)
>     {
>         if (value.compareTo(start) <= 0 || value.compareTo(end) >= 0)
>         {
>             throw new IllegalArgumentException(String.format(DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE, value, start, end));
>         }
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static <T> void exclusiveBetween(T start, T end, Comparable<T> value, String message, Object... values)
>     {
>         if (value.compareTo(start) <= 0 || value.compareTo(end) >= 0)
>         {
>             throw new IllegalArgumentException(String.format(message, values));
>         }
>     }
