87d86
< 
91c90
<     public static final Object[] EMPTY_OBJECT_ARRAY = new Object[0];
---
>     public static final boolean[] EMPTY_BOOLEAN_ARRAY = new boolean[0];
95c94
<     public static final Class[] EMPTY_CLASS_ARRAY = new Class[0];
---
>     public static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY = new Boolean[0];
99c98
<     public static final String[] EMPTY_STRING_ARRAY = new String[0];
---
>     public static final byte[] EMPTY_BYTE_ARRAY = new byte[0];
103c102
<     public static final long[] EMPTY_LONG_ARRAY = new long[0];
---
>     public static final Byte[] EMPTY_BYTE_OBJECT_ARRAY = new Byte[0];
107c106
<     public static final Long[] EMPTY_LONG_OBJECT_ARRAY = new Long[0];
---
>     public static final char[] EMPTY_CHAR_ARRAY = new char[0];
111c110
<     public static final int[] EMPTY_INT_ARRAY = new int[0];
---
>     public static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY = new Character[0];
115c114
<     public static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY = new Integer[0];
---
>     public static final Class[] EMPTY_CLASS_ARRAY = new Class[0];
119c118
<     public static final short[] EMPTY_SHORT_ARRAY = new short[0];
---
>     public static final double[] EMPTY_DOUBLE_ARRAY = new double[0];
123c122
<     public static final Short[] EMPTY_SHORT_OBJECT_ARRAY = new Short[0];
---
>     public static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY = new Double[0];
127c126
<     public static final byte[] EMPTY_BYTE_ARRAY = new byte[0];
---
>     public static final float[] EMPTY_FLOAT_ARRAY = new float[0];
131c130
<     public static final Byte[] EMPTY_BYTE_OBJECT_ARRAY = new Byte[0];
---
>     public static final Float[] EMPTY_FLOAT_OBJECT_ARRAY = new Float[0];
135c134
<     public static final double[] EMPTY_DOUBLE_ARRAY = new double[0];
---
>     public static final int[] EMPTY_INT_ARRAY = new int[0];
139c138
<     public static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY = new Double[0];
---
>     public static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY = new Integer[0];
143c142
<     public static final float[] EMPTY_FLOAT_ARRAY = new float[0];
---
>     public static final long[] EMPTY_LONG_ARRAY = new long[0];
147c146,147
<     public static final Float[] EMPTY_FLOAT_OBJECT_ARRAY = new Float[0];
---
>     public static final Long[] EMPTY_LONG_OBJECT_ARRAY = new Long[0];
> 
151c151
<     public static final boolean[] EMPTY_BOOLEAN_ARRAY = new boolean[0];
---
>     public static final Object[] EMPTY_OBJECT_ARRAY = new Object[0];
155c155
<     public static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY = new Boolean[0];
---
>     public static final short[] EMPTY_SHORT_ARRAY = new short[0];
159c159
<     public static final char[] EMPTY_CHAR_ARRAY = new char[0];
---
>     public static final Short[] EMPTY_SHORT_OBJECT_ARRAY = new Short[0];
163c163
<     public static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY = new Character[0];
---
>     public static final String[] EMPTY_STRING_ARRAY = new String[0];
172,177d171
<     public ArrayUtils() {
<     }
<     
<     
<     
<     
188,190d181
<     public static String toString(final Object array) {
<         return toString(array, "{}");
<     }
192d182
<     
203,204c193
<     
<     public static String toString(final Object array, final String stringIfNull) {
---
>     public static Object[] add(final Object[] array, final int index, final Object element) {
206c195,200
<             return stringIfNull;
---
>             if (index != 0) {
>                 throw new IndexOutOfBoundsException("Index: " + index + ", Length: 0");
>             }
>             Object joinedArray = Array.newInstance(element != null ? element.getClass() : Object.class, 1);
>             Array.set(joinedArray, 0, element);
>             return (Object[]) joinedArray;
208c202,212
<         return new ToStringBuilder(array, ToStringStyle.SIMPLE_STYLE).append(array).toString();
---
>         int length = array.length;
>         if (index > length || index < 0) {
>             throw new IndexOutOfBoundsException("Index: " + index + ", Length: " + length);
>         }
>         Object result = Array.newInstance(array.getClass().getComponentType(), length + 1);
>         System.arraycopy(array, 0, result, 0, index);
>         Array.set(result, index, element);
>         if (index < length) {
>             System.arraycopy(array, index, result, index + 1, length - index);
>         }
>         return (Object[]) result;
219,221d222
<     public static int hashCode(final Object array) {
<         return new HashCodeBuilder().append(array).toHashCode();
<     }
223d223
<     
233,234c233,251
<     public static boolean isEquals(final Object array1, final Object array2) {
<         return new EqualsBuilder().append(array1, array2).isEquals();
---
> 
> 
> 
> 
> 
>     public static Object[] add(Object[] array, Object element) {
>         Object joinedArray;
>         int elementPos;
>         if (array != null) {
>             joinedArray = Array.newInstance(array.getClass().getComponentType(), array.length + 1);
>             System.arraycopy(array, 0, joinedArray, 0, array.length);
>             elementPos = array.length;
>         } else {
>             
>             joinedArray = Array.newInstance(element != null ? element.getClass() : Object.class, 1);
>             elementPos = 0;
>         }
>         Array.set(joinedArray, elementPos, element);
>         return (Object[]) joinedArray;
238,239d254
<     
<     
247a263,271
>     public static boolean[] clone(final boolean[] array) {
>         if (array == null) {
>             return null;
>         }
>         return (boolean[]) array.clone();
>     }
> 
>     
> 
254a279,284
>     public static byte[] clone(final byte[] array) {
>         if (array == null) {
>             return null;
>         }
>         return (byte[]) array.clone();
>     }
255a286
>     
264c295
<     public static Map toMap(final Object[] array) {
---
>     public static char[] clone(final char[] array) {
268,288c299
<         final Map map = new HashMap((int) (array.length * 1.5));
<         for (int i = 0; i < array.length; i++) {
<             Object object = array[i];
<             if (object instanceof Map.Entry) {
<                 Map.Entry entry = (Map.Entry) object;
<                 map.put(entry.getKey(), entry.getValue());
<             } else if (object instanceof Object[]) {
<                 Object[] entry = (Object[]) object;
<                 if (entry.length < 2) {
<                     throw new IllegalArgumentException("Array element " + i + ", '"
<                         + object
<                         + "', has a length less than 2");
<                 }
<                 map.put(entry[0], entry[1]);
<             } else {
<                 throw new IllegalArgumentException("Array element " + i + ", '"
<                         + object
<                         + "', is neither of type Map.Entry nor an Array");
<             }
<         }
<         return map;
---
>         return (char[]) array.clone();
292,296d302
<     
<     
< 
< 
< 
305c311
<     public static Object[] clone(final Object[] array) {
---
>     public static double[] clone(final double[] array) {
309c315
<         return (Object[]) array.clone();
---
>         return (double[]) array.clone();
321c327
<     public static long[] clone(final long[] array) {
---
>     public static float[] clone(final float[] array) {
325c331
<         return (long[]) array.clone();
---
>         return (float[]) array.clone();
353c359
<     public static short[] clone(final short[] array) {
---
>     public static long[] clone(final long[] array) {
357c363
<         return (short[]) array.clone();
---
>         return (long[]) array.clone();
360a367,368
>     
>     
369c377,380
<     public static char[] clone(final char[] array) {
---
> 
> 
> 
>     public static Object[] clone(final Object[] array) {
373c384
<         return (char[]) array.clone();
---
>         return (Object[]) array.clone();
385c396
<     public static byte[] clone(final byte[] array) {
---
>     public static short[] clone(final short[] array) {
389c400
<         return (byte[]) array.clone();
---
>         return (short[]) array.clone();
401,405c412,413
<     public static double[] clone(final double[] array) {
<         if (array == null) {
<             return null;
<         }
<         return (double[]) array.clone();
---
>     public static boolean contains(final boolean[] array, final boolean valueToFind) {
>         return (indexOf(array, valueToFind) != -1);
417,421c425,426
<     public static float[] clone(final float[] array) {
<         if (array == null) {
<             return null;
<         }
<         return (float[]) array.clone();
---
>     public static boolean contains(final byte[] array, final byte valueToFind) {
>         return (indexOf(array, valueToFind) != -1);
433,437c438,439
<     public static boolean[] clone(final boolean[] array) {
<         if (array == null) {
<             return null;
<         }
<         return (boolean[]) array.clone();
---
>     public static boolean contains(final double[] array, final double valueToFind) {
>         return (indexOf(array, valueToFind) != -1);
441,442d442
<     
<     
454a455,457
>     public static boolean contains(final double[] array, final double valueToFind, final double tolerance) {
>         return (indexOf(array, valueToFind, 0, tolerance) != -1);
>     }
455a459
>     
463a468,470
>     public static boolean contains(final float[] array, final float valueToFind) {
>         return (indexOf(array, valueToFind) != -1);
>     }
464a472
>     
468,485c476,482
<     public static Object[] subarray(Object[] array, int startIndexInclusive, int endIndexExclusive) {
<         if (array == null) {
<             return null;
<         }
<         if (startIndexInclusive < 0) {
<             startIndexInclusive = 0;
<         }
<         if (endIndexExclusive > array.length) {
<             endIndexExclusive = array.length;
<         }
<         int newSize = endIndexExclusive - startIndexInclusive;
<         Class type = array.getClass().getComponentType();
<         if (newSize <= 0) {
<             return (Object[]) Array.newInstance(type, 0);
<         }
<         Object[] subarray = (Object[]) Array.newInstance(type, newSize);
<         System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
<         return subarray;
---
> 
> 
> 
> 
> 
>     public static boolean contains(final int[] array, final int valueToFind) {
>         return (indexOf(array, valueToFind) != -1);
496a494,496
>     public static boolean contains(final long[] array, final long valueToFind) {
>         return (indexOf(array, valueToFind) != -1);
>     }
497a498
>     
506,523c507,508
<     public static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive) {
<         if (array == null) {
<             return null;
<         }
<         if (startIndexInclusive < 0) {
<             startIndexInclusive = 0;
<         }
<         if (endIndexExclusive > array.length) {
<             endIndexExclusive = array.length;
<         }
<         int newSize = endIndexExclusive - startIndexInclusive;
<         if (newSize <= 0) {
<             return EMPTY_LONG_ARRAY;
<         }
< 
<         long[] subarray = new long[newSize];
<         System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
<         return subarray;
---
>     public static boolean contains(final Object[] array, final Object objectToFind) {
>         return (indexOf(array, objectToFind) != -1);
534a520,522
>     public static boolean contains(final short[] array, final short valueToFind) {
>         return (indexOf(array, valueToFind) != -1);
>     }
535a524
>     
542a532,534
>     public static int hashCode(final Object array) {
>         return new HashCodeBuilder().append(array).toHashCode();
>     }
544,557c536,538
<     public static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive) {
<         if (array == null) {
<             return null;
<         }
<         if (startIndexInclusive < 0) {
<             startIndexInclusive = 0;
<         }
<         if (endIndexExclusive > array.length) {
<             endIndexExclusive = array.length;
<         }
<         int newSize = endIndexExclusive - startIndexInclusive;
<         if (newSize <= 0) {
<             return EMPTY_INT_ARRAY;
<         }
---
>     
>     
>     
559,562d539
<         int[] subarray = new int[newSize];
<         System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
<         return subarray;
<     }
564d540
<     
571a548,550
>     public static int indexOf(final boolean[] array, final boolean valueToFind) {
>         return indexOf(array, valueToFind, 0);
>     }
572a552
>     
582,587c562,568
<     public static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive) {
<         if (array == null) {
<             return null;
<         }
<         if (startIndexInclusive < 0) {
<             startIndexInclusive = 0;
---
> 
> 
> 
> 
>     public static int indexOf(final boolean[] array, final boolean valueToFind, int startIndex) {
>         if (ArrayUtils.isEmpty(array)) {
>             return -1;
589,590c570,571
<         if (endIndexExclusive > array.length) {
<             endIndexExclusive = array.length;
---
>         if (startIndex < 0) {
>             startIndex = 0;
592,594c573,576
<         int newSize = endIndexExclusive - startIndexInclusive;
<         if (newSize <= 0) {
<             return EMPTY_SHORT_ARRAY;
---
>         for (int i = startIndex; i < array.length; i++) {
>             if (valueToFind == array[i]) {
>                 return i;
>             }
596,599c578
< 
<         short[] subarray = new short[newSize];
<         System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
<         return subarray;
---
>         return -1;
602a582,584
>     
>     
> 
610a593,597
>     public static int indexOf(final byte[] array, final byte valueToFind) {
>         return indexOf(array, valueToFind, 0);
>     }
> 
>     
620c607,611
<     public static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive) {
---
> 
> 
> 
> 
>     public static int indexOf(final byte[] array, final byte valueToFind, int startIndex) {
622,625c613
<             return null;
<         }
<         if (startIndexInclusive < 0) {
<             startIndexInclusive = 0;
---
>             return -1;
627,628c615,616
<         if (endIndexExclusive > array.length) {
<             endIndexExclusive = array.length;
---
>         if (startIndex < 0) {
>             startIndex = 0;
630,632c618,621
<         int newSize = endIndexExclusive - startIndexInclusive;
<         if (newSize <= 0) {
<             return EMPTY_CHAR_ARRAY;
---
>         for (int i = startIndex; i < array.length; i++) {
>             if (valueToFind == array[i]) {
>                 return i;
>             }
634,637c623
< 
<         char[] subarray = new char[newSize];
<         System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
<         return subarray;
---
>         return -1;
640a627,628
>     
>     
649a638,640
>     public static int indexOf(final double[] array, final double valueToFind) {
>         return indexOf(array, valueToFind, 0);
>     }
650a642
>     
658,671d649
<     public static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive) {
<         if (array == null) {
<             return null;
<         }
<         if (startIndexInclusive < 0) {
<             startIndexInclusive = 0;
<         }
<         if (endIndexExclusive > array.length) {
<             endIndexExclusive = array.length;
<         }
<         int newSize = endIndexExclusive - startIndexInclusive;
<         if (newSize <= 0) {
<             return EMPTY_BYTE_ARRAY;
<         }
673,676d650
<         byte[] subarray = new byte[newSize];
<         System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
<         return subarray;
<     }
678d651
<     
681a655,657
>     public static int indexOf(final double[] array, final double valueToFind, final double tolerance) {
>         return indexOf(array, valueToFind, 0, tolerance);
>     }
682a659
>     
696,701c673,675
<     public static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive) {
<         if (array == null) {
<             return null;
<         }
<         if (startIndexInclusive < 0) {
<             startIndexInclusive = 0;
---
>     public static int indexOf(final double[] array, final double valueToFind, int startIndex) {
>         if (ArrayUtils.isEmpty(array)) {
>             return -1;
703,704c677,678
<         if (endIndexExclusive > array.length) {
<             endIndexExclusive = array.length;
---
>         if (startIndex < 0) {
>             startIndex = 0;
706,708c680,683
<         int newSize = endIndexExclusive - startIndexInclusive;
<         if (newSize <= 0) {
<             return EMPTY_DOUBLE_ARRAY;
---
>         for (int i = startIndex; i < array.length; i++) {
>             if (valueToFind == array[i]) {
>                 return i;
>             }
710,713c685
< 
<         double[] subarray = new double[newSize];
<         System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
<         return subarray;
---
>         return -1;
733,739c705,707
< 
<     public static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive) {
<         if (array == null) {
<             return null;
<         }
<         if (startIndexInclusive < 0) {
<             startIndexInclusive = 0;
---
>     public static int indexOf(final double[] array, final double valueToFind, int startIndex, double tolerance) {
>         if (ArrayUtils.isEmpty(array)) {
>             return -1;
741,742c709,710
<         if (endIndexExclusive > array.length) {
<             endIndexExclusive = array.length;
---
>         if (startIndex < 0) {
>             startIndex = 0;
744,746c712,717
<         int newSize = endIndexExclusive - startIndexInclusive;
<         if (newSize <= 0) {
<             return EMPTY_FLOAT_ARRAY;
---
>         double min = valueToFind - tolerance;
>         double max = valueToFind + tolerance;
>         for (int i = startIndex; i < array.length; i++) {
>             if (array[i] >= min && array[i] <= max) {
>                 return i;
>             }
748,751c719
< 
<         float[] subarray = new float[newSize];
<         System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
<         return subarray;
---
>         return -1;
754a723,726
>     
>     
> 
> 
761a734,736
>     public static int indexOf(final float[] array, final float valueToFind) {
>         return indexOf(array, valueToFind, 0);
>     }
762a738
>     
772,777c748,754
<     public static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive) {
<         if (array == null) {
<             return null;
<         }
<         if (startIndexInclusive < 0) {
<             startIndexInclusive = 0;
---
> 
> 
> 
> 
>     public static int indexOf(final float[] array, final float valueToFind, int startIndex) {
>         if (ArrayUtils.isEmpty(array)) {
>             return -1;
779,780c756,757
<         if (endIndexExclusive > array.length) {
<             endIndexExclusive = array.length;
---
>         if (startIndex < 0) {
>             startIndex = 0;
782,784c759,762
<         int newSize = endIndexExclusive - startIndexInclusive;
<         if (newSize <= 0) {
<             return EMPTY_BOOLEAN_ARRAY;
---
>         for (int i = startIndex; i < array.length; i++) {
>             if (valueToFind == array[i]) {
>                 return i;
>             }
786,789c764
< 
<         boolean[] subarray = new boolean[newSize];
<         System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
<         return subarray;
---
>         return -1;
804,811c779,780
<     
<     public static boolean isSameLength(final Object[] array1, final Object[] array2) {
<         if ((array1 == null && array2 != null && array2.length > 0) ||
<             (array2 == null && array1 != null && array1.length > 0) ||
<             (array1 != null && array2 != null && array1.length != array2.length)) {
<                 return false;
<         }
<         return true;
---
>     public static int indexOf(final int[] array, final int valueToFind) {
>         return indexOf(array, valueToFind, 0);
823,827c792,799
<     public static boolean isSameLength(final long[] array1, final long[] array2) {
<         if ((array1 == null && array2 != null && array2.length > 0) ||
<             (array2 == null && array1 != null && array1.length > 0) ||
<             (array1 != null && array2 != null && array1.length != array2.length)) {
<                 return false;
---
> 
> 
> 
> 
> 
>     public static int indexOf(final int[] array, final int valueToFind, int startIndex) {
>         if (array == null) {
>             return -1;
829c801,809
<         return true;
---
>         if (startIndex < 0) {
>             startIndex = 0;
>         }
>         for (int i = startIndex; i < array.length; i++) {
>             if (valueToFind == array[i]) {
>                 return i;
>             }
>         }
>         return -1;
832a813,814
>     
>     
841,847c823,825
<     public static boolean isSameLength(final int[] array1, final int[] array2) {
<         if ((array1 == null && array2 != null && array2.length > 0) ||
<             (array2 == null && array1 != null && array1.length > 0) ||
<             (array1 != null && array2 != null && array1.length != array2.length)) {
<                 return false;
<         }
<         return true;
---
> 
>     public static int indexOf(final long[] array, final long valueToFind) {
>         return indexOf(array, valueToFind, 0);
859,863c837,844
<     public static boolean isSameLength(final short[] array1, final short[] array2) {
<         if ((array1 == null && array2 != null && array2.length > 0) ||
<             (array2 == null && array1 != null && array1.length > 0) ||
<             (array1 != null && array2 != null && array1.length != array2.length)) {
<                 return false;
---
> 
> 
> 
> 
> 
>     public static int indexOf(final long[] array, final long valueToFind, int startIndex) {
>         if (array == null) {
>             return -1;
865c846,854
<         return true;
---
>         if (startIndex < 0) {
>             startIndex = 0;
>         }
>         for (int i = startIndex; i < array.length; i++) {
>             if (valueToFind == array[i]) {
>                 return i;
>             }
>         }
>         return -1;
868a858,862
>     
>     
>     
>     
>     
877,883c871,873
<     public static boolean isSameLength(final char[] array1, final char[] array2) {
<         if ((array1 == null && array2 != null && array2.length > 0) ||
<             (array2 == null && array1 != null && array1.length > 0) ||
<             (array1 != null && array2 != null && array1.length != array2.length)) {
<                 return false;
<         }
<         return true;
---
> 
>     public static int indexOf(final Object[] array, final Object objectToFind) {
>         return indexOf(array, objectToFind, 0);
895,899c885,892
<     public static boolean isSameLength(final byte[] array1, final byte[] array2) {
<         if ((array1 == null && array2 != null && array2.length > 0) ||
<             (array2 == null && array1 != null && array1.length > 0) ||
<             (array1 != null && array2 != null && array1.length != array2.length)) {
<                 return false;
---
> 
> 
> 
> 
> 
>     public static int indexOf(final Object[] array, final Object objectToFind, int startIndex) {
>         if (array == null) {
>             return -1;
901c894,910
<         return true;
---
>         if (startIndex < 0) {
>             startIndex = 0;
>         }
>         if (objectToFind == null) {
>             for (int i = startIndex; i < array.length; i++) {
>                 if (array[i] == null) {
>                     return i;
>                 }
>             }
>         } else {
>             for (int i = startIndex; i < array.length; i++) {
>                 if (objectToFind.equals(array[i])) {
>                     return i;
>                 }
>             }
>         }
>         return -1;
904a914,915
>     
>     
913,919c924,926
<     public static boolean isSameLength(final double[] array1, final double[] array2) {
<         if ((array1 == null && array2 != null && array2.length > 0) ||
<             (array2 == null && array1 != null && array1.length > 0) ||
<             (array1 != null && array2 != null && array1.length != array2.length)) {
<                 return false;
<         }
<         return true;
---
> 
>     public static int indexOf(final short[] array, final short valueToFind) {
>         return indexOf(array, valueToFind, 0);
931,935c938,945
<     public static boolean isSameLength(final float[] array1, final float[] array2) {
<         if ((array1 == null && array2 != null && array2.length > 0) ||
<             (array2 == null && array1 != null && array1.length > 0) ||
<             (array1 != null && array2 != null && array1.length != array2.length)) {
<                 return false;
---
> 
> 
> 
> 
> 
>     public static int indexOf(final short[] array, final short valueToFind, int startIndex) {
>         if (array == null) {
>             return -1;
937c947,955
<         return true;
---
>         if (startIndex < 0) {
>             startIndex = 0;
>         }
>         for (int i = startIndex; i < array.length; i++) {
>             if (valueToFind == array[i]) {
>                 return i;
>             }
>         }
>         return -1;
947,953c965,967
< 
< 
<     public static boolean isSameLength(final boolean[] array1, final boolean[] array2) {
<         if ((array1 == null && array2 != null && array2.length > 0) ||
<             (array2 == null && array1 != null && array1.length > 0) ||
<             (array1 != null && array2 != null && array1.length != array2.length)) {
<                 return false;
---
>     public static boolean isEmpty(final boolean[] array) {
>         if (array == null || array.length == 0) {
>             return true;
955c969
<         return true;
---
>         return false;
965,969c979,981
< 
<     
<     public static boolean isSameType(final Object array1, final Object array2) {
<         if (array1 == null || array2 == null) {
<             throw new IllegalArgumentException("The Array must not be null");
---
>     public static boolean isEmpty(final byte[] array) {
>         if (array == null || array.length == 0) {
>             return true;
971c983
<         return array1.getClass().getName().equals(array2.getClass().getName());
---
>         return false;
975,978d986
<     
<     
< 
< 
985,997c993,995
<     public static void reverse(final Object[] array) {
<         if (array == null) {
<             return;
<         }
<         int i = 0;
<         int j = array.length - 1;
<         Object tmp;
<         while (j > i) {
<             tmp = array[j];
<             array[j] = array[i];
<             array[i] = tmp;
<             j--;
<             i++;
---
>     public static boolean isEmpty(final char[] array) {
>         if (array == null || array.length == 0) {
>             return true;
998a997
>         return false;
1008,1020c1007,1009
<     public static void reverse(final long[] array) {
<         if (array == null) {
<             return;
<         }
<         int i = 0;
<         int j = array.length - 1;
<         long tmp;
<         while (j > i) {
<             tmp = array[j];
<             array[j] = array[i];
<             array[i] = tmp;
<             j--;
<             i++;
---
>     public static boolean isEmpty(final double[] array) {
>         if (array == null || array.length == 0) {
>             return true;
1021a1011
>         return false;
1031,1043c1021,1023
<     public static void reverse(final int[] array) {
<         if (array == null) {
<             return;
<         }
<         int i = 0;
<         int j = array.length - 1;
<         int tmp;
<         while (j > i) {
<             tmp = array[j];
<             array[j] = array[i];
<             array[i] = tmp;
<             j--;
<             i++;
---
>     public static boolean isEmpty(final float[] array) {
>         if (array == null || array.length == 0) {
>             return true;
1044a1025
>         return false;
1054,1066c1035,1037
<     public static void reverse(final short[] array) {
<         if (array == null) {
<             return;
<         }
<         int i = 0;
<         int j = array.length - 1;
<         short tmp;
<         while (j > i) {
<             tmp = array[j];
<             array[j] = array[i];
<             array[i] = tmp;
<             j--;
<             i++;
---
>     public static boolean isEmpty(final int[] array) {
>         if (array == null || array.length == 0) {
>             return true;
1067a1039
>         return false;
1077,1089c1049,1051
<     public static void reverse(final char[] array) {
<         if (array == null) {
<             return;
<         }
<         int i = 0;
<         int j = array.length - 1;
<         char tmp;
<         while (j > i) {
<             tmp = array[j];
<             array[j] = array[i];
<             array[i] = tmp;
<             j--;
<             i++;
---
>     public static boolean isEmpty(final long[] array) {
>         if (array == null || array.length == 0) {
>             return true;
1090a1053
>         return false;
1093a1057
>     
1100,1112c1064,1066
<     public static void reverse(final byte[] array) {
<         if (array == null) {
<             return;
<         }
<         int i = 0;
<         int j = array.length - 1;
<         byte tmp;
<         while (j > i) {
<             tmp = array[j];
<             array[j] = array[i];
<             array[i] = tmp;
<             j--;
<             i++;
---
>     public static boolean isEmpty(final Object[] array) {
>         if (array == null || array.length == 0) {
>             return true;
1113a1068
>         return false;
1123,1135c1078,1080
<     public static void reverse(final double[] array) {
<         if (array == null) {
<             return;
<         }
<         int i = 0;
<         int j = array.length - 1;
<         double tmp;
<         while (j > i) {
<             tmp = array[j];
<             array[j] = array[i];
<             array[i] = tmp;
<             j--;
<             i++;
---
>     public static boolean isEmpty(final short[] array) {
>         if (array == null || array.length == 0) {
>             return true;
1136a1082
>         return false;
1146,1159c1092,1096
<     public static void reverse(final float[] array) {
<         if (array == null) {
<             return;
<         }
<         int i = 0;
<         int j = array.length - 1;
<         float tmp;
<         while (j > i) {
<             tmp = array[j];
<             array[j] = array[i];
<             array[i] = tmp;
<             j--;
<             i++;
<         }
---
> 
> 
> 
>     public static boolean isEquals(final Object array1, final Object array2) {
>         return new EqualsBuilder().append(array1, array2).isEquals();
1169,1181c1106,1112
<     public static void reverse(final boolean[] array) {
<         if (array == null) {
<             return;
<         }
<         int i = 0;
<         int j = array.length - 1;
<         boolean tmp;
<         while (j > i) {
<             tmp = array[j];
<             array[j] = array[i];
<             array[i] = tmp;
<             j--;
<             i++;
---
> 
> 
>     public static boolean isSameLength(final boolean[] array1, final boolean[] array2) {
>         if ((array1 == null && array2 != null && array2.length > 0) ||
>             (array2 == null && array1 != null && array1.length > 0) ||
>             (array1 != null && array2 != null && array1.length != array2.length)) {
>                 return false;
1182a1114
>         return true;
1186,1191d1117
<     
<     
<     
<     
<     
< 
1200,1201c1126,1132
<     public static int indexOf(final Object[] array, final Object objectToFind) {
<         return indexOf(array, objectToFind, 0);
---
>     public static boolean isSameLength(final byte[] array1, final byte[] array2) {
>         if ((array1 == null && array2 != null && array2.length > 0) ||
>             (array2 == null && array1 != null && array1.length > 0) ||
>             (array1 != null && array2 != null && array1.length != array2.length)) {
>                 return false;
>         }
>         return true;
1213,1236c1144,1148
< 
< 
< 
< 
< 
<     public static int indexOf(final Object[] array, final Object objectToFind, int startIndex) {
<         if (array == null) {
<             return -1;
<         }
<         if (startIndex < 0) {
<             startIndex = 0;
<         }
<         if (objectToFind == null) {
<             for (int i = startIndex; i < array.length; i++) {
<                 if (array[i] == null) {
<                     return i;
<                 }
<             }
<         } else {
<             for (int i = startIndex; i < array.length; i++) {
<                 if (objectToFind.equals(array[i])) {
<                     return i;
<                 }
<             }
---
>     public static boolean isSameLength(final char[] array1, final char[] array2) {
>         if ((array1 == null && array2 != null && array2.length > 0) ||
>             (array2 == null && array1 != null && array1.length > 0) ||
>             (array1 != null && array2 != null && array1.length != array2.length)) {
>                 return false;
1238c1150
<         return -1;
---
>         return true;
1250,1252c1162,1168
< 
<     public static int lastIndexOf(final Object[] array, final Object objectToFind) {
<         return lastIndexOf(array, objectToFind, Integer.MAX_VALUE);
---
>     public static boolean isSameLength(final double[] array1, final double[] array2) {
>         if ((array1 == null && array2 != null && array2.length > 0) ||
>             (array2 == null && array1 != null && array1.length > 0) ||
>             (array1 != null && array2 != null && array1.length != array2.length)) {
>                 return false;
>         }
>         return true;
1263a1180,1192
>     public static boolean isSameLength(final float[] array1, final float[] array2) {
>         if ((array1 == null && array2 != null && array2.length > 0) ||
>             (array2 == null && array1 != null && array1.length > 0) ||
>             (array1 != null && array2 != null && array1.length != array2.length)) {
>                 return false;
>         }
>         return true;
>     }
> 
>     
> 
> 
> 
1269,1289c1198,1202
<     public static int lastIndexOf(final Object[] array, final Object objectToFind, int startIndex) {
<         if (array == null) {
<             return -1;
<         }
<         if (startIndex < 0) {
<             return -1;
<         } else if (startIndex >= array.length) {
<             startIndex = array.length - 1;
<         }
<         if (objectToFind == null) {
<             for (int i = startIndex; i >= 0; i--) {
<                 if (array[i] == null) {
<                     return i;
<                 }
<             }
<         } else {
<             for (int i = startIndex; i >= 0; i--) {
<                 if (objectToFind.equals(array[i])) {
<                     return i;
<                 }
<             }
---
>     public static boolean isSameLength(final int[] array1, final int[] array2) {
>         if ((array1 == null && array2 != null && array2.length > 0) ||
>             (array2 == null && array1 != null && array1.length > 0) ||
>             (array1 != null && array2 != null && array1.length != array2.length)) {
>                 return false;
1291c1204
<         return -1;
---
>         return true;
1303,1304c1216,1222
<     public static boolean contains(final Object[] array, final Object objectToFind) {
<         return (indexOf(array, objectToFind) != -1);
---
>     public static boolean isSameLength(final long[] array1, final long[] array2) {
>         if ((array1 == null && array2 != null && array2.length > 0) ||
>             (array2 == null && array1 != null && array1.length > 0) ||
>             (array1 != null && array2 != null && array1.length != array2.length)) {
>                 return false;
>         }
>         return true;
1319,1320c1237,1244
<     public static int indexOf(final long[] array, final long valueToFind) {
<         return indexOf(array, valueToFind, 0);
---
>     
>     public static boolean isSameLength(final Object[] array1, final Object[] array2) {
>         if ((array1 == null && array2 != null && array2.length > 0) ||
>             (array2 == null && array1 != null && array1.length > 0) ||
>             (array1 != null && array2 != null && array1.length != array2.length)) {
>                 return false;
>         }
>         return true;
1332,1347c1256,1260
< 
< 
< 
< 
< 
<     public static int indexOf(final long[] array, final long valueToFind, int startIndex) {
<         if (array == null) {
<             return -1;
<         }
<         if (startIndex < 0) {
<             startIndex = 0;
<         }
<         for (int i = startIndex; i < array.length; i++) {
<             if (valueToFind == array[i]) {
<                 return i;
<             }
---
>     public static boolean isSameLength(final short[] array1, final short[] array2) {
>         if ((array1 == null && array2 != null && array2.length > 0) ||
>             (array2 == null && array1 != null && array1.length > 0) ||
>             (array1 != null && array2 != null && array1.length != array2.length)) {
>                 return false;
1349c1262
<         return -1;
---
>         return true;
1360,1363c1273,1278
< 
< 
<     public static int lastIndexOf(final long[] array, final long valueToFind) {
<         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
---
>     
>     public static boolean isSameType(final Object array1, final Object array2) {
>         if (array1 == null || array2 == null) {
>             throw new IllegalArgumentException("The Array must not be null");
>         }
>         return array1.getClass().getName().equals(array2.getClass().getName());
1380,1399d1294
<     public static int lastIndexOf(final long[] array, final long valueToFind, int startIndex) {
<         if (array == null) {
<             return -1;
<         }
<         if (startIndex < 0) {
<             return -1;
<         } else if (startIndex >= array.length) {
<             startIndex = array.length - 1;
<         }
<         for (int i = startIndex; i >= 0; i--) {
<             if (valueToFind == array[i]) {
<                 return i;
<             }
<         }
<         return -1;
<     }
< 
<     
< 
< 
1406,1407c1301,1312
<     public static boolean contains(final long[] array, final long valueToFind) {
<         return (indexOf(array, valueToFind) != -1);
---
>     public static Object[] join(Object[] array1, Object[] array2) {
>         if (array1 == null) {
>             return array2;
>         } else if (array2 == null) {
>             return array1;
>         } else {
>             Object[] joinedArray = (Object[]) Array.newInstance(array1.getClass().getComponentType(), array1.length
>                 + array2.length);
>             System.arraycopy(array1, 0, joinedArray, 0, array1.length);
>             System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
>             return joinedArray;
>         }
1411,1412d1315
<     
<     
1422,1423c1325,1326
<     public static int indexOf(final int[] array, final int valueToFind) {
<         return indexOf(array, valueToFind, 0);
---
>     public static int lastIndexOf(final boolean[] array, final boolean valueToFind) {
>         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
1440,1441c1343,1344
<     public static int indexOf(final int[] array, final int valueToFind, int startIndex) {
<         if (array == null) {
---
>     public static int lastIndexOf(final boolean[] array, final boolean valueToFind, int startIndex) {
>         if (ArrayUtils.isEmpty(array)) {
1445c1348,1350
<             startIndex = 0;
---
>             return -1;
>         } else if (startIndex >= array.length) {
>             startIndex = array.length - 1;
1447c1352
<         for (int i = startIndex; i < array.length; i++) {
---
>         for (int i = startIndex; i >= 0; i--) {
1465c1370
<     public static int lastIndexOf(final int[] array, final int valueToFind) {
---
>     public static int lastIndexOf(final byte[] array, final byte valueToFind) {
1483c1388
<     public static int lastIndexOf(final int[] array, final int valueToFind, int startIndex) {
---
>     public static int lastIndexOf(final byte[] array, final byte valueToFind, int startIndex) {
1509,1510c1414,1416
<     public static boolean contains(final int[] array, final int valueToFind) {
<         return (indexOf(array, valueToFind) != -1);
---
> 
>     public static int lastIndexOf(final double[] array, final double valueToFind) {
>         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
1514,1515d1419
<     
<     
1525,1526c1429,1433
<     public static int indexOf(final short[] array, final short valueToFind) {
<         return indexOf(array, valueToFind, 0);
---
> 
> 
> 
>     public static int lastIndexOf(final double[] array, final double valueToFind, final double tolerance) {
>         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE, tolerance);
1543,1544c1450,1451
<     public static int indexOf(final short[] array, final short valueToFind, int startIndex) {
<         if (array == null) {
---
>     public static int lastIndexOf(final double[] array, final double valueToFind, int startIndex) {
>         if (ArrayUtils.isEmpty(array)) {
1548,1550c1455,1459
<             startIndex = 0;
<         }
<         for (int i = startIndex; i < array.length; i++) {
---
>             return -1;
>         } else if (startIndex >= array.length) {
>             startIndex = array.length - 1;
>         }
>         for (int i = startIndex; i >= 0; i--) {
1568,1578d1476
<     public static int lastIndexOf(final short[] array, final short valueToFind) {
<         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
<     }
< 
<     
< 
< 
< 
< 
< 
< 
1586,1587c1484,1485
<     public static int lastIndexOf(final short[] array, final short valueToFind, int startIndex) {
<         if (array == null) {
---
>     public static int lastIndexOf(final double[] array, final double valueToFind, int startIndex, double tolerance) {
>         if (ArrayUtils.isEmpty(array)) {
1594a1493,1494
>         double min = valueToFind - tolerance;
>         double max = valueToFind + tolerance;
1596c1496
<             if (valueToFind == array[i]) {
---
>             if (array[i] >= min && array[i] <= max) {
1612,1626d1511
<     public static boolean contains(final short[] array, final short valueToFind) {
<         return (indexOf(array, valueToFind) != -1);
<     }
< 
<     
<     
<     
< 
< 
< 
< 
< 
< 
< 
< 
1628,1629c1513,1514
<     public static int indexOf(final byte[] array, final byte valueToFind) {
<         return indexOf(array, valueToFind, 0);
---
>     public static int lastIndexOf(final float[] array, final float valueToFind) {
>         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
1646,1647c1531,1532
<     public static int indexOf(final byte[] array, final byte valueToFind, int startIndex) {
<         if (array == null) {
---
>     public static int lastIndexOf(final float[] array, final float valueToFind, int startIndex) {
>         if (ArrayUtils.isEmpty(array)) {
1651c1536,1538
<             startIndex = 0;
---
>             return -1;
>         } else if (startIndex >= array.length) {
>             startIndex = array.length - 1;
1653c1540
<         for (int i = startIndex; i < array.length; i++) {
---
>         for (int i = startIndex; i >= 0; i--) {
1671c1558
<     public static int lastIndexOf(final byte[] array, final byte valueToFind) {
---
>     public static int lastIndexOf(final int[] array, final int valueToFind) {
1689c1576
<     public static int lastIndexOf(final byte[] array, final byte valueToFind, int startIndex) {
---
>     public static int lastIndexOf(final int[] array, final int valueToFind, int startIndex) {
1715,1745d1601
<     public static boolean contains(final byte[] array, final byte valueToFind) {
<         return (indexOf(array, valueToFind) != -1);
<     }
< 
<     
<     
<     
< 
< 
< 
< 
< 
< 
< 
< 
< 
<     public static int indexOf(final double[] array, final double valueToFind) {
<         return indexOf(array, valueToFind, 0);
<     }
< 
<     
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1747,1749c1603,1604
< 
<     public static int indexOf(final double[] array, final double valueToFind, final double tolerance) {
<         return indexOf(array, valueToFind, 0, tolerance);
---
>     public static int lastIndexOf(final long[] array, final long valueToFind) {
>         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
1766,1767c1621,1622
<     public static int indexOf(final double[] array, final double valueToFind, int startIndex) {
<         if (ArrayUtils.isEmpty(array)) {
---
>     public static int lastIndexOf(final long[] array, final long valueToFind, int startIndex) {
>         if (array == null) {
1771c1626,1628
<             startIndex = 0;
---
>             return -1;
>         } else if (startIndex >= array.length) {
>             startIndex = array.length - 1;
1773c1630
<         for (int i = startIndex; i < array.length; i++) {
---
>         for (int i = startIndex; i >= 0; i--) {
1790a1648,1653
>     public static int lastIndexOf(final Object[] array, final Object objectToFind) {
>         return lastIndexOf(array, objectToFind, Integer.MAX_VALUE);
>     }
> 
>     
> 
1798,1799c1661,1667
<     public static int indexOf(final double[] array, final double valueToFind, int startIndex, double tolerance) {
<         if (ArrayUtils.isEmpty(array)) {
---
> 
> 
> 
> 
> 
>     public static int lastIndexOf(final Object[] array, final Object objectToFind, int startIndex) {
>         if (array == null) {
1803c1671,1673
<             startIndex = 0;
---
>             return -1;
>         } else if (startIndex >= array.length) {
>             startIndex = array.length - 1;
1805,1809c1675,1685
<         double min = valueToFind - tolerance;
<         double max = valueToFind + tolerance;
<         for (int i = startIndex; i < array.length; i++) {
<             if (array[i] >= min && array[i] <= max) {
<                 return i;
---
>         if (objectToFind == null) {
>             for (int i = startIndex; i >= 0; i--) {
>                 if (array[i] == null) {
>                     return i;
>                 }
>             }
>         } else {
>             for (int i = startIndex; i >= 0; i--) {
>                 if (objectToFind.equals(array[i])) {
>                     return i;
>                 }
1825c1701
<     public static int lastIndexOf(final double[] array, final double valueToFind) {
---
>     public static int lastIndexOf(final short[] array, final short valueToFind) {
1842,1858d1717
<     public static int lastIndexOf(final double[] array, final double valueToFind, final double tolerance) {
<         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE, tolerance);
<     }
< 
<     
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1860,1861c1719,1720
<     public static int lastIndexOf(final double[] array, final double valueToFind, int startIndex) {
<         if (ArrayUtils.isEmpty(array)) {
---
>     public static int lastIndexOf(final short[] array, final short valueToFind, int startIndex) {
>         if (array == null) {
1883a1743,1757
>     public static void reverse(final boolean[] array) {
>         if (array == null) {
>             return;
>         }
>         int i = 0;
>         int j = array.length - 1;
>         boolean tmp;
>         while (j > i) {
>             tmp = array[j];
>             array[j] = array[i];
>             array[i] = tmp;
>             j--;
>             i++;
>         }
>     }
1884a1759
>     
1891,1901c1766,1768
< 
< 
< 
<     public static int lastIndexOf(final double[] array, final double valueToFind, int startIndex, double tolerance) {
<         if (ArrayUtils.isEmpty(array)) {
<             return -1;
<         }
<         if (startIndex < 0) {
<             return -1;
<         } else if (startIndex >= array.length) {
<             startIndex = array.length - 1;
---
>     public static void reverse(final byte[] array) {
>         if (array == null) {
>             return;
1903,1908c1770,1778
<         double min = valueToFind - tolerance;
<         double max = valueToFind + tolerance;
<         for (int i = startIndex; i >= 0; i--) {
<             if (array[i] >= min && array[i] <= max) {
<                 return i;
<             }
---
>         int i = 0;
>         int j = array.length - 1;
>         byte tmp;
>         while (j > i) {
>             tmp = array[j];
>             array[j] = array[i];
>             array[i] = tmp;
>             j--;
>             i++;
1910d1779
<         return -1;
1920,1923c1789,1802
< 
< 
<     public static boolean contains(final double[] array, final double valueToFind) {
<         return (indexOf(array, valueToFind) != -1);
---
>     public static void reverse(final char[] array) {
>         if (array == null) {
>             return;
>         }
>         int i = 0;
>         int j = array.length - 1;
>         char tmp;
>         while (j > i) {
>             tmp = array[j];
>             array[j] = array[i];
>             array[i] = tmp;
>             j--;
>             i++;
>         }
1933,1940c1812,1825
< 
< 
< 
< 
< 
< 
<     public static boolean contains(final double[] array, final double valueToFind, final double tolerance) {
<         return (indexOf(array, valueToFind, 0, tolerance) != -1);
---
>     public static void reverse(final double[] array) {
>         if (array == null) {
>             return;
>         }
>         int i = 0;
>         int j = array.length - 1;
>         double tmp;
>         while (j > i) {
>             tmp = array[j];
>             array[j] = array[i];
>             array[i] = tmp;
>             j--;
>             i++;
>         }
1944,1948d1828
<     
<     
< 
< 
< 
1955,1958c1835,1850
<     public static int indexOf(final float[] array, final float valueToFind) {
<         return indexOf(array, valueToFind, 0);
<     }
< 
---
>     public static void reverse(final float[] array) {
>         if (array == null) {
>             return;
>         }
>         int i = 0;
>         int j = array.length - 1;
>         float tmp;
>         while (j > i) {
>             tmp = array[j];
>             array[j] = array[i];
>             array[i] = tmp;
>             j--;
>             i++;
>         }
>     }
> 
1965a1858,1872
>     public static void reverse(final int[] array) {
>         if (array == null) {
>             return;
>         }
>         int i = 0;
>         int j = array.length - 1;
>         int tmp;
>         while (j > i) {
>             tmp = array[j];
>             array[j] = array[i];
>             array[i] = tmp;
>             j--;
>             i++;
>         }
>     }
1966a1874
>     
1973,1978c1881,1883
<     public static int indexOf(final float[] array, final float valueToFind, int startIndex) {
<         if (ArrayUtils.isEmpty(array)) {
<             return -1;
<         }
<         if (startIndex < 0) {
<             startIndex = 0;
---
>     public static void reverse(final long[] array) {
>         if (array == null) {
>             return;
1980,1983c1885,1893
<         for (int i = startIndex; i < array.length; i++) {
<             if (valueToFind == array[i]) {
<                 return i;
<             }
---
>         int i = 0;
>         int j = array.length - 1;
>         long tmp;
>         while (j > i) {
>             tmp = array[j];
>             array[j] = array[i];
>             array[i] = tmp;
>             j--;
>             i++;
1985d1894
<         return -1;
1988a1898,1899
>     
>     
1997,1999c1908,1921
< 
<     public static int lastIndexOf(final float[] array, final float valueToFind) {
<         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
---
>     public static void reverse(final Object[] array) {
>         if (array == null) {
>             return;
>         }
>         int i = 0;
>         int j = array.length - 1;
>         Object tmp;
>         while (j > i) {
>             tmp = array[j];
>             array[j] = array[i];
>             array[i] = tmp;
>             j--;
>             i++;
>         }
2009,2023c1931,1933
< 
< 
< 
< 
< 
< 
< 
<     public static int lastIndexOf(final float[] array, final float valueToFind, int startIndex) {
<         if (ArrayUtils.isEmpty(array)) {
<             return -1;
<         }
<         if (startIndex < 0) {
<             return -1;
<         } else if (startIndex >= array.length) {
<             startIndex = array.length - 1;
---
>     public static void reverse(final short[] array) {
>         if (array == null) {
>             return;
2025,2028c1935,1943
<         for (int i = startIndex; i >= 0; i--) {
<             if (valueToFind == array[i]) {
<                 return i;
<             }
---
>         int i = 0;
>         int j = array.length - 1;
>         short tmp;
>         while (j > i) {
>             tmp = array[j];
>             array[j] = array[i];
>             array[i] = tmp;
>             j--;
>             i++;
2030d1944
<         return -1;
2042,2044d1955
<     public static boolean contains(final float[] array, final float valueToFind) {
<         return (indexOf(array, valueToFind) != -1);
<     }
2046,2048d1956
<     
<     
<     
2056a1965,1978
>     public static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive) {
>         if (array == null) {
>             return null;
>         }
>         if (startIndexInclusive < 0) {
>             startIndexInclusive = 0;
>         }
>         if (endIndexExclusive > array.length) {
>             endIndexExclusive = array.length;
>         }
>         int newSize = endIndexExclusive - startIndexInclusive;
>         if (newSize <= 0) {
>             return EMPTY_BOOLEAN_ARRAY;
>         }
2058,2059c1980,1982
<     public static int indexOf(final boolean[] array, final boolean valueToFind) {
<         return indexOf(array, valueToFind, 0);
---
>         boolean[] subarray = new boolean[newSize];
>         System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
>         return subarray;
2076,2091d1998
<     public static int indexOf(final boolean[] array, final boolean valueToFind, int startIndex) {
<         if (ArrayUtils.isEmpty(array)) {
<             return -1;
<         }
<         if (startIndex < 0) {
<             startIndex = 0;
<         }
<         for (int i = startIndex; i < array.length; i++) {
<             if (valueToFind == array[i]) {
<                 return i;
<             }
<         }
<         return -1;
<     }
< 
<     
2095a2003,2016
>     public static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive) {
>         if (array == null) {
>             return null;
>         }
>         if (startIndexInclusive < 0) {
>             startIndexInclusive = 0;
>         }
>         if (endIndexExclusive > array.length) {
>             endIndexExclusive = array.length;
>         }
>         int newSize = endIndexExclusive - startIndexInclusive;
>         if (newSize <= 0) {
>             return EMPTY_BYTE_ARRAY;
>         }
2096a2018,2021
>         byte[] subarray = new byte[newSize];
>         System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
>         return subarray;
>     }
2097a2023
>     
2101,2103d2026
<     public static int lastIndexOf(final boolean[] array, final boolean valueToFind) {
<         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
<     }
2105d2027
<     
2119,2121c2041,2043
<     public static int lastIndexOf(final boolean[] array, final boolean valueToFind, int startIndex) {
<         if (ArrayUtils.isEmpty(array)) {
<             return -1;
---
>     public static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive) {
>         if (array == null) {
>             return null;
2123,2126c2045,2046
<         if (startIndex < 0) {
<             return -1;
<         } else if (startIndex >= array.length) {
<             startIndex = array.length - 1;
---
>         if (startIndexInclusive < 0) {
>             startIndexInclusive = 0;
2128,2131c2048,2049
<         for (int i = startIndex; i >= 0; i--) {
<             if (valueToFind == array[i]) {
<                 return i;
<             }
---
>         if (endIndexExclusive > array.length) {
>             endIndexExclusive = array.length;
2133c2051,2058
<         return -1;
---
>         int newSize = endIndexExclusive - startIndexInclusive;
>         if (newSize <= 0) {
>             return EMPTY_CHAR_ARRAY;
>         }
> 
>         char[] subarray = new char[newSize];
>         System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
>         return subarray;
2145,2147d2069
<     public static boolean contains(final boolean[] array, final boolean valueToFind) {
<         return (indexOf(array, valueToFind) != -1);
<     }
2149,2154d2070
<     
<     
<     
<     
<     
<     
2163c2079
<     public static long[] toPrimitive(final Long[] array) {
---
>     public static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive) {
2166,2167d2081
<         } else if (array.length == 0) {
<             return EMPTY_LONG_ARRAY;
2169,2171c2083,2084
<         final long[] result = new long[array.length];
<         for (int i = 0; i < array.length; i++) {
<             result[i] = array[i].longValue();
---
>         if (startIndexInclusive < 0) {
>             startIndexInclusive = 0;
2173c2086,2096
<         return result;
---
>         if (endIndexExclusive > array.length) {
>             endIndexExclusive = array.length;
>         }
>         int newSize = endIndexExclusive - startIndexInclusive;
>         if (newSize <= 0) {
>             return EMPTY_DOUBLE_ARRAY;
>         }
> 
>         double[] subarray = new double[newSize];
>         System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
>         return subarray;
2175c2098
<     
---
> 
2185,2199d2107
<     public static long[] toPrimitive(final Long[] array, final long valueForNull) {
<         if (array == null) {
<             return null;
<         } else if (array.length == 0) {
<             return EMPTY_LONG_ARRAY;
<         }
<         final long[] result = new long[array.length];
<         for (int i = 0; i < array.length; i++) {
<             Long b = array[i];
<             result[i] = (b == null ? valueForNull : b.longValue());
<         }
<         return result;
<     }
<     
<     
2207c2115,2117
<     public static Long[] toObject(final long[] array) {
---
> 
> 
>     public static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive) {
2210,2211d2119
<         } else if (array.length == 0) {
<             return EMPTY_LONG_OBJECT_ARRAY;
2213,2215c2121,2122
<         final Long[] result = new Long[array.length];
<         for (int i = 0; i < array.length; i++) {
<             result[i] = new Long(array[i]);
---
>         if (startIndexInclusive < 0) {
>             startIndexInclusive = 0;
2217c2124,2134
<         return result;
---
>         if (endIndexExclusive > array.length) {
>             endIndexExclusive = array.length;
>         }
>         int newSize = endIndexExclusive - startIndexInclusive;
>         if (newSize <= 0) {
>             return EMPTY_FLOAT_ARRAY;
>         }
> 
>         float[] subarray = new float[newSize];
>         System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
>         return subarray;
2221,2222d2137
<     
<     
2231,2242d2145
<     public static int[] toPrimitive(final Integer[] array) {
<         if (array == null) {
<             return null;
<         } else if (array.length == 0) {
<             return EMPTY_INT_ARRAY;
<         }
<         final int[] result = new int[array.length];
<         for (int i = 0; i < array.length; i++) {
<             result[i] = array[i].intValue();
<         }
<         return result;
<     }
2244d2146
<     
2253c2155
<     public static int[] toPrimitive(final Integer[] array, final int valueForNull) {
---
>     public static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive) {
2256,2257d2157
<         } else if (array.length == 0) {
<             return EMPTY_INT_ARRAY;
2259,2262c2159,2160
<         final int[] result = new int[array.length];
<         for (int i = 0; i < array.length; i++) {
<             Integer b = array[i];
<             result[i] = (b == null ? valueForNull : b.intValue());
---
>         if (startIndexInclusive < 0) {
>             startIndexInclusive = 0;
2264c2162,2172
<         return result;
---
>         if (endIndexExclusive > array.length) {
>             endIndexExclusive = array.length;
>         }
>         int newSize = endIndexExclusive - startIndexInclusive;
>         if (newSize <= 0) {
>             return EMPTY_INT_ARRAY;
>         }
> 
>         int[] subarray = new int[newSize];
>         System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
>         return subarray;
2275c2183,2193
<     public static Integer[] toObject(final int[] array) {
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive) {
2278,2279d2195
<         } else if (array.length == 0) {
<             return EMPTY_INTEGER_OBJECT_ARRAY;
2281,2283c2197,2198
<         final Integer[] result = new Integer[array.length];
<         for (int i = 0; i < array.length; i++) {
<             result[i] = new Integer(array[i]);
---
>         if (startIndexInclusive < 0) {
>             startIndexInclusive = 0;
2285c2200,2210
<         return result;
---
>         if (endIndexExclusive > array.length) {
>             endIndexExclusive = array.length;
>         }
>         int newSize = endIndexExclusive - startIndexInclusive;
>         if (newSize <= 0) {
>             return EMPTY_LONG_ARRAY;
>         }
> 
>         long[] subarray = new long[newSize];
>         System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
>         return subarray;
2287c2212
<     
---
> 
2299,2310d2223
<     public static short[] toPrimitive(final Short[] array) {
<         if (array == null) {
<             return null;
<         } else if (array.length == 0) {
<             return EMPTY_SHORT_ARRAY;
<         }
<         final short[] result = new short[array.length];
<         for (int i = 0; i < array.length; i++) {
<             result[i] = array[i].shortValue();
<         }
<         return result;
<     }
2312d2224
<     
2321c2233,2241
<     public static short[] toPrimitive(final Short[] array, final short valueForNull) {
---
> 
> 
> 
> 
> 
> 
> 
> 
>     public static Object[] subarray(Object[] array, int startIndexInclusive, int endIndexExclusive) {
2324,2325d2243
<         } else if (array.length == 0) {
<             return EMPTY_SHORT_ARRAY;
2327,2330c2245,2246
<         final short[] result = new short[array.length];
<         for (int i = 0; i < array.length; i++) {
<             Short b = array[i];
<             result[i] = (b == null ? valueForNull : b.shortValue());
---
>         if (startIndexInclusive < 0) {
>             startIndexInclusive = 0;
2332c2248,2258
<         return result;
---
>         if (endIndexExclusive > array.length) {
>             endIndexExclusive = array.length;
>         }
>         int newSize = endIndexExclusive - startIndexInclusive;
>         Class type = array.getClass().getComponentType();
>         if (newSize <= 0) {
>             return (Object[]) Array.newInstance(type, 0);
>         }
>         Object[] subarray = (Object[]) Array.newInstance(type, newSize);
>         System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
>         return subarray;
2343c2269,2279
<     public static Short[] toObject(final short[] array) {
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive) {
2346,2347d2281
<         } else if (array.length == 0) {
<             return EMPTY_SHORT_OBJECT_ARRAY;
2349,2351c2283,2291
<         final Short[] result = new Short[array.length];
<         for (int i = 0; i < array.length; i++) {
<             result[i] = new Short(array[i]);
---
>         if (startIndexInclusive < 0) {
>             startIndexInclusive = 0;
>         }
>         if (endIndexExclusive > array.length) {
>             endIndexExclusive = array.length;
>         }
>         int newSize = endIndexExclusive - startIndexInclusive;
>         if (newSize <= 0) {
>             return EMPTY_SHORT_ARRAY;
2353,2354c2293,2297
<         return result;
<     }    
---
> 
>         short[] subarray = new short[newSize];
>         System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
>         return subarray;
>     }
2367c2310,2326
<     public static byte[] toPrimitive(final Byte[] array) {
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static Map toMap(final Object[] array) {
2370,2371d2328
<         } else if (array.length == 0) {
<             return EMPTY_BYTE_ARRAY;
2373c2330
<         final byte[] result = new byte[array.length];
---
>         final Map map = new HashMap((int) (array.length * 1.5));
2375c2332,2348
<             result[i] = array[i].byteValue();
---
>             Object object = array[i];
>             if (object instanceof Map.Entry) {
>                 Map.Entry entry = (Map.Entry) object;
>                 map.put(entry.getKey(), entry.getValue());
>             } else if (object instanceof Object[]) {
>                 Object[] entry = (Object[]) object;
>                 if (entry.length < 2) {
>                     throw new IllegalArgumentException("Array element " + i + ", '"
>                         + object
>                         + "', has a length less than 2");
>                 }
>                 map.put(entry[0], entry[1]);
>             } else {
>                 throw new IllegalArgumentException("Array element " + i + ", '"
>                         + object
>                         + "', is neither of type Map.Entry nor an Array");
>             }
2377c2350
<         return result;
---
>         return map;
2388,2389c2361
< 
<     public static byte[] toPrimitive(final Byte[] array, final byte valueForNull) {
---
>     public static Boolean[] toObject(final boolean[] array) {
2393c2365
<             return EMPTY_BYTE_ARRAY;
---
>             return EMPTY_BOOLEAN_OBJECT_ARRAY;
2395c2367
<         final byte[] result = new byte[array.length];
---
>         final Boolean[] result = new Boolean[array.length];
2397,2398c2369
<             Byte b = array[i];
<             result[i] = (b == null ? valueForNull : b.byteValue());
---
>             result[i] = (array[i] ? Boolean.TRUE : Boolean.FALSE);
2423,2426d2393
<     
<     
<     
<     
2427a2395
>     
2435c2403
<     public static double[] toPrimitive(final Double[] array) {
---
>     public static Double[] toObject(final double[] array) {
2439c2407
<             return EMPTY_DOUBLE_ARRAY;
---
>             return EMPTY_DOUBLE_OBJECT_ARRAY;
2441c2409
<         final double[] result = new double[array.length];
---
>         final Double[] result = new Double[array.length];
2443c2411
<             result[i] = array[i].doubleValue();
---
>             result[i] = new Double(array[i]);
2456,2457c2424
< 
<     public static double[] toPrimitive(final Double[] array, final double valueForNull) {
---
>     public static Float[] toObject(final float[] array) {
2461c2428
<             return EMPTY_DOUBLE_ARRAY;
---
>             return EMPTY_FLOAT_OBJECT_ARRAY;
2463c2430
<         final double[] result = new double[array.length];
---
>         final Float[] result = new Float[array.length];
2465,2466c2432
<             Double b = array[i];
<             result[i] = (b == null ? valueForNull : b.doubleValue());
---
>             result[i] = new Float(array[i]);
2479c2445
<     public static Double[] toObject(final double[] array) {
---
>     public static Integer[] toObject(final int[] array) {
2483c2449
<             return EMPTY_DOUBLE_OBJECT_ARRAY;
---
>             return EMPTY_INTEGER_OBJECT_ARRAY;
2485c2451
<         final Double[] result = new Double[array.length];
---
>         final Integer[] result = new Integer[array.length];
2487c2453
<             result[i] = new Double(array[i]);
---
>             result[i] = new Integer(array[i]);
2491,2492d2456
< 
<     
2502,2503c2466
< 
<     public static float[] toPrimitive(final Float[] array) {
---
>     public static Long[] toObject(final long[] array) {
2507c2470
<             return EMPTY_FLOAT_ARRAY;
---
>             return EMPTY_LONG_OBJECT_ARRAY;
2509c2472
<         final float[] result = new float[array.length];
---
>         final Long[] result = new Long[array.length];
2511c2474
<             result[i] = array[i].floatValue();
---
>             result[i] = new Long(array[i]);
2524,2525c2487
< 
<     public static float[] toPrimitive(final Float[] array, final float valueForNull) {
---
>     public static Short[] toObject(final short[] array) {
2529c2491
<             return EMPTY_FLOAT_ARRAY;
---
>             return EMPTY_SHORT_OBJECT_ARRAY;
2531c2493
<         final float[] result = new float[array.length];
---
>         final Short[] result = new Short[array.length];
2533,2534c2495
<             Float b = array[i];
<             result[i] = (b == null ? valueForNull : b.floatValue());
---
>             result[i] = new Short(array[i]);
2537c2498
<     }
---
>     }    
2539a2501,2502
>     
>     
2547c2510,2511
<     public static Float[] toObject(final float[] array) {
---
> 
>     public static boolean[] toPrimitive(final Boolean[] array) {
2551c2515
<             return EMPTY_FLOAT_OBJECT_ARRAY;
---
>             return EMPTY_BOOLEAN_ARRAY;
2553c2517
<         final Float[] result = new Float[array.length];
---
>         final boolean[] result = new boolean[array.length];
2555c2519
<             result[i] = new Float(array[i]);
---
>             result[i] = array[i].booleanValue();
2561,2562d2524
<     
<     
2571c2533
<     public static boolean[] toPrimitive(final Boolean[] array) {
---
>     public static boolean[] toPrimitive(final Boolean[] array, final boolean valueForNull) {
2579c2541,2542
<             result[i] = array[i].booleanValue();
---
>             Boolean b = array[i];
>             result[i] = (b == null ? valueForNull : b.booleanValue());
2584a2548,2549
>     
>     
2593c2558
<     public static boolean[] toPrimitive(final Boolean[] array, final boolean valueForNull) {
---
>     public static byte[] toPrimitive(final Byte[] array) {
2597c2562
<             return EMPTY_BOOLEAN_ARRAY;
---
>             return EMPTY_BYTE_ARRAY;
2599c2564
<         final boolean[] result = new boolean[array.length];
---
>         final byte[] result = new byte[array.length];
2601,2602c2566
<             Boolean b = array[i];
<             result[i] = (b == null ? valueForNull : b.booleanValue());
---
>             result[i] = array[i].byteValue();
2615c2579,2580
<     public static Boolean[] toObject(final boolean[] array) {
---
> 
>     public static byte[] toPrimitive(final Byte[] array, final byte valueForNull) {
2619c2584
<             return EMPTY_BOOLEAN_OBJECT_ARRAY;
---
>             return EMPTY_BYTE_ARRAY;
2621c2586
<         final Boolean[] result = new Boolean[array.length];
---
>         final byte[] result = new byte[array.length];
2623c2588,2589
<             result[i] = (array[i] ? Boolean.TRUE : Boolean.FALSE);
---
>             Byte b = array[i];
>             result[i] = (b == null ? valueForNull : b.byteValue());
2627c2593,2594
< 
---
>     
>     
2636,2645d2602
<     public static boolean isEmpty(final Object[] array) {
<         if (array == null || array.length == 0) {
<             return true;
<         }
<         return false;
<     }
< 
<     
< 
< 
2648,2652c2605,2609
< 
< 
<     public static boolean isEmpty(final long[] array) {
<         if (array == null || array.length == 0) {
<             return true;
---
>     public static double[] toPrimitive(final Double[] array) {
>         if (array == null) {
>             return null;
>         } else if (array.length == 0) {
>             return EMPTY_DOUBLE_ARRAY;
2654c2611,2615
<         return false;
---
>         final double[] result = new double[array.length];
>         for (int i = 0; i < array.length; i++) {
>             result[i] = array[i].doubleValue();
>         }
>         return result;
2664,2671d2624
<     public static boolean isEmpty(final int[] array) {
<         if (array == null || array.length == 0) {
<             return true;
<         }
<         return false;
<     }
< 
<     
2674,2680c2627,2631
< 
< 
< 
< 
<     public static boolean isEmpty(final short[] array) {
<         if (array == null || array.length == 0) {
<             return true;
---
>     public static double[] toPrimitive(final Double[] array, final double valueForNull) {
>         if (array == null) {
>             return null;
>         } else if (array.length == 0) {
>             return EMPTY_DOUBLE_ARRAY;
2682c2633,2638
<         return false;
---
>         final double[] result = new double[array.length];
>         for (int i = 0; i < array.length; i++) {
>             Double b = array[i];
>             result[i] = (b == null ? valueForNull : b.doubleValue());
>         }
>         return result;
2685a2642,2643
>     
>     
2692,2703d2649
<     public static boolean isEmpty(final char[] array) {
<         if (array == null || array.length == 0) {
<             return true;
<         }
<         return false;
<     }
< 
<     
< 
< 
< 
< 
2706,2708c2652,2656
<     public static boolean isEmpty(final byte[] array) {
<         if (array == null || array.length == 0) {
<             return true;
---
>     public static float[] toPrimitive(final Float[] array) {
>         if (array == null) {
>             return null;
>         } else if (array.length == 0) {
>             return EMPTY_FLOAT_ARRAY;
2710c2658,2662
<         return false;
---
>         final float[] result = new float[array.length];
>         for (int i = 0; i < array.length; i++) {
>             result[i] = array[i].floatValue();
>         }
>         return result;
2720,2722c2672,2678
<     public static boolean isEmpty(final double[] array) {
<         if (array == null || array.length == 0) {
<             return true;
---
> 
> 
>     public static float[] toPrimitive(final Float[] array, final float valueForNull) {
>         if (array == null) {
>             return null;
>         } else if (array.length == 0) {
>             return EMPTY_FLOAT_ARRAY;
2724c2680,2685
<         return false;
---
>         final float[] result = new float[array.length];
>         for (int i = 0; i < array.length; i++) {
>             Float b = array[i];
>             result[i] = (b == null ? valueForNull : b.floatValue());
>         }
>         return result;
2727a2689,2690
>     
>     
2734,2736c2697,2703
<     public static boolean isEmpty(final float[] array) {
<         if (array == null || array.length == 0) {
<             return true;
---
> 
> 
>     public static int[] toPrimitive(final Integer[] array) {
>         if (array == null) {
>             return null;
>         } else if (array.length == 0) {
>             return EMPTY_INT_ARRAY;
2738c2705,2709
<         return false;
---
>         final int[] result = new int[array.length];
>         for (int i = 0; i < array.length; i++) {
>             result[i] = array[i].intValue();
>         }
>         return result;
2748,2750c2719,2725
<     public static boolean isEmpty(final boolean[] array) {
<         if (array == null || array.length == 0) {
<             return true;
---
> 
> 
>     public static int[] toPrimitive(final Integer[] array, final int valueForNull) {
>         if (array == null) {
>             return null;
>         } else if (array.length == 0) {
>             return EMPTY_INT_ARRAY;
2752c2727,2732
<         return false;
---
>         final int[] result = new int[array.length];
>         for (int i = 0; i < array.length; i++) {
>             Integer b = array[i];
>             result[i] = (b == null ? valueForNull : b.intValue());
>         }
>         return result;
2755a2736,2740
>     
>     
>     
>     
>     
2763a2749,2762
>     public static long[] toPrimitive(final Long[] array) {
>         if (array == null) {
>             return null;
>         } else if (array.length == 0) {
>             return EMPTY_LONG_ARRAY;
>         }
>         final long[] result = new long[array.length];
>         for (int i = 0; i < array.length; i++) {
>             result[i] = array[i].longValue();
>         }
>         return result;
>     }
>     
>     
2772,2785c2771,2775
< 
< 
< 
<     public static Object[] join(Object[] array1, Object[] array2) {
<         if (array1 == null) {
<             return array2;
<         } else if (array2 == null) {
<             return array1;
<         } else {
<             Object[] joinedArray = (Object[]) Array.newInstance(array1.getClass().getComponentType(), array1.length
<                 + array2.length);
<             System.arraycopy(array1, 0, joinedArray, 0, array1.length);
<             System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
<             return joinedArray;
---
>     public static long[] toPrimitive(final Long[] array, final long valueForNull) {
>         if (array == null) {
>             return null;
>         } else if (array.length == 0) {
>             return EMPTY_LONG_ARRAY;
2786a2777,2782
>         final long[] result = new long[array.length];
>         for (int i = 0; i < array.length; i++) {
>             Long b = array[i];
>             result[i] = (b == null ? valueForNull : b.longValue());
>         }
>         return result;
2788c2784,2786
< 
---
>     
>     
>     
2797a2796,2807
>     public static short[] toPrimitive(final Short[] array) {
>         if (array == null) {
>             return null;
>         } else if (array.length == 0) {
>             return EMPTY_SHORT_ARRAY;
>         }
>         final short[] result = new short[array.length];
>         for (int i = 0; i < array.length; i++) {
>             result[i] = array[i].shortValue();
>         }
>         return result;
>     }
2798a2809
>     
2807,2822c2818,2822
< 
< 
< 
< 
< 
<     public static Object[] add(Object[] array, Object element) {
<         Object joinedArray;
<         int elementPos;
<         if (array != null) {
<             joinedArray = Array.newInstance(array.getClass().getComponentType(), array.length + 1);
<             System.arraycopy(array, 0, joinedArray, 0, array.length);
<             elementPos = array.length;
<         } else {
<             
<             joinedArray = Array.newInstance(element != null ? element.getClass() : Object.class, 1);
<             elementPos = 0;
---
>     public static short[] toPrimitive(final Short[] array, final short valueForNull) {
>         if (array == null) {
>             return null;
>         } else if (array.length == 0) {
>             return EMPTY_SHORT_ARRAY;
2824,2825c2824,2829
<         Array.set(joinedArray, elementPos, element);
<         return (Object[]) joinedArray;
---
>         final short[] result = new short[array.length];
>         for (int i = 0; i < array.length; i++) {
>             Short b = array[i];
>             result[i] = (b == null ? valueForNull : b.shortValue());
>         }
>         return result;
2827c2831,2833
< 
---
>     
>     
>     
2838a2845,2847
>     public static String toString(final Object array) {
>         return toString(array, "{}");
>     }
2839a2849
>     
2849a2860,2866
>     
>     public static String toString(final Object array, final String stringIfNull) {
>         if (array == null) {
>             return stringIfNull;
>         }
>         return new ToStringBuilder(array, ToStringStyle.SIMPLE_STYLE).append(array).toString();
>     }
2850a2868
>     
2856,2875c2874,2875
<     public static Object[] add(final Object[] array, final int index, final Object element) {
<         if (array == null) {
<             if (index != 0) {
<                 throw new IndexOutOfBoundsException("Index: " + index + ", Length: 0");
<             }
<             Object joinedArray = Array.newInstance(element != null ? element.getClass() : Object.class, 1);
<             Array.set(joinedArray, 0, element);
<             return (Object[]) joinedArray;
<         }
<         int length = array.length;
<         if (index > length || index < 0) {
<             throw new IndexOutOfBoundsException("Index: " + index + ", Length: " + length);
<         }
<         Object result = Array.newInstance(array.getClass().getComponentType(), length + 1);
<         System.arraycopy(array, 0, result, 0, index);
<         Array.set(result, index, element);
<         if (index < length) {
<             System.arraycopy(array, index, result, index + 1, length - index);
<         }
<         return (Object[]) result;
---
> 
>     public ArrayUtils() {
