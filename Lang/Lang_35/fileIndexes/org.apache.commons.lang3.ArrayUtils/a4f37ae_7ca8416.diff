1640a1641,1743
>     public static int indexOf(final char[] array, final char valueToFind) {
>         return indexOf(array, valueToFind, 0);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static int indexOf(final char[] array, final char valueToFind, int startIndex) {
>         if (array == null) {
>             return -1;
>         }
>         if (startIndex < 0) {
>             startIndex = 0;
>         }
>         for (int i = startIndex; i < array.length; i++) {
>             if (valueToFind == array[i]) {
>                 return i;
>             }
>         }
>         return -1;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static int lastIndexOf(final char[] array, final char valueToFind) {
>         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static int lastIndexOf(final char[] array, final char valueToFind, int startIndex) {
>         if (array == null) {
>             return -1;
>         }
>         if (startIndex < 0) {
>             return -1;
>         } else if (startIndex >= array.length) {
>             startIndex = array.length - 1;
>         }
>         for (int i = startIndex; i >= 0; i--) {
>             if (valueToFind == array[i]) {
>                 return i;
>             }
>         }
>         return -1;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public static boolean contains(final char[] array, final char valueToFind) {
>         return (indexOf(array, valueToFind) != -1);
>     }
> 
>     
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
3115a3219,3839
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static Object[] remove(final Object[] array, final int index) {
>         return (Object[]) remove((Object) array, index);
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static Object[] removeElement(final Object[] array, final Object element) {
>         int index = indexOf(array, element);
>         if (index == -1) {
>             return clone(array);
>         } 
>         return remove(array, index);
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static boolean[] remove(final boolean[] array, final int index) {
>         return (boolean[]) remove((Object) array, index);
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static boolean[] removeElement(final boolean[] array, final boolean element) {
>         int index = indexOf(array, element);
>         if (index == -1) {
>             return clone(array);
>         } 
>         return remove(array, index);
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static byte[] remove(final byte[] array, final int index) {
>         return (byte[]) remove((Object) array, index);
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static byte[] removeElement(final byte[] array, final byte element) {
>         int index = indexOf(array, element);
>         if (index == -1) {
>             return clone(array);
>         } 
>         return remove(array, index);
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static char[] remove(final char[] array, final int index) {
>         return (char[]) remove((Object) array, index);
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static char[] removeElement(final char[] array, final char element) {
>         int index = indexOf(array, element);
>         if (index == -1) {
>             return clone(array);
>         } 
>         return remove(array, index);
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static double[] remove(final double[] array, final int index) {
>         return (double[]) remove((Object) array, index);
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static double[] removeElement(final double[] array, final double element) {
>         int index = indexOf(array, element);
>         if (index == -1) {
>             return clone(array);
>         } 
>         return remove(array, index);
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static float[] remove(final float[] array, final int index) {
>         return (float[]) remove((Object) array, index);
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static float[] removeElement(final float[] array, final float element) {
>         int index = indexOf(array, element);
>         if (index == -1) {
>             return clone(array);
>         } 
>         return remove(array, index);
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static int[] remove(final int[] array, final int index) {
>         return (int[]) remove((Object) array, index);
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static int[] removeElement(final int[] array, final int element) {
>         int index = indexOf(array, element);
>         if (index == -1) {
>             return clone(array);
>         } 
>         return remove(array, index);
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static long[] remove(final long[] array, final int index) {
>         return (long[]) remove((Object) array, index);
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static long[] removeElement(final long[] array, final long element) {
>         int index = indexOf(array, element);
>         if (index == -1) {
>             return clone(array);
>         } 
>         return remove(array, index);
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static short[] remove(final short[] array, final int index) {
>         return (short[]) remove((Object) array, index);
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static short[] removeElement(final short[] array, final short element) {
>         int index = indexOf(array, element);
>         if (index == -1) {
>             return clone(array);
>         } 
>         return remove(array, index);
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     private static Object remove(final Object array, final int index) {
>         int length = getLength(array);
>         if (index < 0 || index >= length) {
>             throw new IndexOutOfBoundsException("Index: " + index + ", Length: " + length);
>         }
>         
>         Object result = Array.newInstance(array.getClass().getComponentType(), length - 1);
>         System.arraycopy(array, 0, result, 0, index);
>         if (index < length - 1) {
>             System.arraycopy(array, index + 1, result, index, length - index - 1);
>         }
>         
>         return result;
