56d55
< import java.math.BigInteger;
57a57,60
> import java.math.BigInteger;
> 
> import org.apache.commons.lang.NullArgumentException;
> 
441a445,719
>     
> 
> 
> 
> 
> 
> 
> 
>     public static long min(long[] array) {
>         
>         if (array == null) {
>             throw new NullArgumentException("Array");
>         } else if (array.length == 0) {
>             throw new IllegalArgumentException("Array cannot be empty.");
>         }
>     
>         
>         long min = array[0];
>         for (int i = 1; i < array.length; i++) {
>             if (array[i] < min) {
>                 min = array[i];
>             }
>         }
>     
>         return min;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     public static int min(int[] array) {
>         
>         if (array == null) {
>             throw new NullArgumentException("Array");
>         } else if (array.length == 0) {
>             throw new IllegalArgumentException("Array cannot be empty.");
>         }
>     
>         
>         int min = array[0];
>         for (int j = 1; j < array.length; j++) {
>             if (array[j] < min) {
>                 min = array[j];
>             }
>         }
>     
>         return min;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     public static short min(short[] array) {
>         
>         if (array == null) {
>             throw new NullArgumentException("Array");
>         } else if (array.length == 0) {
>             throw new IllegalArgumentException("Array cannot be empty.");
>         }
>     
>         
>         short min = array[0];
>         for (int i = 1; i < array.length; i++) {
>             if (array[i] < min) {
>                 min = array[i];
>             }
>         }
>     
>         return min;
>     }
> 
>      
> 
> 
> 
> 
> 
> 
> 
>     public static double min(double[] array) {
>         
>         if (array == null) {
>             throw new NullArgumentException("Array");
>         } else if (array.length == 0) {
>             throw new IllegalArgumentException("Array cannot be empty.");
>         }
>     
>         
>         double min = array[0];
>         for (int i = 1; i < array.length; i++) {
>             if (array[i] < min) {
>                 min = array[i];
>             }
>         }
>     
>         return min;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     public static float min(float[] array) {
>         
>         if (array == null) {
>             throw new NullArgumentException("Array");
>         } else if (array.length == 0) {
>             throw new IllegalArgumentException("Array cannot be empty.");
>         }
>     
>         
>         float min = array[0];
>         for (int i = 1; i < array.length; i++) {
>             if (array[i] < min) {
>                 min = array[i];
>             }
>         }
>     
>         return min;
>     }
> 
>     
>     
>     
> 
> 
> 
> 
> 
> 
> 
>     public static long max(long[] array) {
>         
>         if (array == null) {
>             throw new NullArgumentException("Array");
>         } else if (array.length == 0) {
>             throw new IllegalArgumentException("Array cannot be empty.");
>         }
> 
>         
>         long max = array[0];
>         for (int j = 1; j < array.length; j++) {
>             if (array[j] > max) {
>                 max = array[j];
>             }
>         }
> 
>         return max;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     public static int max(int[] array) {
>         
>         if (array == null) {
>             throw new NullArgumentException("Array");
>         } else if (array.length == 0) {
>             throw new IllegalArgumentException("Array cannot be empty.");
>         }
>     
>         
>         int max = array[0];
>         for (int j = 1; j < array.length; j++) {
>             if (array[j] > max) {
>                 max = array[j];
>             }
>         }
>     
>         return max;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     public static short max(short[] array) {
>         
>         if (array == null) {
>             throw new NullArgumentException("Array");
>         } else if (array.length == 0) {
>             throw new IllegalArgumentException("Array cannot be empty.");
>         }
>     
>         
>         short max = array[0];
>         for (int i = 1; i < array.length; i++) {
>             if (array[i] > max) {
>                 max = array[i];
>             }
>         }
>     
>         return max;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     public static double max(double[] array) {
>         
>         if (array== null) {
>             throw new NullArgumentException("Array");
>         } else if (array.length == 0) {
>             throw new IllegalArgumentException("Array cannot be empty.");
>         }
>     
>         
>         double max = array[0];
>         for (int j = 1; j < array.length; j++) {
>             if (array[j] > max) {
>                 max = array[j];
>             }
>         }
>     
>         return max;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     public static float max(float[] array) {
>         
>         if (array == null) {
>             throw new NullArgumentException("Array");
>         } else if (array.length == 0) {
>             throw new IllegalArgumentException("Array cannot be empty.");
>         }
> 
>         
>         float max = array[0];
>         for (int j = 1; j < array.length; j++) {
>             if (array[j] > max) {
>                 max = array[j];
>             }
>         }
> 
>         return max;
>     }
>      
>     
>     
>     
540a819
>     
