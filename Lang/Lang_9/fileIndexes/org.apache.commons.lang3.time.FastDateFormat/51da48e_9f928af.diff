19,20d18
< import java.io.IOException;
< import java.io.ObjectInputStream;
22d19
< import java.text.DateFormatSymbols;
24a22
> import java.text.ParseException;
26d23
< import java.util.ArrayList;
29,30d25
< import java.util.GregorianCalendar;
< import java.util.List;
33,34d27
< import java.util.concurrent.ConcurrentHashMap;
< import java.util.concurrent.ConcurrentMap;
36d28
< import org.apache.commons.lang3.Validate;
70,81d61
< public class FastDateFormat extends Format {
<     
<     
<     
<     
<     
<     
<     
<     
<     
<     
<     
82a63
> public class FastDateFormat extends Format implements DateParser, DatePrinter {
88c69
<     private static final long serialVersionUID = 1L;
---
>     private static final long serialVersionUID = 2L;
109c90
<         protected FastDateFormat createInstance(String pattern,    TimeZone timeZone, Locale locale) {
---
>         protected FastDateFormat createInstance(String pattern, TimeZone timeZone, Locale locale) {
114,132c95,96
<     private static ConcurrentMap<TimeZoneDisplayKey, String> cTimeZoneDisplayCache =
<         new ConcurrentHashMap<TimeZoneDisplayKey, String>(7);
< 
<     
< 
< 
<     private final String mPattern;
<     
< 
< 
<     private final TimeZone mTimeZone;
<     
< 
< 
<     private final Locale mLocale;
<     
< 
< 
<     private transient Rule[] mRules;
---
>     private final FastDatePrinter printer;
>     private final FastDateParser parser;
134,137d97
< 
< 
<     private transient int mMaxLengthEstimate;
< 
146c106
<         return cache.getDateTimeInstance(SHORT, SHORT, null, null);
---
>         return cache.getInstance();
400,423d359
< 
< 
< 
< 
< 
< 
< 
< 
<     static String getTimeZoneDisplay(TimeZone tz, boolean daylight, int style, Locale locale) {
<         TimeZoneDisplayKey key = new TimeZoneDisplayKey(tz, daylight, style, locale);
<         String value = cTimeZoneDisplayCache.get(key);
<         if (value == null) {
<             
<             value = tz.getDisplayName(daylight, style, locale);
<             String prior = cTimeZoneDisplayCache.putIfAbsent(key, value);
<             if (prior != null) {
<                 value= prior;
<             }
<         }
<         return value;
<     }
< 
<     
<     
433,660c369,370
<         mPattern = pattern;
<         mTimeZone = timeZone;
<         mLocale = locale;
< 
<         init();
<     }
< 
<     
< 
< 
<     private void init() {
<         List<Rule> rulesList = parsePattern();
<         mRules = rulesList.toArray(new Rule[rulesList.size()]);
< 
<         int len = 0;
<         for (int i=mRules.length; --i >= 0; ) {
<             len += mRules[i].estimateLength();
<         }
< 
<         mMaxLengthEstimate = len;
<     }
< 
<     
<     
<     
< 
< 
< 
< 
< 
<     protected List<Rule> parsePattern() {
<         DateFormatSymbols symbols = new DateFormatSymbols(mLocale);
<         List<Rule> rules = new ArrayList<Rule>();
< 
<         String[] ERAs = symbols.getEras();
<         String[] months = symbols.getMonths();
<         String[] shortMonths = symbols.getShortMonths();
<         String[] weekdays = symbols.getWeekdays();
<         String[] shortWeekdays = symbols.getShortWeekdays();
<         String[] AmPmStrings = symbols.getAmPmStrings();
< 
<         int length = mPattern.length();
<         int[] indexRef = new int[1];
< 
<         for (int i = 0; i < length; i++) {
<             indexRef[0] = i;
<             String token = parseToken(mPattern, indexRef);
<             i = indexRef[0];
< 
<             int tokenLen = token.length();
<             if (tokenLen == 0) {
<                 break;
<             }
< 
<             Rule rule;
<             char c = token.charAt(0);
< 
<             switch (c) {
<             case 'G': 
<                 rule = new TextField(Calendar.ERA, ERAs);
<                 break;
<             case 'y': 
<                 if (tokenLen == 2) {
<                     rule = TwoDigitYearField.INSTANCE;
<                 } else {
<                     rule = selectNumberRule(Calendar.YEAR, tokenLen < 4 ? 4 : tokenLen);
<                 }
<                 break;
<             case 'M': 
<                 if (tokenLen >= 4) {
<                     rule = new TextField(Calendar.MONTH, months);
<                 } else if (tokenLen == 3) {
<                     rule = new TextField(Calendar.MONTH, shortMonths);
<                 } else if (tokenLen == 2) {
<                     rule = TwoDigitMonthField.INSTANCE;
<                 } else {
<                     rule = UnpaddedMonthField.INSTANCE;
<                 }
<                 break;
<             case 'd': 
<                 rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);
<                 break;
<             case 'h': 
<                 rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));
<                 break;
<             case 'H': 
<                 rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);
<                 break;
<             case 'm': 
<                 rule = selectNumberRule(Calendar.MINUTE, tokenLen);
<                 break;
<             case 's': 
<                 rule = selectNumberRule(Calendar.SECOND, tokenLen);
<                 break;
<             case 'S': 
<                 rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);
<                 break;
<             case 'E': 
<                 rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);
<                 break;
<             case 'D': 
<                 rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);
<                 break;
<             case 'F': 
<                 rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);
<                 break;
<             case 'w': 
<                 rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);
<                 break;
<             case 'W': 
<                 rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);
<                 break;
<             case 'a': 
<                 rule = new TextField(Calendar.AM_PM, AmPmStrings);
<                 break;
<             case 'k': 
<                 rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));
<                 break;
<             case 'K': 
<                 rule = selectNumberRule(Calendar.HOUR, tokenLen);
<                 break;
<             case 'z': 
<                 if (tokenLen >= 4) {
<                     rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);
<                 } else {
<                     rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);
<                 }
<                 break;
<             case 'Z': 
<                 if (tokenLen == 1) {
<                     rule = TimeZoneNumberRule.INSTANCE_NO_COLON;
<                 } else {
<                     rule = TimeZoneNumberRule.INSTANCE_COLON;
<                 }
<                 break;
<             case '\'': 
<                 String sub = token.substring(1);
<                 if (sub.length() == 1) {
<                     rule = new CharacterLiteral(sub.charAt(0));
<                 } else {
<                     rule = new StringLiteral(sub);
<                 }
<                 break;
<             default:
<                 throw new IllegalArgumentException("Illegal pattern component: " + token);
<             }
< 
<             rules.add(rule);
<         }
< 
<         return rules;
<     }
< 
<     
< 
< 
< 
< 
< 
< 
<     protected String parseToken(String pattern, int[] indexRef) {
<         StringBuilder buf = new StringBuilder();
< 
<         int i = indexRef[0];
<         int length = pattern.length();
< 
<         char c = pattern.charAt(i);
<         if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') {
<             
<             
<             buf.append(c);
< 
<             while (i + 1 < length) {
<                 char peek = pattern.charAt(i + 1);
<                 if (peek == c) {
<                     buf.append(c);
<                     i++;
<                 } else {
<                     break;
<                 }
<             }
<         } else {
<             
<             buf.append('\'');
< 
<             boolean inLiteral = false;
< 
<             for (; i < length; i++) {
<                 c = pattern.charAt(i);
< 
<                 if (c == '\'') {
<                     if (i + 1 < length && pattern.charAt(i + 1) == '\'') {
<                         
<                         i++;
<                         buf.append(c);
<                     } else {
<                         inLiteral = !inLiteral;
<                     }
<                 } else if (!inLiteral &&
<                          (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')) {
<                     i--;
<                     break;
<                 } else {
<                     buf.append(c);
<                 }
<             }
<         }
< 
<         indexRef[0] = i;
<         return buf.toString();
<     }
< 
<     
< 
< 
< 
< 
< 
< 
<     protected NumberRule selectNumberRule(int field, int padding) {
<         switch (padding) {
<         case 1:
<             return new UnpaddedNumberField(field);
<         case 2:
<             return new TwoDigitNumberField(field);
<         default:
<             return new PaddedNumberField(field, padding);
<         }
---
>         printer= new FastDatePrinter(pattern, timeZone, locale);
>         parser= new FastDateParser(pattern, timeZone, locale);
676,685c386
<         if (obj instanceof Date) {
<             return format((Date) obj, toAppendTo);
<         } else if (obj instanceof Calendar) {
<             return format((Calendar) obj, toAppendTo);
<         } else if (obj instanceof Long) {
<             return format(((Long) obj).longValue(), toAppendTo);
<         } else {
<             throw new IllegalArgumentException("Unknown class: " +
<                 (obj == null ? "<null>" : obj.getClass().getName()));
<         }
---
>         return printer.format(obj, toAppendTo, pos);
706,708c407
<         Calendar c = new GregorianCalendar(mTimeZone, mLocale);  
<         c.setTime(date);
<         return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();
---
>         return printer.format(date);
718c417
<         return format(calendar, new StringBuffer(mMaxLengthEstimate)).toString();
---
>         return printer.format(calendar);
731c430
<         return format(new Date(millis), buf);
---
>         return printer.format(millis, buf);
743,745c442
<         Calendar c = new GregorianCalendar(mTimeZone, mLocale);  
<         c.setTime(date);
<         return applyRules(c, buf);
---
>         return printer.format(date, buf);
757c454
<         return applyRules(calendar, buf);
---
>         return printer.format(calendar, buf);
760a458
>     
761a460,461
>     
>     
764,772c464,466
< 
< 
< 
< 
<     protected StringBuffer applyRules(Calendar calendar, StringBuffer buf) {
<         for (Rule rule : mRules) {
<             rule.appendTo(buf, calendar);
<         }
<         return buf;
---
>     @Override
>     public Date parse(String source) throws ParseException {
>         return parser.parse(source);
776,778d469
<     
<     
< 
780a472,475
>     @Override
>     public Date parse(String source, ParsePosition pos) {
>             return parser.parse(source, pos);
>     }
781a477
>     
786,788c482
<         pos.setIndex(0);
<         pos.setErrorIndex(0);
<         return null;
---
>         return parser.parseObject(source, pos);
799c493
<         return mPattern;
---
>         return printer.getPattern();
810c504
<         return mTimeZone;
---
>         return printer.getTimeZone();
819c513
<         return mLocale;
---
>         return printer.getLocale();
832c526
<         return mMaxLengthEstimate;
---
>         return printer.getMaxLengthEstimate();
849,851c543,544
<         return mPattern.equals(other.mPattern)
<             && mTimeZone.equals(other.mTimeZone) 
<             && mLocale.equals(other.mLocale);
---
>         
>         return printer.equals(other.printer);
861c554
<         return mPattern.hashCode() + 13 * (mTimeZone.hashCode() + 13 * mLocale.hashCode());
---
>         return printer.hashCode();
871,1285c564
<         return "FastDateFormat[" + mPattern + "]";
<     }
< 
<     
<     
<     
< 
< 
< 
< 
< 
< 
< 
<     private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
<         in.defaultReadObject();
<         init();
<     }
< 
<     
<     
<     
< 
< 
<     private interface Rule {
<         
< 
< 
< 
< 
<         int estimateLength();
< 
<         
< 
< 
< 
< 
< 
<         void appendTo(StringBuffer buffer, Calendar calendar);
<     }
< 
<     
< 
< 
<     private interface NumberRule extends Rule {
<         
< 
< 
< 
< 
< 
<         void appendTo(StringBuffer buffer, int value);
<     }
< 
<     
< 
< 
<     private static class CharacterLiteral implements Rule {
<         private final char mValue;
< 
<         
< 
< 
< 
< 
< 
<         CharacterLiteral(char value) {
<             mValue = value;
<         }
< 
<         
< 
< 
<         public int estimateLength() {
<             return 1;
<         }
< 
<         
< 
< 
<         public void appendTo(StringBuffer buffer, Calendar calendar) {
<             buffer.append(mValue);
<         }
<     }
< 
<     
< 
< 
<     private static class StringLiteral implements Rule {
<         private final String mValue;
< 
<         
< 
< 
< 
< 
< 
<         StringLiteral(String value) {
<             mValue = value;
<         }
< 
<         
< 
< 
<         public int estimateLength() {
<             return mValue.length();
<         }
< 
<         
< 
< 
<         public void appendTo(StringBuffer buffer, Calendar calendar) {
<             buffer.append(mValue);
<         }
<     }
< 
<     
< 
< 
<     private static class TextField implements Rule {
<         private final int mField;
<         private final String[] mValues;
< 
<         
< 
< 
< 
< 
< 
< 
<         TextField(int field, String[] values) {
<             mField = field;
<             mValues = values;
<         }
< 
<         
< 
< 
<         public int estimateLength() {
<             int max = 0;
<             for (int i=mValues.length; --i >= 0; ) {
<                 int len = mValues[i].length();
<                 if (len > max) {
<                     max = len;
<                 }
<             }
<             return max;
<         }
< 
<         
< 
< 
<         public void appendTo(StringBuffer buffer, Calendar calendar) {
<             buffer.append(mValues[calendar.get(mField)]);
<         }
<     }
< 
<     
< 
< 
<     private static class UnpaddedNumberField implements NumberRule {
<         private final int mField;
< 
<         
< 
< 
< 
< 
<         UnpaddedNumberField(int field) {
<             mField = field;
<         }
< 
<         
< 
< 
<         public int estimateLength() {
<             return 4;
<         }
< 
<         
< 
< 
<         public void appendTo(StringBuffer buffer, Calendar calendar) {
<             appendTo(buffer, calendar.get(mField));
<         }
< 
<         
< 
< 
<         public final void appendTo(StringBuffer buffer, int value) {
<             if (value < 10) {
<                 buffer.append((char)(value + '0'));
<             } else if (value < 100) {
<                 buffer.append((char)(value / 10 + '0'));
<                 buffer.append((char)(value % 10 + '0'));
<             } else {
<                 buffer.append(Integer.toString(value));
<             }
<         }
<     }
< 
<     
< 
< 
<     private static class UnpaddedMonthField implements NumberRule {
<         static final UnpaddedMonthField INSTANCE = new UnpaddedMonthField();
< 
<         
< 
< 
< 
<         UnpaddedMonthField() {
<             super();
<         }
< 
<         
< 
< 
<         public int estimateLength() {
<             return 2;
<         }
< 
<         
< 
< 
<         public void appendTo(StringBuffer buffer, Calendar calendar) {
<             appendTo(buffer, calendar.get(Calendar.MONTH) + 1);
<         }
< 
<         
< 
< 
<         public final void appendTo(StringBuffer buffer, int value) {
<             if (value < 10) {
<                 buffer.append((char)(value + '0'));
<             } else {
<                 buffer.append((char)(value / 10 + '0'));
<                 buffer.append((char)(value % 10 + '0'));
<             }
<         }
<     }
< 
<     
< 
< 
<     private static class PaddedNumberField implements NumberRule {
<         private final int mField;
<         private final int mSize;
< 
<         
< 
< 
< 
< 
< 
<         PaddedNumberField(int field, int size) {
<             if (size < 3) {
<                 
<                 throw new IllegalArgumentException();
<             }
<             mField = field;
<             mSize = size;
<         }
< 
<         
< 
< 
<         public int estimateLength() {
<             return 4;
<         }
< 
<         
< 
< 
<         public void appendTo(StringBuffer buffer, Calendar calendar) {
<             appendTo(buffer, calendar.get(mField));
<         }
< 
<         
< 
< 
<         public final void appendTo(StringBuffer buffer, int value) {
<             if (value < 100) {
<                 for (int i = mSize; --i >= 2; ) {
<                     buffer.append('0');
<                 }
<                 buffer.append((char)(value / 10 + '0'));
<                 buffer.append((char)(value % 10 + '0'));
<             } else {
<                 int digits;
<                 if (value < 1000) {
<                     digits = 3;
<                 } else {
<                     Validate.isTrue(value > -1, "Negative values should not be possible", value);
<                     digits = Integer.toString(value).length();
<                 }
<                 for (int i = mSize; --i >= digits; ) {
<                     buffer.append('0');
<                 }
<                 buffer.append(Integer.toString(value));
<             }
<         }
<     }
< 
<     
< 
< 
<     private static class TwoDigitNumberField implements NumberRule {
<         private final int mField;
< 
<         
< 
< 
< 
< 
<         TwoDigitNumberField(int field) {
<             mField = field;
<         }
< 
<         
< 
< 
<         public int estimateLength() {
<             return 2;
<         }
< 
<         
< 
< 
<         public void appendTo(StringBuffer buffer, Calendar calendar) {
<             appendTo(buffer, calendar.get(mField));
<         }
< 
<         
< 
< 
<         public final void appendTo(StringBuffer buffer, int value) {
<             if (value < 100) {
<                 buffer.append((char)(value / 10 + '0'));
<                 buffer.append((char)(value % 10 + '0'));
<             } else {
<                 buffer.append(Integer.toString(value));
<             }
<         }
<     }
< 
<     
< 
< 
<     private static class TwoDigitYearField implements NumberRule {
<         static final TwoDigitYearField INSTANCE = new TwoDigitYearField();
< 
<         
< 
< 
<         TwoDigitYearField() {
<             super();
<         }
< 
<         
< 
< 
<         public int estimateLength() {
<             return 2;
<         }
< 
<         
< 
< 
<         public void appendTo(StringBuffer buffer, Calendar calendar) {
<             appendTo(buffer, calendar.get(Calendar.YEAR) % 100);
<         }
< 
<         
< 
< 
<         public final void appendTo(StringBuffer buffer, int value) {
<             buffer.append((char)(value / 10 + '0'));
<             buffer.append((char)(value % 10 + '0'));
<         }
<     }
< 
<     
< 
< 
<     private static class TwoDigitMonthField implements NumberRule {
<         static final TwoDigitMonthField INSTANCE = new TwoDigitMonthField();
< 
<         
< 
< 
<         TwoDigitMonthField() {
<             super();
<         }
< 
<         
< 
< 
<         public int estimateLength() {
<             return 2;
<         }
< 
<         
< 
< 
<         public void appendTo(StringBuffer buffer, Calendar calendar) {
<             appendTo(buffer, calendar.get(Calendar.MONTH) + 1);
<         }
< 
<         
< 
< 
<         public final void appendTo(StringBuffer buffer, int value) {
<             buffer.append((char)(value / 10 + '0'));
<             buffer.append((char)(value % 10 + '0'));
<         }
---
>         return "FastDateFormat[" + printer.getPattern() + "," + printer.getLocale() + "," + printer.getTimeZone().getID() + "]";
1288,1328d566
<     
< 
< 
<     private static class TwelveHourField implements NumberRule {
<         private final NumberRule mRule;
< 
<         
< 
< 
< 
< 
< 
<         TwelveHourField(NumberRule rule) {
<             mRule = rule;
<         }
< 
<         
< 
< 
<         public int estimateLength() {
<             return mRule.estimateLength();
<         }
< 
<         
< 
< 
<         public void appendTo(StringBuffer buffer, Calendar calendar) {
<             int value = calendar.get(Calendar.HOUR);
<             if (value == 0) {
<                 value = calendar.getLeastMaximum(Calendar.HOUR) + 1;
<             }
<             mRule.appendTo(buffer, value);
<         }
< 
<         
< 
< 
<         public void appendTo(StringBuffer buffer, int value) {
<             mRule.appendTo(buffer, value);
<         }
<     }
1333,1337d570
<     private static class TwentyFourHourField implements NumberRule {
<         private final NumberRule mRule;
< 
<         
< 
1342,1392d574
<         TwentyFourHourField(NumberRule rule) {
<             mRule = rule;
<         }
< 
<         
< 
< 
<         public int estimateLength() {
<             return mRule.estimateLength();
<         }
< 
<         
< 
< 
<         public void appendTo(StringBuffer buffer, Calendar calendar) {
<             int value = calendar.get(Calendar.HOUR_OF_DAY);
<             if (value == 0) {
<                 value = calendar.getMaximum(Calendar.HOUR_OF_DAY) + 1;
<             }
<             mRule.appendTo(buffer, value);
<         }
< 
<         
< 
< 
<         public void appendTo(StringBuffer buffer, int value) {
<             mRule.appendTo(buffer, value);
<         }
<     }
< 
<     
< 
< 
<     private static class TimeZoneNameRule implements Rule {
<         private final TimeZone mTimeZone;
<         private final String mStandard;
<         private final String mDaylight;
< 
<         
< 
< 
< 
< 
< 
< 
<         TimeZoneNameRule(TimeZone timeZone, Locale locale, int style) {
<             mTimeZone = timeZone;
< 
<             mStandard = getTimeZoneDisplay(timeZone, false, style, locale);
<             mDaylight = getTimeZoneDisplay(timeZone, true, style, locale);
<         }
1394,1463c576,577
<         
< 
< 
<         public int estimateLength() {
<             return Math.max(mStandard.length(), mDaylight.length());
<         }
< 
<         
< 
< 
<         public void appendTo(StringBuffer buffer, Calendar calendar) {
<             if (mTimeZone.useDaylightTime() && calendar.get(Calendar.DST_OFFSET) != 0) {
<                 buffer.append(mDaylight);
<             } else {
<                 buffer.append(mStandard);
<             }
<         }
<     }
< 
<     
< 
< 
< 
<     private static class TimeZoneNumberRule implements Rule {
<         static final TimeZoneNumberRule INSTANCE_COLON = new TimeZoneNumberRule(true);
<         static final TimeZoneNumberRule INSTANCE_NO_COLON = new TimeZoneNumberRule(false);
< 
<         final boolean mColon;
< 
<         
< 
< 
< 
< 
<         TimeZoneNumberRule(boolean colon) {
<             mColon = colon;
<         }
< 
<         
< 
< 
<         public int estimateLength() {
<             return 5;
<         }
< 
<         
< 
< 
<         public void appendTo(StringBuffer buffer, Calendar calendar) {
<             int offset = calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET);
< 
<             if (offset < 0) {
<                 buffer.append('-');
<                 offset = -offset;
<             } else {
<                 buffer.append('+');
<             }
< 
<             int hours = offset / (60 * 60 * 1000);
<             buffer.append((char)(hours / 10 + '0'));
<             buffer.append((char)(hours % 10 + '0'));
< 
<             if (mColon) {
<                 buffer.append(':');
<             }
< 
<             int minutes = offset / (60 * 1000) - 60 * hours;
<             buffer.append((char)(minutes / 10 + '0'));
<             buffer.append((char)(minutes % 10 + '0'));
<         }
---
>     protected StringBuffer applyRules(Calendar calendar, StringBuffer buf) {
>         return printer.applyRules(calendar, buf);
1466,1481d579
<     
<     
< 
< 
<     private static class TimeZoneDisplayKey {
<         private final TimeZone mTimeZone;
<         private final int mStyle;
<         private final Locale mLocale;
< 
<         
< 
< 
< 
< 
< 
< 
1483,1518d580
<         TimeZoneDisplayKey(TimeZone timeZone,
<                            boolean daylight, int style, Locale locale) {
<             mTimeZone = timeZone;
<             if (daylight) {
<                 style |= 0x80000000;
<             }
<             mStyle = style;
<             mLocale = locale;
<         }
< 
<         
< 
< 
<         @Override
<         public int hashCode() {
<             return (mStyle * 31 + mLocale.hashCode() ) * 31 + mTimeZone.hashCode();
<         }
< 
<         
< 
< 
<         @Override
<         public boolean equals(Object obj) {
<             if (this == obj) {
<                 return true;
<             }
<             if (obj instanceof TimeZoneDisplayKey) {
<                 TimeZoneDisplayKey other = (TimeZoneDisplayKey)obj;
<                 return
<                     mTimeZone.equals(other.mTimeZone) &&
<                     mStyle == other.mStyle &&
<                     mLocale.equals(other.mLocale);
<             }
<             return false;
<         }
<     }
