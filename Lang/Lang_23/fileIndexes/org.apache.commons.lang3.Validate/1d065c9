















package org.apache.commons.lang;

import java.text.MessageFormat;
import java.util.Collection;
import java.util.Iterator;
import java.util.Map;



















































































public class Validate {
    
    
    


    public Validate() {
      super();
    }
    
    
    

    




















    public static void isTrue(boolean expression, String message, Object value) {
        if (expression == false) {
            throw new IllegalArgumentException(getMessage(message, value));
        }
    }

    



















    public static void isTrue(boolean expression, String message, long value) {
        if (expression == false) {
            
            throw new IllegalArgumentException(getMessage(message, value));
        }
    }

    




















    public static void isTrue(boolean expression, String message, double value) {
        if (expression == false) {
            throw new IllegalArgumentException(getMessage(message, value));
        }
    }

    




















    public static void isTrue(boolean expression, String message) {
        if (expression == false) {
            throw new IllegalArgumentException(message);
        }
    }

    

















    public static void isTrue(boolean expression) {
        if (expression == false) {
            throw new IllegalArgumentException("The validated expression is false");
        }
    }

    



















    public static void isTrue(boolean expression, Object... msgObjects) {
        if (expression == false) {
            throw new IllegalArgumentException(getMessage(msgObjects));
        }
    }

    
    

    












    public static void notNull(Object object, String message) {
        if (object == null) {
            throw new IllegalArgumentException(message);
        }
    }

    












    public static void notNull(Object object) {
        notNull(object, "The validated object is null");
    }


    














    public static void notNull(Object object, Object... msgObjects) {
        if (object == null) {
            throw new IllegalArgumentException(getMessage(msgObjects));
        }
    }   

    
    

    











    public static void notEmpty(Object[] array, String message) {
        if (array == null || array.length == 0) {
            throw new IllegalArgumentException(message);
        }
    }

    












    public static void notEmpty(Object[] array) {
        notEmpty(array, "The validated array is empty");
    }

    















    public static void notEmpty(Object[] array, Object... msgObjects) {
        notEmpty(array, getMessage(msgObjects));
    }

    
    

    











    public static void notEmpty(Collection<?> collection, String message) {
        if (collection == null || collection.size() == 0) {
            throw new IllegalArgumentException(message);
        }
    }

    












    public static void notEmpty(Collection<?> collection) {
        notEmpty(collection, "The validated collection is empty");
    }

    















    public static void notEmpty(Collection<?> collection, Object... msgObjects) {
        notEmpty(collection, getMessage(msgObjects));
    }

    
    

    











    public static void notEmpty(Map<?,?> map, String message) {
        if (map == null || map.size() == 0) {
            throw new IllegalArgumentException(message);
        }
    }

    












    public static void notEmpty(Map<?,?> map) {
        notEmpty(map, "The validated map is empty");
    }

    















    public static void notEmpty(Map<?,?> map, Object... msgObjects) {
        notEmpty(map, getMessage(msgObjects));
    }

    
    

    











    public static void notEmpty(String string, String message) {
        if (string == null || string.length() == 0) {
            throw new IllegalArgumentException(message);
        }
    }

    












    public static void notEmpty(String string) {
        notEmpty(string, "The validated string is empty");
    }

    















    public static void notEmpty(String string, Object... msgObjects) {
        notEmpty(string, getMessage(msgObjects));
    }

    
    

    
















    public static void noNullElements(Object[] array, String message) {
        Validate.notNull(array);
        for (int i = 0; i < array.length; i++) {
            if (array[i] == null) {
                throw new IllegalArgumentException(message);
            }
        }
    }

    

















    public static void noNullElements(Object[] array) {
        Validate.notNull(array);
        for (int i = 0; i < array.length; i++) {
            if (array[i] == null) {
                throw new IllegalArgumentException("The validated array contains null element at index: " + i);
            }
        }
    }

    



















    public static void noNullElements(Object[] array, Object... msgObjects) {
        Validate.notNull(array);
        for (int i = 0; i < array.length; i++) {
            if (array[i] == null) {
                
                throw new IllegalArgumentException(getMessage(msgObjects));
            }
        }
    }

    
    

    
















    public static void noNullElements(Collection collection, String message) {
        Validate.notNull(collection);
        for (Iterator it = collection.iterator(); it.hasNext();) {
            if (it.next() == null) {
                throw new IllegalArgumentException(message);
            }
        }
    }

    
















    public static void noNullElements(Collection collection) {
        Validate.notNull(collection);
        int i = 0;
        for (Iterator it = collection.iterator(); it.hasNext(); i++) {
            if (it.next() == null) {
                throw new IllegalArgumentException("The validated collection contains null element at index: " + i);
            }
        }
    }

    



















    public static void noNullElements(Collection collection, Object... msgObjects) {
        Validate.notNull(collection);
        int i = 0;
        for (Iterator it = collection.iterator(); it.hasNext(); i++) {
            if (it.next() == null) {
                
                throw new IllegalArgumentException(getMessage(msgObjects));
            }
        }
    }


    
    

    













    public static void allElementsOfType(Collection collection, Class clazz, String message) {
        Validate.notNull(collection);
        Validate.notNull(clazz);
        for (Iterator it = collection.iterator(); it.hasNext(); ) {
            if (clazz.isInstance(it.next()) == false) {
                throw new IllegalArgumentException(message);
            }
        }
    }

    



















    public static void allElementsOfType(Collection collection, Class clazz) {
        Validate.notNull(collection);
        Validate.notNull(clazz);
        int i = 0;
        for (Iterator it = collection.iterator(); it.hasNext(); i++) {
            if (clazz.isInstance(it.next()) == false) {
                throw new IllegalArgumentException("The validated collection contains an element not of type "
                    + clazz.getName() + " at index: " + i);
            }
        }
    }

    



















    public static void allElementsOfType(Collection collection, Class clazz, Object... msgObjects) {
        Validate.notNull(collection);
        Validate.notNull(clazz);
        int i = 0;
        for (Iterator it = collection.iterator(); it.hasNext(); i++) {
            if (clazz.isInstance(it.next()) == false) {
                
                throw new IllegalArgumentException(getMessage(msgObjects));
            }
        }
    }

    
    

    
    







    private static String getMessage(Object... msgObjects) {
        if (msgObjects.length > 0 && msgObjects[0] instanceof String) {
            String message = (String) msgObjects[0];
            if (msgObjects.length == 2 && !message.matches("[^\\{]*\\{\\d*\\}.*")) {
                
                return message + msgObjects[1]; 
            }
            
            MessageFormat form = new MessageFormat((String) msgObjects[0]);
            Object[] params = new Object[msgObjects.length - 1];
            System.arraycopy(msgObjects, 1, params, 0, msgObjects.length - 1);
            return form.format(params);
        }
        else {
            StringBuffer sb = new StringBuffer("Validation failed: [");
            for(int i = 0; i < msgObjects.length; i++) {
                if (i > 0) {
                    sb.append(' ');
                }
                sb.append(msgObjects[i]);
            }
            sb.append(']');
            return sb.toString();
        }
    }

}
