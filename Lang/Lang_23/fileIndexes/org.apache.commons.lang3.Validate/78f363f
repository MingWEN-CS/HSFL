















package org.apache.commons.lang;

import java.util.Collection;
import java.util.Iterator;
import java.util.Map;



















public class Validate {

    


    public Validate() {
      super();
    }

    
    

    




















    public static void isTrue(boolean expression, String message, Object value) {
        if (expression == false) {
            throw new IllegalArgumentException(message + value);
        }
    }

    



















    public static void isTrue(boolean expression, String message, long value) {
        if (expression == false) {
            throw new IllegalArgumentException(message + value);
        }
    }

    




















    public static void isTrue(boolean expression, String message, double value) {
        if (expression == false) {
            throw new IllegalArgumentException(message + value);
        }
    }

    




















    public static void isTrue(boolean expression, String message) {
        if (expression == false) {
            throw new IllegalArgumentException(message);
        }
    }

    

















    public static void isTrue(boolean expression) {
        if (expression == false) {
            throw new IllegalArgumentException("The validated expression is false");
        }
    }

    
    

    













    public static <T> T notNull(T object, String message) {
        if (object == null) {
            throw new IllegalArgumentException(message);
        }
        return object;
    }

    













    public static <T> T notNull(T object) {
        return notNull(object, "The validated object is null");
    }

    
    

    












    public static <T> T[] notEmpty(T[] array, String message) {
        if (array == null || array.length == 0) {
            throw new IllegalArgumentException(message);
        }
        return array;
    }

    













    public static <T> T[] notEmpty(T[] array) {
        return notEmpty(array, "The validated array is empty");
    }

    
    

    












    public static <T extends Collection<?>> T notEmpty(T collection, String message) {
        if (collection == null || collection.size() == 0) {
            throw new IllegalArgumentException(message);
        }
        return collection;
    }

    













    public static <T extends Collection<?>> T notEmpty(T collection) {
        return notEmpty(collection, "The validated collection is empty");
    }

    
    

    












    public static <T extends Map<?, ?>> T notEmpty(T map, String message) {
        if (map == null || map.size() == 0) {
            throw new IllegalArgumentException(message);
        }
        return map;
    }

    













    public static <T extends Map<?, ?>> T notEmpty(T map) {
        return notEmpty(map, "The validated map is empty");
    }

    
    

    












    public static <T extends CharSequence> T notEmpty(T string, String message) {
        if (string == null || string.length() == 0) {
            throw new IllegalArgumentException(message);
        }
        return string;
    }

    













    public static <T extends CharSequence> T notEmpty(T string) {
        return notEmpty(string, "The validated string is empty");
    }

    
    

    













    public static <T extends CharSequence> T notBlank(T string, String message) {
        if (StringUtils.isBlank(string)) {
            throw new IllegalArgumentException(message);
        }
        return string;
    }

    














    public static <T extends CharSequence> T notBlank(T string) {
        return notBlank(string, "The validated string is blank");
    }

    
    

    

















    public static <T> T[] noNullElements(T[] array, String message) {
        Validate.notNull(array);
        for (int i = 0; i < array.length; i++) {
            if (array[i] == null) {
                throw new IllegalArgumentException(message);
            }
        }
        return array;
    }

    


















    public static <T> T[] noNullElements(T[] array) {
        Validate.notNull(array);
        for (int i = 0; i < array.length; i++) {
            if (array[i] == null) {
                throw new IllegalArgumentException("The validated array contains null element at index: " + i);
            }
        }
        return array;
    }

    
    

    

















    public static <T extends Collection<?>> T noNullElements(T collection, String message) {
        Validate.notNull(collection);
        for (Iterator<?> it = collection.iterator(); it.hasNext();) {
            if (it.next() == null) {
                throw new IllegalArgumentException(message);
            }
        }
        return collection;
    }

    

















    public static <T extends Collection<?>> T noNullElements(T collection) {
        Validate.notNull(collection);
        int i = 0;
        for (Iterator<?> it = collection.iterator(); it.hasNext(); i++) {
            if (it.next() == null) {
                throw new IllegalArgumentException("The validated collection contains null element at index: " + i);
            }
        }
        return collection;
    }

    
    

    














    public static <T> T[] validIndex(T[] array, int index, String message) {
        Validate.notNull(array);
        if (index < 0 || index >= array.length) {
            throw new IllegalArgumentException(message + index);
        }
        return array;
    }

    
















    public static <T> T[] validIndex(T[] array, int index) {
        return validIndex(array, index, "The validated array index is invalid: ");
    }

    
    

    














    public static <T extends Collection<?>> T validIndex(T coll, int index, String message) {
        Validate.notNull(coll);
        if (index < 0 || index >= coll.size()) {
            throw new IllegalArgumentException(message + index);
        }
        return coll;
    }

    
















    public static <T extends Collection<?>> T validIndex(T coll, int index) {
        return validIndex(coll, index, "The validated collection index is invalid: ");
    }

    
    

    















    public static <T extends CharSequence> T validIndex(T str, int index, String message) {
        Validate.notNull(str);
        if (index < 0 || index >= str.length()) {
            throw new IllegalArgumentException(message + index);
        }
        return str;
    }

    

















    public static <T extends CharSequence> T validIndex(T str, int index) {
        return validIndex(str, index, "The validated string index is invalid: ");
    }

}
