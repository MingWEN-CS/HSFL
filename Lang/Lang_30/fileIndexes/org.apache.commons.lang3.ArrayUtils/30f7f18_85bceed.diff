242a243
>     
399a401
>     
580a583
>     
791a795,797
>     
>     
>     
851,854c857
<         if (array == null) {
<             return -1;
<         }
<         return lastIndexOf(array, objectToFind, array.length - 1);
---
>         return lastIndexOf(array, objectToFind, Integer.MAX_VALUE);
906a910,1616
>     }
> 
>     
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public static int indexOf(final long[] array, final long valueToFind) {
>         return indexOf(array, valueToFind, 0);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static int indexOf(final long[] array, final long valueToFind, int startIndex) {
>         if (array == null) {
>             return -1;
>         }
>         if (startIndex < 0) {
>             startIndex = 0;
>         }
>         for (int i = startIndex; i < array.length; i++) {
>             if (valueToFind == array[i]) {
>                 return i;
>             }
>         }
>         return -1;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public static int lastIndexOf(final long[] array, final long valueToFind) {
>         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static int lastIndexOf(final long[] array, final long valueToFind, int startIndex) {
>         if (array == null) {
>             return -1;
>         }
>         if (startIndex < 0) {
>             return -1;
>         } else if (startIndex >= array.length) {
>             startIndex = array.length - 1;
>         }
>         for (int i = startIndex; i >= 0; i--) {
>             if (valueToFind == array[i]) {
>                 return i;
>             }
>         }
>         return -1;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public static boolean contains(final long[] array, final long valueToFind) {
>         return (indexOf(array, valueToFind) != -1);
>     }
> 
>     
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public static int indexOf(final int[] array, final int valueToFind) {
>         return indexOf(array, valueToFind, 0);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static int indexOf(final int[] array, final int valueToFind, int startIndex) {
>         if (array == null) {
>             return -1;
>         }
>         if (startIndex < 0) {
>             startIndex = 0;
>         }
>         for (int i = startIndex; i < array.length; i++) {
>             if (valueToFind == array[i]) {
>                 return i;
>             }
>         }
>         return -1;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public static int lastIndexOf(final int[] array, final int valueToFind) {
>         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static int lastIndexOf(final int[] array, final int valueToFind, int startIndex) {
>         if (array == null) {
>             return -1;
>         }
>         if (startIndex < 0) {
>             return -1;
>         } else if (startIndex >= array.length) {
>             startIndex = array.length - 1;
>         }
>         for (int i = startIndex; i >= 0; i--) {
>             if (valueToFind == array[i]) {
>                 return i;
>             }
>         }
>         return -1;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public static boolean contains(final int[] array, final int valueToFind) {
>         return (indexOf(array, valueToFind) != -1);
>     }
> 
>     
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public static int indexOf(final short[] array, final short valueToFind) {
>         return indexOf(array, valueToFind, 0);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static int indexOf(final short[] array, final short valueToFind, int startIndex) {
>         if (array == null) {
>             return -1;
>         }
>         if (startIndex < 0) {
>             startIndex = 0;
>         }
>         for (int i = startIndex; i < array.length; i++) {
>             if (valueToFind == array[i]) {
>                 return i;
>             }
>         }
>         return -1;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public static int lastIndexOf(final short[] array, final short valueToFind) {
>         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static int lastIndexOf(final short[] array, final short valueToFind, int startIndex) {
>         if (array == null) {
>             return -1;
>         }
>         if (startIndex < 0) {
>             return -1;
>         } else if (startIndex >= array.length) {
>             startIndex = array.length - 1;
>         }
>         for (int i = startIndex; i >= 0; i--) {
>             if (valueToFind == array[i]) {
>                 return i;
>             }
>         }
>         return -1;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public static boolean contains(final short[] array, final short valueToFind) {
>         return (indexOf(array, valueToFind) != -1);
>     }
> 
>     
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public static int indexOf(final byte[] array, final byte valueToFind) {
>         return indexOf(array, valueToFind, 0);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static int indexOf(final byte[] array, final byte valueToFind, int startIndex) {
>         if (array == null) {
>             return -1;
>         }
>         if (startIndex < 0) {
>             startIndex = 0;
>         }
>         for (int i = startIndex; i < array.length; i++) {
>             if (valueToFind == array[i]) {
>                 return i;
>             }
>         }
>         return -1;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public static int lastIndexOf(final byte[] array, final byte valueToFind) {
>         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static int lastIndexOf(final byte[] array, final byte valueToFind, int startIndex) {
>         if (array == null) {
>             return -1;
>         }
>         if (startIndex < 0) {
>             return -1;
>         } else if (startIndex >= array.length) {
>             startIndex = array.length - 1;
>         }
>         for (int i = startIndex; i >= 0; i--) {
>             if (valueToFind == array[i]) {
>                 return i;
>             }
>         }
>         return -1;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public static boolean contains(final byte[] array, final byte valueToFind) {
>         return (indexOf(array, valueToFind) != -1);
>     }
> 
>     
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public static int indexOf(final double[] array, final double valueToFind) {
>         return indexOf(array, valueToFind, 0);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static int indexOf(final double[] array, final double valueToFind, int startIndex) {
>         if (array == null) {
>             return -1;
>         }
>         if (startIndex < 0) {
>             startIndex = 0;
>         }
>         for (int i = startIndex; i < array.length; i++) {
>             if (valueToFind == array[i]) {
>                 return i;
>             }
>         }
>         return -1;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public static int lastIndexOf(final double[] array, final double valueToFind) {
>         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static int lastIndexOf(final double[] array, final double valueToFind, int startIndex) {
>         if (array == null) {
>             return -1;
>         }
>         if (startIndex < 0) {
>             return -1;
>         } else if (startIndex >= array.length) {
>             startIndex = array.length - 1;
>         }
>         for (int i = startIndex; i >= 0; i--) {
>             if (valueToFind == array[i]) {
>                 return i;
>             }
>         }
>         return -1;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public static boolean contains(final double[] array, final double valueToFind) {
>         return (indexOf(array, valueToFind) != -1);
>     }
> 
>     
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public static int indexOf(final float[] array, final float valueToFind) {
>         return indexOf(array, valueToFind, 0);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static int indexOf(final float[] array, final float valueToFind, int startIndex) {
>         if (array == null) {
>             return -1;
>         }
>         if (startIndex < 0) {
>             startIndex = 0;
>         }
>         for (int i = startIndex; i < array.length; i++) {
>             if (valueToFind == array[i]) {
>                 return i;
>             }
>         }
>         return -1;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public static int lastIndexOf(final float[] array, final float valueToFind) {
>         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static int lastIndexOf(final float[] array, final float valueToFind, int startIndex) {
>         if (array == null) {
>             return -1;
>         }
>         if (startIndex < 0) {
>             return -1;
>         } else if (startIndex >= array.length) {
>             startIndex = array.length - 1;
>         }
>         for (int i = startIndex; i >= 0; i--) {
>             if (valueToFind == array[i]) {
>                 return i;
>             }
>         }
>         return -1;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public static boolean contains(final float[] array, final float valueToFind) {
>         return (indexOf(array, valueToFind) != -1);
>     }
> 
>     
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public static int indexOf(final boolean[] array, final boolean valueToFind) {
>         return indexOf(array, valueToFind, 0);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static int indexOf(final boolean[] array, final boolean valueToFind, int startIndex) {
>         if (array == null) {
>             return -1;
>         }
>         if (startIndex < 0) {
>             startIndex = 0;
>         }
>         for (int i = startIndex; i < array.length; i++) {
>             if (valueToFind == array[i]) {
>                 return i;
>             }
>         }
>         return -1;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public static int lastIndexOf(final boolean[] array, final boolean valueToFind) {
>         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static int lastIndexOf(final boolean[] array, final boolean valueToFind, int startIndex) {
>         if (array == null) {
>             return -1;
>         }
>         if (startIndex < 0) {
>             return -1;
>         } else if (startIndex >= array.length) {
>             startIndex = array.length - 1;
>         }
>         for (int i = startIndex; i >= 0; i--) {
>             if (valueToFind == array[i]) {
>                 return i;
>             }
>         }
>         return -1;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public static boolean contains(final boolean[] array, final boolean valueToFind) {
>         return (indexOf(array, valueToFind) != -1);
