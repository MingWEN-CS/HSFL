55a56
> import java.lang.reflect.Array;
458c459,574
<     public static Object[] subArray(Object[] array, int startIndexInclusive, int endIndexExclusive) {
---
> 
> 
> 
> 
> 
> 
> 
>     public static Object[] subarray(Object[] array, int startIndexInclusive, int endIndexExclusive) {
>         if (array == null) {
>             return null;
>         }
>         if (startIndexInclusive < 0) {
>             startIndexInclusive = 0;
>         }
>         if (endIndexExclusive > array.length) {
>             endIndexExclusive = array.length;
>         }
>         int newSize = endIndexExclusive - startIndexInclusive;
>         Class type = array.getClass().getComponentType();
>         if (newSize <= 0) {
>             return (Object[]) Array.newInstance(type, 0);
>         }
>         Object[] subarray = (Object[]) Array.newInstance(type, newSize);
>         System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
>         return subarray;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive) {
>         if (array == null) {
>             return null;
>         }
>         if (startIndexInclusive < 0) {
>             startIndexInclusive = 0;
>         }
>         if (endIndexExclusive > array.length) {
>             endIndexExclusive = array.length;
>         }
>         int newSize = endIndexExclusive - startIndexInclusive;
>         if (newSize <= 0) {
>             return EMPTY_LONG_ARRAY;
>         }
> 
>         long[] subarray = new long[newSize];
>         System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
>         return subarray;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive) {
>         if (array == null) {
>             return null;
>         }
>         if (startIndexInclusive < 0) {
>             startIndexInclusive = 0;
>         }
>         if (endIndexExclusive > array.length) {
>             endIndexExclusive = array.length;
>         }
>         int newSize = endIndexExclusive - startIndexInclusive;
>         if (newSize <= 0) {
>             return EMPTY_INT_ARRAY;
>         }
> 
>         int[] subarray = new int[newSize];
>         System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
>         return subarray;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive) {
470c586,615
<             return EMPTY_OBJECT_ARRAY;
---
>             return EMPTY_SHORT_ARRAY;
>         }
> 
>         short[] subarray = new short[newSize];
>         System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
>         return subarray;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive) {
>         if (array == null) {
>             return null;
>         }
>         if (startIndexInclusive < 0) {
>             startIndexInclusive = 0;
472,474c617,771
<         Object[] subArray = new Object[newSize];
<         System.arraycopy(array, startIndexInclusive, subArray, 0, newSize);
<         return subArray;
---
>         if (endIndexExclusive > array.length) {
>             endIndexExclusive = array.length;
>         }
>         int newSize = endIndexExclusive - startIndexInclusive;
>         if (newSize <= 0) {
>             return EMPTY_CHAR_ARRAY;
>         }
> 
>         char[] subarray = new char[newSize];
>         System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
>         return subarray;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive) {
>         if (array == null) {
>             return null;
>         }
>         if (startIndexInclusive < 0) {
>             startIndexInclusive = 0;
>         }
>         if (endIndexExclusive > array.length) {
>             endIndexExclusive = array.length;
>         }
>         int newSize = endIndexExclusive - startIndexInclusive;
>         if (newSize <= 0) {
>             return EMPTY_BYTE_ARRAY;
>         }
> 
>         byte[] subarray = new byte[newSize];
>         System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
>         return subarray;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive) {
>         if (array == null) {
>             return null;
>         }
>         if (startIndexInclusive < 0) {
>             startIndexInclusive = 0;
>         }
>         if (endIndexExclusive > array.length) {
>             endIndexExclusive = array.length;
>         }
>         int newSize = endIndexExclusive - startIndexInclusive;
>         if (newSize <= 0) {
>             return EMPTY_DOUBLE_ARRAY;
>         }
> 
>         double[] subarray = new double[newSize];
>         System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
>         return subarray;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive) {
>         if (array == null) {
>             return null;
>         }
>         if (startIndexInclusive < 0) {
>             startIndexInclusive = 0;
>         }
>         if (endIndexExclusive > array.length) {
>             endIndexExclusive = array.length;
>         }
>         int newSize = endIndexExclusive - startIndexInclusive;
>         if (newSize <= 0) {
>             return EMPTY_FLOAT_ARRAY;
>         }
> 
>         float[] subarray = new float[newSize];
>         System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
>         return subarray;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive) {
>         if (array == null) {
>             return null;
>         }
>         if (startIndexInclusive < 0) {
>             startIndexInclusive = 0;
>         }
>         if (endIndexExclusive > array.length) {
>             endIndexExclusive = array.length;
>         }
>         int newSize = endIndexExclusive - startIndexInclusive;
>         if (newSize <= 0) {
>             return EMPTY_BOOLEAN_ARRAY;
>         }
> 
>         boolean[] subarray = new boolean[newSize];
>         System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);
>         return subarray;
