911a912,914
>     
>     
>     
972a976,1383
>         }
>         return result;
>     }
> 
>     
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public static byte[] toPrimitive(final Byte[] array) {
>         if (array == null) {
>             return null;
>         } else if (array.length == 0) {
>             return EMPTY_BYTE_ARRAY;
>         }
>         final byte[] result = new byte[array.length];
>         for (int i = 0; i < array.length; i++) {
>             result[i] = array[i].byteValue();
>         }
>         return result;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public static byte[] toPrimitive(final Byte[] array, final byte valueForNull) {
>         if (array == null) {
>             return null;
>         } else if (array.length == 0) {
>             return EMPTY_BYTE_ARRAY;
>         }
>         final byte[] result = new byte[array.length];
>         for (int i = 0; i < array.length; i++) {
>             Byte b = array[i];
>             result[i] = (b == null ? valueForNull : b.byteValue());
>         }
>         return result;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     public static Byte[] toObject(final byte[] array) {
>         if (array == null) {
>             return null;
>         } else if (array.length == 0) {
>             return EMPTY_BYTE_OBJECT_ARRAY;
>         }
>         final Byte[] result = new Byte[array.length];
>         for (int i = 0; i < array.length; i++) {
>             result[i] = new Byte(array[i]);
>         }
>         return result;
>     }  
>     
>     
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public static short[] toPrimitive(final Short[] array) {
>         if (array == null) {
>             return null;
>         } else if (array.length == 0) {
>             return EMPTY_SHORT_ARRAY;
>         }
>         final short[] result = new short[array.length];
>         for (int i = 0; i < array.length; i++) {
>             result[i] = array[i].shortValue();
>         }
>         return result;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public static short[] toPrimitive(final Short[] array, final short valueForNull) {
>         if (array == null) {
>             return null;
>         } else if (array.length == 0) {
>             return EMPTY_SHORT_ARRAY;
>         }
>         final short[] result = new short[array.length];
>         for (int i = 0; i < array.length; i++) {
>             Short b = array[i];
>             result[i] = (b == null ? valueForNull : b.shortValue());
>         }
>         return result;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     public static Short[] toObject(final short[] array) {
>         if (array == null) {
>             return null;
>         } else if (array.length == 0) {
>             return EMPTY_SHORT_OBJECT_ARRAY;
>         }
>         final Short[] result = new Short[array.length];
>         for (int i = 0; i < array.length; i++) {
>             result[i] = new Short(array[i]);
>         }
>         return result;
>     }    
> 
>     
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public static int[] toPrimitive(final Integer[] array) {
>         if (array == null) {
>             return null;
>         } else if (array.length == 0) {
>             return EMPTY_INT_ARRAY;
>         }
>         final int[] result = new int[array.length];
>         for (int i = 0; i < array.length; i++) {
>             result[i] = array[i].intValue();
>         }
>         return result;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public static int[] toPrimitive(final Integer[] array, final int valueForNull) {
>         if (array == null) {
>             return null;
>         } else if (array.length == 0) {
>             return EMPTY_INT_ARRAY;
>         }
>         final int[] result = new int[array.length];
>         for (int i = 0; i < array.length; i++) {
>             Integer b = array[i];
>             result[i] = (b == null ? valueForNull : b.intValue());
>         }
>         return result;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     public static Integer[] toObject(final int[] array) {
>         if (array == null) {
>             return null;
>         } else if (array.length == 0) {
>             return EMPTY_INTEGER_OBJECT_ARRAY;
>         }
>         final Integer[] result = new Integer[array.length];
>         for (int i = 0; i < array.length; i++) {
>             result[i] = new Integer(array[i]);
>         }
>         return result;
>     }
>     
>     
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public static long[] toPrimitive(final Long[] array) {
>         if (array == null) {
>             return null;
>         } else if (array.length == 0) {
>             return EMPTY_LONG_ARRAY;
>         }
>         final long[] result = new long[array.length];
>         for (int i = 0; i < array.length; i++) {
>             result[i] = array[i].longValue();
>         }
>         return result;
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public static long[] toPrimitive(final Long[] array, final long valueForNull) {
>         if (array == null) {
>             return null;
>         } else if (array.length == 0) {
>             return EMPTY_LONG_ARRAY;
>         }
>         final long[] result = new long[array.length];
>         for (int i = 0; i < array.length; i++) {
>             Long b = array[i];
>             result[i] = (b == null ? valueForNull : b.longValue());
>         }
>         return result;
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
>     public static Long[] toObject(final long[] array) {
>         if (array == null) {
>             return null;
>         } else if (array.length == 0) {
>             return EMPTY_LONG_OBJECT_ARRAY;
>         }
>         final Long[] result = new Long[array.length];
>         for (int i = 0; i < array.length; i++) {
>             result[i] = new Long(array[i]);
>         }
>         return result;
>     }
> 
>     
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public static float[] toPrimitive(final Float[] array) {
>         if (array == null) {
>             return null;
>         } else if (array.length == 0) {
>             return EMPTY_FLOAT_ARRAY;
>         }
>         final float[] result = new float[array.length];
>         for (int i = 0; i < array.length; i++) {
>             result[i] = array[i].floatValue();
>         }
>         return result;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public static float[] toPrimitive(final Float[] array, final float valueForNull) {
>         if (array == null) {
>             return null;
>         } else if (array.length == 0) {
>             return EMPTY_FLOAT_ARRAY;
>         }
>         final float[] result = new float[array.length];
>         for (int i = 0; i < array.length; i++) {
>             Float b = array[i];
>             result[i] = (b == null ? valueForNull : b.floatValue());
>         }
>         return result;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     public static Float[] toObject(final float[] array) {
>         if (array == null) {
>             return null;
>         } else if (array.length == 0) {
>             return EMPTY_FLOAT_OBJECT_ARRAY;
>         }
>         final Float[] result = new Float[array.length];
>         for (int i = 0; i < array.length; i++) {
>             result[i] = new Float(array[i]);
>         }
>         return result;
>     }
> 
>     
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public static double[] toPrimitive(final Double[] array) {
>         if (array == null) {
>             return null;
>         } else if (array.length == 0) {
>             return EMPTY_DOUBLE_ARRAY;
>         }
>         final double[] result = new double[array.length];
>         for (int i = 0; i < array.length; i++) {
>             result[i] = array[i].doubleValue();
>         }
>         return result;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public static double[] toPrimitive(final Double[] array, final double valueForNull) {
>         if (array == null) {
>             return null;
>         } else if (array.length == 0) {
>             return EMPTY_DOUBLE_ARRAY;
>         }
>         final double[] result = new double[array.length];
>         for (int i = 0; i < array.length; i++) {
>             Double b = array[i];
>             result[i] = (b == null ? valueForNull : b.doubleValue());
>         }
>         return result;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     public static Double[] toObject(final double[] array) {
>         if (array == null) {
>             return null;
>         } else if (array.length == 0) {
>             return EMPTY_DOUBLE_OBJECT_ARRAY;
>         }
>         final Double[] result = new Double[array.length];
>         for (int i = 0; i < array.length; i++) {
>             result[i] = new Double(array[i]);
