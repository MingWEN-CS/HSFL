1970c1970,1971
<         if (padStr == null || padStr.length() == 0) {
---
>         int padLen;
>         if (padStr == null || (padLen = padStr.length()) == 0) {
1973,1974c1974,1977
<         if (padStr.length() == 1 && size - str.length() <= PAD_LIMIT) {
<            return rightPad(str, size, padStr.charAt(0));
---
>         int strLen = str.length();
>         int pads = size - strLen;
>         if (padLen == 1 && pads <= PAD_LIMIT) {
>             return rightPad(str, size, padStr.charAt(0));
1976,1979c1979,1993
< 
<         size = (size - str.length()) / padStr.length();
<         if (size > 0) {
<             str += repeat(padStr, size);
---
>         
>         if (pads <= 0) {
>             return str; 
>         }
>         if (pads == padLen) {
>             return str.concat(padStr);
>         } else if (pads < padLen) {
>             return str.concat(padStr.substring(0, pads));
>         } else {
>             char[] padding = new char[pads];
>             char[] padChars = padStr.toCharArray();
>             for (int i = 0; i < pads; i++) {
>                 padding[i] = padChars[i % padLen];
>             }
>             return str.concat(new String(padding));
1981d1994
<         return str;
2044c2057
<             return leftPad(str, size, ' ');
---
>             return leftPad(str, size, String.valueOf(padChar));
2076c2089,2090
<         if (padStr == null || padStr.length() == 0) {
---
>         int padLen;
>         if (padStr == null || (padLen = padStr.length()) == 0) {
2079c2093,2095
<         if (padStr.length() == 1 && size - str.length() <= PAD_LIMIT) {
---
>         int strLen = str.length();
>         int pads = size - strLen;
>         if (padLen == 1 && pads <= PAD_LIMIT) {
2082,2084c2098,2112
<         size = (size - str.length()) / padStr.length();
<         if (size > 0) {
<             str = repeat(padStr, size) + str;
---
>         
>         if (pads <= 0) {
>             return str; 
>         }
>         if (pads == padLen) {
>             return padStr.concat(str);
>         } else if (pads < padLen) {
>             return padStr.substring(0, pads).concat(str);
>         } else {
>             char[] padding = new char[pads];
>             char[] padChars = padStr.toCharArray();
>             for (int i = 0; i < pads; i++) {
>                 padding[i] = padChars[i % padLen];
>             }
>             return new String(padding).concat(str);
2086d2113
<         return str;
