1166,1167c1166
<         if (str == null || str.length() == 0 ||
<             searchChars == null || searchChars.length == 0) {
---
>         if (str == null || str.length() == 0 || searchChars == null || searchChars.length == 0) {
1203a1203,1206
> 
> 
> 
> 
2286c2289
<         return splitByWholeSeparatorWorker( str, separator, -1, true ) ;
---
>         return splitByWholeSeparatorWorker(str, separator, -1, true);
2318c2321
<     public static String[] splitByWholeSeparatorPreserveAllTokens( String str, String separator, int max ) {
---
>     public static String[] splitByWholeSeparatorPreserveAllTokens(String str, String separator, int max) {
2336,2338c2339
<     private static String[] splitByWholeSeparatorWorker( String str, String separator, 
<                                                          int max, boolean preserveAllTokens ) 
<     {
---
>     private static String[] splitByWholeSeparatorWorker(String str, String separator, int max, boolean preserveAllTokens) {
2343c2344
<         int len = str.length() ;
---
>         int len = str.length();
2349c2350
<         if ( ( separator == null ) || ( EMPTY.equals( separator ) ) ) {
---
>         if ((separator == null) || (EMPTY.equals(separator))) {
2351c2352
<             return splitWorker( str, null, max, preserveAllTokens ) ;
---
>             return splitWorker(str, null, max, preserveAllTokens);
2353a2355
>         int separatorLength = separator.length();
2355c2357,2362
<         int separatorLength = separator.length() ;
---
>         ArrayList substrings = new ArrayList();
>         int numberOfSubstrings = 0;
>         int beg = 0;
>         int end = 0;
>         while (end < len) {
>             end = str.indexOf(separator, beg);
2357,2362c2364,2366
<         ArrayList substrings = new ArrayList() ;
<         int numberOfSubstrings = 0 ;
<         int beg = 0 ;
<         int end = 0 ;
<         while ( end < len ) {
<             end = str.indexOf( separator, beg ) ;
---
>             if (end > -1) {
>                 if (end > beg) {
>                     numberOfSubstrings += 1;
2364,2370c2368,2370
<             if ( end > -1 ) {
<                 if ( end > beg ) {
<                     numberOfSubstrings += 1 ;
< 
<                     if ( numberOfSubstrings == max ) {
<                         end = len ;
<                         substrings.add( str.substring( beg ) ) ;
---
>                     if (numberOfSubstrings == max) {
>                         end = len;
>                         substrings.add(str.substring(beg));
2374c2374
<                         substrings.add( str.substring( beg, end ) ) ;
---
>                         substrings.add(str.substring(beg, end));
2379c2379
<                         beg = end + separatorLength ;
---
>                         beg = end + separatorLength;
2383,2387c2383,2387
<                     if( preserveAllTokens ) {
<                         numberOfSubstrings += 1 ;
<                         if ( numberOfSubstrings == max ) {
<                             end = len ;
<                             substrings.add( str.substring( beg ) ) ;
---
>                     if (preserveAllTokens) {
>                         numberOfSubstrings += 1;
>                         if (numberOfSubstrings == max) {
>                             end = len;
>                             substrings.add(str.substring(beg));
2389c2389
<                             substrings.add( EMPTY );
---
>                             substrings.add(EMPTY);
2392c2392
<                     beg = end + separatorLength ;
---
>                     beg = end + separatorLength;
2396,2397c2396,2397
<                 substrings.add( str.substring( beg ) ) ;
<                 end = len ;
---
>                 substrings.add(str.substring(beg));
>                 end = len;
2401c2401
<         return (String[]) substrings.toArray( new String[substrings.size()] ) ;
---
>         return (String[]) substrings.toArray(new String[substrings.size()]);
2404d2403
< 
2773,2774c2772
<             if (camelCase && type == Character.LOWERCASE_LETTER
<                     && currentType == Character.UPPERCASE_LETTER) {
---
>             if (camelCase && type == Character.LOWERCASE_LETTER && currentType == Character.UPPERCASE_LETTER) {
3270c3268
<         if (startsWithIgnoreCase(str, remove)){
---
>         if (startsWithIgnoreCase(str, remove)) {
3606d3603
< 
3659,3660c3656
<     private static String replaceEach(String text, String[] repl, String[] with,
<             boolean repeat, int timeToLive) {
---
>     private static String replaceEach(String text, String[] repl, String[] with, boolean repeat, int timeToLive) {
3664,3668c3660,3661
<         
<         if (text == null || text.length() == 0 || 
<             repl == null || repl.length == 0 || 
<             with == null || with.length == 0) 
<         {
---
> 
>         if (text == null || text.length() == 0 || repl == null || repl.length == 0 || with == null || with.length == 0) {
3682c3675,3678
<             throw new IllegalArgumentException("Search and Replace array lengths don't match: " + replLength + " vs " + withLength);
---
>             throw new IllegalArgumentException("Search and Replace array lengths don't match: "
>                 + replLength
>                 + " vs "
>                 + withLength);
3700c3696
<             
---
> 
3724c3720
<         for (int i=0; i<repl.length; i++) {
---
>         for (int i = 0; i < repl.length; i++) {
3726c3722
<             if(greater > 0) {
---
>             if (greater > 0) {
3731,3732c3727,3728
<         increase = Math.min(increase, text.length() / 5); 
<     
---
>         increase = Math.min(increase, text.length() / 5);
> 
3754c3750
<                 
---
> 
5577c5573
<         for (int i=0; i<arrayLen; i++) {
---
>         for (int i = 0; i < arrayLen; i++) {
5581c5577
<             } else {   
---
>             } else {
5596c5592
<         } 
---
>         }
5600c5596
<         for (int stringPos = 0; stringPos<shortestStrLen; stringPos++) {
---
>         for (int stringPos = 0; stringPos < shortestStrLen; stringPos++) {
5602c5598
<             for (int arrayPos = 1; arrayPos<arrayLen; arrayPos++) {
---
>             for (int arrayPos = 1; arrayPos < arrayLen; arrayPos++) {
