60,61d59
< import org.apache.commons.lang.math.NumberUtils;
< 
130,136d127
<     private static String spaces = new String(" ");
< 
<     
< 
< 
< 
< 
137a129,132
>     
>     static {
>         padding[32] = "                                ";
>     }
2409,2429d2403
<     private static String padding(int repeat) {
<         while (spaces.length() < repeat)  {
<             spaces = spaces.concat(spaces);
<         }
<         return spaces.substring(0, repeat);
<     }
< 
<     
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
2460,2470c2434
<         if (str == null) {
<             return null;
<         }
<         int pads = size - str.length();
<         if (pads <= 0) {
<             return str; 
<         }
<         if (pads > PAD_LIMIT) {
<             return rightPad(str, size, ' ');
<         }
<         return str.concat(padding(pads));
---
>         return rightPad(str, size, ' ');
2530a2495,2497
>         if (str == null) {
>             return null;
>         }
2535,2537d2501
<         if (str == null) {
<             return null;
<         }
2580,2590c2544
<         if (str == null) {
<             return null;
<         }
<         int pads = size - str.length();
<         if (pads <= 0) { 
<             return str; 
<         }
<         if (pads > PAD_LIMIT) {
<             return leftPad(str, size, ' ');
<         }
<         return padding(pads).concat(str);
---
>         return leftPad(str, size, ' ');        
2650a2605,2607
>         if (str == null) {
>             return null;
>         }
2655,2657d2611
<         if (str == null) {
<             return null;
<         }
2708a2663,2690
>         return center(str, size, ' ');
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static String center(String str, int size, char padChar) {
2717,2718c2699,2700
<         str = leftPad(str, strLen + pads / 2, ' ');
<         str = rightPad(str, size, ' ');
---
>         str = leftPad(str, strLen + pads / 2, padChar);
>         str = rightPad(str, size, padChar);
2750d2731
< 
2752,2754d2732
<         if (padStr == null || padStr.length() == 0) {
<             throw new IllegalArgumentException("Pad String must not be null or empty");
<         }
2757a2736,2738
>         if (padStr == null || padStr.length() == 0) {
>             throw new IllegalArgumentException("Pad String must not be null or empty");
>         }
3501a3483,3493
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
3526a3519,3529
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
3613c3616
<                 d[i][j] = NumberUtils.min(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + cost);
---
>                 d[i][j] = min(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + cost);
3618a3622,3640
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     private static int min(int a, int b, int c) {
>         
>         if (b < a) {
>             a = b;
>         }
>         if (c < a) {
>             a = c;
>         }
>         return a;
