




















































package org.apache.commons.lang;

import java.util.Iterator;
import java.util.StringTokenizer;

import org.apache.commons.lang.math.NumberUtils;



































public class StringUtils {

    


    private static int PAD_LIMIT = 8192;

    




    private static String spaces = new String(" ");

    




    private final static String[] padding = new String[Character.MAX_VALUE];
       

    







    public StringUtils() {
    }

    
    

    


















    public static String clean(String str) {
        return (str == null ? "" : str.trim());
    }

    




















    public static String trim(String str) {
        return (str == null ? null : str.trim());
    }

    




















    public static String trimToNull(String str) {
        String ts = trim(str);
        return (ts == null || ts.length() == 0 ? null : ts);
    }

    



















    public static String trimToEmpty(String str) {
        return (str == null ? "" : str.trim());
    }

    

















    public static String deleteSpaces(String str) {
        if (str == null) {
            return null;
        }
        return CharSetUtils.delete(str, " \t\r\n\b");
    }

    












    public static String deleteWhitespace(String str) {
        if (str == null) {
            return null;
        }
        StringBuffer buffer = new StringBuffer();
        int sz = str.length();
        for (int i = 0; i < sz; i++) {
            if (!Character.isWhitespace(str.charAt(i))) {
                buffer.append(str.charAt(i));
            }
        }
        return buffer.toString();
    }

    
    

    


















    public static boolean isEmpty(String str) {
        return (str != null && str.length() == 0);
    }

    


















    public static boolean isNotEmpty(String str) {
        return (str == null || str.length() > 0);
    }

    













    public static boolean isEmptyOrNull(String str) {
        return (str == null || str.length() == 0);
    }

    













    public static boolean isNotEmptyOrNull(String str) {
        return (str != null && str.length() > 0);
    }

    


















    public static boolean isEmptyTrimmed(String str) {
        return (str != null && str.trim().length() == 0);
    }

    


















    public static boolean isNotEmptyTrimmed(String str) {
        return (str == null || str.trim().length() > 0);
    }

    


















    public static boolean isEmptyTrimmedOrNull(String str) {
        return (str == null || str.trim().length() == 0);
    }

    


















    public static boolean isNotEmptyTrimmedOrNull(String str) {
        return (str != null && str.trim().length() > 0);
    }

    
    

    



















    public static boolean equals(String str1, String str2) {
        return (str1 == null ? str2 == null : str1.equals(str2));
    }

    




















    public static boolean equalsIgnoreCase(String str1, String str2) {
        return (str1 == null ? str2 == null : str1.equalsIgnoreCase(str2));
    }

    



















    public static int indexOfAny(String str, String[] searchStrs) {
        if ((str == null) || (searchStrs == null)) {
            return -1;
        }
        int sz = searchStrs.length;

        
        int ret = Integer.MAX_VALUE;

        int tmp = 0;
        for (int i = 0; i < sz; i++) {
            tmp = str.indexOf(searchStrs[i]);
            if (tmp == -1) {
                continue;
            }

            if (tmp < ret) {
                ret = tmp;
            }
        }

        return (ret == Integer.MAX_VALUE) ? -1 : ret;
    }

    



















    public static int lastIndexOfAny(String str, String[] searchStrs) {
        if ((str == null) || (searchStrs == null)) {
            return -1;
        }
        int sz = searchStrs.length;
        int ret = -1;
        int tmp = 0;
        for (int i = 0; i < sz; i++) {
            tmp = str.lastIndexOf(searchStrs[i]);
            if (tmp > ret) {
                ret = tmp;
            }
        }
        return ret;
    }

    
    
    
    



















    public static String substring(String str, int start) {
        if (str == null) {
            return null;
        }

        
        if (start < 0) {
            start = str.length() + start; 
        }

        if (start < 0) {
            start = 0;
        }
        if (start > str.length()) {
            return "";
        }

        return str.substring(start);
    }
    
    






















    public static String substring(String str, int start, int end) {
        if (str == null) {
            return null;
        }

        
        if (end < 0) {
            end = str.length() + end; 
        }
        if (start < 0) {
            start = str.length() + start; 
        }

        
        if (end > str.length()) {
            
            end = str.length();
        }

        
        if (start > end) {
            return "";
        }

        if (start < 0) {
            start = 0;
        }
        if (end < 0) {
            end = 0;
        }

        return str.substring(start, end);
    }

    



















    public static String left(String str, int len) {
        if (len < 0) {
            throw new IllegalArgumentException("Requested String length " + len + " is less than zero");
        }
        if ((str == null) || (str.length() <= len)) {
            return str;
        } else {
            return str.substring(0, len);
        }
    }

    



















    public static String right(String str, int len) {
        if (len < 0) {
            throw new IllegalArgumentException("Requested String length " + len + " is less than zero");
        }
        if ((str == null) || (str.length() <= len)) {
            return str;
        } else {
            return str.substring(str.length() - len);
        }
    }

    























    public static String mid(String str, int pos, int len) {
        if ((pos < 0) ||
            (str != null && pos > str.length())) {
            throw new StringIndexOutOfBoundsException("String index " + pos + " is out of bounds");
        }
        if (len < 0) {
            throw new IllegalArgumentException("Requested String length " + len + " is less than zero");
        }
        if (str == null) {
            return null;
        }
        if (str.length() <= (pos + len)) {
            return str.substring(pos);
        } else {
            return str.substring(pos, pos + len);
        }
    }

    
    
    
    













    public static String[] split(String str) {
        return split(str, null, -1);
    }

    
















    public static String[] split(String str, String separators) {
        return split(str, separators, -1);
    }

    
























    public static String[] split(String str, String separator, int max) {
        if (str == null) {
            return ArrayUtils.EMPTY_STRING_ARRAY;
        }
        StringTokenizer tok = null;
        if (separator == null) {
            
            
            tok = new StringTokenizer(str);
        } else {
            tok = new StringTokenizer(str, separator);
        }

        int listSize = tok.countTokens();
        if (max > 0 && listSize > max) {
            listSize = max;
        }

        String[] list = new String[listSize];
        int i = 0;
        int lastTokenBegin = 0;
        int lastTokenEnd = 0;
        while (tok.hasMoreTokens()) {
            if (max > 0 && i == listSize - 1) {
                
                
                
                String endToken = tok.nextToken();
                lastTokenBegin = str.indexOf(endToken, lastTokenEnd);
                list[i] = str.substring(lastTokenBegin);
                break;
            } else {
                list[i] = tok.nextToken();
                lastTokenBegin = str.indexOf(list[i], lastTokenEnd);
                lastTokenEnd = lastTokenBegin + list[i].length();
            }
            i++;
        }
        return list;
    }

    
    
    







    public static String concatenate(Object[] array) {
        return join(array, null);
    }
    
    










    public static String join(Object[] array, String separator) {
        int arraySize = array.length;

        
        
        
        int bufSize 
            = ((arraySize == 0) ? 0 
                : arraySize * (array[0].toString().length() 
                    + ((separator != null) ? separator.length(): 0)));

        StringBuffer buf = new StringBuffer(bufSize);

        for (int i = 0; i < arraySize; i++) {
            if ((separator != null) && (i > 0)) {
                buf.append(separator);
         }
            buf.append(array[i]);
        }
        return buf.toString();
    }

    









    public static String join(Object[] array, char separator) {
        int arraySize = array.length;
        int bufSize = (arraySize == 0 ? 0 : (array[0].toString().length() + 1) * arraySize);
        StringBuffer buf = new StringBuffer(bufSize);

        for (int i = 0; i < arraySize; i++) {
            if (i > 0) {
                buf.append(separator);
            }
            buf.append(array[i]);
        }
        return buf.toString();
    }

    










    public static String join(Iterator iterator, String separator) {
        StringBuffer buf = new StringBuffer(256);  
        while (iterator.hasNext()) {
            buf.append(iterator.next());
            if ((separator != null) && iterator.hasNext()) {
                buf.append(separator);
            }
         }
        return buf.toString();
    }

    









    public static String join(Iterator iterator, char separator) {
        StringBuffer buf = new StringBuffer(256);  
        while (iterator.hasNext()) {
            buf.append(iterator.next());
            if (iterator.hasNext()) {
                buf.append(separator);
            }
        }
        return buf.toString();
    }



    
    
    
    










    public static String replaceOnce(String text, String repl, String with) {
        return replace(text, repl, with, 1);
    }

    










    public static String replace(String text, String repl, String with) {
        return replace(text, repl, with, -1);
    }

    











    public static String replace(String text, String repl, String with, int max) {
        if (text == null || repl == null || with == null || repl.length() == 0) {
            return text;
        }

        StringBuffer buf = new StringBuffer(text.length());
        int start = 0, end = 0;
        while ((end = text.indexOf(repl, start)) != -1) {
            buf.append(text.substring(start, end)).append(with);
            start = end + repl.length();

            if (--max == 0) {
                break;
            }
        }
        buf.append(text.substring(start));
        return buf.toString();
    }

    









    public static String overlayString(String text, String overlay, int start, int end) {
        return new StringBuffer(start + overlay.length() + text.length() - end + 1)
            .append(text.substring(0, start))
            .append(overlay)
            .append(text.substring(end))
            .toString();
    }

    
    
    
    










    public static String center(String str, int size) {
        int sz = str.length();
        int p = size - sz;
        if (p < 1) {
            return str;
        }
        str = leftPad(str, sz + p / 2, ' ');
        str = rightPad(str, size, ' ');
        return str;
    }

    











    public static String center(String str, int size, String padStr) {
        int sz = str.length();
        int p = size - sz;
        if (p < 1) {
            return str;
        }
        str = leftPad(str, sz + p / 2, padStr);
        str = rightPad(str, size, padStr);
        return str;
    }

    
    

    












    public static String chomp(String str) {
        if (str.length() == 0) {
            return str;
        }

        if (str.length() == 1) {
            if ("\r".equals(str) || "\n".equals(str)) {
                return "";
            }
            else {
                return str;
            }
        }

        int lastIdx = str.length() - 1;
        char last = str.charAt(lastIdx);

        if (last == '\n') {
            if (str.charAt(lastIdx - 1) == '\r') {
                lastIdx--;
            }
        } else if (last == '\r') {

        } else {
            lastIdx++;
        }
        return str.substring(0, lastIdx);
    }

    












    public static String chomp(String str, String separator) {
        if (str.length() == 0) {
            return str;
        }
        if (str.endsWith(separator)) {
            return str.substring(0, str.length() - separator.length());
        }
        return str;
    }

    









    public static String chompLast(String str) {
        return chompLast(str, "\n");
    }
    
    









    public static String chompLast(String str, String sep) {
        if (str.length() == 0) {
            return str;
        }
        String sub = str.substring(str.length() - sep.length());
        if (sep.equals(sub)) {
            return str.substring(0, str.length() - sep.length());
        } else {
            return str;
        }
    }

    











    public static String getChomp(String str, String sep) {
        int idx = str.lastIndexOf(sep);
        if (idx == str.length() - sep.length()) {
            return sep;
        } else if (idx != -1) {
            return str.substring(idx);
        } else {
            return "";
        }
    }

    










    public static String prechomp(String str, String sep) {
        int idx = str.indexOf(sep);
        if (idx != -1) {
            return str.substring(idx + sep.length());
        } else {
            return str;
        }
    }

    










    public static String getPrechomp(String str, String sep) {
        int idx = str.indexOf(sep);
        if (idx != -1) {
            return str.substring(0, idx + sep.length());
        } else {
            return "";
        }
    }

    
    
    
    









    public static String chop(String str) {
        if ("".equals(str)) {
            return "";
        }
        if (str.length() == 1) {
            return "";
        }
        int lastIdx = str.length() - 1;
        String ret = str.substring(0, lastIdx);
        char last = str.charAt(lastIdx);
        if (last == '\n') {
            if (ret.charAt(lastIdx - 1) == '\r') {
                return ret.substring(0, lastIdx - 1);
            }
        }
        return ret;
    }

    









    public static String chopNewline(String str) {
        int lastIdx = str.length() - 1;
        if (lastIdx <= 0) {
            return "";
        }
        char last = str.charAt(lastIdx);
        if (last == '\n') {
            if (str.charAt(lastIdx - 1) == '\r') {
                lastIdx--;
            }
        } else {
            lastIdx++;
        }
        return str.substring(0, lastIdx);
    }


    
    

    








    public static String slice(String str) {
        return slice(str, "\n");
    }

    










    public static String slice(String str, String sep) {
        int idx = str.lastIndexOf(sep);
        if (idx != -1) {
            return str.substring(0, idx);
        } else {
            return str;
        }
    }

    











    public static String sliceRemainder(String str, String sep) {
        int idx = str.lastIndexOf(sep);
        if (idx == str.length() - sep.length()) {
            return "";
        } else if (idx != -1) {
            return str.substring(idx + sep.length());
        } else {
            return "";
        }
    }

    











    public static String sliceFirstRemainder(String str, String sep) {
        int idx = str.indexOf(sep);
        if (idx != -1) {
            return str.substring(idx + sep.length());
        } else {
            return str;
        }
    }

    











    public static String sliceFirst(String str, String sep) {
        int idx = str.indexOf(sep);
        if (idx != -1) {
            return str.substring(0, idx);
        } else {
            return "";
        }
    }

    
    
    
    















    public static String escape(String str) {
        return StringEscapeUtils.escapeJava(str);
    }

    
    
    
    


















    public static String repeat(String str, int repeat) {
        int inputLength = str.length();
        if (repeat == 0) {
            return "";
        }
        if (inputLength == 1 && repeat <= PAD_LIMIT) {
           return padding(repeat, str.charAt(0));
        }

        char[] input = str.toCharArray();
        char[] output = new char[repeat * inputLength];
        switch (inputLength) {
            case 1:
                char ch = input[0];
                for (int i = repeat - 1; i >= 0; i--) {
                    output[i] = ch;
                }
                break;
            case 2:
                char ch0 = input[0];
                char ch1 = input[1];
                for (int i = repeat * 2 - 2; i >= 0; i--,i--) {
                    output[i] = ch0;
                    output[i + 1] = ch1;
                }
                break;
            default:
                for (int i = repeat - 1; i >= 0; i--) {
                    System.arraycopy(input, 0, output, i * inputLength, inputLength);
                }
                break;            
        }
        return new String(output);
    }

    













    private static String padding(int repeat) {
        while (spaces.length() < repeat)  {
            spaces = spaces.concat(spaces);
        }
        return spaces.substring(0, repeat);
    }

    














    private static String padding(int repeat, char padChar) {
        if (padding[padChar] == null) {
            padding[padChar] = String.valueOf(padChar);
        }
        while (padding[padChar].length() < repeat) {
            padding[padChar] = padding[padChar].concat(padding[padChar]);
        }
        return padding[padChar].substring(0, repeat);
    }

    

















    public static String rightPad(String str, int size) {
        int pads = size - str.length();
        if (pads <= 0) {
            return str; 
        }
        if (pads > PAD_LIMIT) {
            return rightPad(str, size, ' ');
        }
        return str.concat(padding(pads));
    }

    


















    public static String rightPad(String str, int size, char padChar) {
        int pads = size - str.length();
        if (pads <= 0) {
            return str; 
        }
        if (pads > PAD_LIMIT) {
            return rightPad(str, size, String.valueOf(padChar));
        }
        return str.concat(padding(pads, padChar));
    }

    






















    public static String rightPad(String str, int size, String padStr) {
        if (padStr.length() == 1 && size - str.length() <= PAD_LIMIT) {
           return rightPad(str, size, padStr.charAt(0));
        }

        size = (size - str.length()) / padStr.length();
        if (size > 0) {
            str += repeat(padStr, size);
        }
        return str;
    }

    

















    public static String leftPad(String str, int size) {
        int pads = size - str.length();
        if (pads <= 0) { 
            return str; 
        }
        if (pads > PAD_LIMIT) {
            return leftPad(str, size, ' ');
        }
        return padding(pads).concat(str);
    }

    


















    public static String leftPad(String str, int size, char padChar) {
        int pads = size - str.length();
        if (pads <= 0) {
            return str; 
        }
        if (pads > PAD_LIMIT) {
            return leftPad(str, size, ' ');
        }
        return padding(pads, padChar).concat(str);
    }

    






















    public static String leftPad(String str, int size, String padStr) {
        if (padStr.length() == 1 && size - str.length() <= PAD_LIMIT)
           return leftPad(str, size, padStr.charAt(0));
        size = (size - str.length()) / padStr.length();
        if (size > 0) {
            str = repeat(padStr, size) + str;
        }
        return str;
    }

    
    
    
    





    public static String strip(String str) {
        return strip(str, null);
    }
    










    public static String strip(String str, String delim) {
        str = stripStart(str, delim);
        return stripEnd(str, delim);
    }

    






    public static String[] stripAll(String[] strs) {
        return stripAll(strs, null);
    }
 
    







    public static String[] stripAll(String[] strs, String delimiter) {
        if ((strs == null) || (strs.length == 0)) {
            return strs;
        }
        int sz = strs.length;
        String[] newArr = new String[sz];
        for (int i = 0; i < sz; i++) {
            newArr[i] = strip(strs[i], delimiter);
        }
        return newArr;
    }   

    









    public static String stripEnd(String str, String strip) {
        if (str == null) {
            return null;
        }
        int end = str.length();
 
        if (strip == null) {
            while ((end != 0) && Character.isWhitespace(str.charAt(end - 1))) {
                end--;
            }
        } else {
            while ((end != 0) && (strip.indexOf(str.charAt(end - 1)) != -1)) {
                end--;
            }
        }
        return str.substring(0, end);
    }

    









    public static String stripStart(String str, String strip) {
        if (str == null) {
            return null;
        }
 
        int start = 0;
 
        int sz = str.length();
 
        if (strip == null) {
            while ((start != sz) && Character.isWhitespace(str.charAt(start))) {
                start++;
            }
        } else {
            while ((start != sz) && (strip.indexOf(str.charAt(start)) != -1)) {
                start++;
            }
        }
        return str.substring(start);
    }

    
    
    
    






    public static String upperCase(String str) {
        if (str == null) {
            return null;
        }
        return str.toUpperCase();
    }

    






    public static String lowerCase(String str) {
        if (str == null) {
            return null;
        }
        return str.toLowerCase();
    }

    








    public static String uncapitalise(String str) {
        if (str == null) {
            return null;
        }
        else if (str.length() == 0) {
            return "";
        }
        else {
            return new StringBuffer(str.length())
                .append(Character.toLowerCase(str.charAt(0)))
                .append(str.substring(1))
                .toString();
        }
    }

    








    public static String capitalise(String str) {
        if (str == null) {
            return null;
        }
        else if (str.length() == 0) {
            return "";
        }
        else {
            return new StringBuffer(str.length())
                .append(Character.toTitleCase(str.charAt(0)))
                .append(str.substring(1))
                .toString();
        }
    }

    










    public static String swapCase(String str) {
        if (str == null) {
            return null;
        }
        int sz = str.length();
        StringBuffer buffer = new StringBuffer(sz);

        boolean whitespace = false;
        char ch = 0;
        char tmp = 0;

        for (int i = 0; i < sz; i++) {
            ch = str.charAt(i);
            if (Character.isUpperCase(ch)) {
                tmp = Character.toLowerCase(ch);
            } else if (Character.isTitleCase(ch)) {
                tmp = Character.toLowerCase(ch);
            } else if (Character.isLowerCase(ch)) {
                if (whitespace) {
                    tmp = Character.toTitleCase(ch);
                } else {
                    tmp = Character.toUpperCase(ch);
                }
            } else {
                tmp = ch;
            }
            buffer.append(tmp);
            whitespace = Character.isWhitespace(ch);
        }
        return buffer.toString();
    }


    










    public static String capitaliseAllWords(String str) {
        if (str == null) {
            return null;
        }
        int sz = str.length();
        StringBuffer buffer = new StringBuffer(sz);
        boolean space = true;
        for (int i = 0; i < sz; i++) {
            char ch = str.charAt(i);
            if (Character.isWhitespace(ch)) {
                buffer.append(ch);
                space = true;
            } else if (space) {
                buffer.append(Character.toTitleCase(ch));
                space = false;
            } else {
                buffer.append(ch);
            }
        }
        return buffer.toString();
    }

    










    public static String uncapitaliseAllWords(String str) {
        if (str == null) {
            return null;
        }
        int sz = str.length();
        StringBuffer buffer = new StringBuffer(sz);
        boolean space = true;
        for (int i = 0; i < sz; i++) {
            char ch = str.charAt(i);
            if (Character.isWhitespace(ch)) {
                buffer.append(ch);
                space = true;
            } else if (space) {
                buffer.append(Character.toLowerCase(ch));
                space = false;
            } else {
                buffer.append(ch);
            }
        }
        return buffer.toString();
    }

    
    
    
    











    public static String getNestedString(String str, String tag) {
        return getNestedString(str, tag, tag);
    }
    
    








    public static String getNestedString(String str, String open, String close) {
        if (str == null) {
            return null;
        }
        int start = str.indexOf(open);
        if (start != -1) {
            int end = str.indexOf(close, start + open.length());
            if (end != -1) {
                return str.substring(start + open.length(), end);
            }
        }
        return null;
    }

    









    public static int countMatches(String str, String sub) {
        if (sub.equals("")) {
            return 0;
        }
        if (str == null) {
            return 0;
        }
        int count = 0;
        int idx = 0;
        while ((idx = str.indexOf(sub, idx)) != -1) {
            count++;
            idx += sub.length();
        }
        return count;
    }

    
    
    
    








    public static boolean isAlpha(String str) {
        if (str == null) {
            return false;
        }
        int sz = str.length();
        for (int i = 0; i < sz; i++) {
            if (Character.isLetter(str.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }

    








    public static boolean isWhitespace(String str) {
        if (str == null) {
            return false;
        }
        int sz = str.length();
        for (int i = 0; i < sz; i++) {
            if ((Character.isWhitespace(str.charAt(i)) == false) ) {
                return false;
            }
        }
        return true;
    }

    










    public static boolean isAlphaSpace(String str) {
        if (str == null) {
            return false;
        }
        int sz = str.length();
        for (int i = 0; i < sz; i++) {
            if ((Character.isLetter(str.charAt(i)) == false) &&
                (str.charAt(i) != ' ')) {
                return false;
            }
        }
        return true;
    }

    









    public static boolean isAlphanumeric(String str) {
        if (str == null) {
            return false;
        }
        int sz = str.length();
        for (int i = 0; i < sz; i++) {
            if (Character.isLetterOrDigit(str.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }

    










    public static boolean isAlphanumericSpace(String str) {
        if (str == null) {
            return false;
        }
        int sz = str.length();
        for (int i = 0; i < sz; i++) {
            if ((Character.isLetterOrDigit(str.charAt(i)) == false) &&
                (str.charAt(i) != ' ')) {
                return false;
            }
        }
        return true;
    }

    








    public static boolean isNumeric(String str) {
        if (str == null) {
            return false;
        }
        int sz = str.length();
        for (int i = 0; i < sz; i++) {
            if (Character.isDigit(str.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }

    










    public static boolean isNumericSpace(String str) {
        if (str == null) {
            return false;
        }
        int sz = str.length();
        for (int i = 0; i < sz; i++) {
            if ((Character.isDigit(str.charAt(i)) == false) &&
                (str.charAt(i) != ' ')) {
                return false;
            }
        }
        return true;
    }

    






    public static boolean containsOnly(String str, String validChars) {
        if (str == null || validChars == null) {
            return false;
        }
        return containsOnly(str, validChars.toCharArray());
    }
    
    






    public static boolean containsNone(String str, String invalidChars) {
        if (str == null || invalidChars == null) {
            return true;
        }
        return containsNone(str, invalidChars.toCharArray());
    }
    
    






    public static boolean containsNone(String str, char[] invalidChars) {
        if (str == null || invalidChars == null) {
            return true;
        }
        int strSize = str.length();
        int validSize = invalidChars.length;
        for (int i = 0; i < strSize; i++) {
            char ch = str.charAt(i);
            for (int j = 0; j < validSize; j++) {
                if (invalidChars[j] == ch) {
                    return false;
                }
            }
        }
        return true;
    }

    






    public static boolean containsOnly(String str, char[] valid) {
        
        if( (valid == null) || (str == null) ) {
            return false;
        }
        if(str.length() == 0) {
            return true;
        }
        if(valid.length == 0) {
            return false;
        }
        return indexOfAnyBut(str, valid) == -1;
    }

    








     public static int indexOfAnyBut(String str, char[] searchChars) {
         if(searchChars == null) {
             return -1;
         }
         return indexOfAnyBut(str, new String(searchChars));
     }

    








    public static int indexOfAnyBut(String str, String searchChars) {
        if (str == null || searchChars == null) {
            return -1;
        }

        for (int i = 0; i < str.length(); i ++) {
           if (searchChars.indexOf(str.charAt(i)) < 0) {
               return i;
           }
        }

        return -1;
    }

    
    
    
    













    public static String defaultString(String str) {
        return (str == null ? "" : str);
    }

    















    public static String defaultString(Object obj) {
        return (obj == null ? "" : obj.toString());
    }

    














    public static String defaultString(String str, String defaultStr) {
        return (str == null ? defaultStr : str);
    }

    
















    public static String defaultString(Object obj, String defaultStr) {
        return (obj == null ? defaultStr : obj.toString());
    }

    
    

    













    public static String reverse(String str) {
        if (str == null) {
            return null;
        }
        return new StringBuffer(str).reverse().toString();
    }

    










    public static String reverseDelimitedString(String str, String delimiter) {
        
        
        String[] strs = split(str, delimiter);
        ArrayUtils.reverse(strs);
        return join(strs, delimiter);
    }

    
    

    
















    public static String abbreviate(String s, int maxWidth) {
        return abbreviate(s, 0, maxWidth);
    }

    













    public static String abbreviate(String s, int offset, int maxWidth) {
        if (maxWidth < 4)
            throw new IllegalArgumentException("Minimum abbreviation width is 4");
        if (s.length() <= maxWidth)
            return s;
        if (offset > s.length())
            offset = s.length();
        if ((s.length() - offset) < (maxWidth-3))
            offset = s.length() - (maxWidth-3);
        if (offset <= 4)
            return s.substring(0, maxWidth-3) + "...";
        if (maxWidth < 7)
            throw new IllegalArgumentException("Minimum abbreviation width with offset is 7");
        if ((offset + (maxWidth-3)) < s.length())
            return "..." + abbreviate(s.substring(offset), maxWidth-3);
        return "..." + s.substring(s.length() - (maxWidth-3));
    }

    
    

    










    public static String difference(String s1, String s2) {
        int at = differenceAt(s1, s2);
        if (at == -1) {
            return "";
        }
        return s2.substring(at);
    }

    








    public static int differenceAt(String s1, String s2) {
        int i;
        for (i=0; i<s1.length() && i<s2.length(); ++i) {
            if (s1.charAt(i) != s2.charAt(i)) {
                break;
            }
        }
        if (i<s2.length() || i<s1.length()) {
            return i;
        }
        return -1;
    }


    
    

    













    public static int getLevenshteinDistance(String s, String t) {
        int d[][]; 
        int n; 
        int m; 
        int i; 
        int j; 
        char s_i; 
        char t_j; 
        int cost; 

        
        n = s.length();
        m = t.length();
        if (n == 0) {
            return m;
        }
        if (m == 0) {
            return n;
        }
        d = new int[n + 1][m + 1];

        
        for (i = 0; i <= n; i++) {
            d[i][0] = i;
        }

        for (j = 0; j <= m; j++) {
            d[0][j] = j;
        }

        
        for (i = 1; i <= n; i++) {
            s_i = s.charAt(i - 1);

            
            for (j = 1; j <= m; j++) {
                t_j = t.charAt(j - 1);

                
                if (s_i == t_j) {
                    cost = 0;
                } else {
                    cost = 1;
                }

                
                d[i][j] = NumberUtils.min(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + cost);
            }
        }

        
        return d[n][m];
    }

}
