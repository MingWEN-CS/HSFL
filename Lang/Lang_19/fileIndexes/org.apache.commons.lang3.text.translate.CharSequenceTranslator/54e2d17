















package org.apache.commons.lang.text.translate;

import java.io.IOException;
import java.io.Writer;
import java.io.StringWriter;
import java.util.Locale;

import org.apache.commons.lang.UnhandledException;







public abstract class CharSequenceTranslator {

    










    public abstract int translate(CharSequence input, int index, Writer out) throws IOException;

    




    public final String translate(CharSequence input) {
        if (input == null) {
            return null;
        }
        try {
            StringWriter writer = new StringWriter(input.length() * 2);  
            translate(input, writer);
            return writer.toString();
        } catch (IOException ioe) {
            
            throw new UnhandledException(ioe);
        }
    }

    
    







    public final void translate(CharSequence input, Writer out) throws IOException {
        if (out == null) {
            throw new IllegalArgumentException("The Writer must not be null");
        }
        if (input == null) {
            return;
        }
        int sz = Character.codePointCount(input, 0, input.length());
        for (int i = 0; i < sz; i++) {

            
            int consumed = translate(input, i, out);

            if(consumed == 0) { 
                out.write( Character.toChars( Character.codePointAt(input, i) ) );
            } else {
                
                for(int j=0; j<consumed; j++) {
                    if(i < sz - 2) {
                        i += Character.charCount( Character.codePointAt(input, i) );
                    } else {
                        
                        i++;
                    }
                }
                
                i--;
            }
        }
    }

    






    public static String hex(int codepoint) {
        return Integer.toHexString(codepoint).toUpperCase(Locale.ENGLISH);
    }

}
