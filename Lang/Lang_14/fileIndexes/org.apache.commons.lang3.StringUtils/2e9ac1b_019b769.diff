6104,6105c6104,6105
<         int p[] = new int[n+1]; 
<         int d[] = new int[n+1]; 
---
>         int p[] = new int[n + 1]; 
>         int d[] = new int[n + 1]; 
6116c6116
<         for (i = 0; i<=n; i++) {
---
>         for (i = 0; i <= n; i++) {
6120,6121c6120,6121
<         for (j = 1; j<=m; j++) {
<             t_j = t.charAt(j-1);
---
>         for (j = 1; j <= m; j++) {
>             t_j = t.charAt(j - 1);
6124,6125c6124,6125
<             for (i=1; i<=n; i++) {
<                 cost = s.charAt(i-1)==t_j ? 0 : 1;
---
>             for (i = 1; i <= n; i++) {
>                 cost = s.charAt(i - 1) == t_j ? 0 : 1;
6127c6127
<                 d[i] = Math.min(Math.min(d[i-1]+1, p[i]+1),  p[i-1]+cost);
---
>                 d[i] = Math.min(Math.min(d[i - 1] + 1, p[i] + 1), p[i - 1] + cost);
6174c6174
<         if(s == null || t == null) {
---
>         if (s == null || t == null) {
6177c6177
<         if(threshold < 0) {
---
>         if (threshold < 0) {
6229,6232c6229,6232
<         if(n == 0) {
<             return m <= threshold? m : -1;
<         } else if(m == 0) {
<             return n <= threshold? n : -1;
---
>         if (n == 0) {
>             return m <= threshold ? m : -1;
>         } else if (m == 0) {
>             return n <= threshold ? n : -1;
6235c6235
<         if(n > m) {
---
>         if (n > m) {
6244,6245c6244,6245
<         int p[] = new int[n+1]; 
<         int d[] = new int[n+1]; 
---
>         int p[] = new int[n + 1]; 
>         int d[] = new int[n + 1]; 
6250c6250
<         for(int i = 0; i < boundary; i++) {
---
>         for (int i = 0; i < boundary; i++) {
6259,6260c6259,6260
<         for(int j = 1; j <= m; j++) {
<             char t_j = t.charAt(j-1); 
---
>         for (int j = 1; j <= m; j++) {
>             char t_j = t.charAt(j - 1); 
6268c6268
<             if(min > max) {
---
>             if (min > max) {
6273,6274c6273,6274
<             if(min > 1) {
<                 d[min-1] = Integer.MAX_VALUE;
---
>             if (min > 1) {
>                 d[min - 1] = Integer.MAX_VALUE;
6278,6279c6278,6279
<             for(int i = min; i <= max; i++) {
<                 if(s.charAt(i-1) == t_j) {
---
>             for (int i = min; i <= max; i++) {
>                 if (s.charAt(i - 1) == t_j) {
6281c6281
<                     d[i] = p[i-1];
---
>                     d[i] = p[i - 1];
6284c6284
<                     d[i] = 1 + Math.min(Math.min(d[i-1], p[i]), p[i-1]);
---
>                     d[i] = 1 + Math.min(Math.min(d[i - 1], p[i]), p[i - 1]);
6296c6296
<         if(p[n] <= threshold) {
---
>         if (p[n] <= threshold) {
