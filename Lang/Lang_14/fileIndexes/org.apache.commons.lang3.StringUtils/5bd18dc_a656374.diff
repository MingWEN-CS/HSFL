1105,1106c1105,1106
<     public static int lastIndexOf(String str, int searchChar) {
<         if (isEmpty(str)) {
---
>     public static int lastIndexOf(CharSequence seq, int searchChar) {
>         if (isEmpty(seq)) {
1109c1109
<         return str.lastIndexOf(searchChar);
---
>         return StringUtils.lastIndexOfSequence(seq, searchChar, seq.length());
1139,1140c1139,1140
<     public static int lastIndexOf(String str, int searchChar, int startPos) {
<         if (isEmpty(str)) {
---
>     public static int lastIndexOf(CharSequence seq, int searchChar, int startPos) {
>         if (isEmpty(seq)) {
1143c1143
<         return str.lastIndexOf(searchChar, startPos);
---
>         return StringUtils.lastIndexOfSequence(seq, searchChar, startPos);
1168,1169c1168,1169
<     public static int lastIndexOf(String str, String searchStr) {
<         if (str == null || searchStr == null) {
---
>     public static int lastIndexOf(CharSequence seq, CharSequence searchSeq) {
>         if (seq == null || searchSeq == null) {
1172c1172
<         return str.lastIndexOf(searchStr);
---
>         return StringUtils.lastIndexOfSequence(seq, searchSeq, seq.length());
1240,1241c1240,1241
<     public static int lastIndexOf(String str, String searchStr, int startPos) {
<         if (str == null || searchStr == null) {
---
>     public static int lastIndexOf(CharSequence seq, CharSequence searchSeq, int startPos) {
>         if (seq == null || searchSeq == null) {
1244c1244
<         return str.lastIndexOf(searchStr, startPos);
---
>         return StringUtils.lastIndexOfSequence(seq, searchSeq, startPos);
1375,1376c1375,1376
<     public static boolean contains(String str, String searchStr) {
<         if (str == null || searchStr == null) {
---
>     public static boolean contains(CharSequence seq, CharSequence searchSeq) {
>         if (seq == null || searchSeq == null) {
1379c1379
<         return str.indexOf(searchStr) >= 0;
---
>         return indexOfSequence(seq, searchSeq, 0) >= 0;
1428,1429c1428,1429
<     public static boolean containsWhitespace(String str) {
<         if (isEmpty(str)) {
---
>     public static boolean containsWhitespace(CharSequence seq) {
>         if (isEmpty(seq)) {
1432c1432
<         int strLen = str.length();
---
>         int strLen = seq.length();
1434c1434
<             if (Character.isWhitespace(str.charAt(i))) {
---
>             if (Character.isWhitespace(seq.charAt(i))) {
1515c1515
<     public static int indexOfAny(CharSequence cs, String searchChars) {
---
>     public static int indexOfAny(CharSequence cs, CharSequence searchChars) {
1519c1519
<         return indexOfAny(cs, searchChars.toCharArray());
---
>         return indexOfAny(cs, toCharArraySequence(searchChars));
1547c1547
<     public static boolean containsAny(String cs, char[] searchChars) {
---
>     public static boolean containsAny(CharSequence cs, char[] searchChars) {
1604c1604
<     public static boolean containsAny(String cs, String searchChars) {
---
>     public static boolean containsAny(CharSequence cs, CharSequence searchChars) {
1608c1608
<         return containsAny(cs, searchChars.toCharArray());
---
>         return containsAny(cs, toCharArraySequence(searchChars));
1686,1687c1686,1687
<     public static int indexOfAnyBut(String str, String searchChars) {
<         if (isEmpty(str) || isEmpty(searchChars)) {
---
>     public static int indexOfAnyBut(CharSequence seq, CharSequence searchChars) {
>         if (isEmpty(seq) || isEmpty(searchChars)) {
1690c1690
<         int strLen = str.length();
---
>         int strLen = seq.length();
1692,1693c1692,1693
<             char ch = str.charAt(i);
<             boolean chFound = searchChars.indexOf(ch) >= 0;
---
>             char ch = seq.charAt(i);
>             boolean chFound = indexOfSequence(searchChars, ch, 0) >= 0;
1695,1696c1695,1696
<                 char ch2 = str.charAt(i + 1);
<                 if (chFound && searchChars.indexOf(ch2) < 0) {
---
>                 char ch2 = seq.charAt(i + 1);
>                 if (chFound && indexOfSequence(searchChars, ch2, 0) < 0) {
1769c1769
<     public static boolean containsOnly(CharSequence cs, String validChars) {
---
>     public static boolean containsOnly(CharSequence cs, CharSequence validChars) {
1773c1773
<         return containsOnly(cs, validChars.toCharArray());
---
>         return containsOnly(cs, toCharArraySequence(validChars));
1854c1854
<     public static boolean containsNone(CharSequence cs, String invalidChars) {
---
>     public static boolean containsNone(CharSequence cs, CharSequence invalidChars) {
1858c1858
<         return containsNone(cs, invalidChars.toCharArray());
---
>         return containsNone(cs, toCharArraySequence(invalidChars));
1889c1889
<     public static int indexOfAny(String str, String[] searchStrs) {
---
>     public static int indexOfAny(CharSequence str, CharSequence[] searchStrs) {
1900c1900
<             String search = searchStrs[i];
---
>             CharSequence search = searchStrs[i];
1904c1904
<             tmp = str.indexOf(search);
---
>             tmp = indexOfSequence(str, search, 0);
1942c1942
<     public static int lastIndexOfAny(String str, String[] searchStrs) {
---
>     public static int lastIndexOfAny(CharSequence str, CharSequence[] searchStrs) {
1950c1950
<             String search = searchStrs[i];
---
>             CharSequence search = searchStrs[i];
1954c1954
<             tmp = str.lastIndexOf(search);
---
>             tmp = lastIndexOfSequence(str, search, str.length());
1988c1988
<     public static String substring(String str, int start) {
---
>     public static String substring(CharSequence str, int start) {
2005c2005
<         return str.substring(start);
---
>         return sequenceToString(str.subSequence(start, str.length()));
2043c2043
<     public static String substring(String str, int start, int end) {
---
>     public static String substring(CharSequence str, int start, int end) {
2073c2073
<         return str.substring(start, end);
---
>         return sequenceToString(str.subSequence(start, end));
6419a6420,6422
>     
> 
>     
6445a6449,6500
>         }
>     }
> 
>     
>     static int lastIndexOfSequence(CharSequence cs, int searchChar, int start) {
>         if (cs instanceof String) {
>             return ((String) cs).lastIndexOf(searchChar, start);
>         } else {
>             int sz = cs.length();
>             if ( start < 0 ) {
>                 return -1;
>             }
>             if ( start >= sz ) {
>                 start = sz - 1;
>             }
>             for ( int i=start; i >= 0; --i ) {
>                 if ( cs.charAt(i) == searchChar) {
>                     return i;
>                 }
>             }
>             return -1;
>         }
>     }
>     
>     static int lastIndexOfSequence(CharSequence cs, CharSequence searchChar, int start) {
>         if (cs instanceof String && searchChar instanceof String) {
>             
>             
>             
>             return ((String) cs).lastIndexOf( (String) searchChar, start);
>         } else {
>             
>             return cs.toString().lastIndexOf(searchChar.toString(), start);
>         }
>     }
> 
>     
>     static char[] toCharArraySequence(CharSequence cs) {
>         if (cs instanceof String) {
>             return ((String) cs).toCharArray();
>         } else {
>             
>             return cs.toString().toCharArray();
>         }
>     }
> 
>     
>     static String sequenceToString(CharSequence cs) {
>         if (cs instanceof String) {
>             return ((String) cs);
>         } else {
>             return cs.toString();
