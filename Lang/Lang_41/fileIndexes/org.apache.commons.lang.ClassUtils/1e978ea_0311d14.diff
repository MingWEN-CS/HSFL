37,38c37,38
< public class ClassUtils {
< 
---
> public class ClassUtils
> {
44d43
<     
47,48c46
<     public static final String PACKAGE_SEPARATOR = String.valueOf(PACKAGE_SEPARATOR_CHAR);
<     
---
>     public static final String PACKAGE_SEPARATOR = String.valueOf( PACKAGE_SEPARATOR_CHAR );
54d51
<     
57,58c54
<     public static final String INNER_CLASS_SEPARATOR = String.valueOf(INNER_CLASS_SEPARATOR_CHAR);
<     
---
>     public static final String INNER_CLASS_SEPARATOR = String.valueOf( INNER_CLASS_SEPARATOR_CHAR );
62,72c58,70
<     private static Map  primitiveWrapperMap = new HashMap();
<     static {
<          primitiveWrapperMap.put(Boolean.TYPE, Boolean.class);
<          primitiveWrapperMap.put(Byte.TYPE, Byte.class);
<          primitiveWrapperMap.put(Character.TYPE, Character.class);
<          primitiveWrapperMap.put(Short.TYPE, Short.class);
<          primitiveWrapperMap.put(Integer.TYPE, Integer.class);
<          primitiveWrapperMap.put(Long.TYPE, Long.class);
<          primitiveWrapperMap.put(Double.TYPE, Double.class);
<          primitiveWrapperMap.put(Float.TYPE, Float.class);
<          primitiveWrapperMap.put(Void.TYPE, Void.TYPE);
---
>     private static Map primitiveWrapperMap = new HashMap();
> 
>     static
>     {
>         primitiveWrapperMap.put( Boolean.TYPE, Boolean.class );
>         primitiveWrapperMap.put( Byte.TYPE, Byte.class );
>         primitiveWrapperMap.put( Character.TYPE, Character.class );
>         primitiveWrapperMap.put( Short.TYPE, Short.class );
>         primitiveWrapperMap.put( Integer.TYPE, Integer.class );
>         primitiveWrapperMap.put( Long.TYPE, Long.class );
>         primitiveWrapperMap.put( Double.TYPE, Double.class );
>         primitiveWrapperMap.put( Float.TYPE, Float.class );
>         primitiveWrapperMap.put( Void.TYPE, Void.TYPE );
74c72
<     
---
> 
77a76,90
>     private static Map abbreviationMap = new HashMap();
> 
>     static
>     {
>         abbreviationMap.put( "int", "I" );
>         abbreviationMap.put( "boolean", "Z" );
>         abbreviationMap.put( "float", "F" );
>         abbreviationMap.put( "long", "J" );
>         abbreviationMap.put( "short", "S" );
>         abbreviationMap.put( "byte", "B" );
>         abbreviationMap.put( "double", "D" );
>         abbreviationMap.put( "char", "C" );
>     }
> 
>     
83,84c96,98
<     public ClassUtils() {
<       super();
---
>     public ClassUtils()
>     {
>         super();
88a103
> 
96,97c111,114
<     public static String getShortClassName(Object object, String valueIfNull) {
<         if (object == null) {
---
>     public static String getShortClassName( Object object, String valueIfNull )
>     {
>         if( object == null )
>         {
100c117
<         return getShortClassName(object.getClass().getName());
---
>         return getShortClassName( object.getClass().getName() );
102c119
<     
---
> 
109,110c126,129
<     public static String getShortClassName(Class cls) {
<         if (cls == null) {
---
>     public static String getShortClassName( Class cls )
>     {
>         if( cls == null )
>         {
113c132
<         return getShortClassName(cls.getName());
---
>         return getShortClassName( cls.getName() );
115c134
<     
---
> 
124,125c143,146
<     public static String getShortClassName(String className) {
<         if (className == null) {
---
>     public static String getShortClassName( String className )
>     {
>         if( className == null )
>         {
128c149,150
<         if (className.length() == 0) {
---
>         if( className.length() == 0 )
>         {
133,134c155,158
<         for (int i = 0; i < chars.length; i++) {
<             if (chars[i] == PACKAGE_SEPARATOR_CHAR) {
---
>         for( int i = 0; i < chars.length; i++ )
>         {
>             if( chars[i] == PACKAGE_SEPARATOR_CHAR )
>             {
136c160,162
<             } else if (chars[i] == INNER_CLASS_SEPARATOR_CHAR) {  
---
>             }
>             else if( chars[i] == INNER_CLASS_SEPARATOR_CHAR )
>             {  
140c166
<         return new String(chars, lastDot, chars.length - lastDot);
---
>         return new String( chars, lastDot, chars.length - lastDot );
141a168
> 
144c171
<     
---
> 
152,153c179,182
<     public static String getPackageName(Object object, String valueIfNull) {
<         if (object == null) {
---
>     public static String getPackageName( Object object, String valueIfNull )
>     {
>         if( object == null )
>         {
156c185
<         return getPackageName(object.getClass().getName());
---
>         return getPackageName( object.getClass().getName() );
158c187
<     
---
> 
165,166c194,197
<     public static String getPackageName(Class cls) {
<         if (cls == null) {
---
>     public static String getPackageName( Class cls )
>     {
>         if( cls == null )
>         {
169c200
<         return getPackageName(cls.getName());
---
>         return getPackageName( cls.getName() );
171c202
<     
---
> 
181,182c212,215
<     public static String getPackageName(String className) {
<         if (className == null) {
---
>     public static String getPackageName( String className )
>     {
>         if( className == null )
>         {
185,186c218,220
<         int i = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);
<         if (i == -1) {
---
>         int i = className.lastIndexOf( PACKAGE_SEPARATOR_CHAR );
>         if( i == -1 )
>         {
189c223
<         return className.substring(0, i);
---
>         return className.substring( 0, i );
191,192c225
<     
<     
---
> 
195a229
>     
201,202c235,238
<     public static List getAllSuperclasses(Class cls) {
<         if (cls == null) {
---
>     public static List getAllSuperclasses( Class cls )
>     {
>         if( cls == null )
>         {
207,208c243,245
<         while (superclass != null) {
<             classes.add(superclass);
---
>         while( superclass != null )
>         {
>             classes.add( superclass );
213,216d249
<     
<     
< 
< 
217a251
>     
227,228c261,264
<     public static List getAllInterfaces(Class cls) {
<         if (cls == null) {
---
>     public static List getAllInterfaces( Class cls )
>     {
>         if( cls == null )
>         {
232c268,269
<         while (cls != null) {
---
>         while( cls != null )
>         {
234,236c271,275
<             for (int i = 0; i < interfaces.length; i++) {
<                 if (list.contains(interfaces[i]) == false) {
<                     list.add(interfaces[i]);
---
>             for( int i = 0; i < interfaces.length; i++ )
>             {
>                 if( list.contains( interfaces[i] ) == false )
>                 {
>                     list.add( interfaces[i] );
238,242c277,283
<                 List superInterfaces = getAllInterfaces(interfaces[i]);
<                 for (Iterator it = superInterfaces.iterator(); it.hasNext();) {
<                     Class intface = (Class) it.next();
<                     if (list.contains(intface) == false) {
<                         list.add(intface);
---
>                 List superInterfaces = getAllInterfaces( interfaces[i] );
>                 for( Iterator it = superInterfaces.iterator(); it.hasNext(); )
>                 {
>                     Class intface = ( Class ) it.next();
>                     if( list.contains( intface ) == false )
>                     {
>                         list.add( intface );
250,251c291
<     
<     
---
> 
254a295
>     
265,266c306,309
<     public static List convertClassNamesToClasses(List classNames) {
<         if (classNames == null) {
---
>     public static List convertClassNamesToClasses( List classNames )
>     {
>         if( classNames == null )
>         {
269,275c312,322
<         List classes = new ArrayList(classNames.size());
<         for (Iterator it = classNames.iterator(); it.hasNext();) {
<             String className = (String) it.next();
<             try {
<                 classes.add(Class.forName(className));
<             } catch (Exception ex) {
<                 classes.add(null);
---
>         List classes = new ArrayList( classNames.size() );
>         for( Iterator it = classNames.iterator(); it.hasNext(); )
>         {
>             String className = ( String ) it.next();
>             try
>             {
>                 classes.add( Class.forName( className ) );
>             }
>             catch( Exception ex )
>             {
>                 classes.add( null );
280,282d326
<     
<     
< 
283a328
>     
293,294c338,341
<     public static List convertClassesToClassNames(List classes) {
<         if (classes == null) {
---
>     public static List convertClassesToClassNames( List classes )
>     {
>         if( classes == null )
>         {
297,303c344,354
<         List classNames = new ArrayList(classes.size());
<         for (Iterator it = classes.iterator(); it.hasNext();) {
<             Class cls = (Class) it.next();
<             if (cls == null) {
<                 classNames.add(null);
<             } else {
<                 classNames.add(cls.getName());
---
>         List classNames = new ArrayList( classes.size() );
>         for( Iterator it = classes.iterator(); it.hasNext(); )
>         {
>             Class cls = ( Class ) it.next();
>             if( cls == null )
>             {
>                 classNames.add( null );
>             }
>             else
>             {
>                 classNames.add( cls.getName() );
307a359
> 
310,316d361
<     
<     
< 
< 
< 
< 
< 
317a363
>     
342,343c388,391
<     public static boolean isAssignable(Class[] classArray, Class[] toClassArray) {
<         if (ArrayUtils.isSameLength(classArray, toClassArray) == false) {
---
>     public static boolean isAssignable( Class[] classArray, Class[] toClassArray )
>     {
>         if( ArrayUtils.isSameLength( classArray, toClassArray ) == false )
>         {
346c394,395
<         if (classArray == null) {
---
>         if( classArray == null )
>         {
349c398,399
<         if (toClassArray == null) {
---
>         if( toClassArray == null )
>         {
352,353c402,405
<         for (int i = 0; i < classArray.length; i++) {
<             if (isAssignable(classArray[i], toClassArray[i]) == false) {
---
>         for( int i = 0; i < classArray.length; i++ )
>         {
>             if( isAssignable( classArray[i], toClassArray[i] ) == false )
>             {
359,364d410
<     
<     
< 
< 
< 
< 
365a412
>     
386,387c433,436
<     public static boolean isAssignable(Class cls, Class toClass) {
<         if (toClass == null) {
---
>     public static boolean isAssignable( Class cls, Class toClass )
>     {
>         if( toClass == null )
>         {
391,392c440,442
<         if (cls == null) {
<             return !(toClass.isPrimitive());
---
>         if( cls == null )
>         {
>             return !( toClass.isPrimitive() );
394c444,445
<         if (cls.equals(toClass)) {
---
>         if( cls.equals( toClass ) )
>         {
397,398c448,451
<         if (cls.isPrimitive()) {
<             if (toClass.isPrimitive() == false) {
---
>         if( cls.isPrimitive() )
>         {
>             if( toClass.isPrimitive() == false )
>             {
401,408c454,463
<             if (Integer.TYPE.equals(cls)) {
<                 return Long.TYPE.equals(toClass) 
<                     || Float.TYPE.equals(toClass) 
<                     || Double.TYPE.equals(toClass);
<             }
<             if (Long.TYPE.equals(cls)) {
<                 return Float.TYPE.equals(toClass) 
<                     || Double.TYPE.equals(toClass);
---
>             if( Integer.TYPE.equals( cls ) )
>             {
>                 return Long.TYPE.equals( toClass )
>                        || Float.TYPE.equals( toClass )
>                        || Double.TYPE.equals( toClass );
>             }
>             if( Long.TYPE.equals( cls ) )
>             {
>                 return Float.TYPE.equals( toClass )
>                        || Double.TYPE.equals( toClass );
410c465,466
<             if (Boolean.TYPE.equals(cls)) {
---
>             if( Boolean.TYPE.equals( cls ) )
>             {
413c469,470
<             if (Double.TYPE.equals(cls)) {
---
>             if( Double.TYPE.equals( cls ) )
>             {
416,436c473,497
<             if (Float.TYPE.equals(cls)) {
<                 return Double.TYPE.equals(toClass);
<             }
<             if (Character.TYPE.equals(cls)) {
<                 return Integer.TYPE.equals(toClass) 
<                     || Long.TYPE.equals(toClass) 
<                     || Float.TYPE.equals(toClass) 
<                     || Double.TYPE.equals(toClass);
<             }
<             if (Short.TYPE.equals(cls)) {
<                 return Integer.TYPE.equals(toClass) 
<                     || Long.TYPE.equals(toClass) 
<                     || Float.TYPE.equals(toClass) 
<                     || Double.TYPE.equals(toClass);
<             }
<             if (Byte.TYPE.equals(cls)) {
<                 return Short.TYPE.equals(toClass) 
<                     || Integer.TYPE.equals(toClass) 
<                     || Long.TYPE.equals(toClass) 
<                     || Float.TYPE.equals(toClass) 
<                     || Double.TYPE.equals(toClass);
---
>             if( Float.TYPE.equals( cls ) )
>             {
>                 return Double.TYPE.equals( toClass );
>             }
>             if( Character.TYPE.equals( cls ) )
>             {
>                 return Integer.TYPE.equals( toClass )
>                        || Long.TYPE.equals( toClass )
>                        || Float.TYPE.equals( toClass )
>                        || Double.TYPE.equals( toClass );
>             }
>             if( Short.TYPE.equals( cls ) )
>             {
>                 return Integer.TYPE.equals( toClass )
>                        || Long.TYPE.equals( toClass )
>                        || Float.TYPE.equals( toClass )
>                        || Double.TYPE.equals( toClass );
>             }
>             if( Byte.TYPE.equals( cls ) )
>             {
>                 return Short.TYPE.equals( toClass )
>                        || Integer.TYPE.equals( toClass )
>                        || Long.TYPE.equals( toClass )
>                        || Float.TYPE.equals( toClass )
>                        || Double.TYPE.equals( toClass );
441c502
<         return toClass.isAssignableFrom(cls);
---
>         return toClass.isAssignableFrom( cls );
443,445d503
<     
<     
< 
446a505
>     
456c515,516
<     public static Class primitiveToWrapper(Class cls) {
---
>     public static Class primitiveToWrapper( Class cls )
>     {
458,460c518,521
<         if (cls != null && cls.isPrimitive()) {
<             convertedClass = (Class) primitiveWrapperMap.get(cls);
<         }   
---
>         if( cls != null && cls.isPrimitive() )
>         {
>             convertedClass = ( Class ) primitiveWrapperMap.get( cls );
>         }
473,475c534,537
< 
<     public static Class[] primitivesToWrappers(Class[] classes) {
<         if (classes == null) {
---
>     public static Class[] primitivesToWrappers( Class[] classes )
>     {
>         if( classes == null )
>         {
478,479c540,541
<         
<         if (classes.length == 0) {
---
>         if( classes.length == 0 )
>         {
482d543
<         
484c545,546
<         for (int i=0; i < classes.length; i++) {
---
>         for( int i = 0; i < classes.length; i++ )
>         {
492d553
<     
493a555
>     
499,500c561,564
<     public static boolean isInnerClass(Class cls) {
<         if (cls == null) {
---
>     public static boolean isInnerClass( Class cls )
>     {
>         if( cls == null )
>         {
503c567,622
<         return cls.getName().indexOf(INNER_CLASS_SEPARATOR_CHAR) >= 0;
---
>         return cls.getName().indexOf( INNER_CLASS_SEPARATOR_CHAR ) >= 0;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static Class getClass( ClassLoader classLoader, String className, boolean initialize )
>             throws ClassNotFoundException
>     {
>         Class clazz;
>         if( abbreviationMap.containsKey( className ) )
>         {
>             clazz = Class.forName( "[" + abbreviationMap.get( className ), initialize, classLoader ).getComponentType();
>         }
>         else
>         {
>             clazz = Class.forName( toProperClassName( className ), initialize, classLoader );
>         }
>         return clazz;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static Class getClass( ClassLoader classLoader, String className ) throws ClassNotFoundException
>     {
>         return getClass( classLoader, className, true );
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public static Class getClass( String className ) throws ClassNotFoundException
>     {
>         return getClass( Thread.currentThread().getContextClassLoader() == null ? ClassUtils.class.getClassLoader() :
>                          Thread.currentThread().getContextClassLoader(), className, true );
505a625,669
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static Class getClass( String className, boolean initialize ) throws ClassNotFoundException
>     {
>         return getClass( Thread.currentThread().getContextClassLoader() == null ? ClassUtils.class.getClassLoader() :
>                          Thread.currentThread().getContextClassLoader(), className, initialize );
>     }
> 
>     private static String toProperClassName( String className )
>     {
>         className = StringUtils.deleteWhitespace( className );
>         if( className == null )
>         {
>             throw new NullArgumentException( "className" );
>         }
>         else if( className.endsWith( "[]" ) )
>         {
>             final StringBuffer classNameBuffer = new StringBuffer();
>             while( className.endsWith( "[]" ) )
>             {
>                 className = className.substring( 0, className.length() - 2 );
>                 classNameBuffer.append( "[" );
>             }
>             final String abbreviation = ( String ) abbreviationMap.get( className );
>             if( abbreviation != null )
>             {
>                 classNameBuffer.append( abbreviation );
>             }
>             else
>             {
>                 classNameBuffer.append( "L" ).append( className ).append( ";" );
>             }
>             className = classNameBuffer.toString();
> 
>         }
>         return className;
>     }
