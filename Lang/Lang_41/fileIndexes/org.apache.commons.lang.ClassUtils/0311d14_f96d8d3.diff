37,38c37,38
< public class ClassUtils
< {
---
> public class ClassUtils {
> 
42a43
> 
46c47,48
<     public static final String PACKAGE_SEPARATOR = String.valueOf( PACKAGE_SEPARATOR_CHAR );
---
>     public static final String PACKAGE_SEPARATOR = String.valueOf(PACKAGE_SEPARATOR_CHAR);
> 
50a53
> 
54,55c57
<     public static final String INNER_CLASS_SEPARATOR = String.valueOf( INNER_CLASS_SEPARATOR_CHAR );
<     
---
>     public static final String INNER_CLASS_SEPARATOR = String.valueOf(INNER_CLASS_SEPARATOR_CHAR);
56a59
>     
58d60
<     private static Map primitiveWrapperMap = new HashMap();
60,70c62,72
<     static
<     {
<         primitiveWrapperMap.put( Boolean.TYPE, Boolean.class );
<         primitiveWrapperMap.put( Byte.TYPE, Byte.class );
<         primitiveWrapperMap.put( Character.TYPE, Character.class );
<         primitiveWrapperMap.put( Short.TYPE, Short.class );
<         primitiveWrapperMap.put( Integer.TYPE, Integer.class );
<         primitiveWrapperMap.put( Long.TYPE, Long.class );
<         primitiveWrapperMap.put( Double.TYPE, Double.class );
<         primitiveWrapperMap.put( Float.TYPE, Float.class );
<         primitiveWrapperMap.put( Void.TYPE, Void.TYPE );
---
>     private static Map  primitiveWrapperMap = new HashMap();
>     static {
>          primitiveWrapperMap.put(Boolean.TYPE, Boolean.class);
>          primitiveWrapperMap.put(Byte.TYPE, Byte.class);
>          primitiveWrapperMap.put(Character.TYPE, Character.class);
>          primitiveWrapperMap.put(Short.TYPE, Short.class);
>          primitiveWrapperMap.put(Integer.TYPE, Integer.class);
>          primitiveWrapperMap.put(Long.TYPE, Long.class);
>          primitiveWrapperMap.put(Double.TYPE, Double.class);
>          primitiveWrapperMap.put(Float.TYPE, Float.class);
>          primitiveWrapperMap.put(Void.TYPE, Void.TYPE);
77,79c79
< 
<     static
<     {
---
>     static {
96,98c96,99
<     public ClassUtils()
<     {
<         super();
---
> 
> 
>     public ClassUtils() {
>       super();
103d103
< 
111,114c111,112
<     public static String getShortClassName( Object object, String valueIfNull )
<     {
<         if( object == null )
<         {
---
>     public static String getShortClassName(Object object, String valueIfNull) {
>         if (object == null) {
117c115
<         return getShortClassName( object.getClass().getName() );
---
>         return getShortClassName(object.getClass().getName());
126,129c124,125
<     public static String getShortClassName( Class cls )
<     {
<         if( cls == null )
<         {
---
>     public static String getShortClassName(Class cls) {
>         if (cls == null) {
132c128
<         return getShortClassName( cls.getName() );
---
>         return getShortClassName(cls.getName());
143,146c139,140
<     public static String getShortClassName( String className )
<     {
<         if( className == null )
<         {
---
>     public static String getShortClassName(String className) {
>         if (className == null) {
149,150c143
<         if( className.length() == 0 )
<         {
---
>         if (className.length() == 0) {
155,158c148,149
<         for( int i = 0; i < chars.length; i++ )
<         {
<             if( chars[i] == PACKAGE_SEPARATOR_CHAR )
<             {
---
>         for (int i = 0; i < chars.length; i++) {
>             if (chars[i] == PACKAGE_SEPARATOR_CHAR) {
160,162c151
<             }
<             else if( chars[i] == INNER_CLASS_SEPARATOR_CHAR )
<             {  
---
>             } else if (chars[i] == INNER_CLASS_SEPARATOR_CHAR) {  
166c155
<         return new String( chars, lastDot, chars.length - lastDot );
---
>         return new String(chars, lastDot, chars.length - lastDot);
171d159
< 
179,182c167,168
<     public static String getPackageName( Object object, String valueIfNull )
<     {
<         if( object == null )
<         {
---
>     public static String getPackageName(Object object, String valueIfNull) {
>         if (object == null) {
185c171
<         return getPackageName( object.getClass().getName() );
---
>         return getPackageName(object.getClass().getName());
194,197c180,181
<     public static String getPackageName( Class cls )
<     {
<         if( cls == null )
<         {
---
>     public static String getPackageName(Class cls) {
>         if (cls == null) {
200c184
<         return getPackageName( cls.getName() );
---
>         return getPackageName(cls.getName());
212,215c196,197
<     public static String getPackageName( String className )
<     {
<         if( className == null )
<         {
---
>     public static String getPackageName(String className) {
>         if (className == null) {
218,220c200,201
<         int i = className.lastIndexOf( PACKAGE_SEPARATOR_CHAR );
<         if( i == -1 )
<         {
---
>         int i = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);
>         if (i == -1) {
223c204
<         return className.substring( 0, i );
---
>         return className.substring(0, i);
228d208
< 
235,238c215,217
<     public static List getAllSuperclasses( Class cls )
<     {
<         if( cls == null )
<         {
---
> 
>     public static List getAllSuperclasses(Class cls) {
>         if (cls == null) {
243,245c222,223
<         while( superclass != null )
<         {
<             classes.add( superclass );
---
>         while (superclass != null) {
>             classes.add(superclass);
261,264c239,243
<     public static List getAllInterfaces( Class cls )
<     {
<         if( cls == null )
<         {
---
> 
> 
> 
>     public static List getAllInterfaces(Class cls) {
>         if (cls == null) {
268,269c247
<         while( cls != null )
<         {
---
>         while (cls != null) {
271,275c249,251
<             for( int i = 0; i < interfaces.length; i++ )
<             {
<                 if( list.contains( interfaces[i] ) == false )
<                 {
<                     list.add( interfaces[i] );
---
>             for (int i = 0; i < interfaces.length; i++) {
>                 if (list.contains(interfaces[i]) == false) {
>                     list.add(interfaces[i]);
277,283c253,257
<                 List superInterfaces = getAllInterfaces( interfaces[i] );
<                 for( Iterator it = superInterfaces.iterator(); it.hasNext(); )
<                 {
<                     Class intface = ( Class ) it.next();
<                     if( list.contains( intface ) == false )
<                     {
<                         list.add( intface );
---
>                 List superInterfaces = getAllInterfaces(interfaces[i]);
>                 for (Iterator it = superInterfaces.iterator(); it.hasNext();) {
>                     Class intface = (Class) it.next();
>                     if (list.contains(intface) == false) {
>                         list.add(intface);
294d267
< 
306,309c279,281
<     public static List convertClassNamesToClasses( List classNames )
<     {
<         if( classNames == null )
<         {
---
> 
>     public static List convertClassNamesToClasses(List classNames) {
>         if (classNames == null) {
312,322c284,290
<         List classes = new ArrayList( classNames.size() );
<         for( Iterator it = classNames.iterator(); it.hasNext(); )
<         {
<             String className = ( String ) it.next();
<             try
<             {
<                 classes.add( Class.forName( className ) );
<             }
<             catch( Exception ex )
<             {
<                 classes.add( null );
---
>         List classes = new ArrayList(classNames.size());
>         for (Iterator it = classNames.iterator(); it.hasNext();) {
>             String className = (String) it.next();
>             try {
>                 classes.add(Class.forName(className));
>             } catch (Exception ex) {
>                 classes.add(null);
338,341c306,309
<     public static List convertClassesToClassNames( List classes )
<     {
<         if( classes == null )
<         {
---
> 
> 
>     public static List convertClassesToClassNames(List classes) {
>         if (classes == null) {
344,354c312,318
<         List classNames = new ArrayList( classes.size() );
<         for( Iterator it = classes.iterator(); it.hasNext(); )
<         {
<             Class cls = ( Class ) it.next();
<             if( cls == null )
<             {
<                 classNames.add( null );
<             }
<             else
<             {
<                 classNames.add( cls.getName() );
---
>         List classNames = new ArrayList(classes.size());
>         for (Iterator it = classes.iterator(); it.hasNext();) {
>             Class cls = (Class) it.next();
>             if (cls == null) {
>                 classNames.add(null);
>             } else {
>                 classNames.add(cls.getName());
362d325
< 
388,391c351,358
<     public static boolean isAssignable( Class[] classArray, Class[] toClassArray )
<     {
<         if( ArrayUtils.isSameLength( classArray, toClassArray ) == false )
<         {
---
> 
> 
> 
> 
> 
> 
>     public static boolean isAssignable(Class[] classArray, Class[] toClassArray) {
>         if (ArrayUtils.isSameLength(classArray, toClassArray) == false) {
394,395c361
<         if( classArray == null )
<         {
---
>         if (classArray == null) {
398,399c364
<         if( toClassArray == null )
<         {
---
>         if (toClassArray == null) {
402,405c367,368
<         for( int i = 0; i < classArray.length; i++ )
<         {
<             if( isAssignable( classArray[i], toClassArray[i] ) == false )
<             {
---
>         for (int i = 0; i < classArray.length; i++) {
>             if (isAssignable(classArray[i], toClassArray[i]) == false) {
433,436c396,402
<     public static boolean isAssignable( Class cls, Class toClass )
<     {
<         if( toClass == null )
<         {
---
> 
> 
> 
> 
> 
>     public static boolean isAssignable(Class cls, Class toClass) {
>         if (toClass == null) {
440,442c406,407
<         if( cls == null )
<         {
<             return !( toClass.isPrimitive() );
---
>         if (cls == null) {
>             return !(toClass.isPrimitive());
444,445c409
<         if( cls.equals( toClass ) )
<         {
---
>         if (cls.equals(toClass)) {
448,451c412,413
<         if( cls.isPrimitive() )
<         {
<             if( toClass.isPrimitive() == false )
<             {
---
>         if (cls.isPrimitive()) {
>             if (toClass.isPrimitive() == false) {
454,463c416,423
<             if( Integer.TYPE.equals( cls ) )
<             {
<                 return Long.TYPE.equals( toClass )
<                        || Float.TYPE.equals( toClass )
<                        || Double.TYPE.equals( toClass );
<             }
<             if( Long.TYPE.equals( cls ) )
<             {
<                 return Float.TYPE.equals( toClass )
<                        || Double.TYPE.equals( toClass );
---
>             if (Integer.TYPE.equals(cls)) {
>                 return Long.TYPE.equals(toClass)
>                     || Float.TYPE.equals(toClass)
>                     || Double.TYPE.equals(toClass);
>             }
>             if (Long.TYPE.equals(cls)) {
>                 return Float.TYPE.equals(toClass)
>                     || Double.TYPE.equals(toClass);
465,466c425
<             if( Boolean.TYPE.equals( cls ) )
<             {
---
>             if (Boolean.TYPE.equals(cls)) {
469,470c428
<             if( Double.TYPE.equals( cls ) )
<             {
---
>             if (Double.TYPE.equals(cls)) {
473,497c431,451
<             if( Float.TYPE.equals( cls ) )
<             {
<                 return Double.TYPE.equals( toClass );
<             }
<             if( Character.TYPE.equals( cls ) )
<             {
<                 return Integer.TYPE.equals( toClass )
<                        || Long.TYPE.equals( toClass )
<                        || Float.TYPE.equals( toClass )
<                        || Double.TYPE.equals( toClass );
<             }
<             if( Short.TYPE.equals( cls ) )
<             {
<                 return Integer.TYPE.equals( toClass )
<                        || Long.TYPE.equals( toClass )
<                        || Float.TYPE.equals( toClass )
<                        || Double.TYPE.equals( toClass );
<             }
<             if( Byte.TYPE.equals( cls ) )
<             {
<                 return Short.TYPE.equals( toClass )
<                        || Integer.TYPE.equals( toClass )
<                        || Long.TYPE.equals( toClass )
<                        || Float.TYPE.equals( toClass )
<                        || Double.TYPE.equals( toClass );
---
>             if (Float.TYPE.equals(cls)) {
>                 return Double.TYPE.equals(toClass);
>             }
>             if (Character.TYPE.equals(cls)) {
>                 return Integer.TYPE.equals(toClass)
>                     || Long.TYPE.equals(toClass)
>                     || Float.TYPE.equals(toClass)
>                     || Double.TYPE.equals(toClass);
>             }
>             if (Short.TYPE.equals(cls)) {
>                 return Integer.TYPE.equals(toClass)
>                     || Long.TYPE.equals(toClass)
>                     || Float.TYPE.equals(toClass)
>                     || Double.TYPE.equals(toClass);
>             }
>             if (Byte.TYPE.equals(cls)) {
>                 return Short.TYPE.equals(toClass)
>                     || Integer.TYPE.equals(toClass)
>                     || Long.TYPE.equals(toClass)
>                     || Float.TYPE.equals(toClass)
>                     || Double.TYPE.equals(toClass);
502c456
<         return toClass.isAssignableFrom( cls );
---
>         return toClass.isAssignableFrom(cls);
515,516c469,471
<     public static Class primitiveToWrapper( Class cls )
<     {
---
> 
> 
>     public static Class primitiveToWrapper(Class cls) {
518,520c473,474
<         if( cls != null && cls.isPrimitive() )
<         {
<             convertedClass = ( Class ) primitiveWrapperMap.get( cls );
---
>         if (cls != null && cls.isPrimitive()) {
>             convertedClass = (Class) primitiveWrapperMap.get(cls);
534,537c488,490
<     public static Class[] primitivesToWrappers( Class[] classes )
<     {
<         if( classes == null )
<         {
---
> 
>     public static Class[] primitivesToWrappers(Class[] classes) {
>         if (classes == null) {
540,541c493,494
<         if( classes.length == 0 )
<         {
---
> 
>         if (classes.length == 0) {
543a497
> 
545,546c499
<         for( int i = 0; i < classes.length; i++ )
<         {
---
>         for (int i=0; i < classes.length; i++) {
554d506
< 
561,564c513,515
<     public static boolean isInnerClass( Class cls )
<     {
<         if( cls == null )
<         {
---
> 
>     public static boolean isInnerClass(Class cls) {
>         if (cls == null) {
567c518
<         return cls.getName().indexOf( INNER_CLASS_SEPARATOR_CHAR ) >= 0;
---
>         return cls.getName().indexOf(INNER_CLASS_SEPARATOR_CHAR) >= 0;
581,582c532
<             throws ClassNotFoundException
<     {
---
>             throws ClassNotFoundException {
584,585c534
<         if( abbreviationMap.containsKey( className ) )
<         {
---
>         if( abbreviationMap.containsKey( className ) ) {
588,589c537
<         else
<         {
---
>         else {
605,606c553
<     public static Class getClass( ClassLoader classLoader, String className ) throws ClassNotFoundException
<     {
---
>     public static Class getClass( ClassLoader classLoader, String className ) throws ClassNotFoundException {
619,620c566
<     public static Class getClass( String className ) throws ClassNotFoundException
<     {
---
>     public static Class getClass( String className ) throws ClassNotFoundException {
635,636c581
<     public static Class getClass( String className, boolean initialize ) throws ClassNotFoundException
<     {
---
>     public static Class getClass( String className, boolean initialize ) throws ClassNotFoundException {
641,642c586
<     private static String toProperClassName( String className )
<     {
---
>     private static String toProperClassName( String className ) {
644,645c588
<         if( className == null )
<         {
---
>         if( className == null ) {
648,649c591
<         else if( className.endsWith( "[]" ) )
<         {
---
>         else if( className.endsWith( "[]" ) ) {
651,652c593
<             while( className.endsWith( "[]" ) )
<             {
---
>             while( className.endsWith( "[]" ) ) {
657,658c598
<             if( abbreviation != null )
<             {
---
>             if( abbreviation != null ) {
661,662c601
<             else
<             {
---
>             else {
