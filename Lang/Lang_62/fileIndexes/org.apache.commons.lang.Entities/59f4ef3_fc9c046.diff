440,443c440,454
<         int growBy = 100;
<         private int size = 0;
<         private String[] names = new String[growBy];
<         private int[] values = new int[growBy];
---
>         protected int growBy = 100;
>         protected int size = 0;
>         protected String[] names;
>         protected int[] values;
> 
>         public ArrayIntMap() {
>             names = new String[growBy];
>             values = new int[growBy];
>         }
> 
>         public ArrayIntMap(int growBy) {
>             this.growBy = growBy;
>             names = new String[growBy];
>             values = new int[growBy];
>         }
452c463
<         private void ensureCapacity(int capacity) {
---
>         protected void ensureCapacity(int capacity) {
483c494,541
<     IntMap map = new HashIntMap();
---
>     static class BinaryIntMap extends ArrayIntMap {
> 
>         public BinaryIntMap() {
>         }
> 
>         public BinaryIntMap(int growBy) {
>             super(growBy);
>         }
> 
>         
>         private int binarySearch(int key) {
>             int low = 0;
>             int high = size - 1;
> 
>             while (low <= high) {
>                 int mid = (low + high) >> 1;
>                 int midVal = values[mid];
> 
>                 if (midVal < key)
>                     low = mid + 1;
>                 else if (midVal > key)
>                     high = mid - 1;
>                 else
>                     return mid; 
>             }
>             return -(low + 1);  
>         }
> 
>         public void add(String name, int value) {
>             ensureCapacity(size + 1);
>             int insertAt = binarySearch(value);
>             if (insertAt > 0) return;    
>             insertAt = -(insertAt + 1);  
>             System.arraycopy(values, insertAt, values, insertAt + 1, size - insertAt);
>             values[insertAt] = value;
>             System.arraycopy(names, insertAt, names, insertAt + 1, size - insertAt);
>             names[insertAt] = name;
>             size++;
>         }
> 
>         public String name(int value) {
>             int index = binarySearch(value);
>             if (index < 0) return null;
>             return names[index];
>         }
>     }
> 
>     IntMap map = new BinaryIntMap();
