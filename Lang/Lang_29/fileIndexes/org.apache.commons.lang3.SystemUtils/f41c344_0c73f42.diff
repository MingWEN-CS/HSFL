19a20,26
> import java.util.regex.Pattern;
> 
> 
> 
> 
> 
> 
42a50,51
>     private static final int JAVA_VERSION_TRIM_SIZE = 3;
> 
46a56
> 
50,51c60
<     
<     
---
> 
61c70
<     
---
> 
66c75
<     
---
> 
70a80
> 
72c82,88
<     
---
> 
> 
> 
> 
> 
> 
> 
105a122,126
> 
> 
> 
> 
> 
122a144,145
> 
> 
138a162,164
> 
> 
> 
154a181,183
> 
> 
> 
175a205
> 
191a222,224
> 
> 
> 
207a241,243
> 
> 
> 
224a261,262
> 
> 
241a280,282
> 
> 
> 
258a300,301
> 
> 
275a319,320
> 
> 
291a337,339
> 
> 
> 
307a356,358
> 
> 
> 
324a376,377
> 
> 
342a396,397
> 
> 
360a416,417
> 
> 
377a435,436
> 
> 
394a454,455
> 
> 
411a473,474
> 
> 
429,430c492,495
<     public static final String JAVA_UTIL_PREFS_PREFERENCES_FACTORY = 
<         getSystemProperty("java.util.prefs.PreferencesFactory");
---
> 
> 
> 
>     public static final String JAVA_UTIL_PREFS_PREFERENCES_FACTORY = getSystemProperty("java.util.prefs.PreferencesFactory");
445a511,513
> 
> 
> 
461a530,532
> 
> 
> 
477a549,551
> 
> 
> 
495a570,571
> 
> 
512a589,590
> 
> 
529a608,609
> 
> 
546a627,628
> 
> 
563a646,647
> 
> 
580a665,666
> 
> 
597a684,685
> 
> 
614a703,704
> 
> 
630a721,723
> 
> 
> 
646a740,742
> 
> 
> 
662a759,761
> 
> 
> 
679a779,780
> 
> 
699,701c800,803
<     public static final String USER_COUNTRY = 
<         getSystemProperty("user.country") == null ?
<             getSystemProperty("user.region") : getSystemProperty("user.country");
---
> 
> 
>     public static final String USER_COUNTRY = getSystemProperty("user.country") == null ? getSystemProperty("user.region")
>             : getSystemProperty("user.country");
717a820,821
> 
> 
733a838,840
> 
> 
> 
751a859,860
> 
> 
767a877,879
> 
> 
> 
784a897,898
> 
> 
798a913,916
> 
> 
> 
> 
818a937,942
> 
> 
> 
> 
> 
> 
833a958,963
> 
> 
> 
> 
> 
> 
839a970
> 
841c972,974
<     
---
> 
> 
> 
854a988,990
> 
> 
> 
862a999,1001
> 
> 
> 
870a1010,1012
> 
> 
> 
878a1021,1023
> 
> 
> 
886a1032,1034
> 
> 
> 
896a1045,1047
> 
> 
> 
915c1066,1069
<     public static final boolean IS_OS_AIX = getOSMatches("AIX");
---
> 
> 
> 
>     public static final boolean IS_OS_AIX = getOSMatchesName("AIX");
925c1079,1082
<     public static final boolean IS_OS_HP_UX = getOSMatches("HP-UX");
---
> 
> 
> 
>     public static final boolean IS_OS_HP_UX = getOSMatchesName("HP-UX");
935c1092,1095
<     public static final boolean IS_OS_IRIX = getOSMatches("Irix");
---
> 
> 
> 
>     public static final boolean IS_OS_IRIX = getOSMatchesName("Irix");
945c1105,1108
<     public static final boolean IS_OS_LINUX = getOSMatches("Linux") || getOSMatches("LINUX");
---
> 
> 
> 
>     public static final boolean IS_OS_LINUX = getOSMatchesName("Linux") || getOSMatchesName("LINUX");
955c1118,1121
<     public static final boolean IS_OS_MAC = getOSMatches("Mac");
---
> 
> 
> 
>     public static final boolean IS_OS_MAC = getOSMatchesName("Mac");
965c1131,1134
<     public static final boolean IS_OS_MAC_OSX = getOSMatches("Mac OS X");
---
> 
> 
> 
>     public static final boolean IS_OS_MAC_OSX = getOSMatchesName("Mac OS X");
975c1144,1147
<     public static final boolean IS_OS_OS2 = getOSMatches("OS/2");
---
> 
> 
> 
>     public static final boolean IS_OS_OS2 = getOSMatchesName("OS/2");
985c1157,1160
<     public static final boolean IS_OS_SOLARIS = getOSMatches("Solaris");
---
> 
> 
> 
>     public static final boolean IS_OS_SOLARIS = getOSMatchesName("Solaris");
995c1170,1173
<     public static final boolean IS_OS_SUN_OS = getOSMatches("SunOS");
---
> 
> 
> 
>     public static final boolean IS_OS_SUN_OS = getOSMatchesName("SunOS");
1006,1008c1184,1187
<     public static final boolean IS_OS_UNIX =
<         IS_OS_AIX || IS_OS_HP_UX || IS_OS_IRIX || IS_OS_LINUX ||
<         IS_OS_MAC_OSX || IS_OS_SOLARIS || IS_OS_SUN_OS;
---
> 
> 
>     public static final boolean IS_OS_UNIX = IS_OS_AIX || IS_OS_HP_UX || IS_OS_IRIX || IS_OS_LINUX || IS_OS_MAC_OSX || IS_OS_SOLARIS
>             || IS_OS_SUN_OS;
1018c1197,1200
<     public static final boolean IS_OS_WINDOWS = getOSMatches(OS_NAME_WINDOWS_PREFIX);
---
> 
> 
> 
>     public static final boolean IS_OS_WINDOWS = getOSMatchesName(OS_NAME_WINDOWS_PREFIX);
1027a1210,1212
> 
> 
> 
1037a1223,1225
> 
> 
> 
1048a1237,1239
> 
> 
> 
1059a1251,1253
> 
> 
> 
1071c1265,1268
<     public static final boolean IS_OS_WINDOWS_NT = getOSMatches(OS_NAME_WINDOWS_PREFIX + " NT");
---
> 
> 
> 
>     public static final boolean IS_OS_WINDOWS_NT = getOSMatchesName(OS_NAME_WINDOWS_PREFIX + " NT");
1081a1279,1281
> 
> 
> 
1093c1293,1296
<     public static final boolean IS_OS_WINDOWS_VISTA = getOSMatches(OS_NAME_WINDOWS_PREFIX, "6.0"); 
---
> 
> 
> 
>     public static final boolean IS_OS_WINDOWS_VISTA = getOSMatches(OS_NAME_WINDOWS_PREFIX, "6.0");
1103d1305
<     public static final boolean IS_OS_WINDOWS_7 = getOSMatches(OS_NAME_WINDOWS_PREFIX, "6.1"); 
1105c1307,1310
<     
---
> 
> 
>     public static final boolean IS_OS_WINDOWS_7 = getOSMatches(OS_NAME_WINDOWS_PREFIX, "6.1");
> 
1114,1119d1318
<     public SystemUtils() {
<         super();
<     }
<     
<     
<     
1123a1323,1325
>     public static File getJavaHome() {
>         return new File(System.getProperty(JAVA_HOME_KEY));
>     }
1124a1327
>     
1133,1145c1336,1340
<     private static float getJavaVersionAsFloat() {
<         if (JAVA_VERSION_TRIMMED == null) {
<             return 0f;
<         }
<         String str = JAVA_VERSION_TRIMMED.substring(0, 3);
<         if (JAVA_VERSION_TRIMMED.length() >= 5) {
<             str = str + JAVA_VERSION_TRIMMED.substring(4, 5);
<         }
<         try {
<             return Float.parseFloat(str);
<         } catch (Exception ex) {
<             return 0;
<         }
---
> 
> 
> 
>     public static File getJavaIoTmpDir() {
>         return new File(System.getProperty(JAVA_IO_TMPDIR_KEY));
1147c1342
<     
---
> 
1162,1178d1356
<     private static int getJavaVersionAsInt() {
<         if (JAVA_VERSION_TRIMMED == null) {
<             return 0;
<         }
<         String str = JAVA_VERSION_TRIMMED.substring(0, 1);
<         str = str + JAVA_VERSION_TRIMMED.substring(2, 3);
<         if (JAVA_VERSION_TRIMMED.length() >= 5) {
<             str = str + JAVA_VERSION_TRIMMED.substring(4, 5);
<         } else {
<             str = str + "0";
<         }
<         try {
<             return Integer.parseInt(str);
<         } catch (Exception ex) {
<             return 0;
<         }
<     }
1180d1357
<     
1185c1362,1409
<     private static String getJavaVersionTrimmed() {
---
> 
>     private static float getJavaVersionAsFloat() {
>         return toVersionFloat(toJavaVersionIntArray(SystemUtils.JAVA_VERSION, JAVA_VERSION_TRIM_SIZE));
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     private static int getJavaVersionAsInt() {
>         return toVersionInt(toJavaVersionIntArray(SystemUtils.JAVA_VERSION, JAVA_VERSION_TRIM_SIZE));
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     private static boolean getJavaVersionMatches(String versionPrefix) {
>         return isJavaVersionMatch(JAVA_VERSION_TRIMMED, versionPrefix);
>     }
> 
>     
> 
> 
> 
> 
>     private static String getJavaVersionTrimmed() {
1203,1210d1426
<     private static boolean getJavaVersionMatches(String versionPrefix) {
<         if (JAVA_VERSION_TRIMMED == null) {
<             return false;
<         }
<         return JAVA_VERSION_TRIMMED.startsWith(versionPrefix);
<     }    
<     
<     
1214,1221c1430,1432
< 
< 
<     private static boolean getOSMatches(String osNamePrefix) {
<         if (OS_NAME == null) {
<             return false;
<         }
<         return OS_NAME.startsWith(osNamePrefix);
<     }    
---
>     private static boolean getOSMatches(String osNamePrefix, String osVersionPrefix) {
>         return isOSMatch(OS_NAME, OS_VERSION, osNamePrefix, osVersionPrefix);
>     }
1230,1235c1441,1443
<     private static boolean getOSMatches(String osNamePrefix, String osVersionPrefix) {
<         if (OS_NAME == null || OS_VERSION == null) {
<             return false;
<         }
<         return OS_NAME.startsWith(osNamePrefix) && OS_VERSION.startsWith(osVersionPrefix);
<     }    
---
>     private static boolean getOSMatchesName(String osNamePrefix) {
>         return isOSNameMatch(OS_NAME, osNamePrefix);
>     }
1247a1456,1459
> 
> 
> 
> 
1253,1256c1465,1466
<             System.err.println(
<                 "Caught a SecurityException reading the system property '" + property 
<                 + "'; the SystemUtils property value will default to null."
<             );
---
>             System.err.println("Caught a SecurityException reading the system property '" + property
>                     + "'; the SystemUtils property value will default to null.");
1259a1470,1502
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static File getUserDir() {
>         return new File(System.getProperty(USER_DIR_KEY));
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static File getUserHome() {
>         return new File(System.getProperty(USER_HOME_KEY));
>     }
> 
1260a1504,1515
> 
> 
> 
> 
> 
> 
> 
> 
>     public static boolean isJavaAwtHeadless() {
>         return JAVA_AWT_HEADLESS != null ? JAVA_AWT_HEADLESS.equals(Boolean.TRUE.toString()) : false;
>     }
> 
1273a1529,1532
> 
> 
> 
> 
1276a1536
> 
1278c1538,1541
<     
---
> 
> 
> 
> 
1306,1307c1569,1577
<     public static boolean isJavaAwtHeadless() {
<         return JAVA_AWT_HEADLESS != null ? JAVA_AWT_HEADLESS.equals(Boolean.TRUE.toString()) : false;
---
> 
> 
> 
> 
>     static boolean isJavaVersionMatch(String version, String versionPrefix) {
>         if (version == null) {
>             return false;
>         }
>         return version.startsWith(versionPrefix);
1308a1579
> 
1319,1320c1590,1600
<     public static File getJavaHome() {
<         return new File(System.getProperty(JAVA_HOME_KEY));
---
> 
> 
> 
> 
> 
> 
>     static boolean isOSMatch(String osName, String osVersion, String osNamePrefix, String osVersionPrefix) {
>         if (osName == null || osVersion == null) {
>             return false;
>         }
>         return osName.startsWith(osNamePrefix) && osVersion.startsWith(osVersionPrefix);
1333,1334c1613,1619
<     public static File getJavaIoTmpDir() {
<         return new File(System.getProperty(JAVA_IO_TMPDIR_KEY));
---
> 
> 
>     static boolean isOSNameMatch(String osName, String osNamePrefix) {
>         if (osName == null) {
>             return false;
>         }
>         return osName.startsWith(osNamePrefix);
1347,1348c1632,1646
<     public static File getUserDir() {
<         return new File(System.getProperty(USER_DIR_KEY));
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     static float toJavaVersionFloat(String version) {
>         return toVersionFloat(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));
1361,1362c1659,1821
<     public static File getUserHome() {
<         return new File(System.getProperty(USER_HOME_KEY));
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     static float toJavaVersionInt(String version) {
>         return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     static int[] toJavaVersionIntArray(String version) {
>         return toJavaVersionIntArray(version, Integer.MAX_VALUE);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     private static int[] toJavaVersionIntArray(String version, int limit) {
>         if (version == null) {
>             return ArrayUtils.EMPTY_INT_ARRAY;
>         }
>         String[] strings = Pattern.compile("[^\\d]").split(version);
>         int[] ints = new int[Math.min(limit, strings.length)];
>         int j = 0;
>         for (int i = 0; i < strings.length && j < limit; i++) {
>             String s = strings[i];
>             if (s.length() > 0) {
>                 ints[j++] = Integer.parseInt(s);
>             }
>         }
>         return ints;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     private static float toVersionFloat(int[] javaVersions) {
>         if (javaVersions == null || javaVersions.length == 0) {
>             return 0f;
>         }
>         if (javaVersions.length == 1) {
>             return javaVersions[0];
>         }
>         StringBuilder builder = new StringBuilder();
>         builder.append(javaVersions[0]);
>         builder.append('.');
>         for (int i = 1; i < javaVersions.length; i++) {
>             builder.append(javaVersions[i]);
>         }
>         try {
>             return Float.parseFloat(builder.toString());
>         } catch (Exception ex) {
>             return 0f;
>         }
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     private static int toVersionInt(int[] javaVersions) {
>         if (javaVersions == null) {
>             return 0;
>         }
>         int intVersion = 0;
>         int len = javaVersions.length;
>         if (len >= 1) {
>             intVersion = javaVersions[0] * 100;
>         }
>         if (len >= 2) {
>             intVersion += javaVersions[1] * 10;
>         }
>         if (len >= 3) {
>             intVersion += javaVersions[2];
>         }
>         return intVersion;
>     }
> 
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public SystemUtils() {
>         super();
