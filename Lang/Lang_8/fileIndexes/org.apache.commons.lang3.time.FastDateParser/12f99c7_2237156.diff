22d21
< import java.text.DateFormatSymbols;
76,78d74
<     private static final ConcurrentMap<Locale,TimeZoneStrategy> tzsCache=
<         new ConcurrentHashMap<Locale,TimeZoneStrategy>(3);
< 
90d85
<     private transient ConcurrentMap<Integer, KeyValue[]> nameValues;
116,118c111,112
<         thisYear= Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);
< 
<         nameValues= new ConcurrentHashMap<Integer, KeyValue[]>();
---
>         Calendar definingCalendar = Calendar.getInstance(timeZone, locale);
> 		thisYear= definingCalendar.get(Calendar.YEAR);
130c124
<         Strategy currentStrategy= getStrategy(currentFormatField);
---
>         Strategy currentStrategy= getStrategy(currentFormatField, definingCalendar);
138c132
<             nextStrategy = getStrategy(nextFormatField);
---
>             nextStrategy = getStrategy(nextFormatField, definingCalendar);
373,430d366
<     KeyValue[] getDisplayNames(int field) {
<         Integer fieldInt = Integer.valueOf(field);
<         KeyValue[] fieldKeyValues= nameValues.get(fieldInt);
<         if(fieldKeyValues==null) {
<             DateFormatSymbols symbols= DateFormatSymbols.getInstance(locale);
<             switch(field) {
<             case Calendar.ERA:
<                 
<                 
<                 
<                 Calendar c = Calendar.getInstance(locale);
<                 
<                 
<                 String[] shortEras = toArray(c.getDisplayNames(Calendar.ERA, Calendar.SHORT, locale));
<                 String[] longEras = toArray(c.getDisplayNames(Calendar.ERA, Calendar.LONG, locale));
<                 if (Arrays.equals(shortEras, longEras)) {
<                     fieldKeyValues = createKeyValues(longEras, null); 
<                 } else {
<                     fieldKeyValues = createKeyValues(longEras, shortEras);                    
<                 }
<                 break;
<             case Calendar.DAY_OF_WEEK:
<                 fieldKeyValues= createKeyValues(symbols.getWeekdays(), symbols.getShortWeekdays());
<                 break;
<             case Calendar.AM_PM:
<                 fieldKeyValues= createKeyValues(symbols.getAmPmStrings(), null);
<                 break;
<             case Calendar.MONTH:
<                 fieldKeyValues= createKeyValues(symbols.getMonths(), symbols.getShortMonths());
<                 break;
<             default:
<                 throw new IllegalArgumentException("Invalid field value "+field);
<             }
<             KeyValue[] prior = nameValues.putIfAbsent(fieldInt, fieldKeyValues);
<             if(prior!=null) {
<                 fieldKeyValues= prior;
<             }
<         }
<         return fieldKeyValues;
<     }
< 
<     private String[] toArray(Map<String, Integer> era) {
<         String[] eras = new String[era.size()]; 
<         for(Map.Entry<String, Integer> me : era.entrySet()) {
<             int idx = me.getValue().intValue();
<             final String key = me.getKey();
<             if (key == null) {
<                 throw new IllegalArgumentException();
<             }
<             eras[idx] = key;
<         }
<         return eras;
<     }
< 
<     
< 
< 
< 
433,437c369,372
<     private static KeyValue[] createKeyValues(String[] longValues, String[] shortValues) {
<         KeyValue[] fieldKeyValues= new KeyValue[count(longValues)+count(shortValues)];
<         copy(fieldKeyValues, copy(fieldKeyValues, 0, longValues), shortValues);
<         Arrays.sort(fieldKeyValues, IGNORE_CASE_COMPARATOR);
<         return fieldKeyValues;
---
>     private static KeyValue[] getDisplayNames(int field, Calendar definingCalendar, Locale locale) {
> 		List<KeyValue> keyValues = new ArrayList<KeyValue>(24);
> 		addNamesToKeyValues(keyValues, definingCalendar.getDisplayNames(field, Calendar.ALL_STYLES, locale));
>         return createKeyValues(keyValues);
440,452c375,377
<     
< 
< 
< 
< 
<     private static int count(String[] values) {
<         int count= 0;
<         if(values!=null) {
<             for(String value : values) {
<                 if(value.length()>0) {
<                     ++count;
<                 }
<             }
---
> 	private static void addNamesToKeyValues(List<KeyValue> keyValues, Map<String, Integer> displayNames) {
>         for(Map.Entry<String, Integer> me : displayNames.entrySet()) {
>         	keyValues.add(new KeyValue(me.getKey(), me.getValue()));
454d378
<         return count;
457,473c381,384
<     
< 
< 
< 
< 
< 
< 
<     private static int copy(KeyValue[] fieldKeyValues, int offset, String[] values) {
<         if(values!=null) {
<             for(int i= 0; i<values.length; ++i) {
<                 String value= values[i];
<                 if(value.length()>0) {
<                     fieldKeyValues[offset++]= new KeyValue(value, i);
<                 }
<             }
<         }
<         return offset;
---
>     private static KeyValue[] createKeyValues(List<KeyValue> keyValues) {
>         KeyValue[] fieldKeyValues= keyValues.toArray(new KeyValue[keyValues.size()]);
>         Arrays.sort(fieldKeyValues, IGNORE_CASE_COMPARATOR);
>         return fieldKeyValues;
528a440
> 
543c455,456
<     private Strategy getStrategy(String formatField) {
---
> 
>     private Strategy getStrategy(String formatField, Calendar definingCalendar) {
555c468
<             return DAY_OF_WEEK_STRATEGY;
---
>             return getLocaleSpecificStrategy(Calendar.DAY_OF_WEEK, definingCalendar);
559c472
<             return ERA_STRATEGY;
---
>             return getLocaleSpecificStrategy(Calendar.ERA, definingCalendar);
565c478
<             return formatField.length()>=3 ?TEXT_MONTH_STRATEGY :NUMBER_MONTH_STRATEGY;
---
>             return formatField.length()>=3 ?getLocaleSpecificStrategy(Calendar.MONTH, definingCalendar) :NUMBER_MONTH_STRATEGY;
570,571d482
<         case 'Z':
<             break;
573c484
<             return AM_PM_STRATEGY;
---
>             return getLocaleSpecificStrategy(Calendar.AM_PM, definingCalendar);
587a499
>         case 'Z':
589c501
<             break;
---
>         	return getLocaleSpecificStrategy(Calendar.ZONE_OFFSET, definingCalendar);
591,594c503,536
<         TimeZoneStrategy tzs= tzsCache.get(locale);
<         if(tzs==null) {
<             tzs= new TimeZoneStrategy(locale);
<             TimeZoneStrategy inCache= tzsCache.putIfAbsent(locale, tzs);
---
>     }
> 
>     @SuppressWarnings("unchecked")
>     private static ConcurrentMap<Locale, Strategy>[] caches = new ConcurrentMap[Calendar.FIELD_COUNT];
> 
>     
> 
> 
> 
> 
>     private static ConcurrentMap<Locale, Strategy> getCache(int field) {
>     	synchronized(caches) {
>     		if(caches[field]==null) {
>     			caches[field]= new ConcurrentHashMap<Locale,Strategy>(3);
>     		}
>     		return caches[field];
>     	}
>     }
> 
>     
> 
> 
> 
> 
> 
> 
>     private Strategy getLocaleSpecificStrategy(int field, Calendar definingCalendar) {
>     	ConcurrentMap<Locale,Strategy> cache = getCache(field);
>     	Strategy strategy= cache.get(field);
>         if(strategy==null) {
>         	strategy= field==Calendar.ZONE_OFFSET
>         			? new TimeZoneStrategy(locale)
>         			: new TextStrategy(field, definingCalendar, locale);
>             Strategy inCache= cache.putIfAbsent(locale, strategy);
599c541
<         return tzs;
---
>         return strategy;
602c544
<     
---
> 	
645c587
<     
---
> 	
648c590
<     private static class TextStrategy implements Strategy {
---
>      private static class TextStrategy implements Strategy {
649a592
>         private final KeyValue[] keyValues;
655c598
<         TextStrategy(int field) {
---
>         TextStrategy(int field, Calendar definingCalendar, Locale locale) {
656a600
>             this.keyValues= getDisplayNames(field, definingCalendar, locale);
673c617
<             for(KeyValue textKeyValue : parser.getDisplayNames(field)) {
---
>             for(KeyValue textKeyValue : keyValues) {
685,686c629
<             KeyValue[] textKeyValues= parser.getDisplayNames(field);
<             int idx= Arrays.binarySearch(textKeyValues, new KeyValue(value, -1), IGNORE_CASE_COMPARATOR);
---
>             int idx= Arrays.binarySearch(keyValues, new KeyValue(value, -1), IGNORE_CASE_COMPARATOR);
690c633
<                 for(KeyValue textKeyValue : textKeyValues) {
---
>                 for(KeyValue textKeyValue : keyValues) {
696c639
<             cal.set(field, textKeyValues[idx].value);
---
>             cal.set(field, keyValues[idx].value);
699a643
> 
840,845d783
< 
< 
<     private static final Strategy ERA_STRATEGY = new TextStrategy(Calendar.ERA);
<     private static final Strategy DAY_OF_WEEK_STRATEGY = new TextStrategy(Calendar.DAY_OF_WEEK);
<     private static final Strategy AM_PM_STRATEGY = new TextStrategy(Calendar.AM_PM);
<     private static final Strategy TEXT_MONTH_STRATEGY = new TextStrategy(Calendar.MONTH);
