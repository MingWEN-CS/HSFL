66a67
> 
74a76,86
>     public NumberUtils() {
>     }
> 
>     
>     
>     
> 
> 
> 
> 
> 
128a141,142
>     
>     
315a330,331
>     
>     
385a402,426
>     
>     
> 
> 
> 
> 
> 
> 
> 
>     public static long minimum(long a, long b, long c) {
>         if (b < a) {
>             a = b;
>         }
>         if (c < a) {
>             a = c;
>         }
>         return a;
>     }
> 
>     
> 
> 
> 
> 
> 
400a442,464
> 
> 
> 
> 
> 
>     public static long maximum(long a, long b, long c) {
>         if (b > a) {
>             a = b;
>         }
>         if (c > a) {
>             a = c;
>         }
>         return a;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
410a475,590
>     
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static int compare(double lhs, double rhs) {
>         if (lhs < rhs) {
>             return -1;
>         }
>         if (lhs > rhs) {
>             return +1;
>         }
>         
>         
>         
>         
>         long lhsBits = Double.doubleToLongBits(lhs);
>         long rhsBits = Double.doubleToLongBits(rhs);
>         if (lhsBits == rhsBits) {
>             return 0;
>         }
>         
>         
>         
>         
>         
>         
>         if (lhsBits < rhsBits) {
>             return -1;
>         } else {
>             return +1;
>         }
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static int compare(float lhs, float rhs) {
>         if (lhs < rhs) {
>             return -1;
>         }
>         if (lhs > rhs) {
>             return +1;
>         }
>         
>         
>         
>         
>         int lhsBits = Float.floatToIntBits(lhs);
>         int rhsBits = Float.floatToIntBits(rhs);
>         if (lhsBits == rhsBits) {
>             return 0;
>         }
>         
>         
>         
>         
>         
>         
>         if (lhsBits < rhsBits) {
>             return -1;
>         } else {
>             return +1;
>         }
>     }
>     
>     
>     
