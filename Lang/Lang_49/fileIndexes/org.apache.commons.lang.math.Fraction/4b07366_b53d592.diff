18a19,20
> import java.math.BigInteger;
> 
139a142,145
>             if (numerator==Integer.MIN_VALUE ||
>                     denominator==Integer.MIN_VALUE) {
>                 throw new ArithmeticException("overflow: can't negate");
>             }
172c178
<         double numeratorValue = 0;
---
>         long numeratorValue;
174c180
<             numeratorValue = (double) whole * denominator - numerator;
---
>             numeratorValue = whole * (long)denominator - numerator;
176c182
<             numeratorValue = (double) whole * denominator + numerator;
---
>             numeratorValue = whole * (long)denominator + numerator;
178c184,185
<         if (Math.abs(numeratorValue) > Integer.MAX_VALUE) {
---
>         if (numeratorValue < Integer.MIN_VALUE ||
>                 numeratorValue > Integer.MAX_VALUE)  {
198a206,212
>         if (numerator==0) {
>             return ZERO; 
>         }
>         
>         if (denominator==Integer.MIN_VALUE && (numerator&1)==0) {
>             numerator/=2; denominator/=2;
>         }
199a214,217
>             if (numerator==Integer.MIN_VALUE ||
>                     denominator==Integer.MIN_VALUE) {
>                 throw new ArithmeticException("overflow: can't negate");
>             }
203,204c221,225
<         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);
<         return new Fraction(numerator / gcd, denominator / gcd);
---
>         
>         int gcd = greatestCommonDivisor(numerator, denominator);
>         numerator /= gcd;
>         denominator /= gcd;
>         return new Fraction(numerator, denominator);
309a331
>                 int numer = Integer.parseInt(str.substring(0, pos));
311,314c333
<                 return getFraction(
<                     Integer.parseInt(str.substring(0, pos)) + whole * denom,
<                     denom
<                 );
---
>                 return getFraction(whole, numer, denom);
324,327c343,345
<             return getFraction(
<                 Integer.parseInt(str.substring(0, pos)),
<                 Integer.parseInt(str.substring(pos + 1))
<             );
---
>             int numer = Integer.parseInt(str.substring(0, pos));
>             int denom = Integer.parseInt(str.substring(pos + 1));
>             return getFraction(numer, denom);
449a468
> 
452c471,479
<             throw new ArithmeticException("Unable to invert a fraction with a zero numerator");
---
>             throw new ArithmeticException("Unable to invert zero.");
>         }
>         if (numerator==Integer.MIN_VALUE) {
>             throw new ArithmeticException("overflow: can't negate numerator");
>         }
>         if (numerator<0) {
>             return new Fraction(-denominator, -numerator);
>         } else {
>             return new Fraction(denominator, numerator);
454d480
<         return getFraction(denominator, numerator);
465c491,495
<         return getFraction(-numerator, denominator);
---
>         
>         if (numerator==Integer.MIN_VALUE) {
>             throw new ArithmeticException("overflow: too large to negate");
>         }
>         return new Fraction(-numerator, denominator);
481c511
<         return getFraction(-numerator, denominator);
---
>         return negate();
501,505c531,533
<         } else {
<             double denominatorValue = Math.pow(denominator, power);
<             double numeratorValue = Math.pow(numerator, power);
<             if (numeratorValue > Integer.MAX_VALUE || denominatorValue > Integer.MAX_VALUE) {
<                 throw new ArithmeticException("Integer overflow");
---
>         } else if (power < 0) {
>             if (power==Integer.MIN_VALUE) { 
>                 return this.invert().pow(2).pow(-(power/2));
507,509c535,541
<             if (power < 0) {
<                 return getFraction((int) Math.pow(denominator, -power), 
<                     (int) Math.pow(numerator, -power));
---
>             return this.invert().pow(-power);
>         } else {
>             Fraction f = this.multiplyBy(this);
>             if ((power % 2) == 0) { 
>                 return f.pow(power/2);
>             } else { 
>                 return f.pow(power/2).multiplyBy(this);
511,512d542
<             return getFraction((int) Math.pow(numerator, power), 
<                 (int) Math.pow(denominator, power));
523,528c553,570
<     private static int greatestCommonDivisor(int number1, int number2) {
<         int remainder = number1 % number2;
<         while (remainder != 0) {
<             number1 = number2;
<             number2 = remainder;
<             remainder = number1 % number2;
---
> 
> 
> 
>     private static int greatestCommonDivisor(int u, int v) {
>         
>         
>         
>         
>         
>         if (u>0) { u=-u; } 
>         if (v>0) { v=-v; } 
>         
>         int k=0;
>         while ((u&1)==0 && (v&1)==0 && k<31) { 
>             u/=2; v/=2; k++; 
>         }
>         if (k==31) {
>             throw new ArithmeticException("overflow: gcd is 2^31");
530c572,594
<         return number2;
---
>         
>         
>         int t = ((u&1)==1) ? v : -(u/2);
>         
>         
>         do {
>             
>             
>             while ((t&1)==0) { 
>                 t/=2; 
>             }
>             
>             if (t>0) {
>                 u = -t;
>             } else {
>                 v = t;
>             }
>             
>             t = (v - u)/2;
>             
>             
>         } while (t!=0);
>         return -u*(1<<k); 
544a609,618
>     private static int mulAndCheck(int x, int y) {
>         long m = ((long)x)*((long)y);
>         if (m < Integer.MIN_VALUE ||
>             m > Integer.MAX_VALUE) {
>             throw new ArithmeticException("overflow: mul");
>         }
>         return (int)m;
>     }
>     
>     
546,548c620,631
<     public Fraction add(Fraction fraction) {
<         if (fraction == null) {
<             throw new IllegalArgumentException("The fraction must not be null");
---
> 
> 
> 
> 
> 
> 
> 
>     private static int mulPosAndCheck(int x, int y) {
>         
>         long m = ((long)x)*((long)y);
>         if (m > Integer.MAX_VALUE) {
>             throw new ArithmeticException("overflow: mulPos");
550,551c633,649
<         if (numerator == 0) {
<             return fraction;
---
>         return (int)m;
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     private static int addAndCheck(int x, int y) {
>         long s = (long)x+(long)y;
>         if (s < Integer.MIN_VALUE ||
>             s > Integer.MAX_VALUE) {
>             throw new ArithmeticException("overflow: add");
553,564c651,667
<         if (fraction.numerator == 0) {
<             return this;
<         }     
<         
<         int gcd = greatestCommonDivisor(Math.abs(fraction.denominator), Math.abs(denominator));
<         int thisResidue = denominator/gcd;
<         int thatResidue = fraction.denominator/gcd;
<         double denominatorValue = Math.abs((double) gcd * thisResidue * thatResidue);
<         double numeratorValue = (double) numerator * thatResidue + fraction.numerator * thisResidue;
<         if (Math.abs(numeratorValue) > Integer.MAX_VALUE || 
<             Math.abs(denominatorValue) > Integer.MAX_VALUE) {
<                 throw new ArithmeticException("Integer overflow");
---
>         return (int)s;
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     private static int subAndCheck(int x, int y) {
>         long s = (long)x-(long)y;
>         if (s < Integer.MIN_VALUE ||
>             s > Integer.MAX_VALUE) {
>             throw new ArithmeticException("overflow: add");
566c669,683
<         return Fraction.getReducedFraction((int) numeratorValue, (int) denominatorValue);
---
>         return (int)s;
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public Fraction add(Fraction fraction) {
>         return addSub(fraction, true );
579a697,710
>         return addSub(fraction, false );
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     private Fraction addSub(Fraction fraction, boolean isAdd) {
583c714,753
<         return add(fraction.negate());
---
>         
>         if (numerator == 0) {
>             return isAdd ? fraction : fraction.negate();
>         }
>         if (fraction.numerator == 0) {
>             return this;
>         }     
>         
>         
>         int d1 = greatestCommonDivisor(denominator, fraction.denominator);
>         if (d1==1) {
>             
>             int uvp = mulAndCheck(numerator, fraction.denominator);
>             int upv = mulAndCheck(fraction.numerator, denominator);
>             return new Fraction
>                 (isAdd ? addAndCheck(uvp, upv) : subAndCheck(uvp, upv),
>                  mulPosAndCheck(denominator, fraction.denominator));
>         }
>         
>         
>         
>         BigInteger uvp = BigInteger.valueOf(numerator)
>             .multiply(BigInteger.valueOf(fraction.denominator/d1));
>         BigInteger upv = BigInteger.valueOf(fraction.numerator)
>             .multiply(BigInteger.valueOf(denominator/d1));
>         BigInteger t = isAdd ? uvp.add(upv) : uvp.subtract(upv);
>         
>         
>         int tmodd1 = t.mod(BigInteger.valueOf(d1)).intValue();
>         int d2 = (tmodd1==0)?d1:greatestCommonDivisor(tmodd1, d1);
> 
>         
>         BigInteger w = t.divide(BigInteger.valueOf(d2));
>         if (w.bitLength() > 31) {
>             throw new ArithmeticException
>                 ("overflow: numerator too large after multiply");
>         }
>         return new Fraction
>             (w.intValue(),
>              mulPosAndCheck(denominator/d1, fraction.denominator/d2));
603,609c773,779
<         double numeratorValue = (double) numerator * fraction.numerator;
<         double denominatorValue = (double) denominator * fraction.denominator;
<         if (Math.abs(numeratorValue) > Integer.MAX_VALUE || 
<             Math.abs(denominatorValue) > Integer.MAX_VALUE) {
<                 throw new ArithmeticException("Integer overflow");
<         }
<         return getReducedFraction((int) numeratorValue, (int) denominatorValue);
---
>         
>         
>         int d1 = greatestCommonDivisor(numerator, fraction.denominator);
>         int d2 = greatestCommonDivisor(fraction.numerator, denominator);
>         return getReducedFraction
>             (mulAndCheck(numerator/d1, fraction.numerator/d2),
>              mulPosAndCheck(denominator/d2, fraction.denominator/d1));
622d791
< 
630,639c799
<         if (numerator == 0) {
<             return ZERO;
<         }  
<         double numeratorValue = (double) numerator * fraction.denominator;
<         double denominatorValue = (double) denominator * fraction.numerator;
<         if (Math.abs(numeratorValue) > Integer.MAX_VALUE || 
<             Math.abs(denominatorValue) > Integer.MAX_VALUE) {
<                 throw new ArithmeticException("Integer overflow");
<         }
<         return getReducedFraction((int) numeratorValue, (int) denominatorValue);
---
>         return multiplyBy(fraction.invert());
661,662c821,822
<         return (numerator == other.numerator &&
<                 denominator == other.denominator);
---
>         return (getNumerator() == other.getNumerator() &&
>                 getDenominator() == other.getDenominator());
672,674c832,833
<             hashCode = 17;
<             hashCode = 37 * hashCode + numerator;
<             hashCode = 37 * hashCode + denominator;
---
>             
>             hashCode = 37 * (37 * 17 + getNumerator()) + getDenominator();
688a848,850
>         if (this==other) {
>             return 0;
>         }
715c877
<                 .append(numerator)
---
>                 .append(getNumerator())
717c879
<                 .append(denominator).toString();
---
>                 .append(getDenominator()).toString();
737c899,903
<             } else if (Math.abs(numerator) > denominator) {
---
>             } else if ((numerator>0?-numerator:numerator) < -denominator) {
>                 
>                 
>                 
>                 
745c911
<                         .append(denominator).toString();
---
>                         .append(getDenominator()).toString();
749,750c915,916
<                     .append(numerator).append('/')
<                     .append(denominator).toString();
---
>                     .append(getNumerator()).append('/')
>                     .append(getDenominator()).toString();
755d920
< 
