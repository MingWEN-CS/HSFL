0a1
> package org.apache.commons.lang;
1a3,1607
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> import java.io.ByteArrayInputStream;
> import java.io.ByteArrayOutputStream;
> import java.io.InputStreamReader;
> import java.io.OutputStreamWriter;
> import java.io.OutputStream;
> import java.io.PrintWriter;
> import java.io.IOException;
> import java.util.NoSuchElementException;
> import java.util.StringTokenizer;
> 
> import java.util.Iterator;
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> public class StringUtils {
> 
>     
> 
> 
>     public static int CHAR_BUFFER_SIZE = 4 * 1024;
>     
>     
> 
> 
>     private StringUtils() {
>     }
> 
>     
>     
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     public static String clean(String str) {
>         return (str == null ? "" : str.trim());
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     public static String trim(String str) {
>         return (str == null ? null : str.trim());
>     }
> 
>     
> 
> 
> 
> 
> 
>     public static boolean isNotEmpty(String str) {
>         return (str != null && str.length() > 0);
>     }
> 
>     
> 
> 
> 
> 
> 
>     public static boolean isEmpty(String str) {
>         return (str == null || str.trim().length() == 0);
>     }
> 
>     
>     
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public static boolean equals(String str1, String str2) {
>         return (str1 == null ? str2 == null : str1.equals(str2));
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public static boolean equalsIgnoreCase(String str1, String str2) {
>         return (str1 == null ? str2 == null : str1.equalsIgnoreCase(str2));
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     public static int indexOfAny(String str, String[] searchStrs) {
>         if ((str == null) || (searchStrs == null)) {
>             return -1;
>         }
>         int sz = searchStrs.length;
> 
>         
>         int ret = Integer.MAX_VALUE;
> 
>         int tmp = 0;
>         for (int i = 0; i < sz; i++) {
>             tmp = str.indexOf(searchStrs[i]);
>             if (tmp == -1) {
>                 continue;
>             }
> 
>             if (tmp < ret) {
>                 ret = tmp;
>             }
>         }
> 
>         return (ret == Integer.MAX_VALUE) ? -1 : ret;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     public static int lastIndexOfAny(String str, String[] searchStrs) {
>         if ((str == null) || (searchStrs == null)) {
>             return -1;
>         }
>         int sz = searchStrs.length;
>         int ret = -1;
>         int tmp = 0;
>         for (int i = 0; i < sz; i++) {
>             tmp = str.lastIndexOf(searchStrs[i]);
>             if (tmp > ret) {
>                 ret = tmp;
>             }
>         }
>         return ret;
>     }
> 
>     
>     
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static String substring(String str, int start) {
>         if (str == null) {
>             return null;
>         }
> 
>         
>         if (start < 0) {
>             start = str.length() + start; 
>         }
> 
>         if (start < 0) {
>             start = 0;
>         }
>         if (start > str.length()) {
>             return "";
>         }
> 
>         return str.substring(start);
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static String substring(String str, int start, int end) {
>         if (str == null) {
>             return null;
>         }
> 
>         
>         if (end < 0) {
>             end = str.length() + end; 
>         }
>         if (start < 0) {
>             start = str.length() + start; 
>         }
> 
>         
>         if (end > str.length()) {
>             
>             end = str.length();
>         }
> 
>         
>         if (start > end) {
>             return "";
>         }
> 
>         if (start < 0) {
>             start = 0;
>         }
>         if (end < 0) {
>             end = 0;
>         }
> 
>         return str.substring(start, end);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static String left(String str, int len) {
>         if (len < 0) {
>             throw new IllegalArgumentException("Requested String length " + len + " is less than zero");
>         }
>         if ((str == null) || (str.length() <= len)) {
>             return str;
>         } else {
>             return str.substring(0, len);
>         }
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static String right(String str, int len) {
>         if (len < 0) {
>             throw new IllegalArgumentException("Requested String length " + len + " is less than zero");
>         }
>         if ((str == null) || (str.length() <= len)) {
>             return str;
>         } else {
>             return str.substring(str.length() - len);
>         }
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static String mid(String str, int pos, int len) {
>         if ((pos < 0) ||
>             (str != null && pos > str.length())) {
>             throw new StringIndexOutOfBoundsException("String index " + pos + " is out of bounds");
>         }
>         if (len < 0) {
>             throw new IllegalArgumentException("Requested String length " + len + " is less than zero");
>         }
>         if (str == null) {
>             return null;
>         }
>         if (str.length() <= (pos + len)) {
>             return str.substring(pos);
>         } else {
>             return str.substring(pos, pos + len);
>         }
>     }
> 
>     
>     
>     
>     
> 
> 
> 
> 
> 
> 
>     public static String[] split(String text) {
>         return split(text, null, -1);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static String[] split(String text, String separator) {
>         return split(text, separator, -1);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static String[] split(String text, String separator, int max) {
>         StringTokenizer tok = null;
>         if (separator == null) {
>             
>             
>             tok = new StringTokenizer(text);
>         } else {
>             tok = new StringTokenizer(text, separator);
>         }
> 
>         int listSize = tok.countTokens();
>         if (max > 0 && listSize > max) {
>             listSize = max;
>         }
> 
>         String[] list = new String[listSize];
>         int i = 0;
>         while (tok.hasMoreTokens()) {
>             if (max > 0 && i == listSize - 1) {
>                 
>                 
>                 
>                 StringBuffer buf = new StringBuffer((int) 1.2 * text.length() * (listSize - i) / listSize);
>                 while (tok.hasMoreTokens()) {
>                     buf.append(tok.nextToken());
>                     if (tok.hasMoreTokens()) {
>                         buf.append(separator);
>                     }
>                 }
>                 list[i] = buf.toString();
>                 break;
>             } else {
>                 list[i] = tok.nextToken();
>             }
>             i++;
>         }
>         return list;
>     }
> 
>     
>     
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static String join(Object[] array, String separator) {
>         if (separator == null) {
>             separator = "";
>         }
>         int arraySize = array.length;
>         int bufSize = (arraySize == 0 ? 0 : (array[0].toString().length() +
>                                  separator.length()) * arraySize);
>         StringBuffer buf = new StringBuffer(bufSize);
> 
>         for (int i = 0; i < arraySize; i++) {
>             if (i > 0) {
>                 buf.append(separator);
>             }
>             buf.append(array[i]);
>         }
>         return buf.toString();
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static String join(Iterator iterator, String separator) {
>         if (separator == null) {
>             separator = "";
>         }
>         StringBuffer buf = new StringBuffer(256);  
>         while (iterator.hasNext()) {
>             buf.append(iterator.next());
>             if (iterator.hasNext()) {
>                 buf.append(separator);
>             }
>         }
>         return buf.toString();
>     }
> 
> 
> 
>     
>     
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public static String replaceOnce(String text, String repl, String with) {
>         return replace(text, repl, with, 1);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public static String replace(String text, String repl, String with) {
>         return replace(text, repl, with, -1);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static String replace(String text, String repl, String with,
>                                  int max) {
>         if (text == null) {
>             return null;
>         }
> 
>         StringBuffer buf = new StringBuffer(text.length());
>         int start = 0, end = 0;
>         while ( (end = text.indexOf(repl, start)) != -1 ) {
>             buf.append(text.substring(start, end)).append(with);
>             start = end + repl.length();
> 
>             if (--max == 0) {
>                 break;
>             }
>         }
>         buf.append(text.substring(start));
>         return buf.toString();
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public static String overlayString(String text, String overlay, int start, int end) {
>         return new StringBuffer(start + overlay.length() + text.length() - end + 1)
> 			.append(text.substring(0, start))
> 			.append(overlay)
> 			.append(text.substring(end))
> 			.toString();
>     }
> 
>     
>     
>     
>     
> 
> 
> 
> 
> 
> 
> 
>     public static String center(String str, int size) {
>         return center(str, size, " ");
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public static String center(String str, int size, String delim) {
>         int sz = str.length();
>         int p = size - sz;
>         if (p < 1) {
>             return str;
>         }
>         str = leftPad(str, sz + p / 2, delim);
>         str = rightPad(str, size, delim);
>         return str;
>     }
> 
>     
>     
>     
>     
> 
> 
> 
> 
> 
>     public static String chomp(String str) {
>         return chomp(str, "\n");
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
>     public static String chomp(String str, String sep) {
>         int idx = str.lastIndexOf(sep);
>         if (idx != -1) {
>             return str.substring(0,idx);
>         } else {
>             return str;
>         }
>     }
>     
>     
> 
> 
> 
> 
> 
> 
>     public static String chompLast(String str) {
>         return chompLast(str, "\n");
>     }
>     
>     
> 
> 
> 
> 
> 
> 
>     public static String chompLast(String str, String sep) {
>         if (str.length() == 0) {
>             return str;
>         }
>         String sub = str.substring(str.length() - sep.length());
>         if (sep.equals(sub)) {
>             return str.substring(0, str.length() - sep.length());
>         } else {
>             return str;
>         }
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     public static String getChomp(String str, String sep) {
>         int idx = str.lastIndexOf(sep);
>         if (idx == str.length() - sep.length()) {
>             return sep;
>         } else if (idx != -1) {
>             return str.substring(idx);
>         } else {
>             return "";
>         }
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     public static String prechomp(String str, String sep) {
>         int idx = str.indexOf(sep);
>         if (idx != -1) {
>             return str.substring(idx + sep.length());
>         } else {
>             return str;
>         }
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     public static String getPrechomp(String str, String sep) {
>         int idx = str.indexOf(sep);
>         if (idx != -1) {
>             return str.substring(0, idx + sep.length());
>         } else {
>             return "";
>         }
>     }
> 
>     
>     
>     
>     
> 
> 
> 
> 
> 
> 
>     public static String chop(String str) {
>         if ("".equals(str)) {
>             return "";
>         }
>         if (str.length() == 1) {
>             return "";
>         }
>         int lastIdx = str.length() - 1;
>         String ret = str.substring(0, lastIdx);
>         char last = str.charAt(lastIdx);
>         if (last == '\n') {
>             if (ret.charAt(lastIdx - 1) == '\r') {
>                 return ret.substring(0, lastIdx - 1);
>             }
>         }
>         return ret;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     public static String chopNewline(String str) {
>         int lastIdx = str.length()-1;
>         char last = str.charAt(lastIdx);
>         if(last == '\n') {
>             if(str.charAt(lastIdx-1) == '\r') {
>                 lastIdx --;
>             }
>         } else {
>             lastIdx++;
>         }
>         return str.substring(0,lastIdx);
>     }
> 
> 
>     
>     
>     
>     
>     
> 
> 
> 
> 
> 
> 
> 
>     
>     
>     public static String escape(String str) {
>         int sz = str.length();
>         StringBuffer buffer = new StringBuffer(2*sz);
>         for(int i=0; i<sz; i++) {
>             char ch = str.charAt(i);
> 
>             
>             if(ch > 0xfff) {
>                 buffer.append("\\u"+Integer.toHexString(ch));
>             } else 
>             if(ch > 0xff) {
>                 buffer.append("\\u0"+Integer.toHexString(ch));
>             } else 
>             if(ch > 0x7f) {
>                 buffer.append("\\u00"+Integer.toHexString(ch));
>             } else 
>             if(ch < 32) {
>                 switch(ch) {
>                     case '\b' : 
>                         buffer.append('\\');
>                         buffer.append('b');
>                         break;
>                     case '\n' : 
>                         buffer.append('\\');
>                         buffer.append('n');
>                         break;
>                     case '\t' : 
>                         buffer.append('\\');
>                         buffer.append('t');
>                         break;
>                     case '\f' : 
>                         buffer.append('\\');
>                         buffer.append('f');
>                         break;
>                     case '\r' : 
>                         buffer.append('\\');
>                         buffer.append('r');
>                         break;
>                     default :
>                         if( ch > 0xf ) {
>                             buffer.append("\\u00"+Integer.toHexString(ch));
>                         } else {
>                             buffer.append("\\u000"+Integer.toHexString(ch));
>                         }
>                         break;
>                 }
>             } else {
>                 switch(ch) {
>                     case '\'' : 
>                         buffer.append('\\');
>                         buffer.append('\'');
>                         break;
>                     case '"' : 
>                         buffer.append('\\');
>                         buffer.append('"');
>                         break;
>                     case '\\' : 
>                         buffer.append('\\');
>                         buffer.append('\\');
>                         break;
>                     default :
>                         buffer.append(ch);
>                         break;
>                 }
>             }
>         }
>         return buffer.toString();
>     }
> 
>     
>     
>     
>     
> 
> 
> 
> 
> 
> 
>     public static String repeat(String str, int repeat) {
>         StringBuffer buffer = new StringBuffer(repeat * str.length());
>         for (int i = 0; i < repeat; i++) {
>             buffer.append(str);
>         }
>         return buffer.toString();
>     }
> 
>     
> 
> 
> 
> 
> 
> 
>     public static String rightPad(String str, int size) {
>         return rightPad(str, size, " ");
>     }
>     
>     
> 
> 
> 
> 
> 
> 
>     public static String rightPad(String str, int size, String delim) {
>         size = (size - str.length()) / delim.length();
>         if (size > 0) {
>             str += repeat(delim, size);
>         }
>         return str;
>     }
> 
>     
> 
> 
> 
> 
> 
>     public static String leftPad(String str, int size) {
>         return leftPad(str, size, " ");
>     }
>     
> 
> 
> 
> 
> 
> 
>     public static String leftPad(String str, int size, String delim) {
>         size = (size - str.length()) / delim.length();
>         if (size > 0) {
>             str = repeat(delim, size) + str;
>         }
>         return str;
>     }
> 
>     
>     
>     
>     
> 
> 
> 
> 
> 
>     public static String strip(String str) {
>         return strip(str, null);
>     }
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public static String strip(String str, String delim) {
>         str = stripStart(str, delim);
>         return stripEnd(str, delim);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
>     public static String[] stripAll(String[] strs) {
>         return stripAll(strs, null);
>     }
>  
>     
> 
> 
> 
> 
> 
> 
> 
>     public static String[] stripAll(String[] strs, String delimiter) {
>         if ((strs == null) || (strs.length == 0)) {
>             return strs;
>         }
>         int sz = strs.length;
>         String[] newArr = new String[sz];
>         for (int i = 0; i < sz; i++) {
>             newArr[i] = strip(strs[i], delimiter);
>         }
>         return newArr;
>     }   
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     public static String stripEnd(String str, String strip) {
>         if (str == null) {
>             return null;
>         }
>         int end = str.length();
>  
>         if (strip == null) {
>             while ((end != 0) && Character.isWhitespace(str.charAt(end - 1))) {
>                 end--;
>             }
>         } else {
>             char chr = strip.charAt(0);
>             while ((end != 0) && (str.charAt(end - 1) == chr)) {
>                 end--;
>             }
>         }
>         return str.substring(0, end);
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     public static String stripStart(String str, String strip) {
>         if (str == null) {
>             return null;
>         }
>  
>         int start = 0;
>  
>         int sz = str.length();
>  
>         if (strip == null) {
>             while ((start != sz) && Character.isWhitespace(str.charAt(start))) {
>                 start++;
>             }
>         } else {
>             char chr = strip.charAt(0);
>             while ((start != sz) && (str.charAt(start) == chr)) {
>                 start++;
>             }
>         }
>         return str.substring(start);
>     }
> 
>     
>     
>     
>     
> 
> 
> 
> 
> 
>     public static String upperCase(String str) {
>         if (str == null) {
>             return null;
>         }
>         return str.toUpperCase();
>     }
> 
>     
> 
> 
> 
> 
> 
>     public static String lowerCase(String str) {
>         if (str == null) {
>             return null;
>         }
>         return str.toLowerCase();
>     }
> 
>     
> 
> 
> 
> 
> 
> 
>     public static String uncapitalise(String str) {
>         if (str == null) {
>             return null;
>         }
>         if (str.length() == 0) {
>             return "";
>         }
>         return new StringBuffer(str.length())
>             .append(Character.toLowerCase(str.charAt(0)))
>             .append(str.substring(1))
>             .toString();
>     }
> 
>     
> 
> 
> 
> 
> 
> 
>     public static String capitalise(String str) {
>         if (str == null) {
>             return null;
>         }
>         if (str.length() == 0) {
>             return "";
>         }
>         return new StringBuffer(str.length())
>             .append(Character.toTitleCase(str.charAt(0)))
>             .append(str.substring(1))
>             .toString();
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     public static String swapCase(String str) {
>         if (str == null) {
>             return null;
>         }
>         int sz = str.length();
>         StringBuffer buffer = new StringBuffer(sz);
> 
>         boolean whitespace = false;
>         char ch = 0;
>         char tmp = 0;
> 
>         for(int i=0; i<sz; i++) {
>             ch = str.charAt(i);
>             if(Character.isUpperCase(ch)) {
>                 tmp = Character.toLowerCase(ch);
>             } else
>             if(Character.isTitleCase(ch)) {
>                 tmp = Character.toLowerCase(ch);
>             } else
>             if(Character.isLowerCase(ch)) {
>                 if(whitespace) {
>                     tmp = Character.toTitleCase(ch);
>                 } else {
>                     tmp = Character.toUpperCase(ch);
>                 }
>             } else {
>                 tmp = ch;
>             }
>             buffer.append(tmp);
>             whitespace = Character.isWhitespace(ch);
>         }
>         return buffer.toString();
>     }
> 
> 
>     
> 
> 
> 
> 
> 
> 
>     public static String capitaliseAllWords(String str) {
>         if (str == null) {
>             return null;
>         }
>         int sz = str.length();
>         StringBuffer buffer = new StringBuffer(sz);
>         boolean space = true;
>         for(int i=0; i<sz; i++) {
>             char ch = str.charAt(i);
>             if(Character.isWhitespace(ch)) {
>                 buffer.append(ch);
>                 space = true;
>             } else
>             if(space) {
>                 buffer.append(Character.toTitleCase(ch));
>                 space = false;
>             } else {
>                 buffer.append(ch);
>             }
>         }
>         return buffer.toString();
>     }
> 
>     
>     
>     
>     
> 
> 
> 
> 
> 
> 
> 
>     public static String getNestedString(String str, String tag) {
>         return getNestedString(str, tag, tag);
>     }
>     
>     
> 
> 
> 
> 
> 
> 
> 
>     public static String getNestedString(String str, String open, String close) {
>         if (str == null) {
>             return null;
>         }
>         int start = str.indexOf(open);
>         if (start != -1) {
>             int end = str.indexOf(close, start + open.length());
>             if (end != -1) {
>                 return str.substring(start + open.length(), end);
>             }
>         }
>         return null;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
>     public static int countMatches(String str, String sub) {
>         if (str == null) {
>             return 0;
>         }
>         int count = 0;
>         int idx = 0;
>         while ((idx = str.indexOf(sub, idx)) != -1) {
>             count++;
>             idx += sub.length();
>         }
>         return count;
>     }
> 
>     
>     
>     
>     
> 
> 
> 
> 
> 
> 
>     public static boolean isAlpha(String str) {
>         if (str == null) {
>             return false;
>         }
>         int sz = str.length();
>         for (int i = 0; i < sz; i++) {
>             if (Character.isLetter(str.charAt(i)) == false) {
>                 return false;
>             }
>         }
>         return true;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
>     public static boolean isAlphaSpace(String str) {
>         if (str == null) {
>             return false;
>         }
>         int sz = str.length();
>         for (int i = 0; i < sz; i++) {
>             if ((Character.isLetter(str.charAt(i)) == false) &&
>                 (str.charAt(i) != ' ')) {
>                 return false;
>             }
>         }
>         return true;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
>     public static boolean isAlphanumeric(String str) {
>         if (str == null) {
>             return false;
>         }
>         int sz = str.length();
>         for (int i = 0; i < sz; i++) {
>             if (Character.isLetterOrDigit(str.charAt(i)) == false) {
>                 return false;
>             }
>         }
>         return true;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
>     public static boolean isAlphanumericSpace(String str) {
>         if (str == null) {
>             return false;
>         }
>         int sz = str.length();
>         for (int i = 0; i < sz; i++) {
>             if ((Character.isLetterOrDigit(str.charAt(i)) == false) &&
>                 (str.charAt(i) != ' ')) {
>                 return false;
>             }
>         }
>         return true;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
>     public static boolean isNumeric(String str) {
>         if (str == null) {
>             return false;
>         }
>         int sz = str.length();
>         for (int i = 0; i < sz; i++) {
>             if (Character.isDigit(str.charAt(i)) == false) {
>                 return false;
>             }
>         }
>         return true;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
>     public static boolean isNumericSpace(String str) {
>         if (str == null) {
>             return false;
>         }
>         int sz = str.length();
>         for (int i = 0; i < sz; i++) {
>             if ((Character.isDigit(str.charAt(i)) == false) &&
>                 (str.charAt(i) != ' ')) {
>                 return false;
>             }
>         }
>         return true;
>     }
> 
>     
>     
>     
>     
> 
> 
> 
> 
> 
> 
>     public static String defaultString(String str) {
>         return defaultString(str, "");
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     public static String defaultString(String str, String defaultString) {
>         return (str == null) ? defaultString : str;
>     }
> 
>     
>     
> 
>     
> 
> 
> 
> 
> 
>     public static String reverse(String str) {
>         if (str == null) {
>             return null;
>         }
>         return new StringBuffer(str).reverse().toString();
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public static String reverseDelimitedString(String str, String delimiter) {
>         
>         
>         String[] strs = split(str, delimiter);
>         reverseArray(strs);
>         return join(strs, delimiter);
>     }
> 
>     
> 
> 
> 
>     private static void reverseArray(Object[] array) {
>         int i = 0;
>         int j = array.length - 1;
>         Object tmp;
> 
>         while (j > i) {
>             tmp = array[j];
>             array[j] = array[i];
>             array[i] = tmp;
>             j--;
>             i++;
>         }
>     }
> 
> 
>     
>     
>     
>     
> 
> 
> 
> 
> 
> 
> 
> 
>     public static String stackTrace(Throwable throwable) {
>         String trace = null;
>         try {
>             
>             ByteArrayOutputStream buf = new ByteArrayOutputStream();
>             throwable.printStackTrace( new PrintWriter(buf, true) );
>             trace = buf.toString();
>             
>         } catch (Exception ex) {
>             
>         }
>         return trace;
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
>     public static int getLevenshteinDistance(String s, String t) {
>         int d[][]; 
>         int n; 
>         int m; 
>         int i; 
>         int j; 
>         char s_i; 
>         char t_j; 
>         int cost; 
> 
>         
>         n = s.length ();
>         m = t.length ();
>         if (n == 0) {
>             return m;
>         }
>         if (m == 0) {
>             return n;
>         }
>         d = new int[n+1][m+1];
> 
>         
>         for (i = 0; i <= n; i++) {
>             d[i][0] = i;
>         }
> 
>         for (j = 0; j <= m; j++) {
>             d[0][j] = j;
>         }
> 
>         
>         for (i = 1; i <= n; i++) {
>             s_i = s.charAt (i - 1);
> 
>             
>             for (j = 1; j <= m; j++) {
>                 t_j = t.charAt (j - 1);
> 
>                 
>                 if (s_i == t_j) {
>                     cost = 0;
>                 } else {
>                     cost = 1;
>                 }
> 
>                 
>                 d[i][j] = NumberUtils.minimum(d[i-1][j]+1, d[i][j-1]+1, d[i-1][j-1] + cost);
>             }
>         }
> 
>         
>         return d[n][m];
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static String convertUnicodeToNative(String source, String charset)
>             throws IOException {
>         ByteArrayOutputStream baos = new ByteArrayOutputStream();
>         OutputStreamWriter out = new OutputStreamWriter(baos, charset);
>         out.write(source);
>         out.close();
>         return baos.toString();
>     }
> 
>     
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
>     public static String convertNativeToUnicode(String input, String charset)
>             throws IOException {
>         InputStreamReader in = new InputStreamReader
>             (new ByteArrayInputStream(input.getBytes()), charset);
>         StringBuffer output = new StringBuffer();
>         char[] buf = new char[CHAR_BUFFER_SIZE];
>         int count = 0;
>         while ((count = in.read(buf, 0, CHAR_BUFFER_SIZE)) > 0)
>         {
>             output.append(buf, 0, count);
>         }
>         in.close();
>         return output.toString();
>     }
>     
> 
> 
> 
> 
> 
> 
> }
